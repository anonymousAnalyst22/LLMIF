###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               22/Nov/2023  15:42:40
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\fuzzing-coordinator-response-collection\Components\stack\af\AF.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW98A5.tmp
#        (D:\fuzzing-coordinator-response-collection\Components\stack\af\AF.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
#        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
#        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
#        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
#        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\AF.lst
#    Object file        =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\AF.r51
#
###############################################################################

D:\fuzzing-coordinator-response-collection\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2014-11-04 10:53:36 -0800 (Tue, 04 Nov 2014) $
      4            Revision:       $Revision: 40974 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #include "hal_uart.h"
     54          
     55          #include <stdio.h>
     56          
     57          #if defined ( MT_AF_CB_FUNC )
     58            #include "MT_AF.h"
     59          #endif
     60          
     61          #if defined ( INTER_PAN )
     62            #include "stub_aps.h"
     63          #endif
     64          
     65          #include "bdb.h" 
     66          #if (BDB_TOUCHLINK_CAPABILITY_ENABLED==1)
     67            #include "bdb_tlCommissioning.h"
     68          #endif
     69          
     70          /*********************************************************************
     71           * MACROS
     72           */
     73          
     74          /*********************************************************************
     75           * @fn      afSend
     76           *
     77           * @brief   Helper macro for V1 API to invoke V2 API.
     78           *
     79           * input parameters
     80           *
     81           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     82           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     83           * @param   cID - A valid cluster ID as specified by the Profile.
     84           * @param   len - Number of bytes of data pointed to by next param.
     85           * @param  *buf - A pointer to the data bytes to send.
     86           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     87           * @param  *transID - A pointer to a byte which can be modified and which will
     88           *                    be used as the transaction sequence number of the msg.
     89           *
     90           * output parameters
     91           *
     92           * @param  *transID - Incremented by one if the return value is success.
     93           *
     94           * @return  afStatus_t - See previous definition of afStatus_... types.
     95           */
     96          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     97                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     98                                    (cID), (len), (buf), (transID), (options), (radius) )
     99          
    100          /*********************************************************************
    101           * GLOBAL VARIABLES
    102           */
    103          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /*********************************************************************
    107           * LOCAL FUNCTIONS
    108           */
    109          
    110          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    111                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    112                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
    113          
    114          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    115          
    116          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    117          
    118          /*********************************************************************
    119           * PUBLIC FUNCTIONS
    120           */
    121          
    122          /*********************************************************************
    123           * @fn      afInit
    124           *
    125           * @brief   Initialization function for the AF.
    126           *
    127           * @param   none
    128           *
    129           * @return  none
    130          void afInit( void )
    131          {
    132          }
    133           */
    134          
    135          /*********************************************************************
    136           * @fn      afRegisterExtended
    137           *
    138           * @brief   Register an Application's EndPoint description.
    139           *
    140           * @param   epDesc - pointer to the Application's endpoint descriptor.
    141           * @param   descFn - pointer to descriptor callback function
    142           * @param   applFn - pointer to the Application callback function
    143           *
    144           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    145           *
    146           * @return  Pointer to epList_t on success, NULL otherwise.
    147           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    148          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
   \                     afRegisterExtended:
    149          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
    150            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0B         MOV       R2,#0xb
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V0,R2
   \   000016   8B..         MOV       ?V1,R3
   \   000018   AE..         MOV       R6,?V0
   \   00001A   AF..         MOV       R7,?V1
    151          
    152            if (ep != NULL)
   \   00001C   EE           MOV       A,R6
   \   00001D   4F           ORL       A,R7
   \   00001E   606F         JZ        ??afRegisterExtended_0
    153            {
    154              ep->nextDesc = epList;
   \   000020   90....       MOV       DPTR,#epList
   \   000023   12....       LCALL     ?Subroutine15 & 0xFFFF
    155              epList = ep;
   \                     ??CrossCallReturnLabel_18:
   \   000026   90....       MOV       DPTR,#epList
   \   000029   EE           MOV       A,R6
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   EF           MOV       A,R7
   \   00002D   F0           MOVX      @DPTR,A
    156              ep->epDesc = epDesc;
   \   00002E   EE           MOV       A,R6
   \   00002F   2402         ADD       A,#0x2
   \   000031   F5..         MOV       ?V0,A
   \   000033   E4           CLR       A
   \   000034   3F           ADDC      A,R7
   \   000035   F5..         MOV       ?V1,A
   \   000037   85..82       MOV       DPL,?V0
   \   00003A   F583         MOV       DPH,A
   \   00003C   E5..         MOV       A,?V4
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   A3           INC       DPTR
   \   000040   E5..         MOV       A,?V5
   \   000042   12....       LCALL     ?Subroutine31 & 0xFFFF
    157              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_54:
   \   000045   E5..         MOV       A,?V2
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   E5..         MOV       A,?V3
   \   00004B   12....       LCALL     ?Subroutine31 & 0xFFFF
    158              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \                     ??CrossCallReturnLabel_55:
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   7432         MOV       A,#0x32
   \   000052   12....       LCALL     ?Subroutine30 & 0xFFFF
    159              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \                     ??CrossCallReturnLabel_52:
   \   000055   7401         MOV       A,#0x1
   \   000057   12....       LCALL     ?Subroutine30 & 0xFFFF
    160              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \                     ??CrossCallReturnLabel_53:
   \   00005A   A3           INC       DPTR
   \   00005B   F0           MOVX      @DPTR,A
    161              ep->pfnApplCB = applFn;
   \   00005C   740E         MOV       A,#0xe
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   12....       LCALL     ??Subroutine55_0 & 0xFFFF
    162              
    163            #if (BDB_FINDING_BINDING_CAPABILITY_ENABLED==1) 
    164              //Make sure we add at least one application endpoint
    165              if ((epDesc->endPoint != 0)  || (epDesc->endPoint < BDB_ZIGBEE_RESERVED_ENDPOINTS_START))
    166              {
    167                bdb_HeadEpDescriptorList = epList;
   \                     ??CrossCallReturnLabel_102:
   \   00006C   90....       MOV       DPTR,#epList
   \   00006F   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000072   90....       MOV       DPTR,#bdb_HeadEpDescriptorList
   \   000075   12....       LCALL     ??Subroutine55_0 & 0xFFFF
    168                ep->epDesc->epType = bdb_zclFindingBindingEpType(ep->epDesc);
   \                     ??CrossCallReturnLabel_103:
   \   000078                ; Setup parameters for call to function bdb_zclFindingBindingEpType
   \   000078   85..82       MOV       DPL,?V0
   \   00007B   85..83       MOV       DPH,?V1
   \   00007E   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    169              }
    170          
    171            #endif
    172          #if defined ( BDB_TL_INITIATOR ) || defined ( BDB_TL_TARGET )
    173              // find the first empty entry in the device info table
    174              for ( uint8 i = 0; i < 5; i++ )
    175              {
    176                if ( touchLinkSubDevicesTbl[i] == NULL )
    177                {
    178                  touchLinkSubDevicesTbl[i] = osal_mem_alloc(sizeof(bdbTLDeviceInfo_t));
    179                  if ( touchLinkSubDevicesTbl[i] != NULL )
    180                  {
    181                    touchLinkSubDevicesTbl[i]->deviceID = epDesc->simpleDesc->AppDeviceId;
    182                    touchLinkSubDevicesTbl[i]->endpoint = epDesc->simpleDesc->EndPoint;
    183                    touchLinkSubDevicesTbl[i]->profileID = epDesc->simpleDesc->AppProfId;
    184                    touchLinkSubDevicesTbl[i]->version = epDesc->simpleDesc->AppDevVer;
    185                    break;
    186                  }
    187                }
    188              }
    189          #endif  // BDB_TL_INITIATOR || BDB_TL_TARGET
    190            }
   \                     ??CrossCallReturnLabel_138:
   \   000081   12....       LCALL     `??bdb_zclFindingBindingEpType::?relay`; Banked call to: bdb_zclFindingBindingEpType
   \   000084   85..82       MOV       DPL,?V0
   \   000087   85..83       MOV       DPH,?V1
   \   00008A   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00008D   E9           MOV       A,R1
   \   00008E   F0           MOVX      @DPTR,A
    191           
    192            return ep;
   \                     ??afRegisterExtended_0:
   \   00008F   EE           MOV       A,R6
   \   000090   FA           MOV       R2,A
   \   000091   EF           MOV       A,R7
   \   000092   FB           MOV       R3,A
   \   000093                REQUIRE ?Subroutine0
   \   000093                ; // Fall through to label ?Subroutine0
    193          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine53_0
   \   000002                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine58_0
   \   000003                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   8E82         MOV       DPL,R6
   \   000004   8F83         MOV       DPH,R7
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine60_0
   \   000001                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   E8           MOV       A,R0
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   E9           MOV       A,R1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET
    194          
    195          /*********************************************************************
    196           * @fn      afRegister
    197           *
    198           * @brief   Register an Application's EndPoint description.
    199           *
    200           * @param   epDesc - pointer to the Application's endpoint descriptor.
    201           *
    202           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    203           *
    204           * @return  afStatus_SUCCESS - Registered
    205           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    206           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    207           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    208          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    209          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    210            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F9           MOV       R1,A
   \   00000F   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   8B..         MOV       ?V1,R3
   \   000014   EA           MOV       A,R2
   \   000015   45..         ORL       A,?V1
   \   000017   6004         JZ        ??afRegister_0
    211            {
    212              return afStatus_INVALID_PARAMETER;
   \   000019   7902         MOV       R1,#0x2
   \   00001B   8027         SJMP      ??afRegister_1
    213            }
    214          
    215            return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   00001D                ; Setup parameters for call to function afRegisterExtended
   \   00001D   E4           CLR       A
   \   00001E   F5..         MOV       ?V0,A
   \   000020   F5..         MOV       ?V1,A
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV       R4,#0x0
   \   000029   7D00         MOV       R5,#0x0
   \   00002B   EE           MOV       A,R6
   \   00002C   FA           MOV       R2,A
   \   00002D   EF           MOV       A,R7
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000032   7402         MOV       A,#0x2
   \   000034   12....       LCALL     ?DEALLOC_XSTACK8
   \   000037   8B..         MOV       ?V1,R3
   \   000039   EA           MOV       A,R2
   \   00003A   45..         ORL       A,?V1
   \   00003C   7004         JNZ       ??afRegister_2
   \   00003E   7910         MOV       R1,#0x10
   \   000040   8002         SJMP      ??afRegister_1
   \                     ??afRegister_2:
   \   000042   7900         MOV       R1,#0x0
   \                     ??afRegister_1:
   \   000044   02....       LJMP      ?Subroutine1 & 0xFFFF
    216          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    217          
    218          /*********************************************************************
    219           * @fn      afDelete
    220           *
    221           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    222           *
    223           * @param   EndPoint - Application Endpoint to delete
    224           *
    225           * @return  afStatus_SUCCESS - endpoint deleted
    226           *          afStatus_INVALID_PARAMETER - endpoint not found
    227           *          afStatus_FAILED - endpoint list empty
    228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    229          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    230          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    231            epList_t *epCurrent;
    232            epList_t *epPrevious;
    233          
    234            if ( epList != NULL )
   \   000007   90....       MOV       DPTR,#epList
   \   00000A   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00000D   6035         JZ        ??afDelete_0
    235            {
    236              epPrevious = epCurrent = epList;
   \   00000F   90....       MOV       DPTR,#epList
   \   000012   12....       LCALL     ??Subroutine61_0 & 0xFFFF
    237          
    238              // first element of the list matches
    239              if ( epCurrent->epDesc->endPoint == EndPoint )
   \                     ??CrossCallReturnLabel_139:
   \   000015   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000018   7009         JNZ       ??afDelete_1
    240              {
    241                epList = epCurrent->nextDesc;
   \   00001A   90....       MOV       DPTR,#epList
   \   00001D   8015         SJMP      ??afDelete_2
    242                osal_mem_free( epCurrent );
    243          
    244                return ( afStatus_SUCCESS );
    245              }
    246              else
    247              {
    248                // search the list
    249                for ( epCurrent = epPrevious->nextDesc;
    250                      epCurrent != NULL;
    251                      epCurrent = epCurrent->nextDesc )
    252                {
    253                  if ( epCurrent->epDesc->endPoint == EndPoint )
    254                  {
    255                    epPrevious->nextDesc = epCurrent->nextDesc;
    256                    osal_mem_free( epCurrent );
    257          
    258                    // delete the entry and free the memory
    259                    return ( afStatus_SUCCESS );
    260                  }
    261                  epPrevious = epCurrent;
   \                     ??afDelete_3:
   \   00001F   EA           MOV       A,R2
   \   000020   F8           MOV       R0,A
   \   000021   EB           MOV       A,R3
   \   000022   F9           MOV       R1,A
   \                     ??afDelete_1:
   \   000023   EC           MOV       A,R4
   \   000024   FA           MOV       R2,A
   \   000025   ED           MOV       A,R5
   \   000026   FB           MOV       R3,A
   \   000027   EA           MOV       A,R2
   \   000028   4B           ORL       A,R3
   \   000029   6015         JZ        ??afDelete_4
   \   00002B   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00002E   70EF         JNZ       ??afDelete_3
   \   000030   8882         MOV       DPL,R0
   \   000032   8983         MOV       DPH,R1
   \                     ??afDelete_2:
   \   000034   EC           MOV       A,R4
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   ED           MOV       A,R5
   \   000038   F0           MOVX      @DPTR,A
   \   000039                ; Setup parameters for call to function osal_mem_free
   \   000039   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00003C   7900         MOV       R1,#0x0
   \   00003E   8006         SJMP      ??afDelete_5
    262                }
    263              }
    264          
    265              // no endpoint found
    266              return ( afStatus_INVALID_PARAMETER );
   \                     ??afDelete_4:
   \   000040   7902         MOV       R1,#0x2
   \   000042   8002         SJMP      ??afDelete_5
    267            }
    268            else
    269            {
    270              // epList is empty
    271              return ( afStatus_FAILED );
   \                     ??afDelete_0:
   \   000044   7901         MOV       R1,#0x1
    272            }
   \                     ??afDelete_5:
   \   000046                REQUIRE ?Subroutine2
   \   000046                ; // Fall through to label ?Subroutine2
    273          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FF           MOV       R7,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F583         MOV       DPH,A
   \   000013   8F82         MOV       DPL,R7
   \   000015   E0           MOVX      A,@DPTR
   \   000016   6E           XRL       A,R6
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET
    274          
    275          /*********************************************************************
    276           * @fn          afDataConfirm
    277           *
    278           * @brief       This function will generate the Data Confirm back to
    279           *              the application.
    280           *
    281           * @param       endPoint - confirm end point
    282           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    283           * @param       status - status of APSDE_DATA_REQUEST
    284           *
    285           * @return      none
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    288          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
   \   000009   8B..         MOV       ?V0,R3
    289            endPointDesc_t *epDesc;
    290            afDataConfirm_t *msgPtr;
    291          
    292            // Find the endpoint description
    293            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV       ?V4,R2
   \   000010   8B..         MOV       ?V5,R3
    294            if ( epDesc == NULL )
   \   000012   EA           MOV       A,R2
   \   000013   45..         ORL       A,?V5
   \   000015   602E         JZ        ??afDataConfirm_0
    295              return;
    296          
    297            // Determine the incoming command type
    298            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   000017                ; Setup parameters for call to function osal_msg_allocate
   \   000017   7A04         MOV       R2,#0x4
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    299            if ( msgPtr )
   \   00001E   EA           MOV       A,R2
   \   00001F   4B           ORL       A,R3
   \   000020   6023         JZ        ??afDataConfirm_0
    300            {
    301              // Build the Data Confirm message
    302              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   74FD         MOV       A,#-0x3
   \   000028   F0           MOVX      @DPTR,A
    303              msgPtr->hdr.status = status;
   \   000029   A3           INC       DPTR
   \   00002A   E5..         MOV       A,?V0
   \   00002C   12....       LCALL     ?Subroutine35 & 0xFFFF
    304              msgPtr->endpoint = endPoint;
   \                     ??CrossCallReturnLabel_64:
   \   00002F   F0           MOVX      @DPTR,A
    305              msgPtr->transID = transID;
   \   000030   EF           MOV       A,R7
   \   000031   8A82         MOV       DPL,R2
   \   000033   8B83         MOV       DPH,R3
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   F0           MOVX      @DPTR,A
    306          
    307          #if defined ( MT_AF_CB_FUNC )
    308              /* If MT has subscribed for this callback, don't send as a message. */
    309              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    310              {
    311                /* Send callback if it's subscribed */
    312                MT_AfDataConfirm ((void *)msgPtr);
    313                /* Release the memory. */
    314                osal_msg_deallocate( (void *)msgPtr );
    315              }
    316              else
    317          #endif
    318              {
    319                /* send message through task message */
    320                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   000039                ; Setup parameters for call to function osal_msg_send
   \   000039   85..82       MOV       DPL,?V4
   \   00003C   85..83       MOV       DPH,?V5
   \   00003F   12....       LCALL     ?Subroutine7 & 0xFFFF
    321              }
    322            }
   \                     ??CrossCallReturnLabel_84:
   \   000042   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    323          }
   \                     ??afDataConfirm_0:
   \   000045   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine49_0
   \   000002                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine59_0
   \   000002                ; // Fall through to label ??Subroutine59_0
    324          
    325          /*********************************************************************
    326           * @fn          afReflectError
    327           *
    328           * @brief       This function will generate the Reflect Error message to
    329           *              the application.
    330           *
    331           * @param       srcEP - Source Endpoint
    332           * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
    333           * @param       dstAddr - intended destination
    334           * @param       dstEP - Destination Endpoint
    335           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    336           * @param       status - status of APSDE_DATA_REQUEST
    337           *
    338           * @return      none
    339           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    340          void afReflectError( uint8 srcEP, uint8 dstAddrMode, uint16 dstAddr, uint8 dstEP,
   \                     afReflectError:
    341                               uint8 transID, ZStatus_t status )
    342          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8C..         MOV       ?V6,R4
   \   000009   8D..         MOV       ?V7,R5
   \   00000B   8B..         MOV       ?V1,R3
    343            endPointDesc_t *epDesc;
    344            afReflectError_t *msgPtr;
    345          
    346            // Find the endpoint description
    347            epDesc = afFindEndPointDesc( srcEP );
   \   00000D                ; Setup parameters for call to function afFindEndPointDesc
   \   00000D   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   AE..         MOV       R6,?V2
   \   000016   AF..         MOV       R7,?V3
    348            if ( epDesc == NULL )
   \   000018   EE           MOV       A,R6
   \   000019   4F           ORL       A,R7
   \   00001A   6045         JZ        ??afReflectError_0
    349              return;
    350          
    351            // Determine the incoming command type
    352            msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
   \   00001C                ; Setup parameters for call to function osal_msg_allocate
   \   00001C   7A07         MOV       R2,#0x7
   \   00001E   7B00         MOV       R3,#0x0
   \   000020   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    353            if ( msgPtr )
   \   000023   EA           MOV       A,R2
   \   000024   4B           ORL       A,R3
   \   000025   603A         JZ        ??afReflectError_0
    354            {
    355              // Build the Data Confirm message
    356              msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   74FE         MOV       A,#-0x2
   \   00002D   F0           MOVX      @DPTR,A
    357              msgPtr->hdr.status = status;
   \   00002E   7411         MOV       A,#0x11
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   E0           MOVX      A,@DPTR
   \   000034   8A82         MOV       DPL,R2
   \   000036   8B83         MOV       DPH,R3
   \   000038   A3           INC       DPTR
   \   000039   12....       LCALL     ?Subroutine33 & 0xFFFF
    358              msgPtr->endpoint = dstEP;
   \                     ??CrossCallReturnLabel_58:
   \   00003C   E5..         MOV       A,?V1
   \   00003E   F0           MOVX      @DPTR,A
    359              msgPtr->transID = transID;
   \   00003F   7410         MOV       A,#0x10
   \   000041   12....       LCALL     ?XSTACK_DISP0_8
   \   000044   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000047   12....       LCALL     ?Subroutine32 & 0xFFFF
    360              msgPtr->dstAddrMode = dstAddrMode;
   \                     ??CrossCallReturnLabel_56:
   \   00004A   E5..         MOV       A,?V0
   \   00004C   12....       LCALL     ?Subroutine32 & 0xFFFF
    361              msgPtr->dstAddr = dstAddr;
   \                     ??CrossCallReturnLabel_57:
   \   00004F   A3           INC       DPTR
   \   000050   E5..         MOV       A,?V6
   \   000052   F0           MOVX      @DPTR,A
   \   000053   A3           INC       DPTR
   \   000054   E5..         MOV       A,?V7
   \   000056   F0           MOVX      @DPTR,A
    362          
    363          #if defined ( MT_AF_CB_FUNC )
    364              /* If MT has subscribed for this callback, don't send as a message. */
    365              if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
    366              {
    367                /* Send callback if it's subscribed */
    368                MT_AfReflectError( (void *)msgPtr );
    369                /* Release the memory. */
    370                osal_msg_deallocate( (void *)msgPtr );
    371              }
    372              else
    373          #endif
    374              {
    375                /* send message through task message */
    376                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   000057                ; Setup parameters for call to function osal_msg_send
   \   000057   8E82         MOV       DPL,R6
   \   000059   8F83         MOV       DPH,R7
   \   00005B   12....       LCALL     ?Subroutine7 & 0xFFFF
    377              }
    378            }
   \                     ??CrossCallReturnLabel_85:
   \   00005E   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    379          }
   \                     ??afReflectError_0:
   \   000061   02....       LJMP      ??Subroutine54_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    380          
    381          /*********************************************************************
    382           * @fn          afIncomingData
    383           *
    384           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    385           *
    386           * @param       aff  - pointer to APS frame format
    387           * @param       SrcAddress  - Source address
    388           * @param       SrcPanId  - Source PAN ID
    389           * @param       sig - incoming message's link quality
    390           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    391           * @param       SecurityUse - Security enable/disable
    392           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    393           * @param       radius - incoming messages received radius
    394           *
    395           * @return      none
    396           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    397          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    398                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
    399                               uint32 timestamp, uint8 radius )
    400          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV       A,#-0xd
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
   \   000015   740B         MOV       A,#0xb
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   EC           MOV       A,R4
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   ED           MOV       A,R5
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   7408         MOV       A,#0x8
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   E9           MOV       A,R1
   \   000025   12....       LCALL     ?Subroutine27 & 0xFFFF
    401            // JC update: manually generate the packet
    402            uint16 len = 13 + aff->asduLength;
   \                     ??CrossCallReturnLabel_45:
   \   000028   2410         ADD       A,#0x10
   \   00002A   F5..         MOV       ?V2,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   3400         ADDC      A,#0x0
   \   000030   F5..         MOV       ?V3,A
   \   000032   85..82       MOV       DPL,?V2
   \   000035   F583         MOV       DPH,A
   \   000037   E0           MOVX      A,@DPTR
   \   000038   240D         ADD       A,#0xd
   \   00003A   FE           MOV       R6,A
   \   00003B   E4           CLR       A
   \   00003C   3400         ADDC      A,#0x0
   \   00003E   FF           MOV       R7,A
    403            uint8 *my_msg = osal_msg_allocate( len );
   \   00003F                ; Setup parameters for call to function osal_msg_allocate
   \   00003F   EE           MOV       A,R6
   \   000040   FA           MOV       R2,A
   \   000041   EF           MOV       A,R7
   \   000042   FB           MOV       R3,A
   \   000043   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000046   8A..         MOV       ?V0,R2
   \   000048   8B..         MOV       ?V1,R3
    404            my_msg[0] = CMD_JC_ZCLREQ;
   \   00004A   8A82         MOV       DPL,R2
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   7407         MOV       A,#0x7
   \   000050   F0           MOVX      @DPTR,A
    405            my_msg[1] = 0x00;
   \   000051   A3           INC       DPTR
   \   000052   E4           CLR       A
   \   000053   12....       LCALL     ?Subroutine33 & 0xFFFF
    406            my_msg[2] = SUCCESS;
   \                     ??CrossCallReturnLabel_59:
   \   000056   12....       LCALL     ?Subroutine33 & 0xFFFF
    407            my_msg[3] = 0x00;
   \                     ??CrossCallReturnLabel_60:
   \   000059   A3           INC       DPTR
   \   00005A   12....       LCALL     ?Subroutine35 & 0xFFFF
    408            my_msg[4] = len;
   \                     ??CrossCallReturnLabel_65:
   \   00005D   12....       LCALL     ?Subroutine38 & 0xFFFF
    409            my_msg[5] = aff->FrmCtrl;
   \                     ??CrossCallReturnLabel_92:
   \   000060   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000063   8A82         MOV       DPL,R2
   \   000065   8B83         MOV       DPH,R3
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   12....       LCALL     ?Subroutine27 & 0xFFFF
    410            my_msg[6] = aff->DstEndPoint;
   \                     ??CrossCallReturnLabel_46:
   \   00006F   2402         ADD       A,#0x2
   \   000071   F8           MOV       R0,A
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   3400         ADDC      A,#0x0
   \   000076   F9           MOV       R1,A
   \   000077   7404         MOV       A,#0x4
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00007F   7404         MOV       A,#0x4
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000087   12....       LCALL     ?Subroutine27 & 0xFFFF
    411            my_msg[7] = (uint8)(aff->ClusterID & 0xff); my_msg[8] = (uint8)((aff->ClusterID >> 8) & 0xff);
   \                     ??CrossCallReturnLabel_47:
   \   00008A   2406         ADD       A,#0x6
   \   00008C   F8           MOV       R0,A
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   3400         ADDC      A,#0x0
   \   000091   F9           MOV       R1,A
   \   000092   8882         MOV       DPL,R0
   \   000094   8983         MOV       DPH,R1
   \   000096   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000099   A3           INC       DPTR
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000A0   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000A3   12....       LCALL     ?Subroutine27 & 0xFFFF
    412            my_msg[9] = (uint8)(aff->ProfileID & 0xff); my_msg[10] = (uint8)((aff->ProfileID >> 8) & 0xff);
   \                     ??CrossCallReturnLabel_48:
   \   0000A6   2408         ADD       A,#0x8
   \   0000A8   F8           MOV       R0,A
   \   0000A9   A3           INC       DPTR
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   3400         ADDC      A,#0x0
   \   0000AD   F9           MOV       R1,A
   \   0000AE   7406         MOV       A,#0x6
   \   0000B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B3   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0000B6   7406         MOV       A,#0x6
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   7406         MOV       A,#0x6
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000CA   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000CD   12....       LCALL     ?Subroutine38 & 0xFFFF
    413            my_msg[11] = aff->SrcEndPoint;
   \                     ??CrossCallReturnLabel_93:
   \   0000D0   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   C0E0         PUSH      A
   \   0000D8   EA           MOV       A,R2
   \   0000D9   240B         ADD       A,#0xb
   \   0000DB   F582         MOV       DPL,A
   \   0000DD   E4           CLR       A
   \   0000DE   35..         ADDC      A,?V1
   \   0000E0   F583         MOV       DPH,A
   \   0000E2   D0E0         POP       A
   \   0000E4   12....       LCALL     ?Subroutine27 & 0xFFFF
    414            my_msg[12] = aff->ApsCounter;
   \                     ??CrossCallReturnLabel_49:
   \   0000E7   F8           MOV       R0,A
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   C8           XCH       A,R0
   \   0000EB   2411         ADD       A,#0x11
   \   0000ED   F582         MOV       DPL,A
   \   0000EF   E4           CLR       A
   \   0000F0   38           ADDC      A,R0
   \   0000F1   F583         MOV       DPH,A
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   C0E0         PUSH      A
   \   0000F6   EA           MOV       A,R2
   \   0000F7   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000FA   D0E0         POP       A
   \   0000FC   F0           MOVX      @DPTR,A
    415            for (int i = 0; i < aff->asduLength; i++) {
   \   0000FD   7800         MOV       R0,#0x0
   \   0000FF   7900         MOV       R1,#0x0
   \   000101   8039         SJMP      ??afIncomingData_0
    416              my_msg[13+i] = aff->asdu[i];
   \                     ??afIncomingData_1:
   \   000103   85..82       MOV       DPL,?XSP + 0
   \   000106   85..83       MOV       DPH,?XSP + 1
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   FA           MOV       R2,A
   \   00010B   A3           INC       DPTR
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   CA           XCH       A,R2
   \   00010E   240E         ADD       A,#0xe
   \   000110   F582         MOV       DPL,A
   \   000112   E4           CLR       A
   \   000113   3A           ADDC      A,R2
   \   000114   F583         MOV       DPH,A
   \   000116   E0           MOVX      A,@DPTR
   \   000117   28           ADD       A,R0
   \   000118   FA           MOV       R2,A
   \   000119   A3           INC       DPTR
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   39           ADDC      A,R1
   \   00011C   8A82         MOV       DPL,R2
   \   00011E   F583         MOV       DPH,A
   \   000120   E0           MOVX      A,@DPTR
   \   000121   C0E0         PUSH      A
   \   000123   E5..         MOV       A,?V0
   \   000125   28           ADD       A,R0
   \   000126   FA           MOV       R2,A
   \   000127   E5..         MOV       A,?V1
   \   000129   39           ADDC      A,R1
   \   00012A   FB           MOV       R3,A
   \   00012B   EA           MOV       A,R2
   \   00012C   240D         ADD       A,#0xd
   \   00012E   F582         MOV       DPL,A
   \   000130   E4           CLR       A
   \   000131   3B           ADDC      A,R3
   \   000132   F583         MOV       DPH,A
   \   000134   D0E0         POP       A
   \   000136   F0           MOVX      @DPTR,A
    417            }
   \   000137   08           INC       R0
   \   000138   E8           MOV       A,R0
   \   000139   7001         JNZ       ??afIncomingData_0
   \   00013B   09           INC       R1
   \                     ??afIncomingData_0:
   \   00013C   85..82       MOV       DPL,?V2
   \   00013F   85..83       MOV       DPH,?V3
   \   000142   E0           MOVX      A,@DPTR
   \   000143   FA           MOV       R2,A
   \   000144   C3           CLR       C
   \   000145   E8           MOV       A,R0
   \   000146   9A           SUBB      A,R2
   \   000147   E9           MOV       A,R1
   \   000148   9400         SUBB      A,#0x0
   \   00014A   A2D2         MOV       C,0xD0 /* PSW */.2
   \   00014C   65D0         XRL       A,PSW
   \   00014E   33           RLC       A
   \   00014F   40B2         JC        ??afIncomingData_1
    418            uint8 sampleApp_task_id = *(afFindEndPointDesc(8)->task_id); // Endpoint 8 defined for SAMPLES_HA_ENDPOINT
   \   000151                ; Setup parameters for call to function afFindEndPointDesc
   \   000151   7908         MOV       R1,#0x8
   \   000153   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000156   8A82         MOV       DPL,R2
   \   000158   8B83         MOV       DPH,R3
    419            osal_msg_send( sampleApp_task_id, my_msg);
   \   00015A                ; Setup parameters for call to function osal_msg_send
   \   00015A   AA..         MOV       R2,?V0
   \   00015C   AB..         MOV       R3,?V1
   \   00015E   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000161   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    420            // JC update end
    421          
    422            endPointDesc_t *epDesc = NULL;
    423            epList_t *pList = epList;
   \   000164   90....       MOV       DPTR,#epList
   \   000167   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00016A   7402         MOV       A,#0x2
   \   00016C   12....       LCALL     ?XSTACK_DISP0_8
   \   00016F   12....       LCALL     ??Subroutine55_0 & 0xFFFF
    424          #if !defined ( APS_NO_GROUPS )
    425            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \                     ??CrossCallReturnLabel_106:
   \   000172   75..FE       MOV       ?V6,#-0x2
    426          #endif
    427          
    428            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   000175   85..82       MOV       DPL,?XSP + 0
   \   000178   85..83       MOV       DPH,?XSP + 1
   \   00017B   E0           MOVX      A,@DPTR
   \   00017C   2404         ADD       A,#0x4
   \   00017E   F8           MOV       R0,A
   \   00017F   A3           INC       DPTR
   \   000180   E0           MOVX      A,@DPTR
   \   000181   3400         ADDC      A,#0x0
   \   000183   F9           MOV       R1,A
   \   000184   7409         MOV       A,#0x9
   \   000186   12....       LCALL     ?XSTACK_DISP0_8
   \   000189   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00018C   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00018F   702B         JNZ       ??afIncomingData_2
    429            {
    430          #if !defined ( APS_NO_GROUPS )
    431              // Find the first endpoint for this group
    432              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000191                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000191   79FE         MOV       R1,#-0x2
   \   000193   7409         MOV       A,#0x9
   \   000195   12....       LCALL     ?XSTACK_DISP0_8
   \   000198   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   00019B   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   00019E   E9           MOV       A,R1
   \   00019F   F5..         MOV       ?V6,A
    433              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   0001A1   74FE         MOV       A,#-0x2
   \   0001A3   65..         XRL       A,?V6
   \   0001A5   7003         JNZ       $+5
   \   0001A7   02....       LJMP      ??afIncomingData_3 & 0xFFFF
    434                return;   // No endpoint found
    435          
    436              epDesc = afFindEndPointDesc( grpEp );
   \   0001AA                ; Setup parameters for call to function afFindEndPointDesc
   \   0001AA   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0001AD   8A..         MOV       ?V0,R2
   \   0001AF   8B..         MOV       ?V1,R3
   \   0001B1   AE..         MOV       R6,?V0
   \   0001B3   AF..         MOV       R7,?V1
    437              if ( epDesc == NULL )
   \   0001B5   EE           MOV       A,R6
   \   0001B6   4F           ORL       A,R7
   \   0001B7   7044         JNZ       ??afIncomingData_4
    438                return;   // Endpoint descriptor not found
   \   0001B9   02....       LJMP      ??afIncomingData_3 & 0xFFFF
    439          
    440              pList = afFindEndPointDescList( epDesc->endPoint );
    441          #else
    442              return; // Not supported
    443          #endif
    444            }
    445            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_2:
   \   0001BC   7404         MOV       A,#0x4
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   12....       LCALL     ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0001C4   74FF         MOV       A,#-0x1
   \   0001C6   69           XRL       A,R1
   \   0001C7   7021         JNZ       ??afIncomingData_5
    446            {
    447              // Set the list
    448              if ( pList != NULL )
   \   0001C9   7402         MOV       A,#0x2
   \   0001CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CE   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001D1   7003         JNZ       $+5
   \   0001D3   02....       LJMP      ??afIncomingData_3 & 0xFFFF
    449              {
    450                epDesc = pList->epDesc;
   \   0001D6   7402         MOV       A,#0x2
   \   0001D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DB   12....       LCALL     ?Subroutine20 & 0xFFFF
    451              }
    452            }
   \                     ??CrossCallReturnLabel_34:
   \   0001DE   7421         MOV       A,#0x21
   \   0001E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E3   78..         MOV       R0,#?V0
   \   0001E5   12....       LCALL     ?L_MOV_X
   \   0001E8   802B         SJMP      ??CrossCallReturnLabel_35
    453            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_5:
   \   0001EA                ; Setup parameters for call to function afFindEndPointDesc
   \   0001EA   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0001ED   8A..         MOV       ?V0,R2
   \   0001EF   8B..         MOV       ?V1,R3
   \   0001F1   A8..         MOV       R0,?V0
   \   0001F3   A9..         MOV       R1,?V1
   \   0001F5   E8           MOV       A,R0
   \   0001F6   FE           MOV       R6,A
   \   0001F7   E9           MOV       A,R1
   \   0001F8   FF           MOV       R7,A
   \   0001F9   E8           MOV       A,R0
   \   0001FA   49           ORL       A,R1
   \   0001FB   60E1         JZ        ??CrossCallReturnLabel_34
    454            {
    455              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_4:
   \   0001FD                ; Setup parameters for call to function afFindEndPointDescList
   \   0001FD   8E82         MOV       DPL,R6
   \   0001FF   8F83         MOV       DPH,R7
   \   000201   E0           MOVX      A,@DPTR
   \   000202   F9           MOV       R1,A
   \   000203   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000206   7402         MOV       A,#0x2
   \   000208   12....       LCALL     ?XSTACK_DISP0_8
   \   00020B   EA           MOV       A,R2
   \   00020C   F0           MOVX      @DPTR,A
   \   00020D   A3           INC       DPTR
   \   00020E   EB           MOV       A,R3
   \   00020F   F0           MOVX      @DPTR,A
   \   000210   80CC         SJMP      ??CrossCallReturnLabel_34
    456            }
    457          
    458            while ( epDesc )
    459            {
    460              uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
    461          
    462              if ( pList->pfnDescCB )
    463              {
    464                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    465                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    466                if ( pID )
    467                {
    468                  epProfileID = *pID;
    469                  osal_mem_free( pID );
    470                }
    471              }
    472              else if ( epDesc->simpleDesc )
    473              {
    474                epProfileID = epDesc->simpleDesc->AppProfId;
    475              }
    476          
    477              // First part of verification is to make sure that:
    478              // the local Endpoint ProfileID matches the received ProfileID OR
    479              // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
    480              // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
    481              /**
    482               * JC NOTES: Here we temporally remove the first check, as some devices (e.g., Philips Hue) do not strictly follow the rule that "an endpoint can only support one profile".
    483              */
    484          
    485              //if ( (aff->ProfileID == epProfileID) ||
    486              //     ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    487              //     ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
    488              if ((epDesc->endPoint != ZDO_EP) && (aff->ProfileID >=0) ||
                                                                         ^
Warning[Pe186]: pointless comparison of unsigned integer with zero

      uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
             ^
"D:\fuzzing-coordinator-response-collection\Components\stack\af\AF.c",460  Warning[Pe550]: 
          variable "epProfileID" was set but never used
    489                ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    490                   ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
    491              {
    492                // Save original endpoint
    493                uint8 endpoint = aff->DstEndPoint;
    494          
    495                // overwrite with descriptor's endpoint
    496                aff->DstEndPoint = epDesc->endPoint;
    497          
    498                afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    499                                   nwkSeqNum, SecurityUse, timestamp, radius );
    500          
    501                // Restore with original endpoint
    502                aff->DstEndPoint = endpoint;
    503              }
    504          
    505              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    506              {
    507          #if !defined ( APS_NO_GROUPS )
    508                // Find the next endpoint for this group
    509                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    510                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    511                  return;   // No endpoint found
    512          
    513                epDesc = afFindEndPointDesc( grpEp );
    514                if ( epDesc == NULL )
    515                  return;   // Endpoint descriptor not found
    516          
    517                pList = afFindEndPointDescList( epDesc->endPoint );
    518          #else
    519                return;
    520          #endif
    521              }
    522              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    523              {
    524                pList = pList->nextDesc;
    525                if ( pList )
    526                  epDesc = pList->epDesc;
   \                     ??afIncomingData_6:
   \   000212   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000215   EE           MOV       A,R6
   \   000216   4F           ORL       A,R7
   \   000217   7003         JNZ       $+5
   \   000219   02....       LJMP      ??afIncomingData_3 & 0xFFFF
   \   00021C   8013         SJMP      ??afIncomingData_7
   \                     ??afIncomingData_8:
   \   00021E                ; Setup parameters for call to function afFindEndPointDescList
   \   00021E   8E82         MOV       DPL,R6
   \   000220   8F83         MOV       DPH,R7
   \   000222   E0           MOVX      A,@DPTR
   \   000223   F9           MOV       R1,A
   \   000224   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000227   7402         MOV       A,#0x2
   \   000229   12....       LCALL     ?XSTACK_DISP0_8
   \   00022C   EA           MOV       A,R2
   \   00022D   F0           MOVX      @DPTR,A
   \   00022E   A3           INC       DPTR
   \   00022F   EB           MOV       A,R3
   \   000230   F0           MOVX      @DPTR,A
   \                     ??afIncomingData_7:
   \   000231   7402         MOV       A,#0x2
   \   000233   12....       LCALL     ?XSTACK_DISP0_8
   \   000236   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000239   E8           MOV       A,R0
   \   00023A   FC           MOV       R4,A
   \   00023B   E9           MOV       A,R1
   \   00023C   FD           MOV       R5,A
   \   00023D   EC           MOV       A,R4
   \   00023E   4D           ORL       A,R5
   \   00023F   6011         JZ        ??afIncomingData_9
   \   000241                ; Setup parameters for indirect call
   \   000241   8E82         MOV       DPL,R6
   \   000243   8F83         MOV       DPH,R7
   \   000245   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000248   12....       LCALL     ?CALL_IND
   \   00024B   EA           MOV       A,R2
   \   00024C   4B           ORL       A,R3
   \   00024D   6003         JZ        ??afIncomingData_9
   \   00024F                ; Setup parameters for call to function osal_mem_free
   \   00024F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??afIncomingData_9:
   \   000252   8E82         MOV       DPL,R6
   \   000254   8F83         MOV       DPH,R7
   \   000256   E0           MOVX      A,@DPTR
   \   000257   FA           MOV       R2,A
   \   000258   700D         JNZ       ??afIncomingData_10
   \   00025A   7406         MOV       A,#0x6
   \   00025C   12....       LCALL     ?XSTACK_DISP0_8
   \   00025F   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000262   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000265   7071         JNZ       ??afIncomingData_11
   \                     ??afIncomingData_10:
   \   000267   7404         MOV       A,#0x4
   \   000269   12....       LCALL     ?XSTACK_DISP0_8
   \   00026C   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00026F   F5..         MOV       ?V5,A
   \   000271   7404         MOV       A,#0x4
   \   000273   12....       LCALL     ?XSTACK_DISP0_8
   \   000276   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000279   EA           MOV       A,R2
   \   00027A   F0           MOVX      @DPTR,A
   \   00027B                ; Setup parameters for call to function afBuildMSGIncoming
   \   00027B   7425         MOV       A,#0x25
   \   00027D   12....       LCALL     ?XSTACK_DISP0_8
   \   000280   E0           MOVX      A,@DPTR
   \   000281   F5..         MOV       ?V4,A
   \   000283   78..         MOV       R0,#?V4
   \   000285   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000288   78..         MOV       R0,#?V0
   \   00028A   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00028D   7425         MOV       A,#0x25
   \   00028F   12....       LCALL     ?XSTACK_DISP0_8
   \   000292   E0           MOVX      A,@DPTR
   \   000293   F5..         MOV       ?V4,A
   \   000295   78..         MOV       R0,#?V4
   \   000297   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00029A   7424         MOV       A,#0x24
   \   00029C   12....       LCALL     ?XSTACK_DISP0_8
   \   00029F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0002A2   7424         MOV       A,#0x24
   \   0002A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0002AA   7415         MOV       A,#0x15
   \   0002AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AF   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0002B2   7414         MOV       A,#0x14
   \   0002B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B7   E0           MOVX      A,@DPTR
   \   0002B8   F9           MOV       R1,A
   \   0002B9   EE           MOV       A,R6
   \   0002BA   FC           MOV       R4,A
   \   0002BB   EF           MOV       A,R7
   \   0002BC   FD           MOV       R5,A
   \   0002BD   740C         MOV       A,#0xc
   \   0002BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0002C2   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0002C5   12....       LCALL     `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   0002C8   740C         MOV       A,#0xc
   \   0002CA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002CD   7404         MOV       A,#0x4
   \   0002CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D2   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0002D5   E5..         MOV       A,?V5
   \   0002D7   F0           MOVX      @DPTR,A
   \                     ??afIncomingData_11:
   \   0002D8   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0002DB   702A         JNZ       ??afIncomingData_12
   \   0002DD                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0002DD   A9..         MOV       R1,?V6
   \   0002DF   7409         MOV       A,#0x9
   \   0002E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E4   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0002E7   12....       LCALL     `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   0002EA   E9           MOV       A,R1
   \   0002EB   F5..         MOV       ?V6,A
   \   0002ED   74FE         MOV       A,#-0x2
   \   0002EF   65..         XRL       A,?V6
   \   0002F1   6040         JZ        ??afIncomingData_3
   \   0002F3                ; Setup parameters for call to function afFindEndPointDesc
   \   0002F3   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0002F6   8A..         MOV       ?V4,R2
   \   0002F8   8B..         MOV       ?V5,R3
   \   0002FA   AE..         MOV       R6,?V4
   \   0002FC   AF..         MOV       R7,?V5
   \   0002FE   EE           MOV       A,R6
   \   0002FF   4F           ORL       A,R7
   \   000300   6003         JZ        $+5
   \   000302   02....       LJMP      ??afIncomingData_8 & 0xFFFF
   \   000305   802C         SJMP      ??afIncomingData_3
   \                     ??afIncomingData_12:
   \   000307   7404         MOV       A,#0x4
   \   000309   12....       LCALL     ?XSTACK_DISP0_8
   \   00030C   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00030F   F4           CPL       A
   \   000310   7021         JNZ       ??afIncomingData_3
   \   000312   7402         MOV       A,#0x2
   \   000314   12....       LCALL     ?XSTACK_DISP0_8
   \   000317   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00031A   F8           MOV       R0,A
   \   00031B   A3           INC       DPTR
   \   00031C   E0           MOVX      A,@DPTR
   \   00031D   F9           MOV       R1,A
   \   00031E   7402         MOV       A,#0x2
   \   000320   12....       LCALL     ?XSTACK_DISP0_8
   \   000323   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000326   7402         MOV       A,#0x2
   \   000328   12....       LCALL     ?XSTACK_DISP0_8
   \   00032B   E0           MOVX      A,@DPTR
   \   00032C   F8           MOV       R0,A
   \   00032D   49           ORL       A,R1
   \   00032E   6003         JZ        $+5
   \   000330   02....       LJMP      ??afIncomingData_6 & 0xFFFF
    527                else
    528                  epDesc = NULL;
    529              }
    530              else
    531                epDesc = NULL;
    532            }
    533          }
   \                     ??afIncomingData_3:
   \   000333   740D         MOV       A,#0xd
   \   000335   12....       LCALL     ?DEALLOC_XSTACK8
   \   000338                REQUIRE ?Subroutine4
   \   000338                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine50_0
   \   000002                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine51_0
   \   000002                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine52_0
   \   000001                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FE           MOV       R6,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FF           MOV       R7,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000009   540C         ANL       A,#0xc
   \   00000B   640C         XRL       A,#0xc
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   240C         ADD       A,#0xc
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V1
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   7902         MOV       R1,#0x2
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000009   22           RET
    534          
    535          /*********************************************************************
    536           * @fn          afBuildMSGIncoming
    537           *
    538           * @brief       Build the message for the app
    539           *
    540           * @param
    541           *
    542           * @return      pointer to next in data buffer
    543           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    544          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    545                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    546                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
    547          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V0,R2
   \   000014   8B..         MOV       ?V1,R3
   \   000016   8C..         MOV       ?V6,R4
   \   000018   8D..         MOV       ?V7,R5
    548            afIncomingMSGPacket_t *MSGpkt;
    549            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    550            uint8 *asdu = aff->asdu;
   \   00001A   EA           MOV       A,R2
   \   00001B   240E         ADD       A,#0xe
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   35..         ADDC      A,?V1
   \   000022   F583         MOV       DPH,A
   \   000024   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000027   7401         MOV       A,#0x1
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ??Subroutine55_0 & 0xFFFF
    551            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \                     ??CrossCallReturnLabel_109:
   \   00002F   EA           MOV       A,R2
   \   000030   2410         ADD       A,#0x10
   \   000032   F5..         MOV       ?V2,A
   \   000034   E4           CLR       A
   \   000035   35..         ADDC      A,?V1
   \   000037   F5..         MOV       ?V3,A
   \   000039                ; Setup parameters for call to function osal_msg_allocate
   \   000039   85..82       MOV       DPL,?V2
   \   00003C   F583         MOV       DPH,A
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   2427         ADD       A,#0x27
   \   000041   FA           MOV       R2,A
   \   000042   7B00         MOV       R3,#0x0
   \   000044   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000047   8A..         MOV       ?V4,R2
   \   000049   8B..         MOV       ?V5,R3
   \   00004B   AE..         MOV       R6,?V4
   \   00004D   AF..         MOV       R7,?V5
    552          
    553            if ( MSGpkt == NULL )
   \   00004F   EE           MOV       A,R6
   \   000050   4F           ORL       A,R7
   \   000051   7003         JNZ       $+5
   \   000053   02....       LJMP      ??afBuildMSGIncoming_0 & 0xFFFF
    554            {
    555              return;
    556            }
    557          
    558            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000056   8E82         MOV       DPL,R6
   \   000058   8F83         MOV       DPH,R7
   \   00005A   741A         MOV       A,#0x1a
   \   00005C   12....       LCALL     ?Subroutine39 & 0xFFFF
    559            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_70:
   \   00005F   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000062   8E82         MOV       DPL,R6
   \   000064   8F83         MOV       DPH,R7
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   12....       LCALL     ?Subroutine28 & 0xFFFF
    560            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_50:
   \   00006B   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00006E   12....       LCALL     ??Subroutine55_0 & 0xFFFF
    561            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_110:
   \   000071                ; Setup parameters for call to function afCopyAddress
   \   000071   7413         MOV       A,#0x13
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000079   EE           MOV       A,R6
   \   00007A   2406         ADD       A,#0x6
   \   00007C   FA           MOV       R2,A
   \   00007D   E4           CLR       A
   \   00007E   3F           ADDC      A,R7
   \   00007F   FB           MOV       R3,A
   \   000080   12....       LCALL     `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    562            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   000083   85..82       MOV       DPL,?V0
   \   000086   85..83       MOV       DPH,?V1
   \   000089   A3           INC       DPTR
   \   00008A   A3           INC       DPTR
   \   00008B   A3           INC       DPTR
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   C0E0         PUSH      A
   \   00008F   EE           MOV       A,R6
   \   000090   240F         ADD       A,#0xf
   \   000092   F582         MOV       DPL,A
   \   000094   E4           CLR       A
   \   000095   3F           ADDC      A,R7
   \   000096   F583         MOV       DPH,A
   \   000098   D0E0         POP       A
   \   00009A   F0           MOVX      @DPTR,A
    563            MSGpkt->endPoint = epDesc->endPoint;
   \   00009B   85..82       MOV       DPL,?V6
   \   00009E   85..83       MOV       DPH,?V7
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   C0E0         PUSH      A
   \   0000A4   EE           MOV       A,R6
   \   0000A5   2414         ADD       A,#0x14
   \   0000A7   F582         MOV       DPL,A
   \   0000A9   E4           CLR       A
   \   0000AA   3F           ADDC      A,R7
   \   0000AB   F583         MOV       DPH,A
   \   0000AD   D0E0         POP       A
   \   0000AF   F0           MOVX      @DPTR,A
    564            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000B0   E5..         MOV       A,?V0
   \   0000B2   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   C0E0         PUSH      A
   \   0000B8   EE           MOV       A,R6
   \   0000B9   2415         ADD       A,#0x15
   \   0000BB   F582         MOV       DPL,A
   \   0000BD   E4           CLR       A
   \   0000BE   3F           ADDC      A,R7
   \   0000BF   F583         MOV       DPH,A
   \   0000C1   D0E0         POP       A
   \   0000C3   F0           MOVX      @DPTR,A
   \   0000C4   7417         MOV       A,#0x17
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL     ?Subroutine21 & 0xFFFF
    565            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_36:
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   C0E0         PUSH      A
   \   0000CF   EE           MOV       A,R6
   \   0000D0   2416         ADD       A,#0x16
   \   0000D2   F582         MOV       DPL,A
   \   0000D4   E4           CLR       A
   \   0000D5   3F           ADDC      A,R7
   \   0000D6   F583         MOV       DPH,A
   \   0000D8   D0E0         POP       A
   \   0000DA   12....       LCALL     ?Subroutine34 & 0xFFFF
    566            MSGpkt->correlation = sig->correlation;
   \                     ??CrossCallReturnLabel_62:
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   C0E0         PUSH      A
   \   0000E0   EE           MOV       A,R6
   \   0000E1   2417         ADD       A,#0x17
   \   0000E3   F582         MOV       DPL,A
   \   0000E5   E4           CLR       A
   \   0000E6   3F           ADDC      A,R7
   \   0000E7   F583         MOV       DPH,A
   \   0000E9   D0E0         POP       A
   \   0000EB   12....       LCALL     ?Subroutine34 & 0xFFFF
    567            MSGpkt->rssi = sig->rssi;
   \                     ??CrossCallReturnLabel_63:
   \   0000EE   A3           INC       DPTR
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   C0E0         PUSH      A
   \   0000F2   EE           MOV       A,R6
   \   0000F3   2418         ADD       A,#0x18
   \   0000F5   F582         MOV       DPL,A
   \   0000F7   E4           CLR       A
   \   0000F8   3F           ADDC      A,R7
   \   0000F9   F583         MOV       DPH,A
   \   0000FB   D0E0         POP       A
   \   0000FD   F0           MOVX      @DPTR,A
    568            MSGpkt->SecurityUse = SecurityUse;
   \   0000FE   7419         MOV       A,#0x19
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   E0           MOVX      A,@DPTR
   \   000104   C0E0         PUSH      A
   \   000106   EE           MOV       A,R6
   \   000107   2419         ADD       A,#0x19
   \   000109   F582         MOV       DPL,A
   \   00010B   E4           CLR       A
   \   00010C   3F           ADDC      A,R7
   \   00010D   F583         MOV       DPH,A
   \   00010F   D0E0         POP       A
   \   000111   F0           MOVX      @DPTR,A
    569            MSGpkt->timestamp = timestamp;
   \   000112   741A         MOV       A,#0x1a
   \   000114   12....       LCALL     ?XSTACK_DISP0_8
   \   000117   12....       LCALL     ?XLOAD_R0123
   \   00011A   EE           MOV       A,R6
   \   00011B   241A         ADD       A,#0x1a
   \   00011D   F582         MOV       DPL,A
   \   00011F   E4           CLR       A
   \   000120   3F           ADDC      A,R7
   \   000121   F583         MOV       DPH,A
   \   000123   12....       LCALL     ?XSTORE_R0123
    570            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   000126   85..82       MOV       DPL,?XSP + 0
   \   000129   85..83       MOV       DPH,?XSP + 1
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   C0E0         PUSH      A
   \   00012F   EE           MOV       A,R6
   \   000130   241E         ADD       A,#0x1e
   \   000132   F582         MOV       DPL,A
   \   000134   E4           CLR       A
   \   000135   3F           ADDC      A,R7
   \   000136   F583         MOV       DPH,A
   \   000138   D0E0         POP       A
   \   00013A   F0           MOVX      @DPTR,A
    571            MSGpkt->macSrcAddr = aff->macSrcAddr;
   \   00013B   E5..         MOV       A,?V0
   \   00013D   2415         ADD       A,#0x15
   \   00013F   F582         MOV       DPL,A
   \   000141   E4           CLR       A
   \   000142   35..         ADDC      A,?V1
   \   000144   F583         MOV       DPH,A
   \   000146   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000149   2424         ADD       A,#0x24
   \   00014B   F582         MOV       DPL,A
   \   00014D   E4           CLR       A
   \   00014E   3F           ADDC      A,R7
   \   00014F   F583         MOV       DPH,A
   \   000151   12....       LCALL     ?Subroutine28 & 0xFFFF
    572            MSGpkt->macDestAddr = aff->macDestAddr;
   \                     ??CrossCallReturnLabel_51:
   \   000154   A3           INC       DPTR
   \   000155   A3           INC       DPTR
   \   000156   A3           INC       DPTR
   \   000157   A3           INC       DPTR
   \   000158   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00015B   2412         ADD       A,#0x12
   \   00015D   12....       LCALL     ?Subroutine29 & 0xFFFF
    573            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_115:
   \   000160   7415         MOV       A,#0x15
   \   000162   12....       LCALL     ?XSTACK_DISP0_8
   \   000165   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000168   2410         ADD       A,#0x10
   \   00016A   12....       LCALL     ?Subroutine29 & 0xFFFF
    574            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_116:
   \   00016D   EE           MOV       A,R6
   \   00016E   241F         ADD       A,#0x1f
   \   000170   F582         MOV       DPL,A
   \   000172   E4           CLR       A
   \   000173   3F           ADDC      A,R7
   \   000174   F583         MOV       DPH,A
   \   000176   E4           CLR       A
   \   000177   F0           MOVX      @DPTR,A
    575            MSGpkt->cmd.DataLength = aff->asduLength;
   \   000178   EE           MOV       A,R6
   \   000179   2420         ADD       A,#0x20
   \   00017B   FC           MOV       R4,A
   \   00017C   E4           CLR       A
   \   00017D   3F           ADDC      A,R7
   \   00017E   FD           MOV       R5,A
   \   00017F   85..82       MOV       DPL,?V2
   \   000182   85..83       MOV       DPH,?V3
   \   000185   E0           MOVX      A,@DPTR
   \   000186   8C82         MOV       DPL,R4
   \   000188   8D83         MOV       DPH,R5
   \   00018A   F0           MOVX      @DPTR,A
   \   00018B   A3           INC       DPTR
   \   00018C   E4           CLR       A
   \   00018D   F0           MOVX      @DPTR,A
    576            MSGpkt->radius = radius;
   \   00018E   741E         MOV       A,#0x1e
   \   000190   12....       LCALL     ?XSTACK_DISP0_8
   \   000193   E0           MOVX      A,@DPTR
   \   000194   C0E0         PUSH      A
   \   000196   EE           MOV       A,R6
   \   000197   2426         ADD       A,#0x26
   \   000199   F582         MOV       DPL,A
   \   00019B   E4           CLR       A
   \   00019C   3F           ADDC      A,R7
   \   00019D   F583         MOV       DPH,A
   \   00019F   D0E0         POP       A
   \   0001A1   F0           MOVX      @DPTR,A
    577          
    578            if ( MSGpkt->cmd.DataLength )
   \   0001A2   EE           MOV       A,R6
   \   0001A3   2422         ADD       A,#0x22
   \   0001A5   F8           MOV       R0,A
   \   0001A6   E4           CLR       A
   \   0001A7   3F           ADDC      A,R7
   \   0001A8   F9           MOV       R1,A
   \   0001A9   8C82         MOV       DPL,R4
   \   0001AB   8D83         MOV       DPH,R5
   \   0001AD   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   0001B0   EA           MOV       A,R2
   \   0001B1   4B           ORL       A,R3
   \   0001B2   6035         JZ        ??afBuildMSGIncoming_1
    579            {
    580              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   0001B4   EE           MOV       A,R6
   \   0001B5   2427         ADD       A,#0x27
   \   0001B7   FA           MOV       R2,A
   \   0001B8   E4           CLR       A
   \   0001B9   3F           ADDC      A,R7
   \   0001BA   FB           MOV       R3,A
   \   0001BB   8882         MOV       DPL,R0
   \   0001BD   8983         MOV       DPH,R1
   \   0001BF   EA           MOV       A,R2
   \   0001C0   F0           MOVX      @DPTR,A
   \   0001C1   A3           INC       DPTR
   \   0001C2   EB           MOV       A,R3
   \   0001C3   F0           MOVX      @DPTR,A
    581              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   0001C4                ; Setup parameters for call to function osal_memcpy
   \   0001C4   7401         MOV       A,#0x1
   \   0001C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C9   E0           MOVX      A,@DPTR
   \   0001CA   F5..         MOV       ?V0,A
   \   0001CC   A3           INC       DPTR
   \   0001CD   E0           MOVX      A,@DPTR
   \   0001CE   F5..         MOV       ?V1,A
   \   0001D0   75..00       MOV       ?V2,#0x0
   \   0001D3   78..         MOV       R0,#?V0
   \   0001D5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001D8   8C82         MOV       DPL,R4
   \   0001DA   8D83         MOV       DPH,R5
   \   0001DC   12....       LCALL     ?Subroutine43 & 0xFFFF
    582            }
   \                     ??CrossCallReturnLabel_76:
   \   0001DF   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001E2   7403         MOV       A,#0x3
   \   0001E4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E7   8008         SJMP      ??afBuildMSGIncoming_2
    583            else
    584            {
    585              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   0001E9   8882         MOV       DPL,R0
   \   0001EB   8983         MOV       DPH,R1
   \   0001ED   E4           CLR       A
   \   0001EE   F0           MOVX      @DPTR,A
   \   0001EF   A3           INC       DPTR
   \   0001F0   F0           MOVX      @DPTR,A
    586            }
    587          
    588          #if defined ( MT_AF_CB_FUNC )
    589            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    590            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    591            {
    592              MT_AfIncomingMsg( (void *)MSGpkt );
    593              // Release the memory.
    594              osal_msg_deallocate( (void *)MSGpkt );
    595            }
    596            else
    597          #endif
    598            {
    599              // Send message through task message.
    600              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   0001F1                ; Setup parameters for call to function osal_msg_send
   \   0001F1   EE           MOV       A,R6
   \   0001F2   FA           MOV       R2,A
   \   0001F3   EF           MOV       A,R7
   \   0001F4   FB           MOV       R3,A
   \   0001F5   85..82       MOV       DPL,?V6
   \   0001F8   85..83       MOV       DPH,?V7
   \   0001FB   12....       LCALL     ?Subroutine7 & 0xFFFF
    601            }
   \                     ??CrossCallReturnLabel_87:
   \   0001FE   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    602          }
   \                     ??afBuildMSGIncoming_0:
   \   000201   7403         MOV       A,#0x3
   \   000203                REQUIRE ?Subroutine3
   \   000203                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine55_0
   \   000006                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function afFindEndPointDescList
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine56_0
   \   000003                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine57_0
   \   000001                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003   EE           MOV       A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   22           RET
    603          
    604          /*********************************************************************
    605           * @fn      AF_DataRequest
    606           *
    607           * @brief   Common functionality for invoking APSDE_DataReq() for both
    608           *          SendMulti and MSG-Send.
    609           *
    610           * input parameters
    611           *
    612           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    613           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    614           * @param   cID - A valid cluster ID as specified by the Profile.
    615           * @param   len - Number of bytes of data pointed to by next param.
    616           * @param  *buf - A pointer to the data bytes to send.
    617           * @param  *transID - A pointer to a byte which can be modified and which will
    618           *                    be used as the transaction sequence number of the msg.
    619           * @param   options - Valid bit mask of Tx options.
    620           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    621           *
    622           * output parameters
    623           *
    624           * @param  *transID - Incremented by one if the return value is success.
    625           *
    626           * @return  afStatus_t - See previous definition of afStatus_... types.
    627           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    628          uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    629          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    630                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    631                                     uint8 options, uint8 radius )
    632          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV       A,#-0x21
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   \   000012   89..         MOV       ?V2,R1
    633            pDescCB pfnDescCB;
    634            ZStatus_t stat;
    635            APSDE_DataReq_t req;
    636            afDataReqMTU_t mtu;
    637            epList_t *pList;
    638          
    639            // Verify source end point
    640            if ( srcEP == NULL )
   \   000014   EC           MOV       A,R4
   \   000015   45..         ORL       A,?V1
   \   000017   7003         JNZ       $+5
   \   000019   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    641            {
    642              return afStatus_INVALID_PARAMETER;
    643            }
    644          
    645          #if !defined( REFLECTOR )
    646            if ( dstAddr->addrMode == afAddrNotPresent )
    647            {
    648              return afStatus_INVALID_PARAMETER;
    649            }
    650          #endif
    651            
    652            // copy the addressing mode, to get the length of the packet
    653            mtu.aps.addressingMode = dstAddr->addrMode; 
   \   00001C   EA           MOV       A,R2
   \   00001D   2408         ADD       A,#0x8
   \   00001F   FE           MOV       R6,A
   \   000020   E4           CLR       A
   \   000021   35..         ADDC      A,?V7
   \   000023   FF           MOV       R7,A
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   E0           MOVX      A,@DPTR
   \   000029   C0E0         PUSH      A
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   D0E0         POP       A
   \   000032   F0           MOVX      @DPTR,A
    654          
    655            // Check if route is available before sending data
    656            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   000033   E9           MOV       A,R1
   \   000034   A2E3         MOV       C,0xE0 /* A   */.3
   \   000036   5035         JNC       ??AF_DataRequest_1
    657            {
    658              if ( dstAddr->addrMode != afAddr16Bit )
   \   000038   8E82         MOV       DPL,R6
   \   00003A   8F83         MOV       DPH,R7
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   6402         XRL       A,#0x2
   \   00003F   6003         JZ        $+5
   \   000041   02....       LJMP      ??AF_DataRequest_0 & 0xFFFF
    659              {
    660                return ( afStatus_INVALID_PARAMETER );
    661              }
    662          
    663              // First, make sure the destination is not its self, then check for an existing route.
    664              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    665                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   000044                ; Setup parameters for call to function NLME_GetShortAddr
   \   000044   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000047   8A..         MOV       ?V4,R2
   \   000049   8B..         MOV       ?V5,R3
   \   00004B   85..82       MOV       DPL,?V6
   \   00004E   85..83       MOV       DPH,?V7
   \   000051   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000054   E5..         MOV       A,?V4
   \   000056   6A           XRL       A,R2
   \   000057   7003         JNZ       ??AF_DataRequest_2
   \   000059   E5..         MOV       A,?V5
   \   00005B   6B           XRL       A,R3
   \                     ??AF_DataRequest_2:
   \   00005C   600F         JZ        ??AF_DataRequest_1
   \   00005E                ; Setup parameters for call to function RTG_CheckRtStatus
   \   00005E   7C03         MOV       R4,#0x3
   \   000060   7901         MOV       R1,#0x1
   \   000062   12....       LCALL     `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   000065   E9           MOV       A,R1
   \   000066   6005         JZ        ??AF_DataRequest_1
    666              {
    667                // A valid route to a concentrator wasn't found
    668                return ( afStatus_NO_ROUTE );
   \   000068   79CD         MOV       R1,#-0x33
   \   00006A   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    669              }
    670            }
    671          
    672            // Validate broadcasting
    673            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    674                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F8           MOV       R0,A
   \   000073   7402         MOV       A,#0x2
   \   000075   68           XRL       A,R0
   \   000076   6005         JZ        ??AF_DataRequest_4
   \   000078   740F         MOV       A,#0xf
   \   00007A   68           XRL       A,R0
   \   00007B   703F         JNZ       ??AF_DataRequest_5
    675            {
    676              // Check for valid broadcast values
    677              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   00007D                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00007D   85..82       MOV       DPL,?V6
   \   000080   85..83       MOV       DPH,?V7
   \   000083   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000086   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000089   E9           MOV       A,R1
   \   00008A   8E82         MOV       DPL,R6
   \   00008C   8F83         MOV       DPH,R7
   \   00008E   6025         JZ        ??AF_DataRequest_6
    678              {
    679                // Force mode to broadcast
    680                dstAddr->addrMode = afAddrBroadcast;
   \   000090   740F         MOV       A,#0xf
   \   000092   F0           MOVX      @DPTR,A
    681              }
    682              else
    683              {
    684                // Address is not a valid broadcast type
    685                if ( dstAddr->addrMode == afAddrBroadcast )
    686                {
    687                  return afStatus_INVALID_PARAMETER;
    688                }
    689              }
    690            }
    691            else if ( dstAddr->addrMode != afAddr64Bit &&
    692                      dstAddr->addrMode != afAddrGroup &&
    693                      dstAddr->addrMode != afAddrNotPresent )
    694            {
    695              return afStatus_INVALID_PARAMETER;
    696            }
    697          
    698            // Set destination address
    699            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   000093   E0           MOVX      A,@DPTR
   \   000094   C0E0         PUSH      A
   \   000096   740B         MOV       A,#0xb
   \   000098   12....       LCALL     ?XSTACK_DISP0_8
   \   00009B   D0E0         POP       A
   \   00009D   F0           MOVX      @DPTR,A
    700            if ( dstAddr->addrMode == afAddr64Bit )
   \   00009E   8E82         MOV       DPL,R6
   \   0000A0   8F83         MOV       DPH,R7
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   6403         XRL       A,#0x3
   \   0000A5   7027         JNZ       ??AF_DataRequest_8
    701            {
    702              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   0000A7                ; Setup parameters for call to function sAddrExtCpy
   \   0000A7   AC..         MOV       R4,?V6
   \   0000A9   AD..         MOV       R5,?V7
   \   0000AB   7403         MOV       A,#0x3
   \   0000AD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B0   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000B3   802A         SJMP      ??CrossCallReturnLabel_111
    703            }
   \                     ??AF_DataRequest_6:
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   640F         XRL       A,#0xf
   \   0000B8   70D9         JNZ       ??AF_DataRequest_7
   \   0000BA   800D         SJMP      ??AF_DataRequest_0
   \                     ??AF_DataRequest_5:
   \   0000BC   7403         MOV       A,#0x3
   \   0000BE   68           XRL       A,R0
   \   0000BF   60D2         JZ        ??AF_DataRequest_7
   \   0000C1   7401         MOV       A,#0x1
   \   0000C3   68           XRL       A,R0
   \   0000C4   60CD         JZ        ??AF_DataRequest_7
   \   0000C6   E8           MOV       A,R0
   \   0000C7   60CA         JZ        ??AF_DataRequest_7
   \                     ??AF_DataRequest_0:
   \   0000C9   7902         MOV       R1,#0x2
   \   0000CB   02....       LJMP      ??AF_DataRequest_3 & 0xFFFF
    704            else
    705            {
    706              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   0000CE   85..82       MOV       DPL,?V6
   \   0000D1   85..83       MOV       DPH,?V7
   \   0000D4   12....       LCALL     ??Subroutine57_0 & 0xFFFF
    707            }
   \                     ??CrossCallReturnLabel_120:
   \   0000D7   7403         MOV       A,#0x3
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   12....       LCALL     ??Subroutine55_0 & 0xFFFF
    708          
    709            // This option is to use Wildcard ProfileID in outgoing packets
    710            if ( options & AF_WILDCARD_PROFILEID )
   \                     ??CrossCallReturnLabel_111:
   \   0000DF   E5..         MOV       A,?V2
   \   0000E1   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000E3   7412         MOV       A,#0x12
   \   0000E5   5009         JNC       ??AF_DataRequest_9
    711            {
    712              req.profileID = ZDO_WILDCARD_PROFILE_ID;
   \   0000E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EA   74FF         MOV       A,#-0x1
   \   0000EC   F0           MOVX      @DPTR,A
   \   0000ED   A3           INC       DPTR
   \   0000EE   806C         SJMP      ??AF_DataRequest_10
    713            }
    714            else
    715            {
    716              req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_9:
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   E4           CLR       A
   \   0000F4   F0           MOVX      @DPTR,A
   \   0000F5   A3           INC       DPTR
   \   0000F6   F0           MOVX      @DPTR,A
    717          
    718              if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   0000F7   90....       MOV       DPTR,#epList
   \                     ??AF_DataRequest_11:
   \   0000FA   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000FD   6046         JZ        ??AF_DataRequest_12
   \   0000FF   8882         MOV       DPL,R0
   \   000101   8983         MOV       DPH,R1
   \   000103   A3           INC       DPTR
   \   000104   A3           INC       DPTR
   \   000105   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000108   E5..         MOV       A,?V0
   \   00010A   6A           XRL       A,R2
   \   00010B   7003         JNZ       ??AF_DataRequest_13
   \   00010D   E5..         MOV       A,?V1
   \   00010F   6B           XRL       A,R3
   \                     ??AF_DataRequest_13:
   \   000110   8882         MOV       DPL,R0
   \   000112   8983         MOV       DPH,R1
   \   000114   70E4         JNZ       ??AF_DataRequest_11
   \   000116   12....       LCALL     ?Subroutine23 & 0xFFFF
    719              {
    720                uint16 *pID = (uint16 *)(pfnDescCB(
    721                                             AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
    722                if ( pID )
    723                {
    724                  req.profileID = *pID;
    725                  osal_mem_free( pID );
    726                }
    727              }
    728              else if ( srcEP->simpleDesc )
    729              {
    730                req.profileID = srcEP->simpleDesc->AppProfId;
    731              }
    732            }
   \                     ??CrossCallReturnLabel_126:
   \   000119   E8           MOV       A,R0
   \   00011A   FC           MOV       R4,A
   \   00011B   E9           MOV       A,R1
   \   00011C   FD           MOV       R5,A
   \   00011D   EC           MOV       A,R4
   \   00011E   4D           ORL       A,R5
   \   00011F   6024         JZ        ??AF_DataRequest_12
   \   000121                ; Setup parameters for indirect call
   \   000121   85..82       MOV       DPL,?V0
   \   000124   85..83       MOV       DPH,?V1
   \   000127   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00012A   12....       LCALL     ?CALL_IND
   \   00012D   EA           MOV       A,R2
   \   00012E   4B           ORL       A,R3
   \   00012F   602C         JZ        ??AF_DataRequest_14
   \   000131   8A82         MOV       DPL,R2
   \   000133   8B83         MOV       DPH,R3
   \   000135   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000138   7412         MOV       A,#0x12
   \   00013A   12....       LCALL     ?XSTACK_DISP0_8
   \   00013D   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000140                ; Setup parameters for call to function osal_mem_free
   \   000140   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000143   8018         SJMP      ??AF_DataRequest_14
   \                     ??AF_DataRequest_12:
   \   000145   85..82       MOV       DPL,?V0
   \   000148   85..83       MOV       DPH,?V1
   \   00014B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00014E   600D         JZ        ??AF_DataRequest_14
   \   000150   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000153   7412         MOV       A,#0x12
   \   000155   12....       LCALL     ?XSTACK_DISP0_8
   \   000158   E8           MOV       A,R0
   \   000159   F0           MOVX      @DPTR,A
   \   00015A   A3           INC       DPTR
   \   00015B   E9           MOV       A,R1
   \                     ??AF_DataRequest_10:
   \   00015C   F0           MOVX      @DPTR,A
    733          
    734            req.txOptions = 0;
   \                     ??AF_DataRequest_14:
   \   00015D   7418         MOV       A,#0x18
   \   00015F   12....       LCALL     ?XSTACK_DISP0_8
   \   000162   E4           CLR       A
   \   000163   F0           MOVX      @DPTR,A
   \   000164   A3           INC       DPTR
   \   000165   F0           MOVX      @DPTR,A
    735          
    736            if ( ( options & AF_ACK_REQUEST              ) &&
    737                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    738                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   000166   E5..         MOV       A,?V2
   \   000168   A2E4         MOV       C,0xE0 /* A   */.4
   \   00016A   501C         JNC       ??AF_DataRequest_15
   \   00016C   740B         MOV       A,#0xb
   \   00016E   12....       LCALL     ?XSTACK_DISP0_8
   \   000171   E0           MOVX      A,@DPTR
   \   000172   F8           MOV       R0,A
   \   000173   740F         MOV       A,#0xf
   \   000175   68           XRL       A,R0
   \   000176   6010         JZ        ??AF_DataRequest_15
   \   000178   7401         MOV       A,#0x1
   \   00017A   68           XRL       A,R0
   \   00017B   600B         JZ        ??AF_DataRequest_15
    739            {
    740              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   00017D   7418         MOV       A,#0x18
   \   00017F   12....       LCALL     ?XSTACK_DISP0_8
   \   000182   7404         MOV       A,#0x4
   \   000184   F0           MOVX      @DPTR,A
   \   000185   A3           INC       DPTR
   \   000186   E4           CLR       A
   \   000187   F0           MOVX      @DPTR,A
    741            }
    742          
    743            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_15:
   \   000188   E5..         MOV       A,?V2
   \   00018A   A2E7         MOV       C,0xE0 /* A   */.7
   \   00018C   5009         JNC       ??AF_DataRequest_16
    744            {
    745              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   00018E   7418         MOV       A,#0x18
   \   000190   12....       LCALL     ?XSTACK_DISP0_8
   \   000193   E0           MOVX      A,@DPTR
   \   000194   4410         ORL       A,#0x10
   \   000196   F0           MOVX      @DPTR,A
    746            }
    747          
    748            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_16:
   \   000197   E5..         MOV       A,?V2
   \   000199   A2E6         MOV       C,0xE0 /* A   */.6
   \   00019B   5012         JNC       ??AF_DataRequest_17
    749            {
    750              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   00019D   7418         MOV       A,#0x18
   \   00019F   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A2   E0           MOVX      A,@DPTR
   \   0001A3   4401         ORL       A,#0x1
   \   0001A5   F0           MOVX      @DPTR,A
    751              mtu.aps.secure = TRUE;
   \   0001A6   7401         MOV       A,#0x1
   \   0001A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AB   7401         MOV       A,#0x1
   \   0001AD   8006         SJMP      ??AF_DataRequest_18
    752            }
    753            else
    754            {
    755              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_17:
   \   0001AF   7401         MOV       A,#0x1
   \   0001B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B4   E4           CLR       A
   \                     ??AF_DataRequest_18:
   \   0001B5   F0           MOVX      @DPTR,A
    756            }
    757          
    758            if ( options & AF_PREPROCESS )
   \   0001B6   E5..         MOV       A,?V2
   \   0001B8   A2E2         MOV       C,0xE0 /* A   */.2
   \   0001BA   5009         JNC       ??AF_DataRequest_19
    759            {
    760              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   0001BC   7418         MOV       A,#0x18
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   E0           MOVX      A,@DPTR
   \   0001C2   4440         ORL       A,#0x40
   \   0001C4   F0           MOVX      @DPTR,A
    761            }
    762          
    763            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_19:
   \   0001C5   85..82       MOV       DPL,?XSP + 0
   \   0001C8   85..83       MOV       DPH,?XSP + 1
   \   0001CB   E4           CLR       A
   \   0001CC   F0           MOVX      @DPTR,A
    764          
    765            if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
   \   0001CD   E5..         MOV       A,?V2
   \   0001CF   A2E5         MOV       C,0xE0 /* A   */.5
   \   0001D1   5009         JNC       ??AF_DataRequest_20
    766            {
    767              req.discoverRoute = DISC_ROUTE_INITIATE;
   \   0001D3   741B         MOV       A,#0x1b
   \   0001D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D8   7404         MOV       A,#0x4
   \   0001DA   800D         SJMP      ??AF_DataRequest_21
    768            }
    769            else
    770            {
    771              req.discoverRoute = AF_DataRequestDiscoverRoute;
   \                     ??AF_DataRequest_20:
   \   0001DC   90....       MOV       DPTR,#AF_DataRequestDiscoverRoute
   \   0001DF   E0           MOVX      A,@DPTR
   \   0001E0   C0E0         PUSH      A
   \   0001E2   741B         MOV       A,#0x1b
   \   0001E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E7   D0E0         POP       A
   \                     ??AF_DataRequest_21:
   \   0001E9   F0           MOVX      @DPTR,A
    772            }
    773          
    774            req.transID       = *transID;
   \   0001EA   7437         MOV       A,#0x37
   \   0001EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EF   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001F2   C0E0         PUSH      A
   \   0001F4   741A         MOV       A,#0x1a
   \   0001F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F9   D0E0         POP       A
   \   0001FB   12....       LCALL     ?Subroutine36 & 0xFFFF
    775            req.srcEP         = srcEP->endPoint;
   \                     ??CrossCallReturnLabel_66:
   \   0001FE   C0E0         PUSH      A
   \   000200   740C         MOV       A,#0xc
   \   000202   12....       LCALL     ?XSTACK_DISP0_8
   \   000205   D0E0         POP       A
   \   000207   F0           MOVX      @DPTR,A
    776            req.dstEP         = dstAddr->endPoint;
   \   000208   85..82       MOV       DPL,?V6
   \   00020B   85..83       MOV       DPH,?V7
   \   00020E   A3           INC       DPTR
   \   00020F   A3           INC       DPTR
   \   000210   A3           INC       DPTR
   \   000211   A3           INC       DPTR
   \   000212   A3           INC       DPTR
   \   000213   A3           INC       DPTR
   \   000214   A3           INC       DPTR
   \   000215   A3           INC       DPTR
   \   000216   A3           INC       DPTR
   \   000217   E0           MOVX      A,@DPTR
   \   000218   C0E0         PUSH      A
   \   00021A   740D         MOV       A,#0xd
   \   00021C   12....       LCALL     ?XSTACK_DISP0_8
   \   00021F   D0E0         POP       A
   \   000221   F0           MOVX      @DPTR,A
    777            req.clusterID     = cID;
   \   000222   7431         MOV       A,#0x31
   \   000224   12....       LCALL     ?XSTACK_DISP0_8
   \   000227   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00022A   7410         MOV       A,#0x10
   \   00022C   12....       LCALL     ?XSTACK_DISP0_8
   \   00022F   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000232   7433         MOV       A,#0x33
   \   000234   12....       LCALL     ?XSTACK_DISP0_8
   \   000237   E0           MOVX      A,@DPTR
   \   000238   FE           MOV       R6,A
   \   000239   A3           INC       DPTR
   \   00023A   E0           MOVX      A,@DPTR
   \   00023B   FF           MOV       R7,A
    778            req.asduLen       = len;
   \   00023C   7414         MOV       A,#0x14
   \   00023E   12....       LCALL     ?XSTACK_DISP0_8
   \   000241   EE           MOV       A,R6
   \   000242   F0           MOVX      @DPTR,A
   \   000243   A3           INC       DPTR
   \   000244   EF           MOV       A,R7
   \   000245   F0           MOVX      @DPTR,A
    779            req.asdu          = buf;
   \   000246   7435         MOV       A,#0x35
   \   000248   12....       LCALL     ?XSTACK_DISP0_8
   \   00024B   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00024E   7416         MOV       A,#0x16
   \   000250   12....       LCALL     ?XSTACK_DISP0_8
   \   000253   12....       LCALL     ??Subroutine55_0 & 0xFFFF
    780            req.radiusCounter = radius;
   \                     ??CrossCallReturnLabel_114:
   \   000256   7439         MOV       A,#0x39
   \   000258   12....       LCALL     ?XSTACK_DISP0_8
   \   00025B   E0           MOVX      A,@DPTR
   \   00025C   C0E0         PUSH      A
   \   00025E   741C         MOV       A,#0x1c
   \   000260   12....       LCALL     ?XSTACK_DISP0_8
   \   000263   D0E0         POP       A
   \   000265   12....       LCALL     ?Subroutine36 & 0xFFFF
    781          #if defined ( INTER_PAN )
    782            req.dstPanId      = dstAddr->panId;
    783          #endif // INTER_PAN
    784          
    785            // Look if there is a Callback function registered for this endpoint
    786            // The callback is used to control the AF Transaction ID used when sending messages
    787            pList = afFindEndPointDescList( srcEP->endPoint );
   \                     ??CrossCallReturnLabel_67:
   \   000268   F9           MOV       R1,A
   \   000269   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00026C   8A82         MOV       DPL,R2
   \   00026E   8B83         MOV       DPH,R3
    788          
    789            if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
   \   000270   E582         MOV       A,DPL
   \   000272   4583         ORL       A,DPH
   \   000274   6012         JZ        ??AF_DataRequest_22
   \   000276   A3           INC       DPTR
   \   000277   A3           INC       DPTR
   \   000278   A3           INC       DPTR
   \   000279   A3           INC       DPTR
   \   00027A   A3           INC       DPTR
   \   00027B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00027E   6008         JZ        ??AF_DataRequest_22
    790            {
    791              pList->pfnApplCB( &req );
   \   000280                ; Setup parameters for indirect call
   \   000280   7403         MOV       A,#0x3
   \   000282   12....       LCALL     ?XSTACK_DISP101_8
   \   000285   12....       LCALL     ?CALL_IND
    792            }
    793          
    794          #if defined ( INTER_PAN )
    795            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    796            {
    797              if ( len > INTERP_DataReqMTU() )
    798              {
    799                stat = afStatus_INVALID_PARAMETER;
    800              }
    801              else
    802              {
    803                stat = INTERP_DataReq( &req );
    804              }
    805            }
    806            else
    807          #endif // INTER_PAN
    808            {
    809              if (len > afDataReqMTU( &mtu ) )
   \                     ??AF_DataRequest_22:
   \   000288                ; Setup parameters for call to function afDataReqMTU
   \   000288   AA..         MOV       R2,?XSP + 0
   \   00028A   AB..         MOV       R3,?XSP + 1
   \   00028C   12....       LCALL     `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   00028F   E9           MOV       A,R1
   \   000290   C3           CLR       C
   \   000291   9E           SUBB      A,R6
   \   000292   E4           CLR       A
   \   000293   9F           SUBB      A,R7
   \   000294   5019         JNC       ??AF_DataRequest_23
    810              {
    811                if (apsfSendFragmented)
   \   000296   90....       MOV       DPTR,#apsfSendFragmented
   \   000299   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00029C   600D         JZ        ??AF_DataRequest_24
    812                {
    813                  stat = (*apsfSendFragmented)( &req );
   \   00029E                ; Setup parameters for indirect call
   \   00029E   7403         MOV       A,#0x3
   \   0002A0   12....       LCALL     ?XSTACK_DISP101_8
   \   0002A3   12....       LCALL     ??Subroutine52_0 & 0xFFFF
    814                }
   \                     ??CrossCallReturnLabel_95:
   \   0002A6   12....       LCALL     ?CALL_IND
   \   0002A9   800C         SJMP      ??AF_DataRequest_25
    815                else
    816                {
    817                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_24:
   \   0002AB   7E02         MOV       R6,#0x2
   \   0002AD   800A         SJMP      ??AF_DataRequest_26
    818                }
    819              }
    820              else
    821              {
    822                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_23:
   \   0002AF                ; Setup parameters for call to function APSDE_DataReq
   \   0002AF   7403         MOV       A,#0x3
   \   0002B1   12....       LCALL     ?XSTACK_DISP101_8
   \   0002B4   12....       LCALL     `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_25:
   \   0002B7   E9           MOV       A,R1
   \   0002B8   FE           MOV       R6,A
    823              }
    824            }
    825          
    826            /*
    827             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    828             * get added to the NWK databufs. So it will not go OTA and it will not get
    829             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    830             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    831             * message with the first in line TransSeqNumber, even on a multi message.
    832             * Also note that a reflected msg will not have its confirmation generated
    833             * here.
    834             */
    835            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    836                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_26:
   \   0002B9   740B         MOV       A,#0xb
   \   0002BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BE   E0           MOVX      A,@DPTR
   \   0002BF   6402         XRL       A,#0x2
   \   0002C1   702F         JNZ       ??AF_DataRequest_27
   \   0002C3                ; Setup parameters for call to function NLME_GetShortAddr
   \   0002C3   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0002C6   8A..         MOV       ?V4,R2
   \   0002C8   8B..         MOV       ?V5,R3
   \   0002CA   A8..         MOV       R0,?V4
   \   0002CC   A9..         MOV       R1,?V5
   \   0002CE   7403         MOV       A,#0x3
   \   0002D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D3   E0           MOVX      A,@DPTR
   \   0002D4   68           XRL       A,R0
   \   0002D5   7003         JNZ       ??AF_DataRequest_28
   \   0002D7   A3           INC       DPTR
   \   0002D8   E0           MOVX      A,@DPTR
   \   0002D9   69           XRL       A,R1
   \                     ??AF_DataRequest_28:
   \   0002DA   7016         JNZ       ??AF_DataRequest_27
    837            {
    838              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   0002DC                ; Setup parameters for call to function afDataConfirm
   \   0002DC   EE           MOV       A,R6
   \   0002DD   FB           MOV       R3,A
   \   0002DE   7437         MOV       A,#0x37
   \   0002E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E3   12....       LCALL     ?Subroutine18 & 0xFFFF
    839            }
   \                     ??CrossCallReturnLabel_29:
   \   0002E6   FA           MOV       R2,A
   \   0002E7   85..82       MOV       DPL,?V0
   \   0002EA   85..83       MOV       DPH,?V1
   \   0002ED   E0           MOVX      A,@DPTR
   \   0002EE   F9           MOV       R1,A
   \   0002EF   12....       LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    840          
    841            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_27:
   \   0002F2   EE           MOV       A,R6
   \   0002F3   700A         JNZ       ??AF_DataRequest_29
    842            {
    843              (*transID)++;
   \   0002F5   7437         MOV       A,#0x37
   \   0002F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002FA   12....       LCALL     ?Subroutine18 & 0xFFFF
    844            }
   \                     ??CrossCallReturnLabel_30:
   \   0002FD   04           INC       A
   \   0002FE   F0           MOVX      @DPTR,A
    845          
    846            return (afStatus_t)stat;
   \                     ??AF_DataRequest_29:
   \   0002FF   EE           MOV       A,R6
   \   000300   F9           MOV       R1,A
   \                     ??AF_DataRequest_3:
   \   000301   7421         MOV       A,#0x21
   \   000303   02....       LJMP      ?Subroutine3 & 0xFFFF
    847          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000007   E582         MOV       A,DPL
   \   000009   4583         ORL       A,DPH
   \   00000B   22           RET
    848          
    849          #if defined ( ZIGBEEPRO )
    850          /*********************************************************************
    851           * @fn      AF_DataRequestSrcRtg
    852           *
    853           * @brief   Common functionality for invoking APSDE_DataReq() for both
    854           *          SendMulti and MSG-Send.
    855           *
    856           * input parameters
    857           *
    858           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    859           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    860           * @param   cID - A valid cluster ID as specified by the Profile.
    861           * @param   len - Number of bytes of data pointed to by next param.
    862           * @param  *buf - A pointer to the data bytes to send.
    863           * @param  *transID - A pointer to a byte which can be modified and which will
    864           *                    be used as the transaction sequence number of the msg.
    865           * @param   options - Valid bit mask of Tx options.
    866           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    867           * @param   relayCnt - Number of devices in the relay list
    868           * @param   pRelayList - Pointer to the relay list
    869           *
    870           * output parameters
    871           *
    872           * @param  *transID - Incremented by one if the return value is success.
    873           *
    874           * @return  afStatus_t - See previous definition of afStatus_... types.
    875           */
    876          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    877          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    878                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    879                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    880          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   \   00000D   89..         MOV       ?V0,R1
    881            uint8 status;
    882          
    883            /* Add the source route to the source routing table */
    884            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    885                                                   pRelayList );
   \   00000F                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00000F   7416         MOV       A,#0x16
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000017   7415         MOV       A,#0x15
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00001F   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000022   12....       LCALL     `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   000025   E9           MOV       A,R1
   \   000026   F9           MOV       R1,A
    886          
    887            if( status == RTG_SUCCESS)
   \   000027   7043         JNZ       ??AF_DataRequestSrcRtg_0
    888            {
    889              /* Call AF_DataRequest to send the data */
    890              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   7414         MOV       A,#0x14
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V1,A
   \   000031   78..         MOV       R0,#?V1
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000036   7413         MOV       A,#0x13
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003E   7413         MOV       A,#0x13
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000046   7413         MOV       A,#0x13
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00004E   7413         MOV       A,#0x13
   \   000050   12....       LCALL     ?XSTACK_DISP0_8
   \   000053   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000056   A9..         MOV       R1,?V0
   \   000058   AC..         MOV       R4,?V2
   \   00005A   AD..         MOV       R5,?V3
   \   00005C   EE           MOV       A,R6
   \   00005D   FA           MOV       R2,A
   \   00005E   EF           MOV       A,R7
   \   00005F   FB           MOV       R3,A
   \   000060   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000063   7409         MOV       A,#0x9
   \   000065   12....       LCALL     ?DEALLOC_XSTACK8
   \   000068   E9           MOV       A,R1
   \   000069   F9           MOV       R1,A
   \   00006A   800B         SJMP      ??AF_DataRequestSrcRtg_1
    891            }
    892            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   00006C   7405         MOV       A,#0x5
   \   00006E   69           XRL       A,R1
   \   00006F   7004         JNZ       ??AF_DataRequestSrcRtg_2
    893            {
    894              /* The source route relay count is exceeding the network limit */
    895              status = afStatus_INVALID_PARAMETER;
   \   000071   7902         MOV       R1,#0x2
   \   000073   8002         SJMP      ??AF_DataRequestSrcRtg_1
    896            }
    897            else
    898            {
    899              /* The guaranteed adding entry fails due to memory failure */
    900              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   000075   7910         MOV       R1,#0x10
    901            }
    902            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   000077   02....       LJMP      ?Subroutine5 & 0xFFFF
    903          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    904          
    905          #endif // ZIGBEEPRO
    906          
    907          /*********************************************************************
    908           * @fn      afFindEndPointDescList
    909           *
    910           * @brief   Find the endpoint description entry from the endpoint
    911           *          number.
    912           *
    913           * @param   EndPoint - Application Endpoint to look for
    914           *
    915           * @return  the address to the endpoint/interface description entry
    916           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    917          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    918          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    919            epList_t *epSearch;
    920          
    921            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV       DPTR,#epList
   \   000007   8004         SJMP      ??afFindEndPointDescList_0
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??afFindEndPointDescList_0:
   \   00000D   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   600C         JZ        ??afFindEndPointDescList_2
    922            {
    923              if (epSearch->epDesc->endPoint == EndPoint)
   \   000014   8A82         MOV       DPL,R2
   \   000016   8B83         MOV       DPH,R3
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   12....       LCALL     ?Subroutine18 & 0xFFFF
    924              {
    925                break;
    926              }
    927            }
   \                     ??CrossCallReturnLabel_31:
   \   00001D   69           XRL       A,R1
   \   00001E   70E9         JNZ       ??afFindEndPointDescList_1
    928          
    929            return epSearch;
   \                     ??afFindEndPointDescList_2:
   \   000020                REQUIRE ?Subroutine6
   \   000020                ; // Fall through to label ?Subroutine6
    930          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    931          
    932          /*********************************************************************
    933           * @fn      afFindEndPointDesc
    934           *
    935           * @brief   Find the endpoint description entry from the endpoint
    936           *          number.
    937           *
    938           * @param   EndPoint - Application Endpoint to look for
    939           *
    940           * @return  the address to the endpoint/interface description entry
    941           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    942          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    943          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    944            epList_t *epSearch;
    945          
    946            // Look for the endpoint
    947            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
    948          
    949            if ( epSearch )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6007         JZ        ??afFindEndPointDesc_0
    950              return ( epSearch->epDesc );
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000017   8004         SJMP      ??afFindEndPointDesc_1
    951            else
    952              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000019   7A00         MOV       R2,#0x0
   \   00001B   7B00         MOV       R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   00001D   02....       LJMP      ?Subroutine1 & 0xFFFF
    953          }
    954          
    955          /*********************************************************************
    956           * @fn      afFindSimpleDesc
    957           *
    958           * @brief   Find the Simple Descriptor from the endpoint number.
    959           *
    960           * @param   EP - Application Endpoint to look for.
    961           *
    962           * @return  Non-zero to indicate that the descriptor memory must be freed.
    963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    964          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    965          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   89..         MOV       ?V0,R1
    966            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV       ?V2,R2
   \   000010   8B..         MOV       ?V3,R3
   \   000012   AC..         MOV       R4,?V2
   \   000014   AD..         MOV       R5,?V3
    967            uint8 rtrn = FALSE;
   \   000016   7A00         MOV       R2,#0x0
    968          
    969            if ( epItem )
   \   000018   EC           MOV       A,R4
   \   000019   4D           ORL       A,R5
   \   00001A   6030         JZ        ??afFindSimpleDesc_0
    970            {
    971              if ( epItem->pfnDescCB )
   \   00001C   8C82         MOV       DPL,R4
   \   00001E   8D83         MOV       DPH,R5
   \   000020   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000023   6014         JZ        ??afFindSimpleDesc_1
    972              {
    973                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000025                ; Setup parameters for indirect call
   \   000025   AA..         MOV       R2,?V0
   \   000027   7901         MOV       R1,#0x1
   \   000029   12....       LCALL     ?CALL_IND
   \   00002C   8E82         MOV       DPL,R6
   \   00002E   8F83         MOV       DPH,R7
   \   000030   EA           MOV       A,R2
   \   000031   F0           MOVX      @DPTR,A
   \   000032   A3           INC       DPTR
   \   000033   EB           MOV       A,R3
   \   000034   F0           MOVX      @DPTR,A
    974                rtrn = TRUE;
   \   000035   7A01         MOV       R2,#0x1
   \   000037   801B         SJMP      ??afFindSimpleDesc_2
    975              }
    976              else
    977              {
    978                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000039   8C82         MOV       DPL,R4
   \   00003B   8D83         MOV       DPH,R5
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   12....       LCALL     ?Subroutine13 & 0xFFFF
    979              }
    980            }
   \                     ??CrossCallReturnLabel_14:
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   E8           MOV       A,R0
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   E9           MOV       A,R1
   \   00004A   8007         SJMP      ??afFindSimpleDesc_3
    981            else
    982            {
    983              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   00004C   8E82         MOV       DPL,R6
   \   00004E   8F83         MOV       DPH,R7
   \   000050   E4           CLR       A
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \                     ??afFindSimpleDesc_3:
   \   000053   F0           MOVX      @DPTR,A
    984            }
    985          
    986            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   000054   EA           MOV       A,R2
   \   000055   F9           MOV       R1,A
   \   000056   02....       LJMP      ?Subroutine5 & 0xFFFF
    987          }
    988          
    989          /*********************************************************************
    990           * @fn      afGetDescCB
    991           *
    992           * @brief   Get the Descriptor callback function.
    993           *
    994           * @param   epDesc - pointer to the endpoint descriptor
    995           *
    996           * @return  function pointer or NULL
    997           */
    998          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    999          {
   1000            epList_t *epSearch;
   1001          
   1002            // Start at the beginning
   1003            epSearch = epList;
   1004          
   1005            // Look through the list until the end
   1006            while ( epSearch )
   1007            {
   1008              // Is there a match?
   1009              if ( epSearch->epDesc == epDesc )
   1010              {
   1011                return ( epSearch->pfnDescCB );
   1012              }
   1013              else
   1014                epSearch = epSearch->nextDesc;  // Next entry
   1015            }
   1016          
   1017            return ( (pDescCB)NULL );
   1018          }
   1019          
   1020          /*********************************************************************
   1021           * @fn      afDataReqMTU
   1022           *
   1023           * @brief   Get the Data Request MTU(Max Transport Unit).
   1024           *
   1025           * @param   fields - afDataReqMTU_t
   1026           *
   1027           * @return  uint8(MTU)
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
   1030          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1031            uint8 len;
   1032            uint8 hdr;
   1033          
   1034            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6401         XRL       A,#0x1
   \   00000C   7004         JNZ       ??afDataReqMTU_0
   1035            {
   1036              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV       R6,#0x8
   \   000010   8002         SJMP      ??afDataReqMTU_1
   1037            }
   1038            else
   1039            {
   1040              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV       R6,#0x0
   1041            }
   1042          
   1043            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   1044          
   1045            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC       DPTR
   \   000015   AA82         MOV       R2,DPL
   \   000017   AB83         MOV       R3,DPH
   \   000019   12....       LCALL     `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV       A,R1
   \   00001D   C3           CLR       C
   \   00001E   9E           SUBB      A,R6
   \   00001F   F9           MOV       R1,A
   \   000020   02....       LJMP      ?Subroutine2 & 0xFFFF
   1046          }
   1047          
   1048          /*********************************************************************
   1049           * @fn      afGetMatch
   1050           *
   1051           * @brief   Set the allow response flag.
   1052           *
   1053           * @param   ep - Application Endpoint to look for
   1054           * @param   action - true - allow response, false - no response
   1055           *
   1056           * @return  TRUE allow responses, FALSE no response
   1057           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1058          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
   1059          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1060            epList_t *epSearch;
   1061          
   1062            // Look for the endpoint
   1063            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   1064          
   1065            if ( epSearch )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6011         JZ        ??afGetMatch_0
   1066            {
   1067              if ( epSearch->flags & eEP_AllowMatch )
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00001D   5004         JNC       ??afGetMatch_0
   1068                return ( TRUE );
   \   00001F   7901         MOV       R1,#0x1
   \   000021   8002         SJMP      ??afGetMatch_1
   1069              else
   1070                return ( FALSE );
   1071            }
   1072            else
   1073              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000023   7900         MOV       R1,#0x0
   \                     ??afGetMatch_1:
   \   000025                REQUIRE ?Subroutine1
   \   000025                ; // Fall through to label ?Subroutine1
   1074          }
   1075          
   1076          /*********************************************************************
   1077           * @fn      afSetMatch
   1078           *
   1079           * @brief   Set the allow response flag.
   1080           *
   1081           * @param   ep - Application Endpoint to look for
   1082           * @param   action - true - allow response, false - no response
   1083           *
   1084           * @return  TRUE if success, FALSE if endpoint not found
   1085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1086          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
   1087          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FF           MOV       R7,A
   1088            epList_t *epSearch;
   1089          
   1090            // Look for the endpoint
   1091            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A8..         MOV       R0,?V0
   \   000010   A9..         MOV       R1,?V1
   1092          
   1093            if ( epSearch )
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   6019         JZ        ??afSetMatch_0
   1094            {
   1095              if ( action )
   \   000016   E8           MOV       A,R0
   \   000017   2408         ADD       A,#0x8
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   F583         MOV       DPH,A
   \   00001F   EF           MOV       A,R7
   \   000020   6005         JZ        ??afSetMatch_1
   1096              {
   1097                epSearch->flags |= eEP_AllowMatch;
   \   000022   E0           MOVX      A,@DPTR
   \   000023   D2E0         SETB      0xE0 /* A   */.0
   \   000025   8003         SJMP      ??afSetMatch_2
   1098              }
   1099              else
   1100              {
   1101                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C2E0         CLR       0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   00002A   F0           MOVX      @DPTR,A
   1102              }
   1103              return ( TRUE );
   \   00002B   7901         MOV       R1,#0x1
   \   00002D   8002         SJMP      ??afSetMatch_3
   1104            }
   1105            else
   1106              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00002F   7900         MOV       R1,#0x0
   \                     ??afSetMatch_3:
   \   000031   80..         SJMP      ?Subroutine1
   1107          }
   1108          
   1109          /*********************************************************************
   1110           * @fn      afNumEndPoints
   1111           *
   1112           * @brief   Returns the number of endpoints defined (including 0)
   1113           *
   1114           * @param   none
   1115           *
   1116           * @return  number of endpoints
   1117           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1118          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
   1119          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1120            epList_t *epSearch;
   1121            uint8 endpoints;
   1122          
   1123            // Start at the beginning
   1124            epSearch = epList;
   \   000004   90....       MOV       DPTR,#epList
   \   000007   12....       LCALL     ?Subroutine21 & 0xFFFF
   1125            endpoints = 0;
   \                     ??CrossCallReturnLabel_37:
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   8008         SJMP      ??afNumEndPoints_0
   1126          
   1127            while ( epSearch )
   1128            {
   1129              endpoints++;
   \                     ??afNumEndPoints_1:
   \   00000E   09           INC       R1
   1130              epSearch = epSearch->nextDesc;
   \   00000F   12....       LCALL     ??Subroutine61_0 & 0xFFFF
   1131            }
   \                     ??CrossCallReturnLabel_148:
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \                     ??afNumEndPoints_0:
   \   000016   E582         MOV       A,DPL
   \   000018   4583         ORL       A,DPH
   \   00001A   70F2         JNZ       ??afNumEndPoints_1
   1132          
   1133            return ( endpoints );
   \   00001C   02....       LJMP      ?Subroutine6 & 0xFFFF
   1134          }
   1135          
   1136          /*********************************************************************
   1137           * @fn      afEndPoints
   1138           *
   1139           * @brief   Fills in the passed in buffer with the endpoint (numbers).
   1140           *          Use afNumEndPoints to find out how big a buffer to supply.
   1141           *
   1142           * @param   epBuf - pointer to mem used
   1143           *
   1144           * @return  void
   1145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1146          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
   1147          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
   1148            epList_t *epSearch;
   1149            uint8 endPoint;
   1150          
   1151            // Start at the beginning
   1152            epSearch = epList;
   \   000006   90....       MOV       DPTR,#epList
   \   000009   8025         SJMP      ??afEndPoints_0
   1153          
   1154            while ( epSearch )
   1155            {
   1156              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   00000B   8882         MOV       DPL,R0
   \   00000D   8983         MOV       DPH,R1
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FD           MOV       R5,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F583         MOV       DPH,A
   \   000017   8D82         MOV       DPL,R5
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   FD           MOV       R5,A
   1157          
   1158              if ( !skipZDO || endPoint != 0 )
   \   00001B   EC           MOV       A,R4
   \   00001C   6003         JZ        ??afEndPoints_2
   \   00001E   ED           MOV       A,R5
   \   00001F   600B         JZ        ??afEndPoints_3
   1159                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000021   ED           MOV       A,R5
   \   000022   8A82         MOV       DPL,R2
   \   000024   8B83         MOV       DPH,R3
   \   000026   F0           MOVX      @DPTR,A
   \   000027   A3           INC       DPTR
   \   000028   AA82         MOV       R2,DPL
   \   00002A   AB83         MOV       R3,DPH
   1160          
   1161              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00002C   8882         MOV       DPL,R0
   \   00002E   8983         MOV       DPH,R1
   1162            }
   \                     ??afEndPoints_0:
   \   000030   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000033   70D6         JNZ       ??afEndPoints_1
   1163          }
   \   000035   02....       LJMP      ?Subroutine6 & 0xFFFF
   1164          
   1165          /*********************************************************************
   1166           * @fn      afCopyAddress
   1167           *
   1168           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1169           *          from the zAddrType_t parameter.
   1170           *
   1171           * @param   epBuf - pointer to mem used
   1172           *
   1173           * @return  void
   1174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1175          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1176          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1177            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV       A,R4
   \   00000A   2408         ADD       A,#0x8
   \   00000C   F8           MOV       R0,A
   \   00000D   E4           CLR       A
   \   00000E   3D           ADDC      A,R5
   \   00000F   F9           MOV       R1,A
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \   000014   E0           MOVX      A,@DPTR
   \   000015   8E82         MOV       DPL,R6
   \   000017   8F83         MOV       DPH,R7
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   F0           MOVX      @DPTR,A
   1178            if ( zAddr->addrMode == Addr64Bit )
   \   000022   8882         MOV       DPL,R0
   \   000024   8983         MOV       DPH,R1
   \   000026   E0           MOVX      A,@DPTR
   \   000027   6403         XRL       A,#0x3
   \   000029   7005         JNZ       ??afCopyAddress_0
   1179            {
   1180              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   00002B                ; Setup parameters for call to function sAddrExtCpy
   \   00002B   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00002E   8007         SJMP      ??CrossCallReturnLabel_19
   1181            }
   1182            else
   1183            {
   1184              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   000030   8C82         MOV       DPL,R4
   \   000032   8D83         MOV       DPH,R5
   \   000034   12....       LCALL     ?Subroutine15 & 0xFFFF
   1185            }
   1186          
   1187            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1188            afAddr->panId = 0;
   \                     ??CrossCallReturnLabel_19:
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   A3           INC       DPTR
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   E4           CLR       A
   \   000046   F0           MOVX      @DPTR,A
   \   000047   A3           INC       DPTR
   \   000048   F0           MOVX      @DPTR,A
   1189          }
   \   000049   02....       LJMP      ?Subroutine2 & 0xFFFF
   1190          
   1191          /**************************************************************************************************
   1192           * @fn          afAPSF_ConfigGet
   1193           *
   1194           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1195           *              the specified EndPoint.
   1196           *
   1197           * input parameters
   1198           *
   1199           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1200           *
   1201           * output parameters
   1202           *
   1203           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1204           *
   1205           * @return      None.
   1206           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1207          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1208          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1209            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV       ?V0,R2
   \   00000E   8B..         MOV       ?V1,R3
   \   000010   A8..         MOV       R0,?V0
   \   000012   A9..         MOV       R1,?V1
   1210          
   1211            if (pList == NULL)
   \   000014   E8           MOV       A,R0
   \   000015   49           ORL       A,R1
   \   000016   700D         JNZ       ??afAPSF_ConfigGet_0
   1212            {
   1213              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   7432         MOV       A,#0x32
   \   00001E   F0           MOVX      @DPTR,A
   1214              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   00001F   A3           INC       DPTR
   \   000020   7401         MOV       A,#0x1
   \   000022   F0           MOVX      @DPTR,A
   \   000023   8021         SJMP      ??afAPSF_ConfigGet_1
   1215            }
   1216            else
   1217            {
   1218              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   000025                ; Setup parameters for call to function osal_memcpy
   \   000025   E8           MOV       A,R0
   \   000026   2406         ADD       A,#0x6
   \   000028   F5..         MOV       ?V0,A
   \   00002A   E4           CLR       A
   \   00002B   39           ADDC      A,R1
   \   00002C   F5..         MOV       ?V1,A
   \   00002E   75..00       MOV       ?V2,#0x0
   \   000031   78..         MOV       R0,#?V0
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000036   7C02         MOV       R4,#0x2
   \   000038   7D00         MOV       R5,#0x0
   \   00003A   EE           MOV       A,R6
   \   00003B   FA           MOV       R2,A
   \   00003C   EF           MOV       A,R7
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000041   7403         MOV       A,#0x3
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   1219            }
   1220          }
   \                     ??afAPSF_ConfigGet_1:
   \   000046                REQUIRE ?Subroutine5
   \   000046                ; // Fall through to label ?Subroutine5
   1221          
   1222          /**************************************************************************************************
   1223           * @fn          afAPSF_ConfigSet
   1224           *
   1225           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1226           *              the specified EndPoint.
   1227           *
   1228           * input parameters
   1229           *
   1230           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1231           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1232           *
   1233           * output parameters
   1234           *
   1235           * None.
   1236           *
   1237           * @return      afStatus_SUCCESS for success.
   1238           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1239           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1240          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1241          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1242            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   1243          
   1244            if (pList == NULL)
   \   00000C   EA           MOV       A,R2
   \   00000D   4B           ORL       A,R3
   \   00000E   7004         JNZ       ??afAPSF_ConfigSet_0
   1245            {
   1246              return afStatus_INVALID_PARAMETER;
   \   000010   7902         MOV       R1,#0x2
   \   000012   8021         SJMP      ??afAPSF_ConfigSet_1
   1247            }
   1248          
   1249            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000014                ; Setup parameters for call to function osal_memcpy
   \   000014   8E..         MOV       ?V4,R6
   \   000016   8F..         MOV       ?V5,R7
   \   000018   75..00       MOV       ?V6,#0x0
   \   00001B   78..         MOV       R0,#?V4
   \   00001D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000020   7C02         MOV       R4,#0x2
   \   000022   7D00         MOV       R5,#0x0
   \   000024   EA           MOV       A,R2
   \   000025   2406         ADD       A,#0x6
   \   000027   FA           MOV       R2,A
   \   000028   5001         JNC       ??afAPSF_ConfigSet_2
   \   00002A   0B           INC       R3
   \                     ??afAPSF_ConfigSet_2:
   \   00002B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002E   7403         MOV       A,#0x3
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
   1250            return afStatus_SUCCESS;
   \   000033   7900         MOV       R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   000035   02....       LJMP      ?Subroutine4 & 0xFFFF
   1251          }
   1252          
   1253          /**************************************************************************************************
   1254           * @fn          afSetApplCB
   1255           *
   1256           * @brief       Sets the pointer to the Application Callback function for a
   1257           *              specific EndPoint.
   1258           *
   1259           * input parameters
   1260           *
   1261           * @param       endPoint - The specific EndPoint for which to set Application Callback.
   1262           * @param       pApplFn - A pointer to the Application Callback function.
   1263           *
   1264           * output parameters
   1265           *
   1266           * None.
   1267           *
   1268           * @return      TRUE if success, FALSE if endpoint not found
   1269           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1270          uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
   \                     afSetApplCB:
   1271          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1272            if ( pApplFn != NULL )
   \   000009   EE           MOV       A,R6
   \   00000A   4F           ORL       A,R7
   \   00000B   601F         JZ        ??afSetApplCB_0
   1273            {
   1274              epList_t *epSearch;
   1275          
   1276              // Look for the endpoint
   1277              epSearch = afFindEndPointDescList( endPoint );
   \   00000D                ; Setup parameters for call to function afFindEndPointDescList
   \   00000D   12....       LCALL     `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   1278          
   1279              if ( epSearch )
   \   000014   E582         MOV       A,DPL
   \   000016   4583         ORL       A,DPH
   \   000018   6012         JZ        ??afSetApplCB_0
   1280              {
   1281                epSearch->pfnApplCB = pApplFn;
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   EE           MOV       A,R6
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   EF           MOV       A,R7
   \   000027   F0           MOVX      @DPTR,A
   1282          
   1283                return ( TRUE );
   \   000028   7901         MOV       R1,#0x1
   \   00002A   8002         SJMP      ??afSetApplCB_1
   1284              }
   1285            }
   1286          
   1287            return ( FALSE );
   \                     ??afSetApplCB_0:
   \   00002C   7900         MOV       R1,#0x0
   \                     ??afSetApplCB_1:
   \   00002E   80..         SJMP      ?Subroutine5
   1288          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afReflectError::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetApplCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetApplCB
   1289          
   1290          /**************************************************************************************************
   1291          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     70   AF_DataRequest
        0     49   -> APSDE_DataReq
        0     49   -> NLME_GetShortAddr
        0     49   -> NLME_IsAddressBroadcast
        0     49   -> RTG_CheckRtStatus
        0     49   -> afDataConfirm
        0     49   -> afDataReqMTU
        0     49   -> afFindEndPointDescList
        0     49   -> osal_mem_free
        0     49   -> sAddrExtCpy
      0     33   AF_DataRequestSrcRtg
        0     21   -> AF_DataRequest
        0     12   -> RTG_AddSrcRtgEntry_Guaranteed
      0     15   afAPSF_ConfigGet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      0     18   afAPSF_ConfigSet
        0     15   -> afFindEndPointDescList
        0     18   -> osal_memcpy
      1     62   afBuildMSGIncoming
        0     19   -> afCopyAddress
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      1     28   afCopyAddress
        0      9   -> sAddrExtCpy
      1     63   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     58   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      0      9   afDelete
        0      9   -> osal_mem_free
      3      0   afEndPoints
      0     38   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     49   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     50   afIncomingData
        0     40   -> afBuildMSGIncoming
        0     28   -> afFindEndPointDesc
        0     28   -> afFindEndPointDescList
        0     28   -> aps_FindGroupForEndpoint
        0     28   -> osal_mem_free
        0     28   -> osal_msg_allocate
        0     28   -> osal_msg_send
      2      0   afNumEndPoints
      1     18   afReflectError
        0     16   -> afFindEndPointDesc
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     12   afRegister
        0     10   -> afFindEndPointDescList
        0     12   -> afRegisterExtended
      1     26   afRegisterExtended
        0     14   -> bdb_zclFindingBindingEpType
        0     14   -> osal_mem_alloc
      0     12   afSetApplCB
        0     12   -> afFindEndPointDescList
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       5  ??Subroutine49_0
       8  ??Subroutine50_0
       1  ??Subroutine51_0
       4  ??Subroutine52_0
       5  ??Subroutine53_0
       5  ??Subroutine54_0
       6  ??Subroutine55_0
       1  ??Subroutine56_0
       4  ??Subroutine57_0
       7  ??Subroutine58_0
       1  ??Subroutine59_0
       6  ??Subroutine60_0
       6  ??Subroutine61_0
       5  ?Subroutine0
       5  ?Subroutine1
      24  ?Subroutine10
       3  ?Subroutine11
      14  ?Subroutine12
      10  ?Subroutine13
       4  ?Subroutine14
       9  ?Subroutine15
       8  ?Subroutine16
      14  ?Subroutine17
       4  ?Subroutine18
       9  ?Subroutine19
       5  ?Subroutine2
      10  ?Subroutine20
       4  ?Subroutine21
       5  ?Subroutine22
       3  ?Subroutine23
       2  ?Subroutine24
       4  ?Subroutine25
       9  ?Subroutine26
       5  ?Subroutine27
      14  ?Subroutine28
       6  ?Subroutine29
       3  ?Subroutine3
       7  ?Subroutine30
       4  ?Subroutine31
      10  ?Subroutine32
       8  ?Subroutine33
       7  ?Subroutine34
       9  ?Subroutine35
       5  ?Subroutine36
      10  ?Subroutine37
       2  ?Subroutine38
       8  ?Subroutine39
       5  ?Subroutine4
      10  ?Subroutine40
       5  ?Subroutine41
       3  ?Subroutine42
       6  ?Subroutine43
       2  ?Subroutine44
      10  ?Subroutine45
       6  ?Subroutine46
       9  ?Subroutine47
       2  ?Subroutine48
       5  ?Subroutine5
       7  ?Subroutine6
       2  ?Subroutine7
       6  ?Subroutine8
      12  ?Subroutine9
     774  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     122  AF_DataRequestSrcRtg
       6  AF_DataRequestSrcRtg::?relay
      70  afAPSF_ConfigGet
       6  afAPSF_ConfigGet::?relay
      56  afAPSF_ConfigSet
       6  afAPSF_ConfigSet::?relay
     515  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
      76  afCopyAddress
       6  afCopyAddress::?relay
      72  afDataConfirm
       6  afDataConfirm::?relay
      35  afDataReqMTU
       6  afDataReqMTU::?relay
      70  afDelete
       6  afDelete::?relay
      56  afEndPoints
       6  afEndPoints::?relay
      32  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      32  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
      89  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      37  afGetMatch
       6  afGetMatch::?relay
     824  afIncomingData
       6  afIncomingData::?relay
      31  afNumEndPoints
       6  afNumEndPoints::?relay
     100  afReflectError
       6  afReflectError::?relay
      71  afRegister
       6  afRegister::?relay
     147  afRegisterExtended
       6  afRegisterExtended::?relay
      48  afSetApplCB
       6  afSetApplCB::?relay
      51  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 3 706 bytes in segment BANKED_CODE
   126 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
   127 bytes of CODE     memory
 3 706 bytes of HUGECODE memory
     3 bytes of XDATA    memory

Errors: none
Warnings: 2
