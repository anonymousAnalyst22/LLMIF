///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              22/Nov/2023  15:42:42
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\fuzzing-coordinator-response-collection\Components\mt\MT_GP.c
//    Command line       =  
//        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWA692.tmp
//        (D:\fuzzing-coordinator-response-collection\Components\mt\MT_GP.c -D
//        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
//        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
//        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
//        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        -lA
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
//        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
//        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\MT_GP.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_GP

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BDISPATCH
        EXTERN ?BRET

        PUBLIC `??MT_GPDataCnf::?relay`
        FUNCTION `??MT_GPDataCnf::?relay`,0203H
        PUBLIC `??MT_GPDataInd::?relay`
        FUNCTION `??MT_GPDataInd::?relay`,0203H
        PUBLIC `??MT_GPSecReq::?relay`
        FUNCTION `??MT_GPSecReq::?relay`,0203H
        PUBLIC MT_GPDataCnf
        FUNCTION MT_GPDataCnf,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MT_GPDataInd
        FUNCTION MT_GPDataInd,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC MT_GPSecReq
        FUNCTION MT_GPSecReq,0203H
        ARGFRAME XSTACK, 0, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
MT_GPDataCnf        SYMBOL "MT_GPDataCnf"
`??MT_GPDataCnf::?relay` SYMBOL "?relay", MT_GPDataCnf
MT_GPDataInd        SYMBOL "MT_GPDataInd"
`??MT_GPDataInd::?relay` SYMBOL "?relay", MT_GPDataInd
MT_GPSecReq         SYMBOL "MT_GPSecReq"
`??MT_GPSecReq::?relay` SYMBOL "?relay", MT_GPSecReq

// D:\fuzzing-coordinator-response-collection\Components\mt\MT_GP.c
//    1 /***************************************************************************************************
//    2   Filename:       MT_GP.c
//    3   Revised:        $Date: 2016-06-21 01:06:52 -0700 (Thu, 21 July 2016) $
//    4   Revision:       $Revision:  $
//    5 
//    6   Description:    MonitorTest functions GP interface.
//    7 
//    8   Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43  
//   44  
//   45 #include "ZComDef.h"
//   46 #include "MT.h"
//   47 #include "MT_GP.h"
//   48 #include "MT_UART.h"
//   49 
//   50 
//   51 /***************************************************************************************************
//   52 * CONST
//   53 ***************************************************************************************************/
//   54 #define GP_DATA_REQ_PAYLOAD_LEN_POS   17   
//   55 #define GP_DATA_REQ_APP_ID_POS         2
//   56 
//   57 #define SEC_KEY_LEN                   16
//   58  
//   59 /***************************************************************************************************
//   60 * LOCAL FUNCTIONs
//   61 ***************************************************************************************************/
//   62 
//   63 #ifdef MT_GP_CB_FUNC
//   64 static void MT_GpDataReq(uint8* pBuf);
//   65 static void MT_GpSecRsp(uint8* pBuf);
//   66 #endif
//   67 
//   68 void MT_GPDataCnf(gp_DataCnf_t* gp_DataCnf);
//   69 void MT_GPSecReq(gp_SecReq_t* gp_SecReq);
//   70 void MT_GPDataInd(gp_DataInd_t* gp_DataInd);
//   71 
//   72 
//   73 /***************************************************************************************************
//   74 * External variables
//   75 ***************************************************************************************************/
//   76 
//   77 #ifdef MT_GP_CB_FUNC  
//   78 uint8 MT_GpCommandProcessing(uint8 *pBuf)
//   79 {
//   80   uint8 status = MT_RPC_SUCCESS;
//   81 
//   82   switch (pBuf[MT_RPC_POS_CMD1])
//   83   {
//   84     case MT_GP_DATA_REQ:
//   85       MT_GpDataReq(pBuf);
//   86     break;
//   87     case MT_GP_SEC_RSP:
//   88       MT_GpSecRsp(pBuf);
//   89     break;
//   90   }
//   91   return status;
//   92 }
//   93 
//   94 
//   95  /***************************************************************************************************
//   96  * @fn      MT_GpDataReq
//   97  *
//   98  * @brief   GP data request interface
//   99  *
//  100  * @param   pBuf - gp data request
//  101  *
//  102  * @return  void
//  103  ***************************************************************************************************/
//  104  static void MT_GpDataReq(uint8* pBuf)
//  105 {
//  106   uint8 retValue = ZSuccess;
//  107   uint8 cmdId;
//  108   gp_DataReq_t *gp_DataReq;
//  109   uint8  payloadLen;
//  110 
//  111   /* parse header */
//  112   cmdId = pBuf[MT_RPC_POS_CMD1];
//  113   pBuf += MT_RPC_FRAME_HDR_SZ;
//  114 
//  115   //Get the payload length
//  116   payloadLen = pBuf[GP_DATA_REQ_PAYLOAD_LEN_POS];
//  117   
//  118   gp_DataReq = (gp_DataReq_t*)osal_msg_allocate(sizeof(gp_DataReq_t) + payloadLen);  
//  119 
//  120   //No memory
//  121   if(gp_DataReq == NULL)
//  122   {
//  123     retValue = FAILURE;
//  124   }
//  125   //Invalid application ID
//  126   if( (pBuf[GP_DATA_REQ_APP_ID_POS] != GP_APP_ID_DEFAULT) && (pBuf[GP_DATA_REQ_APP_ID_POS] != GP_APP_ID_GP ) )
//  127   {
//  128     retValue = INVALIDPARAMETER;
//  129   }
//  130   //Return fail/InvalidParameter
//  131   if(retValue)
//  132   {
//  133     /* Build and send back the response */
//  134     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_GP), cmdId, 1, &retValue);
//  135     return;
//  136   }
//  137 
//  138   gp_DataReq->Action = *pBuf++;
//  139   gp_DataReq->TxOptions = *pBuf++;
//  140   gp_DataReq->gpd_ID.AppID = *pBuf++;
//  141   if(gp_DataReq->gpd_ID.AppID == GP_APP_ID_DEFAULT)
//  142   {
//  143     gp_DataReq->gpd_ID.GPDId.SrcID = osal_build_uint32(pBuf,4);
//  144     pBuf += sizeof(uint32) + Z_EXTADDR_LEN;
//  145   }
//  146   else
//  147   {
//  148     pBuf += sizeof(uint32);
//  149     osal_memcpy(gp_DataReq->gpd_ID.GPDId.GPDExtAddr,pBuf,Z_EXTADDR_LEN);
//  150     pBuf += Z_EXTADDR_LEN;
//  151   }
//  152 
//  153   gp_DataReq->EndPoint = *pBuf++;
//  154   gp_DataReq->GPDCmmdId = *pBuf++;
//  155   gp_DataReq->GPDasduLength = *pBuf++;
//  156   osal_memcpy(gp_DataReq->GPDasdu,pBuf,payloadLen);
//  157   pBuf += payloadLen;
//  158   gp_DataReq->GPEPhandle = *pBuf++;
//  159   gp_DataReq->gpTxQueueEntryLifeTime[2] = *pBuf++;
//  160   gp_DataReq->gpTxQueueEntryLifeTime[1] = *pBuf++;
//  161   gp_DataReq->gpTxQueueEntryLifeTime[0] = *pBuf++;
//  162   
//  163   gp_DataReq->hdr.event = GP_DATA_REQ;
//  164   gp_DataReq->hdr.status = 0;
//  165 
//  166   osal_msg_send(gp_TaskID,(uint8*)gp_DataReq);
//  167 
//  168   /* Build and send back the response */
//  169   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_GP), cmdId, 1, &retValue);
//  170 }
//  171 
//  172 
//  173 
//  174 /***************************************************************************************************
//  175 * @fn      MT_GpSecRsp
//  176 *
//  177 * @brief   GP Sec Response interface
//  178 *
//  179 * @param   pBuf - gp sec rsp
//  180 *
//  181 * @return  void
//  182 ***************************************************************************************************/
//  183 
//  184 void MT_GpSecRsp(uint8 *pBuf)
//  185 {
//  186   uint8 retValue = ZSuccess;
//  187   uint8 cmdId;
//  188   gp_SecRsp_t *gp_SecRsp;
//  189   
//  190   /* parse header */
//  191   cmdId = pBuf[MT_RPC_POS_CMD1];
//  192   pBuf += MT_RPC_FRAME_HDR_SZ;
//  193   
//  194   gp_SecRsp = (gp_SecRsp_t*)osal_msg_allocate(sizeof(gp_SecRsp_t));
//  195   
//  196     //No memory
//  197   if(gp_SecRsp == NULL)
//  198   {
//  199     retValue = FAILURE;
//  200   }
//  201   //Invalid application ID
//  202   if( (pBuf[GP_DATA_REQ_APP_ID_POS] != GP_APP_ID_DEFAULT) && (pBuf[GP_DATA_REQ_APP_ID_POS] != GP_APP_ID_GP ) )
//  203   {
//  204     retValue = INVALIDPARAMETER;
//  205   }
//  206   //Return fail/InvalidParameter
//  207   if(retValue)
//  208   {
//  209     /* Build and send back the response */
//  210     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_GP), cmdId, 1, &retValue);
//  211     return;
//  212   }
//  213   
//  214   gp_SecRsp->Status = *pBuf++;
//  215   gp_SecRsp->dGPStubHandle = *pBuf++;
//  216   gp_SecRsp->gpd_ID.AppID = *pBuf++;
//  217   if(gp_SecRsp->gpd_ID.AppID == GP_APP_ID_DEFAULT)
//  218   {
//  219     gp_SecRsp->gpd_ID.GPDId.SrcID = osal_build_uint32(pBuf,4);
//  220     pBuf += sizeof(uint32) + Z_EXTADDR_LEN;
//  221   }
//  222   else
//  223   {
//  224     pBuf += sizeof(uint32);
//  225     osal_memcpy(gp_SecRsp->gpd_ID.GPDId.GPDExtAddr,pBuf,Z_EXTADDR_LEN);
//  226     pBuf += Z_EXTADDR_LEN;
//  227   }
//  228   gp_SecRsp->EndPoint = *pBuf++;
//  229   gp_SecRsp->gp_SecData.GPDFSecLvl = *pBuf++;
//  230   gp_SecRsp->gp_SecData.GPDFKeyType = *pBuf++; 
//  231   osal_memcpy(gp_SecRsp->GPDKey,pBuf,SEC_KEY_LEN);
//  232   pBuf += SEC_KEY_LEN;
//  233   gp_SecRsp->gp_SecData.GPDSecFrameCounter = osal_build_uint32(pBuf,4);
//  234   
//  235   gp_SecRsp->hdr.event = GP_SEC_RSP;
//  236   gp_SecRsp->hdr.status = 0;
//  237   
//  238   osal_msg_send(gp_TaskID,(uint8*)gp_SecRsp);
//  239 
//  240   /* Build and send back the response */
//  241   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_GP), cmdId, 1, &retValue);
//  242 }
//  243 
//  244 #endif
//  245 
//  246 /***************************************************************************************************
//  247 * @fn      MT_GPDataInd
//  248 *
//  249 * @brief   Send GP Data Ind to Host Processor
//  250 *
//  251 * @param   gp_DataInd
//  252 *
//  253 * @return  void
//  254 ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  255 void MT_GPDataInd(gp_DataInd_t* gp_DataInd)
MT_GPDataInd:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_GPDataInd
        CODE
//  256 {
        ; Saved register size: 0
        ; Auto size: 0
//  257 #ifdef MT_GP_CB_FUNC  
//  258   uint8 *pBuf = NULL;
//  259   uint8 *tempBuf = NULL;
//  260   uint8 bufLen = sizeof(gp_DataInd_t) + gp_DataInd->GPDasduLength - 1;
//  261   
//  262   pBuf = osal_mem_alloc(bufLen);
//  263 
//  264   if(pBuf == NULL)
//  265   {
//  266     return;
//  267   }
//  268 
//  269   tempBuf = pBuf;
//  270   
//  271   *pBuf++ = gp_DataInd->status;
//  272   *pBuf++ = gp_DataInd->Rssi;
//  273   *pBuf++ = gp_DataInd->LinkQuality;  
//  274   *pBuf++ = gp_DataInd->SeqNumber;  
//  275   *pBuf++ = gp_DataInd->srcAddr.addrMode;
//  276   *pBuf++ = LO_UINT16(gp_DataInd->srcPanID);
//  277   *pBuf++ = HI_UINT16(gp_DataInd->srcPanID);
//  278   
//  279    pBuf   = osal_cpyExtAddr( pBuf,gp_DataInd->srcAddr.addr.extAddr);
//  280   *pBuf++ = gp_DataInd->appID;
//  281   *pBuf++ = gp_DataInd->GPDFSecLvl;
//  282   *pBuf++ = gp_DataInd->GPDFKeyType;
//  283   *pBuf++ = gp_DataInd->AutoCommissioning;
//  284   *pBuf++ = gp_DataInd->RxAfterTx;
//  285 
//  286   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,gp_DataInd->SrcId);
//  287   *pBuf++ = gp_DataInd->EndPoint;
//  288   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,gp_DataInd->GPDSecFrameCounter);
//  289   *pBuf++ = gp_DataInd->GPDCmmdID;
//  290   *pBuf++ = gp_DataInd->GPDasduLength;
//  291   osal_memcpy(pBuf,gp_DataInd->GPDasdu,gp_DataInd->GPDasduLength);
//  292   pBuf += gp_DataInd->GPDasduLength;
//  293   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,gp_DataInd->MIC);  
//  294   
//  295   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_GP), MT_GP_DATA_IND, 36 + gp_DataInd->GPDasduLength - 1, tempBuf);
//  296 
//  297   osal_mem_free(tempBuf);
//  298 #else
//  299   (void)gp_DataInd;
//  300 #endif
//  301 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock0
//  302 
//  303 
//  304 
//  305 
//  306 /***************************************************************************************************
//  307 * @fn      MT_GPDataCnf
//  308 *
//  309 * @brief   Send GP Data Cnf to Host Processor
//  310 *
//  311 * @param   gp_DataCnf
//  312 *
//  313 * @return  void
//  314 ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  315 void MT_GPDataCnf(gp_DataCnf_t* gp_DataCnf)
MT_GPDataCnf:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function MT_GPDataCnf
        CODE
//  316 {
        ; Saved register size: 0
        ; Auto size: 0
//  317 #ifdef MT_GP_CB_FUNC
//  318   uint8 buf[2];
//  319   uint8 *pBuf = buf;
//  320 
//  321   *pBuf++ = gp_DataCnf->status;
//  322   *pBuf++ = gp_DataCnf->GPEPhandle;
//  323 
//  324   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_GP), MT_GP_DATA_CNF, 2, buf);
//  325 #else
//  326   (void)gp_DataCnf;
//  327 #endif
//  328 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock1
//  329 
//  330 /***************************************************************************************************
//  331 * @fn      MT_GPSecReq
//  332 *
//  333 * @brief   Send GP Sec Req to Host Processor
//  334 *
//  335 * @param   gp_SecReq
//  336 *
//  337 * @return  void
//  338 ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  339 void MT_GPSecReq(gp_SecReq_t* gp_SecReq)
MT_GPSecReq:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function MT_GPSecReq
        CODE
//  340 {
        ; Saved register size: 0
        ; Auto size: 0
//  341 #ifdef MT_GP_CB_FUNC
//  342   uint8 buf[21];
//  343   uint8 *pBuf = buf;
//  344 
//  345   *pBuf++ = gp_SecReq->gpd_ID.AppID;
//  346 
//  347   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,gp_SecReq->gpd_ID.GPDId.SrcID);
//  348   pBuf   = osal_cpyExtAddr( pBuf,gp_SecReq->gpd_ID.GPDId.GPDExtAddr);
//  349   *pBuf++ = gp_SecReq->EndPoint;  
//  350   *pBuf++ = gp_SecReq->gp_SecData.GPDFSecLvl;
//  351   *pBuf++ = gp_SecReq->gp_SecData.GPDFKeyType;
//  352 
//  353   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,gp_SecReq->gp_SecData.GPDSecFrameCounter);
//  354 
//  355   *pBuf++ = gp_SecReq->dGPStubHandle;
//  356 
//  357   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_GP), MT_GP_SEC_REQ, 21, buf);
//  358 #else
//  359   (void)gp_SecReq;
//  360 #endif
//  361 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_GPDataInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_GPDataInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_GPDataCnf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_GPDataCnf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_GPSecReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_GPSecReq

        END
//  362 
// 
//  9 bytes in segment BANKED_CODE
// 18 bytes in segment BANK_RELAYS
// 
// 18 bytes of CODE     memory
//  9 bytes of HUGECODE memory
//
//Errors: none
//Warnings: none
