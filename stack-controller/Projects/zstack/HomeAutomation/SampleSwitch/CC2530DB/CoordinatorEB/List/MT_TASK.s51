///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              22/Nov/2023  15:42:43
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\fuzzing-coordinator-response-collection\Components\mt\MT_TASK.c
//    Command line       =  
//        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWA85B.tmp
//        (D:\fuzzing-coordinator-response-collection\Components\mt\MT_TASK.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
//        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
//        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
//        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        -lA
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
//        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
//        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\MT_TASK.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_TASK

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN __INIT_XDATA_Z

        PUBLIC `??MT_ProcessEvent::?relay`
        FUNCTION `??MT_ProcessEvent::?relay`,0203H
        PUBLIC `??MT_TaskInit::?relay`
        FUNCTION `??MT_TaskInit::?relay`,0203H
        PUBLIC MT_ProcessEvent
        FUNCTION MT_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC MT_TaskID
        PUBLIC MT_TaskInit
        FUNCTION MT_TaskInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
MTProcessAppRspMsg  SYMBOL "MTProcessAppRspMsg"
`??MTProcessAppRspMsg::?relay` SYMBOL "?relay", MTProcessAppRspMsg
MT_AfExec           SYMBOL "MT_AfExec"
`??MT_AfExec::?relay` SYMBOL "?relay", MT_AfExec
MT_Init             SYMBOL "MT_Init"
`??MT_Init::?relay` SYMBOL "?relay", MT_Init
MT_ProcessDebugMsg  SYMBOL "MT_ProcessDebugMsg"
`??MT_ProcessDebugMsg::?relay` SYMBOL "?relay", MT_ProcessDebugMsg
MT_ProcessDebugStr  SYMBOL "MT_ProcessDebugStr"
`??MT_ProcessDebugStr::?relay` SYMBOL "?relay", MT_ProcessDebugStr
MT_ProcessIncoming  SYMBOL "MT_ProcessIncoming"
`??MT_ProcessIncoming::?relay` SYMBOL "?relay", MT_ProcessIncoming
MT_UartCalcFCS      SYMBOL "MT_UartCalcFCS"
`??MT_UartCalcFCS::?relay` SYMBOL "?relay", MT_UartCalcFCS
MT_UartInit         SYMBOL "MT_UartInit"
`??MT_UartInit::?relay` SYMBOL "?relay", MT_UartInit
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
`??MT_UartRegisterTaskID::?relay` SYMBOL "?relay", MT_UartRegisterTaskID
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
MT_ProcessEvent     SYMBOL "MT_ProcessEvent"
`??MT_ProcessEvent::?relay` SYMBOL "?relay", MT_ProcessEvent
MT_TaskInit         SYMBOL "MT_TaskInit"
`??MT_TaskInit::?relay` SYMBOL "?relay", MT_TaskInit

        EXTERN `??MTProcessAppRspMsg::?relay`
        FUNCTION `??MTProcessAppRspMsg::?relay`,00H
        EXTERN `??MT_AfExec::?relay`
        FUNCTION `??MT_AfExec::?relay`,00H
        EXTERN `??MT_Init::?relay`
        FUNCTION `??MT_Init::?relay`,00H
        EXTERN `??MT_ProcessDebugMsg::?relay`
        FUNCTION `??MT_ProcessDebugMsg::?relay`,00H
        EXTERN `??MT_ProcessDebugStr::?relay`
        FUNCTION `??MT_ProcessDebugStr::?relay`,00H
        EXTERN `??MT_ProcessIncoming::?relay`
        FUNCTION `??MT_ProcessIncoming::?relay`,00H
        EXTERN `??MT_UartCalcFCS::?relay`
        FUNCTION `??MT_UartCalcFCS::?relay`,00H
        EXTERN `??MT_UartInit::?relay`
        FUNCTION `??MT_UartInit::?relay`,00H
        EXTERN `??MT_UartRegisterTaskID::?relay`
        FUNCTION `??MT_UartRegisterTaskID::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN MTProcessAppRspMsg
        FUNCTION MTProcessAppRspMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_AfExec
        FUNCTION MT_AfExec,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_Init
        FUNCTION MT_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_ProcessDebugMsg
        FUNCTION MT_ProcessDebugMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_ProcessDebugStr
        FUNCTION MT_ProcessDebugStr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_ProcessIncoming
        FUNCTION MT_ProcessIncoming,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartCalcFCS
        FUNCTION MT_UartCalcFCS,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\fuzzing-coordinator-response-collection\Components\mt\MT_TASK.c
//    1 /***************************************************************************************************
//    2   Filename:       MT_TASK.c
//    3   Revised:        $Date: 2015-01-30 11:15:01 -0800 (Fri, 30 Jan 2015) $
//    4   Revision:       $Revision: 42161 $
//    5 
//    6   Description:    MonitorTest Task handling routines
//    7 
//    8   Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License").  You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product.  Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 #include "MT_TASK.h"
//   45 #include "MT.h"
//   46 #include "MT_DEBUG.h"
//   47 #include "MT_UART.h"
//   48 #include "MT_UTIL.h"
//   49 #include "MT_SYS.h"
//   50 
//   51 #if !defined( NONWK )
//   52 #include "MT_ZDO.h"
//   53 #include "MT_AF.h"
//   54 #endif  /* NONWK */
//   55 
//   56 #include "hal_uart.h"
//   57 #include "OSAL_Memory.h"
//   58 
//   59 /***************************************************************************************************
//   60  * LOCAL FUNCTIONS
//   61  ***************************************************************************************************/
//   62 
//   63 static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
//   64 #ifdef MT_SRNG
//   65 void MT_ProcessSrngEvent(void); 
//   66 #endif
//   67 
//   68 #if defined(NPI)
//   69 extern uint8_t npiframe_calcMTFCS(uint8_t *msg_ptr, uint8_t len);
//   70 #endif
//   71 
//   72 /***************************************************************************************************
//   73  * GLOBALS
//   74  ***************************************************************************************************/
//   75 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   76 uint8 MT_TaskID;
MT_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   77 
//   78 /***************************************************************************************************
//   79  * @fn      MT_TaskInit
//   80  *
//   81  * @brief  MonitorTest Task Initialization.  This function is put into the
//   82  *         task table.
//   83  *
//   84  * @param   task_id - task ID of the MT Task
//   85  *
//   86  * @return  void
//   87  ***************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//   88 void MT_TaskInit(uint8 task_id)
MT_TaskInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_TaskInit
        CODE
//   89 {
        FUNCALL MT_TaskInit, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_TaskInit, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_TaskInit, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//   90   MT_TaskID = task_id;
        MOV       DPTR,#MT_TaskID
        MOVX      @DPTR,A
//   91 
//   92   /* Initialize the Serial port */
//   93 #if !defined(NPI)
//   94   MT_UartInit();
        ; Setup parameters for call to function MT_UartInit
        LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
//   95 
//   96   /* Register taskID - Do this after UartInit() because it will reset the taskID */
//   97   MT_UartRegisterTaskID(task_id);
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV       A,R6
        MOV       R1,A
        LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
//   98 #endif /* NPI */
//   99   osal_set_event(task_id, MT_SECONDARY_INIT_EVENT);
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x10
        MOV       R3,#0x0
        MOV       A,R6
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
//  100 }
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  101 
//  102 /**************************************************************************************************
//  103  * @fn      MT_ProcessEvent
//  104  *
//  105  * @brief   MonitorTest Task Event Processor.  This task is put into the task table.
//  106  *
//  107  * @param   task_id - task ID of the MT Task
//  108  * @param   events - event(s) for the MT Task
//  109  *
//  110  * @return  Bit mask of the unprocessed MT Task events.
//  111  **************************************************************************************************/

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  112 UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
MT_ProcessEvent:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function MT_ProcessEvent
        CODE
//  113 {
        FUNCALL MT_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessEvent, MTProcessAppRspMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessEvent, MT_ProcessDebugStr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessEvent, MT_UartCalcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessEvent, MT_ProcessDebugMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessEvent, MT_ProcessIncoming
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessEvent, MT_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_ProcessEvent, MT_AfExec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  114   /* Could be multiple events, so switch won't work */
//  115   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JNZ       $+5
        LJMP      ??MT_ProcessEvent_0 & 0xFFFF
//  116   {
//  117     uint8 *msg_ptr = osal_msg_receive(task_id);
        ; Setup parameters for call to function osal_msg_receive
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V2,R2
        MOV       ?V3,R3
//  118 
//  119     if (msg_ptr != NULL)
        MOV       A,R2
        ORL       A,?V3
        JNZ       $+5
        LJMP      ??MT_ProcessEvent_1 & 0xFFFF
//  120     {
//  121       MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        DEC       A
        JZ        ??MT_ProcessEvent_2
        DEC       A
        JZ        ??MT_ProcessEvent_3
        ADD       A,#-0x2
        JZ        ??MT_ProcessEvent_4
        ADD       A,#-0x2
        JZ        ??MT_ProcessEvent_5
        ADD       A,#-0x1e
        JNZ       ??MT_ProcessEvent_6
        ; Setup parameters for call to function MTProcessAppRspMsg
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,#0x5
        MOV       R1,A
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??MTProcessAppRspMsg::?relay`; Banked call to: MTProcessAppRspMsg
        SJMP      ??MT_ProcessEvent_6
??MT_ProcessEvent_5:
        ; Setup parameters for call to function MT_ProcessDebugStr
        LCALL     `??MT_ProcessDebugStr::?relay`; Banked call to: MT_ProcessDebugStr
        SJMP      ??MT_ProcessEvent_6
??MT_ProcessEvent_4:
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ADD       A,#0x5
        MOV       ?V4,A
        ; Setup parameters for call to function MT_UartCalcFCS
        MOV       A,#-0x2
        ADD       A,?V4
        MOV       R1,A
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??MT_UartCalcFCS::?relay`; Banked call to: MT_UartCalcFCS
        MOV       A,R1
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       R0,?V4
        MOV       A,?V0
        ADD       A,R0
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,R0
        ADD       A,#-0x1
        MOV       DPL,A
        MOV       A,R1
        ADDC      A,#-0x1
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        SJMP      ??MT_ProcessEvent_6
??MT_ProcessEvent_3:
        ; Setup parameters for call to function MT_ProcessDebugMsg
        LCALL     `??MT_ProcessDebugMsg::?relay`; Banked call to: MT_ProcessDebugMsg
        SJMP      ??MT_ProcessEvent_6
??MT_ProcessEvent_2:
        ; Setup parameters for call to function MT_ProcessIncoming
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??MT_ProcessIncoming::?relay`; Banked call to: MT_ProcessIncoming
//  122       osal_msg_deallocate(msg_ptr);
??MT_ProcessEvent_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  123     }
//  124 
//  125     /* Return unproccessed events */
//  126     return (events ^ SYS_EVENT_MSG);
??MT_ProcessEvent_1:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        SJMP      ??MT_ProcessEvent_7
//  127   }
//  128 
//  129   if ( events & MT_SECONDARY_INIT_EVENT )
??MT_ProcessEvent_0:
        MOV       A,R6
        ANL       A,#0x10
        JZ        ??MT_ProcessEvent_8
//  130   {
//  131     MT_Init(task_id);
        ; Setup parameters for call to function MT_Init
        LCALL     `??MT_Init::?relay`; Banked call to: MT_Init
//  132     /* Return unproccessed events */
//  133     return (events ^ MT_SECONDARY_INIT_EVENT);
        MOV       A,R6
        XRL       A,#0x10
        SJMP      ??MT_ProcessEvent_9
//  134   }
//  135 
//  136   if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
??MT_ProcessEvent_8:
        MOV       A,R6
        ANL       A,#0x2
        JZ        ??MT_ProcessEvent_10
//  137   {
//  138     /* Return unproccessed events */
//  139     return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
        MOV       A,R6
        XRL       A,#0x2
        MOV       R2,A
        SJMP      ??MT_ProcessEvent_11
//  140   }
//  141 
//  142 #if !defined( NONWK )
//  143   if ( events & MT_AF_EXEC_EVT )
??MT_ProcessEvent_10:
        MOV       A,R6
        ANL       A,#0x8
        JZ        ??MT_ProcessEvent_12
//  144   {
//  145     MT_AfExec();
        ; Setup parameters for call to function MT_AfExec
        LCALL     `??MT_AfExec::?relay`; Banked call to: MT_AfExec
//  146     return (events ^ MT_AF_EXEC_EVT);
        MOV       A,R6
        XRL       A,#0x8
??MT_ProcessEvent_9:
        MOV       R2,A
        MOV       A,R7
??MT_ProcessEvent_7:
        MOV       R3,A
        SJMP      ??MT_ProcessEvent_11
//  147   }
//  148 #endif  /* NONWK */
//  149 
//  150   /* Handle MT_SYS_OSAL_START_TIMER callbacks */
//  151 #if defined MT_SYS_FUNC
//  152   if ( events & (MT_SYS_OSAL_EVENT_MASK))
//  153   {
//  154     if (events & MT_SYS_OSAL_EVENT_0)
//  155     {
//  156       MT_SysOsalTimerExpired(0x00);
//  157       events ^= MT_SYS_OSAL_EVENT_0;
//  158     }
//  159 
//  160     if (events & MT_SYS_OSAL_EVENT_1)
//  161     {
//  162       MT_SysOsalTimerExpired(0x01);
//  163       events ^= MT_SYS_OSAL_EVENT_1;
//  164     }
//  165 
//  166     if (events & MT_SYS_OSAL_EVENT_2)
//  167     {
//  168       MT_SysOsalTimerExpired(0x02);
//  169       events ^= MT_SYS_OSAL_EVENT_2;
//  170     }
//  171 
//  172     if (events & MT_SYS_OSAL_EVENT_3)
//  173     {
//  174       MT_SysOsalTimerExpired(0x03);
//  175       events ^= MT_SYS_OSAL_EVENT_3;
//  176     }
//  177 
//  178     return events;
//  179   }
//  180 #endif
//  181 
//  182 #ifdef MT_SRNG
//  183   if(events & MT_SRNG_EVENT)
//  184   {
//  185     MT_ProcessSrngEvent(); 
//  186     return (events ^ MT_SRNG_EVENT);
//  187   }
//  188 #endif  
//  189 
//  190   /* Discard or make more handlers */
//  191   return 0;
??MT_ProcessEvent_12:
        MOV       R2,#0x0
        MOV       R3,#0x0
??MT_ProcessEvent_11:
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
//  192 
//  193 } /* MT_ProcessEvent() */
          CFI EndBlock cfiBlock1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_TaskInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_TaskInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_ProcessEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_ProcessEvent

        END
//  194 
//  195 #ifdef MT_SRNG
//  196 /***************************************************************************************************
//  197  * @fn      MT_ProcessSrngEvent
//  198  *
//  199  * @brief
//  200  *
//  201  *   Process SRNG Event Messages.
//  202  *
//  203  * @param   None
//  204  *
//  205  * @return  None
//  206  ***************************************************************************************************/
//  207 void MT_ProcessSrngEvent(void)
//  208 {
//  209   uint8 * msg;
//  210   osal_event_hdr_t * msg_ptr;
//  211   
//  212   msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( MT_RPC_FRAME_HDR_SZ + 4 + sizeof(osal_event_hdr_t) );
//  213   msg = msg_ptr + sizeof(osal_event_hdr_t) + 4;
//  214   
//  215   if ( msg_ptr )
//  216   {
//  217     msg_ptr->event = CMD_SERIAL_MSG;
//  218     msg_ptr->status = 4;
//  219     if(msg)
//  220     {
//  221       msg[MT_RPC_POS_LEN] = 4 + MT_RPC_FRAME_HDR_SZ;
//  222       msg[MT_RPC_POS_CMD0] = MT_RPC_SYS_UTIL;
//  223       msg[MT_RPC_POS_CMD1] = MT_UTIL_SRNG_GENERATE;
//  224     } 
//  225     osal_memcpy(msg_ptr + sizeof(osal_event_hdr_t), &msg, 4); 
//  226   }
//  227   osal_msg_send( MT_TaskID, (uint8 *)msg_ptr );
//  228 }
//  229 #endif
//  230 
//  231 /***************************************************************************************************
//  232  * @fn      MT_ProcessIncomingCommand
//  233  *
//  234  * @brief
//  235  *
//  236  *   Process Event Messages.
//  237  *
//  238  * @param   *msg - pointer to event message
//  239  *
//  240  * @return
//  241  ***************************************************************************************************/
//  242 static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
//  243 {
//  244   uint8 len, *msg_ptr = msg->msg;
//  245 
//  246   /* Use the first byte of the message as the command ID */
//  247   switch ( msg->hdr.event )
//  248   {
//  249     case CMD_SERIAL_MSG:
//  250       MT_ProcessIncoming(msg_ptr);
//  251       break;
//  252 
//  253     case CMD_DEBUG_MSG:
//  254       MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
//  255       break;
//  256 
//  257     case CB_FUNC:
//  258       /*
//  259         Build SPI message here instead of redundantly calling MT_BuildSPIMsg
//  260         because we have copied data already in the allocated message
//  261       */
//  262 
//  263       /* msg_ptr is the beginning of the intended SPI message */
//  264       len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
//  265 
//  266       /*
//  267         FCS goes to the last byte in the message and is calculated over all
//  268         the bytes except FCS and SOP
//  269       */
//  270 #if !defined(NPI)
//  271       msg_ptr[len-1] = MT_UartCalcFCS(msg_ptr + 1, (uint8)(len-2));
//  272 #else
//  273       msg_ptr[len-1] = npiframe_calcMTFCS(msg_ptr + 1, (uint8)(len-2));
//  274 #endif
//  275 
//  276 #ifdef MT_UART_DEFAULT_PORT
//  277       HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
//  278 #endif
//  279       break;
//  280 
//  281     case CMD_DEBUG_STR:
//  282       MT_ProcessDebugStr( (mtDebugStr_t *)msg );
//  283       break;
//  284 
//  285 #if !defined ( NONWK )
//  286     case MT_SYS_APP_RSP_MSG:
//  287       len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
//  288       MTProcessAppRspMsg( msg_ptr, len );
//  289       break;
//  290 #endif  // NONWK
//  291 
//  292 #if defined (MT_UTIL_FUNC)
//  293 #if defined ZCL_KEY_ESTABLISH
//  294     case ZCL_KEY_ESTABLISH_IND:
//  295       MT_UtilKeyEstablishInd((zclKE_StatusInd_t *)msg);
//  296       break;
//  297 #endif
//  298 #endif
//  299 #ifdef MT_ZDO_CB_FUNC
//  300     case ZDO_STATE_CHANGE:
//  301       MT_ZdoStateChangeCB((osal_event_hdr_t *)msg);
//  302       break;
//  303 #endif
//  304 
//  305     default:
//  306       break;
//  307   }
//  308 }
//  309 
//  310 #ifdef MT_TASK
//  311 /***************************************************************************************************
//  312  * @fn      MT_TransportAlloc
//  313  *
//  314  * @brief   Allocate memory for transport msg
//  315  *
//  316  * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
//  317  *          uint8 len - length
//  318  *
//  319  * @return  pointer the allocated memory or NULL if fail to allocate the memory
//  320  ***************************************************************************************************/
//  321 uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
//  322 {
//  323   uint8 *p;
//  324 
//  325   (void)cmd0;  // Intentionally unreferenced parameter
//  326 
//  327   /* Allocate a buffer of data length + SOP+CMD+FCS (5 bytes) */
//  328   p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
//  329 
//  330   if (p)
//  331   {
//  332     p++; /* Save space for SOP_VALUE, msg structure */
//  333     return p;
//  334   }
//  335   else
//  336   {
//  337     return NULL;
//  338   }
//  339 }
//  340 
//  341 /***************************************************************************************************
//  342  * @fn      MT_TransportSend
//  343  *
//  344  * @brief   Fill in SOP and FCS then send out the msg
//  345  *
//  346  * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
//  347  *
//  348  * @return  None
//  349  ***************************************************************************************************/
//  350 void MT_TransportSend(uint8 *pBuf)
//  351 {
//  352   uint8 *msgPtr;
//  353   uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
//  354 
//  355   /* Move back to the SOP */
//  356   msgPtr = pBuf-1;
//  357 
//  358   /* Insert SOP */
//  359   msgPtr[0] = MT_UART_SOF;
//  360 
//  361   /* Insert FCS */
//  362   msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (pBuf, (3 + dataLen));
//  363 
//  364   /* Send to UART */
//  365 #ifdef MT_UART_DEFAULT_PORT
//  366   HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
//  367 #endif
//  368 
//  369   /* Deallocate */
//  370   osal_msg_deallocate(msgPtr);
//  371 }
//  372 #endif /* MT_TASK */
//  373 /***************************************************************************************************
//  374  ***************************************************************************************************/
// 
// 263 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
//   1 byte  in segment XDATA_Z
// 
//  12 bytes of CODE     memory
// 263 bytes of HUGECODE memory
//   1 byte  of XDATA    memory
//
//Errors: none
//Warnings: none
