///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              22/Nov/2023  15:42:43
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\fuzzing-coordinator-response-collection\Components\mt\MT_ZDO.c
//    Command line       =  
//        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWA9A7.tmp
//        (D:\fuzzing-coordinator-response-collection\Components\mt\MT_ZDO.c -D
//        SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
//        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
//        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
//        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        -lA
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
//        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
//        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\MT_ZDO.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_ZDO

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)


        END
// D:\fuzzing-coordinator-response-collection\Components\mt\MT_ZDO.c
//    1 /**************************************************************************************************
//    2   Filename:       MT_ZDO.c
//    3   Revised:        $Date: 2015-02-05 17:15:13 -0800 (Thu, 05 Feb 2015) $
//    4   Revision:       $Revision: 42371 $
//    5 
//    6   Description:    MonitorTest functions for the ZDO layer.
//    7 
//    8   Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 **************************************************************************************************/
//   38 
//   39 #ifdef MT_ZDO_FUNC
//   40 
//   41 /**************************************************************************************************
//   42  * INCLUDES
//   43  **************************************************************************************************/
//   44 #include "ZComDef.h"
//   45 #include "OSAL.h"
//   46 #include "OSAL_Nv.h"
//   47 #include "MT.h"
//   48 #include "MT_ZDO.h"
//   49 #include "AddrMgr.h"
//   50 #include "APSMEDE.h"
//   51 #include "ZDConfig.h"
//   52 #include "ZDProfile.h"
//   53 #include "ZDObject.h"
//   54 #include "ZDApp.h"
//   55 #include "OnBoard.h"
//   56 #include "aps_groups.h"
//   57 #include "bdb_interface.h"
//   58 
//   59 #if defined ( MT_ZDO_EXTENSIONS )
//   60   #include "rtg.h"
//   61 #endif
//   62 #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
//   63   #include "ZDSecMgr.h"
//   64 #endif
//   65 
//   66 #include "nwk_util.h"
//   67 
//   68 /**************************************************************************************************
//   69  * CONSTANTS
//   70  **************************************************************************************************/
//   71 #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
//   72 #define MT_ZDO_ADDR_RSP_LEN               0x0D
//   73 #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
//   74 #define MT_ZDO_BEACON_IND_LEN             21
//   75 #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
//   76 #define MT_ZDO_JOIN_CNF_LEN               5
//   77 
//   78 // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
//   79 // sizeof(zdoConcentratorInd_t) is not usable.
//   80 #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
//   81 
//   82 #define MTZDO_RESPONSE_BUFFER_LEN   100
//   83 
//   84 #define MTZDO_MAX_MATCH_CLUSTERS    16
//   85 #define MTZDO_MAX_ED_BIND_CLUSTERS  15
//   86 
//   87 // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
//   88 #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
//   89 
//   90 #define MT_ZDO_STATUS_LEN   1
//   91 
//   92 #if defined ( MT_ZDO_EXTENSIONS )
//   93 typedef struct
//   94 {
//   95   uint16            ami;
//   96   uint16            keyNvId;   // index to the Link Key table in NV
//   97   ZDSecMgr_Authentication_Option authenticateOption;
//   98 } ZDSecMgrEntry_t;
//   99 #endif  // MT_ZDO_EXTENSIONS
//  100 
//  101 /**************************************************************************************************
//  102  * GLOBAL VARIABLES
//  103  **************************************************************************************************/
//  104 uint32 _zdoCallbackSub;
//  105 uint8 *pBeaconIndBuf = NULL;
//  106 
//  107 /**************************************************************************************************
//  108  * LOCAL VARIABLES
//  109  **************************************************************************************************/
//  110 bool ignoreIndication = FALSE;
//  111 
//  112 /**************************************************************************************************
//  113  * LOCAL FUNCTIONS
//  114  **************************************************************************************************/
//  115 #if defined (MT_ZDO_FUNC)
//  116 static void MT_ZdoNWKAddressRequest(uint8 *pBuf);
//  117 static void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
//  118 static void MT_ZdoNodeDescRequest(uint8 *pBuf);
//  119 static void MT_ZdoPowerDescRequest(uint8 *pBuf);
//  120 static void MT_ZdoSimpleDescRequest(uint8 *pBuf);
//  121 static void MT_ZdoActiveEpRequest(uint8 *pBuf);
//  122 static void MT_ZdoMatchDescRequest(uint8 *pBuf);
//  123 static void MT_ZdoComplexDescRequest(uint8 *pBuf);
//  124 static void MT_ZdoUserDescRequest(uint8 *pBuf);
//  125 static void MT_ZdoEndDevAnnce(uint8 *pBuf);
//  126 static void MT_ZdoUserDescSet(uint8 *pBuf);
//  127 static void MT_ZdoServiceDiscRequest(uint8 *pBuf);
//  128 static void MT_ZdoEndDevBindRequest(uint8 *pBuf);
//  129 static void MT_ZdoBindRequest(uint8 *pBuf);
//  130 static void MT_ZdoUnbindRequest(uint8 *pBuf);
//  131 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  132 static void MT_ZdoSetLinkKey(uint8 *pBuf);
//  133 static void MT_ZdoRemoveLinkKey(uint8 *pBuf);
//  134 static void MT_ZdoGetLinkKey(uint8 *pBuf);
//  135 #endif /* MT_SYS_KEY_MANAGEMENT */
//  136 static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
//  137 static void MT_ZdoJoinReq(uint8 *pBuf);
//  138 /* Call back function */
//  139 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
//  140 void *MT_ZdoBeaconIndCB ( void *pStr );
//  141 void *MT_ZdoJoinCnfCB ( void *pStr );
//  142 #if defined (MT_ZDO_MGMT)
//  143 static void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
//  144 static void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
//  145 static void MT_ZdoMgmtBindRequest(uint8 *pBuf);
//  146 static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
//  147 static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
//  148 static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
//  149 static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
//  150 static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
//  151 #endif /* MT_ZDO_MGMT */
//  152 static void MT_ZdoSendData( uint8 *pBuf );
//  153 static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
//  154 static void MT_ZdoStartupFromApp(uint8 *pBuf);
//  155 static void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
//  156 static void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
//  157 static void MT_ZdoSetRejoinParameters(uint8 *pBuf);
//  158 #endif /* MT_ZDO_FUNC */
//  159 
//  160 #if defined (MT_ZDO_CB_FUNC)
//  161 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
//  162 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
//  163 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
//  164 void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
//  165 void* MT_ZdoSrcRtgCB( void *pStr );
//  166 static void *MT_ZdoConcentratorIndCB(void *pStr);
//  167 static void *MT_ZdoLeaveInd(void *vPtr);
//  168 void *MT_ZdoTcDeviceInd( void *params );
//  169 void *MT_ZdoPermitJoinInd( void *duration );
//  170 #endif /* MT_ZDO_CB_FUNC */
//  171 
//  172 #if defined ( MT_ZDO_EXTENSIONS )
//  173 #if ( ZG_BUILD_COORDINATOR_TYPE )
//  174 static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf );
//  175 static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf );
//  176 #endif // ZDO_COORDINATOR
//  177 static void MT_ZdoSecAddLinkKey( uint8 *pBuf );
//  178 static void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
//  179 static void MT_ZdoSecDeviceRemove( uint8 *pBuf );
//  180 static void MT_ZdoExtRouteDisc( uint8 *pBuf );
//  181 static void MT_ZdoExtRouteCheck( uint8 *pBuf );
//  182 static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
//  183 static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
//  184 static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
//  185 static void MT_ZdoExtFindGroup( uint8 *pBuf );
//  186 static void MT_ZdoExtAddGroup( uint8 *pBuf );
//  187 static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
//  188 static void MT_ZdoExtRxIdle( uint8 *pBuf );
//  189 static void MT_ZdoExtNwkInfo( uint8 *pBuf );
//  190 static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf );
//  191 static void MT_ZdoExtSetParams( uint8 *pBuf );
//  192 extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  193 #endif // MT_ZDO_EXTENSIONS
//  194 
//  195 #if defined (MT_ZDO_FUNC)
//  196 /***************************************************************************************************
//  197  * @fn      MT_ZdoInit
//  198  *
//  199  * @brief   MT ZDO initialization
//  200  *
//  201  * @param   none
//  202  *
//  203  * @return  none
//  204  ***************************************************************************************************/
//  205 void MT_ZdoInit(void)
//  206 {
//  207 #ifdef MT_ZDO_CB_FUNC
//  208   /* Register with ZDO for indication callbacks */
//  209   ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
//  210   ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
//  211   ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
//  212   ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &MT_ZdoPermitJoinInd);
//  213   ZDO_RegisterForZdoCB(ZDO_TC_DEVICE_CBID, &MT_ZdoTcDeviceInd);
//  214 #endif
//  215 }
//  216 
//  217 /***************************************************************************************************
//  218  * @fn      MT_ZdoCommandProcessing
//  219  *
//  220  * @brief
//  221  *
//  222  *   Process all the ZDO commands that are issued by test tool
//  223  *
//  224  * @param   pBuf - pointer to the msg buffer
//  225  *
//  226  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  227  *          |  1   |   1   |   1   |  0-255 |
//  228  *
//  229  * @return  status
//  230  ***************************************************************************************************/
//  231 uint8 MT_ZdoCommandProcessing(uint8* pBuf)
//  232 {
//  233   uint8 status = MT_RPC_SUCCESS;
//  234 
//  235   switch (pBuf[MT_RPC_POS_CMD1])
//  236   {
//  237 #if defined ( ZDO_NWKADDR_REQUEST )
//  238     case MT_ZDO_NWK_ADDR_REQ:
//  239       MT_ZdoNWKAddressRequest(pBuf);
//  240       break;
//  241 #endif
//  242 
//  243 #if defined ( ZDO_IEEEADDR_REQUEST )
//  244     case MT_ZDO_IEEE_ADDR_REQ:
//  245       MT_ZdoIEEEAddrRequest(pBuf);
//  246       break;
//  247 #endif
//  248 
//  249 #if defined ( ZDO_NODEDESC_REQUEST )
//  250     case MT_ZDO_NODE_DESC_REQ:
//  251       MT_ZdoNodeDescRequest(pBuf);
//  252       break;
//  253 #endif
//  254 
//  255 #if defined ( ZDO_POWERDESC_REQUEST )
//  256     case MT_ZDO_POWER_DESC_REQ:
//  257       MT_ZdoPowerDescRequest(pBuf);
//  258       break;
//  259 #endif
//  260 
//  261 #if defined ( ZDO_SIMPLEDESC_REQUEST )
//  262     case MT_ZDO_SIMPLE_DESC_REQ:
//  263       MT_ZdoSimpleDescRequest(pBuf);
//  264       break;
//  265 #endif
//  266 
//  267 #if defined ( ZDO_ACTIVEEP_REQUEST )
//  268     case MT_ZDO_ACTIVE_EP_REQ:
//  269       MT_ZdoActiveEpRequest(pBuf);
//  270       break;
//  271 #endif
//  272 
//  273 #if defined ( ZDO_MATCH_REQUEST )
//  274     case MT_ZDO_MATCH_DESC_REQ:
//  275       MT_ZdoMatchDescRequest(pBuf);
//  276       break;
//  277 #endif
//  278 
//  279 #if defined ( ZDO_COMPLEXDESC_REQUEST )
//  280     case MT_ZDO_COMPLEX_DESC_REQ:
//  281       MT_ZdoComplexDescRequest(pBuf);
//  282       break;
//  283 #endif
//  284 
//  285 #if defined ( ZDO_USERDESC_REQUEST )
//  286     case MT_ZDO_USER_DESC_REQ:
//  287       MT_ZdoUserDescRequest(pBuf);
//  288       break;
//  289 #endif
//  290 
//  291 #if defined ( ZDO_ENDDEVICE_ANNCE )
//  292     case MT_ZDO_END_DEV_ANNCE:
//  293       MT_ZdoEndDevAnnce(pBuf);
//  294       break;
//  295 #endif
//  296 
//  297 #if defined ( ZDO_USERDESCSET_REQUEST )
//  298     case MT_ZDO_USER_DESC_SET:
//  299       MT_ZdoUserDescSet(pBuf);
//  300       break;
//  301 #endif
//  302 
//  303 #if defined ( ZDO_SERVERDISC_REQUEST )
//  304     case MT_ZDO_SERVICE_DISC_REQ:
//  305       MT_ZdoServiceDiscRequest(pBuf);
//  306       break;
//  307 #endif
//  308 
//  309 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
//  310     case MT_ZDO_END_DEV_BIND_REQ:
//  311       MT_ZdoEndDevBindRequest(pBuf);
//  312       break;
//  313 #endif
//  314 
//  315 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  316     case MT_ZDO_BIND_REQ:
//  317       MT_ZdoBindRequest(pBuf);
//  318       break;
//  319 #endif
//  320 
//  321 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  322     case MT_ZDO_UNBIND_REQ:
//  323       MT_ZdoUnbindRequest(pBuf);
//  324       break;
//  325 #endif
//  326 
//  327 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  328     case MT_ZDO_SET_LINK_KEY:
//  329       MT_ZdoSetLinkKey(pBuf);
//  330       break;
//  331 
//  332     case MT_ZDO_REMOVE_LINK_KEY:
//  333       MT_ZdoRemoveLinkKey(pBuf);
//  334       break;
//  335 
//  336     case MT_ZDO_GET_LINK_KEY:
//  337       MT_ZdoGetLinkKey(pBuf);
//  338       break;
//  339 #endif // MT_SYS_KEY_MANAGEMENT
//  340 
//  341 #if defined ( ZDO_MANUAL_JOIN )
//  342     case MT_ZDO_NWK_DISCOVERY_REQ:
//  343       MT_ZdoNetworkDiscoveryReq(pBuf);
//  344       break;
//  345 
//  346     case MT_ZDO_JOIN_REQ:
//  347       MT_ZdoJoinReq(pBuf);
//  348       break;
//  349 #endif
//  350 
//  351 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
//  352     case MT_ZDO_MGMT_NWKDISC_REQ:
//  353       MT_ZdoMgmtNwkDiscRequest(pBuf);
//  354       break;
//  355 #endif
//  356 
//  357 #if defined ( ZDO_MGMT_LQI_REQUEST )
//  358     case MT_ZDO_MGMT_LQI_REQ:
//  359       MT_ZdoMgmtLqiRequest(pBuf);
//  360       break;
//  361 #endif
//  362 
//  363 #if defined ( ZDO_MGMT_RTG_REQUEST )
//  364     case MT_ZDO_MGMT_RTG_REQ:
//  365       MT_ZdoMgmtRtgRequest(pBuf);
//  366       break;
//  367 #endif
//  368 
//  369 #if defined ( ZDO_MGMT_BIND_REQUEST )
//  370     case MT_ZDO_MGMT_BIND_REQ:
//  371       MT_ZdoMgmtBindRequest(pBuf);
//  372       break;
//  373 #endif
//  374 
//  375 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
//  376     case MT_ZDO_MGMT_LEAVE_REQ:
//  377       MT_ZdoMgmtLeaveRequest(pBuf);
//  378       break;
//  379 #endif
//  380 
//  381 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
//  382     case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
//  383       MT_ZdoMgmtDirectJoinRequest(pBuf);
//  384       break;
//  385 #endif
//  386 
//  387 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
//  388     case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
//  389       MT_ZdoMgmtPermitJoinRequest(pBuf);
//  390       break;
//  391 #endif
//  392 
//  393 #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
//  394     case MT_ZDO_MGMT_NWK_UPDATE_REQ:
//  395       MT_ZdoMgmtNwkUpdateRequest(pBuf);
//  396       break;
//  397 #endif
//  398 
//  399 #if defined ( ZDO_NETWORKSTART_REQUEST )
//  400     case MT_ZDO_STARTUP_FROM_APP:
//  401       MT_ZdoStartupFromApp(pBuf);
//  402       break;
//  403 #endif
//  404 
//  405     case MT_ZDO_SEND_DATA:
//  406       MT_ZdoSendData( pBuf );
//  407       break;
//  408 
//  409     case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
//  410       MT_ZdoNwkAddrOfInterestReq( pBuf );
//  411       break;
//  412 
//  413     case MT_ZDO_MSG_CB_REGISTER:
//  414       MT_ZdoRegisterForZDOMsg(pBuf);
//  415       break;
//  416 
//  417     case MT_ZDO_MSG_CB_REMOVE:
//  418       MT_ZdoRemoveRegisteredCB(pBuf);
//  419       break;
//  420 
//  421     case MT_ZDO_SET_REJOIN_PARAMS:
//  422       MT_ZdoSetRejoinParameters(pBuf);
//  423       break;
//  424 
//  425 #if defined ( MT_ZDO_EXTENSIONS )
//  426 #if ( ZG_BUILD_COORDINATOR_TYPE )
//  427     case MT_ZDO_EXT_UPDATE_NWK_KEY:
//  428       MT_ZdoSecUpdateNwkKey( pBuf );
//  429       break;
//  430 
//  431     case MT_ZDO_EXT_SWITCH_NWK_KEY:
//  432       MT_ZdoSecSwitchNwkKey( pBuf );
//  433       break;
//  434 #endif // ZDO_COORDINATOR
//  435     case MT_ZDO_SEC_ADD_LINK_KEY:
//  436       MT_ZdoSecAddLinkKey( pBuf );
//  437       break;
//  438 
//  439     case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
//  440       MT_ZdoSecEntryLookupExt( pBuf );
//  441       break;
//  442 
//  443     case MT_ZDO_SEC_DEVICE_REMOVE:
//  444        MT_ZdoSecDeviceRemove( pBuf );
//  445        break;
//  446 
//  447     case MT_ZDO_EXT_ROUTE_DISC:
//  448        MT_ZdoExtRouteDisc( pBuf );
//  449        break;
//  450 
//  451     case MT_ZDO_EXT_ROUTE_CHECK:
//  452        MT_ZdoExtRouteCheck( pBuf );
//  453        break;
//  454 
//  455     case MT_ZDO_EXT_REMOVE_GROUP:
//  456       MT_ZdoExtRemoveGroup( pBuf );
//  457       break;
//  458 
//  459     case MT_ZDO_EXT_REMOVE_ALL_GROUP:
//  460       MT_ZdoExtRemoveAllGroup( pBuf );
//  461       break;
//  462 
//  463     case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
//  464       MT_ZdoExtFindAllGroupsEndpoint( pBuf );
//  465       break;
//  466 
//  467     case MT_ZDO_EXT_FIND_GROUP:
//  468       MT_ZdoExtFindGroup( pBuf );
//  469       break;
//  470 
//  471     case MT_ZDO_EXT_ADD_GROUP:
//  472       MT_ZdoExtAddGroup( pBuf );
//  473       break;
//  474 
//  475     case MT_ZDO_EXT_COUNT_ALL_GROUPS:
//  476       MT_ZdoExtCountAllGroups( pBuf );
//  477       break;
//  478 
//  479     case MT_ZDO_EXT_RX_IDLE:
//  480       MT_ZdoExtRxIdle( pBuf );
//  481       break;
//  482 
//  483     case MT_ZDO_EXT_NWK_INFO:
//  484       MT_ZdoExtNwkInfo( pBuf );
//  485       break;
//  486 
//  487     case MT_ZDO_EXT_SEC_APS_REMOVE_REQ:
//  488       MT_ZdoExtSecApsRemoveReq( pBuf );
//  489       break;
//  490 
//  491     case MT_ZDO_FORCE_CONCENTRATOR_CHANGE:
//  492       ZDApp_ForceConcentratorChange();
//  493       break;
//  494 
//  495     case MT_ZDO_EXT_SET_PARAMS:
//  496       MT_ZdoExtSetParams( pBuf );
//  497       break;
//  498 #endif  // MT_ZDO_EXTENSIONS
//  499 
//  500     default:
//  501       status = MT_RPC_ERR_COMMAND_ID;
//  502       break;
//  503   }
//  504 
//  505   return status;
//  506 }
//  507 
//  508 /***************************************************************************************************
//  509  * @fn      MT_ZdoNwkAddrReq
//  510  *
//  511  * @brief   Handle a nwk address request.
//  512  *
//  513  * @param   pData  - MT message data
//  514  *
//  515  * @return  void
//  516  ***************************************************************************************************/
//  517 static void MT_ZdoNWKAddressRequest(uint8 *pBuf)
//  518 {
//  519   uint8 cmdId;
//  520   uint8 retValue;
//  521   uint8 reqType;
//  522   uint8 startIndex;
//  523   uint8 *pExtAddr;
//  524 
//  525   /* parse header */
//  526   cmdId = pBuf[MT_RPC_POS_CMD1];
//  527   pBuf += MT_RPC_FRAME_HDR_SZ;
//  528 
//  529   /* parse parameters */
//  530   pExtAddr = pBuf;
//  531   pBuf += Z_EXTADDR_LEN;
//  532 
//  533   /* Request type */
//  534   reqType = *pBuf++;
//  535 
//  536   /* Start index */
//  537   startIndex = *pBuf;
//  538 
//  539   retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
//  540 
//  541   /* Build and send back the response */
//  542   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  543 
//  544 #if defined ( MT_ZDO_EXTENSIONS )
//  545   {
//  546     // Force a response message if the ext address matches a child of this device
//  547     associated_devices_t *pAssoc;
//  548     uint8 buf[21];
//  549     uint8 *pBuf = buf;
//  550 
//  551     if ( (ZSTACK_ROUTER_BUILD)
//  552       && (((pAssoc = AssocGetWithExt( pExtAddr )) != NULL)
//  553              && (pAssoc->nodeRelation == CHILD_RFD)) )
//  554     {
//  555       uint16 nwkAddr = NLME_GetShortAddr();
//  556 
//  557       *pBuf++ = LO_UINT16(nwkAddr);
//  558       *pBuf++ = HI_UINT16(nwkAddr);
//  559       *pBuf++ = 0;
//  560       *pBuf++ = LO_UINT16(NWK_addr_rsp);
//  561       *pBuf++ = HI_UINT16(NWK_addr_rsp);
//  562       *pBuf++ = 0;
//  563       *pBuf++ = 0;
//  564       *pBuf++ = LO_UINT16(nwkAddr);
//  565       *pBuf++ = HI_UINT16(nwkAddr);
//  566 
//  567       *pBuf++ = ZSuccess;
//  568 
//  569       pBuf = osal_cpyExtAddr( pBuf, pExtAddr );
//  570 
//  571       *pBuf++ = LO_UINT16( pAssoc->shortAddr );
//  572       *pBuf++ = HI_UINT16( pAssoc->shortAddr );
//  573       *pBuf = 0;
//  574 
//  575       MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
//  576                                   MT_ZDO_MSG_CB_INCOMING, 21, buf );
//  577     }
//  578   }
//  579 #endif
//  580 }
//  581 
//  582 /***************************************************************************************************
//  583  * @fn      MT_ZdoIEEEAddrRequest
//  584  *
//  585  * @brief   Handle a IEEE address request.
//  586  *
//  587  * @param   pData  - MT message data
//  588  *
//  589  * @return  void
//  590  ***************************************************************************************************/
//  591 static void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
//  592 {
//  593   uint8 cmdId;
//  594   uint8 retValue;
//  595   uint16 shortAddr;
//  596   uint8 reqType;
//  597   uint8 startIndex;
//  598 
//  599   /* parse header */
//  600   cmdId = pBuf[MT_RPC_POS_CMD1];
//  601   pBuf += MT_RPC_FRAME_HDR_SZ;
//  602 
//  603   /* Dev address */
//  604   shortAddr = osal_build_uint16( pBuf );
//  605   pBuf += 2;
//  606 
//  607   /* request type */
//  608   reqType = *pBuf++;
//  609 
//  610   /* start index */
//  611   startIndex = *pBuf;
//  612 
//  613   retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
//  614 
//  615   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  616 }
//  617 
//  618 /***************************************************************************************************
//  619  * @fn      MT_ZdoNodeDescRequest
//  620  *
//  621  * @brief   Handle a Node Descriptor request.
//  622  *
//  623  * @param   pData  - MT message data
//  624  *
//  625  * @return  void
//  626  ***************************************************************************************************/
//  627 static void MT_ZdoNodeDescRequest (uint8 *pBuf)
//  628 {
//  629   uint8 cmdId;
//  630   uint8 retValue;
//  631   zAddrType_t destAddr;
//  632   uint16 shortAddr;
//  633 
//  634   /* parse header */
//  635   cmdId = pBuf[MT_RPC_POS_CMD1];
//  636   pBuf += MT_RPC_FRAME_HDR_SZ;
//  637 
//  638   /* Destination address */
//  639   destAddr.addrMode = Addr16Bit;
//  640   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  641   pBuf += 2;
//  642 
//  643   /* Network address of interest */
//  644   shortAddr = osal_build_uint16( pBuf );
//  645 
//  646   retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
//  647 
//  648   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  649 }
//  650 
//  651 /***************************************************************************************************
//  652  * @fn      MT_ZdoPowerDescRequest
//  653  *
//  654  * @brief   Handle a Power Descriptor request.
//  655  *
//  656  * @param   pData  - MT message data
//  657  *
//  658  * @return  void
//  659  ***************************************************************************************************/
//  660 static void MT_ZdoPowerDescRequest(uint8 *pBuf)
//  661 {
//  662   uint8 cmdId;
//  663   uint8 retValue;
//  664   zAddrType_t destAddr;
//  665   uint16 shortAddr;
//  666 
//  667   /* parse header */
//  668   cmdId = pBuf[MT_RPC_POS_CMD1];
//  669   pBuf += MT_RPC_FRAME_HDR_SZ;
//  670 
//  671   /* Dev address */
//  672   destAddr.addrMode = Addr16Bit;
//  673   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  674   pBuf += 2;
//  675 
//  676   /* Network address of interest */
//  677   shortAddr = osal_build_uint16( pBuf );
//  678 
//  679   retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
//  680 
//  681   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  682 }
//  683 
//  684 /***************************************************************************************************
//  685  * @fn      MT_ZdoSimpleDescRequest
//  686  *
//  687  * @brief   Handle a Simple Descriptor request.
//  688  *
//  689  * @param   pBuf  - MT message data
//  690  *
//  691  * @return  void
//  692  ***************************************************************************************************/
//  693 static void MT_ZdoSimpleDescRequest(uint8 *pBuf)
//  694 {
//  695   uint8 cmdId;
//  696   uint8 retValue;
//  697   uint8 epInt;
//  698   zAddrType_t destAddr;
//  699   uint16 shortAddr;
//  700 
//  701   /* parse header */
//  702   cmdId = pBuf[MT_RPC_POS_CMD1];
//  703   pBuf += MT_RPC_FRAME_HDR_SZ;
//  704 
//  705   /* Dev address */
//  706   destAddr.addrMode = Addr16Bit;
//  707   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  708   pBuf += 2;
//  709 
//  710   /* Network address of interest */
//  711   shortAddr = osal_build_uint16( pBuf );
//  712   pBuf += 2;
//  713 
//  714   /* endpoint/interface */
//  715   epInt = *pBuf;
//  716 
//  717   retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
//  718 
//  719   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  720 }
//  721 
//  722 /***************************************************************************************************
//  723  * @fn      MT_ZdoActiveEpRequest
//  724  *
//  725  * @brief   Handle a Active EP request.
//  726  *
//  727  * @param   pBuf  - MT message data
//  728  *
//  729  * @return  void
//  730  ***************************************************************************************************/
//  731 static void MT_ZdoActiveEpRequest(uint8 *pBuf)
//  732 {
//  733   uint8 cmdId;
//  734   uint8 retValue;
//  735   zAddrType_t destAddr;
//  736   uint16 shortAddr;
//  737 
//  738   /* parse header */
//  739   cmdId = pBuf[MT_RPC_POS_CMD1];
//  740   pBuf += MT_RPC_FRAME_HDR_SZ;
//  741 
//  742   /* Dev address */
//  743   destAddr.addrMode = Addr16Bit;
//  744   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  745   pBuf += 2;
//  746 
//  747   /* Network address of interest */
//  748   shortAddr = osal_build_uint16( pBuf );
//  749 
//  750   retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
//  751 
//  752   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  753 }
//  754 
//  755 /***************************************************************************************************
//  756  * @fn      MT_ZdoMatchDescRequest
//  757  *
//  758  * @brief   Handle a Match Descriptor request.
//  759  *
//  760  * @param   pBuf  - MT message data
//  761  *
//  762  * @return  void
//  763  ***************************************************************************************************/
//  764 static void MT_ZdoMatchDescRequest(uint8 *pBuf)
//  765 {
//  766   uint8 cmdId;
//  767   uint8 retValue = 0;
//  768   uint8 i, numInClusters, numOutClusters;
//  769   uint16 profileId;
//  770   zAddrType_t destAddr;
//  771   uint16 shortAddr;
//  772   uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
//  773 
//  774   /* parse header */
//  775   cmdId = pBuf[MT_RPC_POS_CMD1];
//  776   pBuf += MT_RPC_FRAME_HDR_SZ;
//  777 
//  778   /* Dev address */
//  779   destAddr.addrMode = Addr16Bit;
//  780   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  781   pBuf += 2;
//  782 
//  783   /* Network address of interest */
//  784   shortAddr = osal_build_uint16( pBuf );
//  785   pBuf += 2;
//  786 
//  787   /* Profile ID */
//  788   profileId = osal_build_uint16( pBuf );
//  789   pBuf += 2;
//  790 
//  791   /* NumInClusters */
//  792   numInClusters = *pBuf++;
//  793   if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
//  794   {
//  795     /* IN clusters */
//  796     for ( i = 0; i < numInClusters; i++ )
//  797     {
//  798       inClusters[i] = osal_build_uint16( pBuf );
//  799       pBuf += 2;
//  800     }
//  801   }
//  802   else
//  803   {
//  804     retValue = ZDP_INVALID_REQTYPE;
//  805   }
//  806 
//  807   /* NumOutClusters */
//  808   numOutClusters = *pBuf++;
//  809   if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
//  810   {
//  811     /* OUT Clusters */
//  812     for ( i = 0; i < numOutClusters; i++ )
//  813     {
//  814       outClusters[i] = osal_build_uint16( pBuf );
//  815       pBuf += 2;
//  816     }
//  817   }
//  818   else
//  819   {
//  820     retValue = ZDP_INVALID_REQTYPE;
//  821   }
//  822 
//  823   if ( retValue == 0 )
//  824   {
//  825     retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
//  826                                        inClusters, numOutClusters, outClusters, 0);
//  827   }
//  828 
//  829   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  830 }
//  831 
//  832 /***************************************************************************************************
//  833  * @fn      MT_ZdoComplexDescRequest
//  834  *
//  835  * @brief   Handle a Complex Descriptor request.
//  836  *
//  837  * @param   pBuf  - MT message data
//  838  *
//  839  * @return  void
//  840  ***************************************************************************************************/
//  841 static void MT_ZdoComplexDescRequest(uint8 *pBuf)
//  842 {
//  843   uint8 cmdId;
//  844   uint8 retValue;
//  845   zAddrType_t destAddr;
//  846   uint16 shortAddr;
//  847 
//  848   /* parse header */
//  849   cmdId = pBuf[MT_RPC_POS_CMD1];
//  850   pBuf += MT_RPC_FRAME_HDR_SZ;
//  851 
//  852   /* Dev address */
//  853   destAddr.addrMode = Addr16Bit;
//  854   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  855   pBuf += 2;
//  856 
//  857   /* Network address of interest */
//  858   shortAddr = osal_build_uint16( pBuf );
//  859 
//  860   retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
//  861 
//  862   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  863 }
//  864 
//  865 /***************************************************************************************************
//  866  * @fn      MT_ZdoUserDescRequest
//  867  *
//  868  * @brief   Handle a User Descriptor request.
//  869  *
//  870  * @param   pBuf  - MT message data
//  871  *
//  872  * @return  void
//  873  ***************************************************************************************************/
//  874 static void MT_ZdoUserDescRequest(uint8 *pBuf)
//  875 {
//  876   uint8 cmdId;
//  877   uint8 retValue;
//  878   zAddrType_t destAddr;
//  879   uint16 shortAddr;
//  880 
//  881   /* parse header */
//  882   cmdId = pBuf[MT_RPC_POS_CMD1];
//  883   pBuf += MT_RPC_FRAME_HDR_SZ;
//  884 
//  885   /* Dev address */
//  886   destAddr.addrMode = Addr16Bit;
//  887   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  888   pBuf += 2;
//  889 
//  890   /* Network address of interest */
//  891   shortAddr = osal_build_uint16( pBuf );
//  892 
//  893   retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
//  894 
//  895   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  896 }
//  897 
//  898 /***************************************************************************************************
//  899  * @fn      MT_ZdoEndDevAnnce
//  900  *
//  901  * @brief   Handle a End Device Announce Descriptor request.
//  902  *
//  903  * @param   pBuf  - MT message data
//  904  *
//  905  * @return  void
//  906  ***************************************************************************************************/
//  907 static void MT_ZdoEndDevAnnce(uint8 *pBuf)
//  908 {
//  909   uint8 cmdId;
//  910   uint8 retValue;
//  911   uint16 shortAddr;
//  912   uint8 *pIEEEAddr;
//  913 
//  914   /* parse header */
//  915   cmdId = pBuf[MT_RPC_POS_CMD1];
//  916   pBuf += MT_RPC_FRAME_HDR_SZ;
//  917 
//  918   /* network address */
//  919   shortAddr = osal_build_uint16( pBuf );
//  920   pBuf += 2;
//  921 
//  922   /* extended address */
//  923   pIEEEAddr = pBuf;
//  924   pBuf += Z_EXTADDR_LEN;
//  925 
//  926   retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
//  927 
//  928   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  929 }
//  930 
//  931 /***************************************************************************************************
//  932  * @fn      MT_ZdoUserDescSet
//  933  *
//  934  * @brief   Handle a User Descriptor Set.
//  935  *
//  936  * @param   pBuf  - MT message data
//  937  *
//  938  * @return  void
//  939  ***************************************************************************************************/
//  940 static void MT_ZdoUserDescSet(uint8 *pBuf)
//  941 {
//  942   uint8 cmdId;
//  943   uint8 retValue;
//  944   zAddrType_t destAddr;
//  945   uint16 shortAddr;
//  946   UserDescriptorFormat_t userDesc;
//  947 
//  948   /* parse header */
//  949   cmdId = pBuf[MT_RPC_POS_CMD1];
//  950   pBuf += MT_RPC_FRAME_HDR_SZ;
//  951 
//  952   /* Dev address */
//  953   destAddr.addrMode = Addr16Bit;
//  954   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
//  955   pBuf += 2;
//  956 
//  957   /* Network address of interest */
//  958   shortAddr = osal_build_uint16( pBuf );
//  959   pBuf += 2;
//  960 
//  961   /* User descriptor */
//  962   userDesc.len = *pBuf++;
//  963   osal_memcpy( userDesc.desc, pBuf, userDesc.len );
//  964 
//  965   retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
//  966 
//  967   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  968 }
//  969 
//  970 /***************************************************************************************************
//  971  * @fn      MT_ZdoServiceDiscRequest
//  972  *
//  973  * @brief   Handle a Server Discovery request.
//  974  *
//  975  * @param   pBuf  - MT message data
//  976  *
//  977  * @return  void
//  978  ***************************************************************************************************/
//  979 static void MT_ZdoServiceDiscRequest(uint8 *pBuf)
//  980 {
//  981   uint8 cmdId;
//  982   uint8 retValue;
//  983   uint16 serviceMask;
//  984 
//  985   /* parse header */
//  986   cmdId = pBuf[MT_RPC_POS_CMD1];
//  987   pBuf += MT_RPC_FRAME_HDR_SZ;
//  988 
//  989   /* Service Mask */
//  990   serviceMask = osal_build_uint16( pBuf );
//  991 
//  992   retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
//  993 
//  994   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  995 }
//  996 
//  997 /***************************************************************************************************
//  998  * @fn      MT_ZdoEndDevBindRequest
//  999  *
// 1000  * @brief   Handle a End Device Bind request.
// 1001  *
// 1002  * @param   pBuf  - MT message data
// 1003  *
// 1004  * @return  void
// 1005  ***************************************************************************************************/
// 1006 static void MT_ZdoEndDevBindRequest(uint8 *pBuf)
// 1007 {
// 1008   uint8 cmdId;
// 1009   uint8 retValue = 0;
// 1010   uint8 i, epInt, numInClusters, numOutClusters;
// 1011   zAddrType_t destAddr;
// 1012   uint16 shortAddr;
// 1013   uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
// 1014 
// 1015   /* parse header */
// 1016   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1017   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1018 
// 1019   /* Dev address */
// 1020   destAddr.addrMode = Addr16Bit;
// 1021   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1022   pBuf += 2;
// 1023 
// 1024   /* Local coordinator of the binding */
// 1025   shortAddr = osal_build_uint16( pBuf );
// 1026   pBuf += 2;
// 1027 
// 1028   /* For now, skip past the extended address */
// 1029   pBuf += Z_EXTADDR_LEN;
// 1030 
// 1031   /* Endpoint */
// 1032   epInt = *pBuf++;
// 1033 
// 1034   /* Profile ID */
// 1035   profileID = osal_build_uint16( pBuf );
// 1036   pBuf += 2;
// 1037 
// 1038   /* NumInClusters */
// 1039   numInClusters = *pBuf++;
// 1040   if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
// 1041   {
// 1042     for ( i = 0; i < numInClusters; i++ )
// 1043     {
// 1044       inClusters[i] = osal_build_uint16( pBuf );
// 1045       pBuf += 2;
// 1046     }
// 1047   }
// 1048   else
// 1049   {
// 1050     retValue = ZDP_INVALID_REQTYPE;
// 1051   }
// 1052 
// 1053   /* NumOutClusters */
// 1054   numOutClusters = *pBuf++;
// 1055   if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
// 1056   {
// 1057     for ( i = 0; i < numOutClusters; i++ )
// 1058     {
// 1059       outClusters[i] = osal_build_uint16( pBuf );
// 1060       pBuf += 2;
// 1061     }
// 1062   }
// 1063   else
// 1064   {
// 1065     retValue = ZDP_INVALID_REQTYPE;
// 1066   }
// 1067 
// 1068   if ( retValue == 0 )
// 1069   {
// 1070     retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
// 1071                                           numInClusters, inClusters, numOutClusters, outClusters, 0);
// 1072   }
// 1073 
// 1074   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1075 }
// 1076 
// 1077 /***************************************************************************************************
// 1078  * @fn      MT_ZdoBindRequest
// 1079  *
// 1080  * @brief   Handle a Bind request.
// 1081  *
// 1082  * @param   pBuf  - MT message data
// 1083  *
// 1084  * @return  void
// 1085  ***************************************************************************************************/
// 1086 static void MT_ZdoBindRequest(uint8 *pBuf)
// 1087 {
// 1088   uint8 cmdId;
// 1089   uint8 retValue;
// 1090   zAddrType_t destAddr, devAddr;
// 1091   uint8 *pSrcAddr, *ptr;
// 1092   uint8 srcEPInt, dstEPInt;
// 1093   uint16 clusterID;
// 1094 
// 1095   /* parse header */
// 1096   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1097   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1098 
// 1099   /* Dev address */
// 1100   destAddr.addrMode = Addr16Bit;
// 1101   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1102   pBuf += 2;
// 1103 
// 1104   /* SrcAddress */
// 1105   pSrcAddr = pBuf;
// 1106   pBuf += Z_EXTADDR_LEN;
// 1107 
// 1108   /* SrcEPInt */
// 1109   srcEPInt = *pBuf++;
// 1110 
// 1111   /* ClusterID */
// 1112   clusterID = osal_build_uint16( pBuf );
// 1113   pBuf += 2;
// 1114 
// 1115   /* Destination Address mode */
// 1116   devAddr.addrMode = *pBuf++;
// 1117 
// 1118   /* Destination Address */
// 1119   if ( devAddr.addrMode == Addr64Bit )
// 1120   {
// 1121     ptr = pBuf;
// 1122     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
// 1123   }
// 1124   else
// 1125   {
// 1126     devAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1127   }
// 1128   /* The short address occupies LSB two bytes */
// 1129   pBuf += Z_EXTADDR_LEN;
// 1130 
// 1131   /* DstEPInt */
// 1132   dstEPInt = *pBuf;
// 1133 
// 1134   retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
// 1135 
// 1136   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1137 }
// 1138 
// 1139 /***************************************************************************************************
// 1140  * @fn      MT_ZdoUnbindRequest
// 1141  *
// 1142  * @brief   Handle a Unbind request.
// 1143  *
// 1144  * @param   pBuf  - MT message data
// 1145  *
// 1146  * @return  void
// 1147  ***************************************************************************************************/
// 1148 static void MT_ZdoUnbindRequest(uint8 *pBuf)
// 1149 {
// 1150   uint8 cmdId;
// 1151   uint8 retValue;
// 1152   zAddrType_t destAddr, devAddr;
// 1153   uint8 *pSrcAddr, *ptr;
// 1154   uint8 srcEPInt, dstEPInt;
// 1155   uint16 clusterID;
// 1156 
// 1157   /* parse header */
// 1158   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1159   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1160 
// 1161   /* dev address */
// 1162   destAddr.addrMode = Addr16Bit;
// 1163   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1164   pBuf += 2;
// 1165 
// 1166   /* SrcAddress */
// 1167   pSrcAddr = pBuf;
// 1168   pBuf += Z_EXTADDR_LEN;
// 1169 
// 1170   /* SrcEPInt */
// 1171   srcEPInt = *pBuf++;
// 1172 
// 1173   /* ClusterID */
// 1174   clusterID = osal_build_uint16( pBuf );
// 1175   pBuf += 2;
// 1176 
// 1177   /* Destination Address mode */
// 1178   devAddr.addrMode = *pBuf++;
// 1179 
// 1180   /* Destination Address */
// 1181   if ( devAddr.addrMode == Addr64Bit )
// 1182   {
// 1183     ptr = pBuf;
// 1184     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
// 1185   }
// 1186   else
// 1187   {
// 1188     devAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1189   }
// 1190   /* The short address occupies LSB two bytes */
// 1191   pBuf += Z_EXTADDR_LEN;
// 1192 
// 1193   /* dstEPInt */
// 1194   dstEPInt = *pBuf;
// 1195 
// 1196   retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
// 1197 
// 1198   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1199 }
// 1200 
// 1201 #if defined (MT_SYS_KEY_MANAGEMENT)
// 1202 /***************************************************************************************************
// 1203  * @fn      MT_ZdoSetLinkKey
// 1204  *
// 1205  * @brief   Set an application or trust center link key.
// 1206  *
// 1207  * @param   pBuf  - MT message data
// 1208  *
// 1209  * @return  void
// 1210  ***************************************************************************************************/
// 1211 static void MT_ZdoSetLinkKey(uint8 *pBuf)
// 1212 {
// 1213   uint8 cmdId;
// 1214   uint8 retValue;
// 1215   uint8 *pExtAddr;
// 1216   uint8 *pKey;
// 1217   uint16 shortAddr;
// 1218 
// 1219   /* parse header */
// 1220   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1221   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1222 
// 1223   /* ShortAddr */
// 1224   shortAddr = osal_build_uint16( pBuf );
// 1225   pBuf += 2;
// 1226 
// 1227   /* Extended Addr */
// 1228   pExtAddr = pBuf;
// 1229   pBuf += Z_EXTADDR_LEN;
// 1230 
// 1231   /* Key data */
// 1232   pKey = pBuf;
// 1233 
// 1234   retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
// 1235 
// 1236   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1237 }
// 1238 
// 1239 /***************************************************************************************************
// 1240  * @fn      MT_ZdoRemoveLinkKey
// 1241  *
// 1242  * @brief   Remove an application or trust center link key.
// 1243  *
// 1244  * @param   pBuf  - MT message data
// 1245  *
// 1246  * @return  void
// 1247  ***************************************************************************************************/
// 1248 static void MT_ZdoRemoveLinkKey(uint8 *pBuf)
// 1249 {
// 1250   uint8 cmdId;
// 1251   uint8 retValue = ZNwkUnknownDevice;
// 1252   uint8 *pExtAddr;
// 1253 
// 1254   /* parse header */
// 1255   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1256   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1257 
// 1258   /* ShortAddr */
// 1259   pExtAddr = pBuf;
// 1260   
// 1261   if( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ))
// 1262   {
// 1263     uint16 tempIndex;
// 1264     APSME_TCLKDevEntry_t TCLKDevEntry;
// 1265     uint8 found;
// 1266                                                    //Reset the frame counter associated to this device  TCLinkKeyFrmCntr
// 1267     tempIndex = APSME_SearchTCLinkKeyEntry(pExtAddr,&found, &TCLKDevEntry);
// 1268     
// 1269     if(found)
// 1270     {
// 1271       uint16 i;
// 1272       
// 1273       i = tempIndex - ZCD_NV_TCLK_TABLE_START;
// 1274       
// 1275       TCLinkKeyFrmCntr[i].txFrmCntr = 0;
// 1276       TCLinkKeyFrmCntr[i].rxFrmCntr = 0;
// 1277       
// 1278       if(TCLKDevEntry.keyAttributes == ZG_PROVISIONAL_KEY)
// 1279       {
// 1280         APSME_EraseICEntry(&TCLKDevEntry.SeedShift_IcIndex);
// 1281       }
// 1282       
// 1283       osal_memset(&TCLKDevEntry,0,sizeof(APSME_TCLKDevEntry_t));
// 1284       osal_nv_write( ( tempIndex), 0, sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
// 1285       retValue = ZSuccess;
// 1286     }
// 1287   }
// 1288   else
// 1289   {
// 1290     retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
// 1291   }
// 1292   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1293 }
// 1294 
// 1295 /***************************************************************************************************
// 1296  * @fn      MT_ZdoGetLinkKey
// 1297  *
// 1298  * @brief   Get the application link key.
// 1299  *
// 1300  * @param   pBuf  - MT message data
// 1301  *
// 1302  * @return  void
// 1303  ***************************************************************************************************/
// 1304 static void MT_ZdoGetLinkKey(uint8 *pBuf)
// 1305 {
// 1306   uint8 cmdId;
// 1307   uint8 retValue;
// 1308   uint8 *pExtAddr;
// 1309   uint8 *retBuf = NULL;
// 1310   uint8 len;
// 1311   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 1312   uint16 apsLinkKeyNvId;
// 1313 
// 1314   // parse header
// 1315   len = pBuf[MT_RPC_POS_LEN];
// 1316   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1317   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1318 
// 1319   // Extended Address
// 1320   pExtAddr = pBuf;
// 1321 
// 1322   // Check for illegal extended address -- indicating network address lookup
// 1323   if ( ( pExtAddr[2] == 0xFE ) && ( pExtAddr[3] == 0xFF ) &&
// 1324        ( len >= Z_EXTADDR_LEN )            )
// 1325   {
// 1326     uint16 nwkAddr;
// 1327     nwkAddr = osal_build_uint16( pExtAddr );
// 1328     (void)AddrMgrExtAddrLookup( nwkAddr, pExtAddr );
// 1329   }
// 1330 
// 1331   // Fetch the key NV ID
// 1332   retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
// 1333 
// 1334   if (retValue == ZSuccess)
// 1335   {
// 1336     if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
// 1337     {
// 1338       // retrieve key from NV
// 1339       if (osal_nv_read( apsLinkKeyNvId, 0,
// 1340                        sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
// 1341       {
// 1342         retValue = ZNwkUnknownDevice;
// 1343       }
// 1344     }
// 1345     else
// 1346     {
// 1347       retValue = ZNwkUnknownDevice;
// 1348     }
// 1349   }
// 1350 
// 1351   // Construct the response message
// 1352   len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
// 1353   if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
// 1354   {
// 1355     if (retValue == ZSuccess)
// 1356     {
// 1357       // Extended Address
// 1358       osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
// 1359 
// 1360       // Key data
// 1361       osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
// 1362     }
// 1363     else
// 1364     {
// 1365       // Failed case - set the rest fields to all FF
// 1366       osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
// 1367     }
// 1368 
// 1369     retBuf[0] = retValue;  // Status
// 1370 
// 1371     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
// 1372 
// 1373     // clear retBuf because it contains key data and free allocated memory
// 1374     osal_memset(retBuf, 0x00, len);
// 1375 
// 1376     osal_mem_free(retBuf);
// 1377   }
// 1378 
// 1379   // clear copy of key in RAM
// 1380   if (pApsLinkKey != NULL)
// 1381   {
// 1382     osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
// 1383 
// 1384     osal_mem_free(pApsLinkKey);
// 1385   }
// 1386 
// 1387   return;
// 1388 }
// 1389 #endif // MT_SYS_KEY_MANAGEMENT
// 1390 
// 1391 #if defined (MT_ZDO_MGMT)
// 1392 /***************************************************************************************************
// 1393  * @fn      MT_ZdoMgmtNwkDiscRequest
// 1394  *
// 1395  * @brief   Handle a Mgmt Nwk Discovery request.
// 1396  *
// 1397  * @param   pBuf  - MT message data
// 1398  *
// 1399  * @return  void
// 1400  ***************************************************************************************************/
// 1401 static void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
// 1402 {
// 1403   uint8 cmdId;
// 1404   uint8 retValue;
// 1405   zAddrType_t destAddr;
// 1406   uint32 scanChannels;
// 1407   uint8 scanDuration, startIndex;
// 1408 
// 1409   /* parse header */
// 1410   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1411   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1412 
// 1413   /* Dev address */
// 1414   destAddr.addrMode = Addr16Bit;
// 1415   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1416   pBuf += 2;
// 1417 
// 1418   /* Scan Channels */
// 1419   scanChannels = osal_build_uint32(pBuf, 4);
// 1420   pBuf += 4;
// 1421 
// 1422   /* Scan Duration */
// 1423   scanDuration = *pBuf++;
// 1424 
// 1425   /* Start Index */
// 1426   startIndex = *pBuf;
// 1427 
// 1428   retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
// 1429 
// 1430   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1431 }
// 1432 
// 1433 /***************************************************************************************************
// 1434  * @fn      MT_ZdoMgmtLqiRequest
// 1435  *
// 1436  * @brief   Handle a Mgmt Lqi request.
// 1437  *
// 1438  * @param   pBuf  - MT message data
// 1439  *
// 1440  * @return  void
// 1441  ***************************************************************************************************/
// 1442 static void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
// 1443 {
// 1444   uint8 cmdId;
// 1445   uint8 retValue;
// 1446   zAddrType_t destAddr;
// 1447   uint8 startIndex;
// 1448 
// 1449   /* parse header */
// 1450   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1451   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1452 
// 1453   /* Dev address */
// 1454   destAddr.addrMode = Addr16Bit;
// 1455   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1456   pBuf += 2;
// 1457 
// 1458   /* Start Index */
// 1459   startIndex = *pBuf;
// 1460 
// 1461   retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
// 1462 
// 1463   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1464 }
// 1465 
// 1466 /***************************************************************************************************
// 1467  * @fn      MT_ZdoMgmtRtgRequest
// 1468  *
// 1469  * @brief   Handle a Mgmt Rtg request.
// 1470  *
// 1471  * @param   pBuf  - MT message data
// 1472  *
// 1473  * @return  void
// 1474  ***************************************************************************************************/
// 1475 static void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
// 1476 {
// 1477   uint8 cmdId;
// 1478   uint8 retValue;
// 1479   zAddrType_t destAddr;
// 1480   uint8 startIndex;
// 1481 
// 1482   /* parse header */
// 1483   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1484   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1485 
// 1486   /* Dev Address */
// 1487   destAddr.addrMode = Addr16Bit;
// 1488   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1489   pBuf += 2;
// 1490 
// 1491   /* Start Index */
// 1492   startIndex = *pBuf;
// 1493 
// 1494   retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
// 1495 
// 1496   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1497 }
// 1498 
// 1499 /***************************************************************************************************
// 1500  * @fn      MT_ZdoMgmtBindRequest
// 1501  *
// 1502  * @brief   Handle a Mgmt Bind request.
// 1503  *
// 1504  * @param   pBuf  - MT message data
// 1505  *
// 1506  * @return  void
// 1507  ***************************************************************************************************/
// 1508 static void MT_ZdoMgmtBindRequest(uint8 *pBuf)
// 1509 {
// 1510   uint8 cmdId;
// 1511   uint8 retValue;
// 1512   zAddrType_t destAddr;
// 1513   uint8 startIndex;
// 1514 
// 1515   /* parse header */
// 1516   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1517   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1518 
// 1519   /* Dev Address */
// 1520   destAddr.addrMode = Addr16Bit;
// 1521   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1522   pBuf += 2;
// 1523 
// 1524   /* Start Index */
// 1525   startIndex = *pBuf;
// 1526 
// 1527   retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
// 1528 
// 1529   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1530 }
// 1531 
// 1532 /***************************************************************************************************
// 1533  * @fn      MT_ZdoMgmtLeaveRequest
// 1534  *
// 1535  * @brief   Handle a Mgmt Leave request.
// 1536  *
// 1537  * @param   pBuf  - MT message data
// 1538  *
// 1539  * @return  void
// 1540  ***************************************************************************************************/
// 1541 static void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
// 1542 {
// 1543   uint8 cmdId;
// 1544   uint8 retValue;
// 1545   zAddrType_t destAddr;
// 1546   uint8 *pIEEEAddr;
// 1547   uint8 removeChildren;
// 1548   uint8 rejoin;
// 1549 
// 1550   /* parse header */
// 1551   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1552   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1553 
// 1554   /* Destination Address */
// 1555   destAddr.addrMode = Addr16Bit;
// 1556   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1557   pBuf += 2;
// 1558 
// 1559   /* IEEE address */
// 1560   pIEEEAddr = pBuf;
// 1561   pBuf += Z_EXTADDR_LEN;
// 1562 
// 1563   /* Rejoin if bit0 is set */
// 1564   rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
// 1565 
// 1566   /* Remove Children if bit1 is set */
// 1567   removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
// 1568 
// 1569   retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
// 1570 
// 1571   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1572 }
// 1573 
// 1574 /***************************************************************************************************
// 1575  * @fn      MT_ZdoMgmtDirectJoinRequest
// 1576  *
// 1577  * @brief   Handle a Mgmt Direct Join request.
// 1578  *
// 1579  * @param   pBuf  - MT message data
// 1580  *
// 1581  * @return  void
// 1582  ***************************************************************************************************/
// 1583 static void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
// 1584 {
// 1585   uint8 cmdId;
// 1586   uint8 retValue;
// 1587   zAddrType_t destAddr;
// 1588   uint8 *deviceAddr;
// 1589   uint8 capInfo;
// 1590 
// 1591   /* parse header */
// 1592   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1593   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1594 
// 1595   /* Destination Address */
// 1596   destAddr.addrMode = Addr16Bit;
// 1597   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1598   pBuf += 2;
// 1599 
// 1600   /* Device Address */
// 1601   deviceAddr = pBuf;
// 1602   pBuf += Z_EXTADDR_LEN;
// 1603 
// 1604   /* Capability information */
// 1605   capInfo = *pBuf;
// 1606 
// 1607   retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
// 1608 
// 1609   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1610 }
// 1611 
// 1612 /***************************************************************************************************
// 1613  * @fn      MT_ZdoMgmtPermitJoinRequest
// 1614  *
// 1615  * @brief   Handle a Mgmt Permit Join request.
// 1616  *
// 1617  * @param   pBuf  - MT message data
// 1618  *
// 1619  * @return  void
// 1620  ***************************************************************************************************/
// 1621 static void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
// 1622 {
// 1623   uint8 cmdId;
// 1624   uint8 dataLn;
// 1625   uint8 retValue;
// 1626   uint8 duration;
// 1627   uint8 tcSignificance;
// 1628   zAddrType_t destAddr;
// 1629 
// 1630   /* parse header */
// 1631   dataLn = pBuf[MT_RPC_POS_LEN];
// 1632   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1633   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1634 
// 1635   if ( 4 == dataLn )
// 1636   {
// 1637     /* addrMode was hardwired up to Z-Stack 2.6.0 */
// 1638     destAddr.addrMode = afAddr16Bit;
// 1639   }
// 1640   else
// 1641   {
// 1642     /* addrMode is a parameter after Z-Stack 2.6.0 */
// 1643     destAddr.addrMode = *pBuf++;
// 1644   }
// 1645 
// 1646   /* Destination Address */
// 1647   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1648   pBuf += 2;
// 1649 
// 1650   /* Duration */
// 1651   duration = *pBuf++;
// 1652 
// 1653   /* Trust center significance */
// 1654   tcSignificance = *pBuf;
// 1655 
// 1656   ignoreIndication = TRUE;
// 1657   retValue = (uint8)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
// 1658   ignoreIndication = FALSE;
// 1659 
// 1660   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1661 }
// 1662 
// 1663 /***************************************************************************************************
// 1664  * @fn      MT_ZdoMgmtNwkUpdateRequest
// 1665  *
// 1666  * @brief   Handle a Mgmt Nwk Update request.
// 1667  *
// 1668  * @param   pBuf  - MT message data
// 1669  *
// 1670  * @return  void
// 1671  ***************************************************************************************************/
// 1672 static void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
// 1673 {
// 1674   uint8 cmdId;
// 1675   uint8 retValue;
// 1676   zAddrType_t destAddr;
// 1677   uint32 channelMask;
// 1678   uint8 scanDuration, scanCount;
// 1679   uint16 nwkManagerAddr;
// 1680 
// 1681     /* parse header */
// 1682   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1683   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1684 
// 1685   /* Destination address */
// 1686   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1687   pBuf += 2;
// 1688 
// 1689   /* Destination address mode */
// 1690   destAddr.addrMode = *pBuf++;
// 1691 
// 1692   channelMask = osal_build_uint32(pBuf, 4);
// 1693   pBuf += 4;
// 1694 
// 1695   /* Scan duration */
// 1696   scanDuration = *pBuf++;
// 1697 
// 1698   /* Scan count */
// 1699   scanCount = *pBuf++;
// 1700 
// 1701   /* NWK manager address */
// 1702   nwkManagerAddr = osal_build_uint16( pBuf );
// 1703 
// 1704   /* Send the Management Network Update request */
// 1705   retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1706                                           scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1707 
// 1708   /*
// 1709     Since we don't recevied our own broadcast messages, we should
// 1710     send a unicast copy of the message to ourself.
// 1711   */
// 1712   if ( destAddr.addrMode == AddrBroadcast )
// 1713   {
// 1714     destAddr.addrMode = Addr16Bit;
// 1715     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
// 1716     retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1717                                              scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1718   }
// 1719 
// 1720   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1721 }
// 1722 #endif /* MT_ZDO_MGMT */
// 1723 
// 1724 /***************************************************************************************************
// 1725  * @fn      MT_ZdoSendData
// 1726  *
// 1727  * @brief   Handle a ZDO Send Data request.
// 1728  *
// 1729  * @param   pBuf  - MT message data
// 1730  *
// 1731  * @return  void
// 1732  ***************************************************************************************************/
// 1733 static void MT_ZdoSendData( uint8 *pBuf )
// 1734 {
// 1735   uint8 cmdId;
// 1736   uint8 retValue;
// 1737   zAddrType_t destAddr;
// 1738   uint8 transSeq;
// 1739   uint8 len;
// 1740   uint16 cmd;
// 1741 
// 1742     /* parse header */
// 1743   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1744   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1745 
// 1746   /* Destination address */
// 1747   destAddr.addrMode = Addr16Bit;
// 1748   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1749   pBuf += 2;
// 1750 
// 1751   /* Destination address mode */
// 1752   transSeq = *pBuf++;
// 1753 
// 1754   /* cmd */
// 1755   cmd = osal_build_uint16( pBuf );
// 1756   pBuf += 2;
// 1757   len = *pBuf++;
// 1758 
// 1759   /* Send the Generic ZDO message request */
// 1760   retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
// 1761   /*
// 1762     Since we don't recevied our own broadcast messages, we should
// 1763     send a unicast copy of the message to ourself.
// 1764   */
// 1765   if ( destAddr.addrMode == AddrBroadcast )
// 1766   {
// 1767     destAddr.addrMode = Addr16Bit;
// 1768     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
// 1769     retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
// 1770   }
// 1771 
// 1772   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1773 }
// 1774 
// 1775 /***************************************************************************************************
// 1776  * @fn      MT_ZdoNwkAddrOfInterestReq
// 1777  *
// 1778  * @brief   Handle a ZDO Network Address of Interest request.
// 1779  *
// 1780  * @param   pBuf  - MT message data
// 1781  *
// 1782  * @return  void
// 1783  ***************************************************************************************************/
// 1784 static void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
// 1785 {
// 1786   uint8 cmdId;
// 1787   uint8 retValue;
// 1788   zAddrType_t destAddr;
// 1789   uint16 nwkAddr;
// 1790   uint8 cmd;
// 1791 
// 1792     /* parse header */
// 1793   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1794   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1795 
// 1796   /* Destination address */
// 1797   destAddr.addrMode = Addr16Bit;
// 1798   destAddr.addr.shortAddr = osal_build_uint16( pBuf );
// 1799   pBuf += 2;
// 1800 
// 1801   /* Network Address of Interest */
// 1802   nwkAddr = osal_build_uint16( pBuf );
// 1803   pBuf += 2;
// 1804 
// 1805   cmd = *pBuf++;
// 1806 
// 1807   /* Send the Generic ZDO message request */
// 1808   retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
// 1809 
// 1810 
// 1811   /*
// 1812     Since we don't recevied our own broadcast messages, we should
// 1813     send a unicast copy of the message to ourself.
// 1814   */
// 1815   if ( destAddr.addrMode == AddrBroadcast )
// 1816   {
// 1817     destAddr.addrMode = Addr16Bit;
// 1818     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
// 1819     retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
// 1820   }
// 1821 
// 1822   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1823 }
// 1824 
// 1825 /***************************************************************************************************
// 1826  * @fn      MT_ZdoStartupFromApp
// 1827  *
// 1828  * @brief   Handle a Startup from App request.
// 1829  *
// 1830  * @param   pBuf  - MT message data
// 1831  *
// 1832  * @return  void
// 1833  ***************************************************************************************************/
// 1834 static void MT_ZdoStartupFromApp(uint8 *pBuf)
// 1835 {
// 1836   uint8 cmd0, cmd1, retValue;
// 1837   retValue = ZSuccess;
// 1838 
// 1839   /* parse header */
// 1840   cmd0 = pBuf[MT_RPC_POS_CMD0];
// 1841   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 1842   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1843   
// 1844   if(ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE)
// 1845   {
// 1846     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION);
// 1847   }
// 1848   else if (ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE)
// 1849   {
// 1850     bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING);
// 1851   }
// 1852   else
// 1853   {
// 1854      retValue = ZFailure;
// 1855   }
// 1856 
// 1857   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
// 1858   {
// 1859     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
// 1860   }
// 1861 }
// 1862 
// 1863 
// 1864 /***************************************************************************************************
// 1865  * @fn      MT_ZdoNetworkDiscoveryReq
// 1866  *
// 1867  * @brief   Handle a ZDO Network Discovery request.
// 1868  *
// 1869  * @param   pBuf  - MT message data
// 1870  *
// 1871  * @return  void
// 1872  ***************************************************************************************************/
// 1873 static void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
// 1874 {
// 1875   uint8  retValue = ZFailure;
// 1876   uint8  cmdId;
// 1877   uint32 scanChannels;
// 1878 
// 1879   /* parse header */
// 1880   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1881   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1882 
// 1883   /* Packet format */
// 1884   /* scan channels (4) | scan duration (1) */
// 1885 
// 1886   /* Scan channels */
// 1887   scanChannels = osal_build_uint32(pBuf, 4);
// 1888   pBuf += 4;
// 1889 
// 1890   retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
// 1891 
// 1892   // Register ZDO callback for MT to handle the network discovery confirm
// 1893   // and beacon notification confirm
// 1894   ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
// 1895   ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
// 1896 
// 1897   /* Build and send back the response */
// 1898   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
// 1899 }
// 1900 
// 1901 
// 1902 /***************************************************************************************************
// 1903  * @fn      MT_ZdoJoinReq
// 1904  *
// 1905  * @brief   Handle a ZDO Join request.
// 1906  *
// 1907  * @param   pBuf  - MT message data
// 1908  *
// 1909  * @return  void
// 1910  ***************************************************************************************************/
// 1911 static void MT_ZdoJoinReq(uint8 *pBuf)
// 1912 {
// 1913   uint8  retValue = ZFailure;
// 1914   uint8  cmdId;
// 1915   uint16 panId;
// 1916   uint16 chosenParent;
// 1917 
// 1918   /* parse header */
// 1919   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1920   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1921 
// 1922   /* Packet format */
// 1923   /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
// 1924    * parentDepth (1) | stackProfile  (1)
// 1925    */
// 1926 
// 1927   panId        = osal_build_uint16( &pBuf[1] );
// 1928   chosenParent = osal_build_uint16( &pBuf[11] );
// 1929 
// 1930   retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
// 1931 
// 1932   /* Register for MT to receive Join Confirm */
// 1933   ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
// 1934 
// 1935   /* Build and send back the response */
// 1936   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
// 1937 
// 1938 }
// 1939 
// 1940 
// 1941 /***************************************************************************************************
// 1942  * @fn          MT_ZdoNwkDiscoveryCnfCB
// 1943  *
// 1944  * @brief       Send an indication to inform host device the completion of
// 1945  *              network discovery scan
// 1946  *
// 1947  * @param       pStr - pointer to a parameter and a structure of parameters
// 1948  *
// 1949  * @return      void
// 1950  ***************************************************************************************************/
// 1951 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
// 1952 {
// 1953   /* pStr: status (uint8) */
// 1954   /* Packet Format */
// 1955   /* Status (1) */
// 1956 
// 1957   // Scan completed. De-register the callback with ZDO
// 1958   ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
// 1959   ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
// 1960 
// 1961   // Send the buffered beacon indication
// 1962   MT_ZdoBeaconIndCB ( NULL );
// 1963 
// 1964   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1965                                          MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
// 1966   return NULL;
// 1967 }
// 1968 
// 1969 /***************************************************************************************************
// 1970  * @fn          MT_ZdoBeaconIndCB
// 1971  *
// 1972  * @brief       Send an indication to host device of a beacon notification
// 1973  *
// 1974  * @param       pStr -  pointer to a parameter and a structure of parameters
// 1975  *
// 1976  * @return      void
// 1977  ***************************************************************************************************/
// 1978 void *MT_ZdoBeaconIndCB ( void *pStr )
// 1979 {
// 1980   zdoBeaconInd_t *pBeacon = pStr;
// 1981   uint8 *pTmp;
// 1982 
// 1983   /* Packet Format */
// 1984   /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
// 1985 
// 1986   if( pStr != NULL)
// 1987   {
// 1988     if( pBeaconIndBuf == NULL )
// 1989     {
// 1990       // If pBeaconIndBuf has not been allocated yet
// 1991       // allocate memory now with MAX_UART_TX_BUFF
// 1992       if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
// 1993       {
// 1994         // Memory failure
// 1995         return NULL;
// 1996       }
// 1997       pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
// 1998     }
// 1999 
// 2000     // Fill in the buffer with the beacon indication
// 2001     pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
// 2002     *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
// 2003     *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
// 2004     *pTmp++ = LO_UINT16(pBeacon->panID);
// 2005     *pTmp++ = HI_UINT16(pBeacon->panID);
// 2006     *pTmp++ = pBeacon->logicalChannel;
// 2007     *pTmp++ = pBeacon->permitJoining;
// 2008     *pTmp++ = pBeacon->routerCapacity;
// 2009     *pTmp++ = pBeacon->deviceCapacity;
// 2010     *pTmp++ = pBeacon->protocolVersion;
// 2011     *pTmp++ = pBeacon->stackProfile;
// 2012     *pTmp++ = pBeacon->LQI;
// 2013     *pTmp++ = pBeacon->depth;
// 2014     *pTmp++ = pBeacon->updateID;
// 2015     osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
// 2016 
// 2017     pBeaconIndBuf[0] += 1; // Increment the devCnt
// 2018 
// 2019     // Check if the buffer can fit in another beacon
// 2020     if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
// 2021     {
// 2022       // Packet full, send the packet over MT
// 2023       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2024                                    MT_ZDO_BEACON_NOTIFY_IND,
// 2025                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
// 2026       pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
// 2027     }
// 2028   }
// 2029   else
// 2030   {
// 2031     if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
// 2032     {
// 2033       // End of beacon indication, send the packet over MT
// 2034       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2035                                    MT_ZDO_BEACON_NOTIFY_IND,
// 2036                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
// 2037     }
// 2038     // Free the allocated memory
// 2039     if(pBeaconIndBuf != NULL)
// 2040     {
// 2041       osal_mem_free(pBeaconIndBuf);
// 2042       pBeaconIndBuf = NULL;
// 2043     }
// 2044   }
// 2045 
// 2046   return NULL;
// 2047 }
// 2048 
// 2049 /***************************************************************************************************
// 2050  * @fn          MT_ZdoJoinCnfCB
// 2051  *
// 2052  * @brief       Handle the ZDO Join Confirm from ZDO
// 2053  *
// 2054  * @param       pStr - pointer to a parameter and a structure of parameters
// 2055  *
// 2056  * @return      void
// 2057  ***************************************************************************************************/
// 2058 void *MT_ZdoJoinCnfCB ( void *pStr )
// 2059 {
// 2060   /* pStr: zdoJoinCnf_t* */
// 2061   /* Packet Format */
// 2062   /* Status (1) | device addr (2) | parent addr (2) */
// 2063 
// 2064   uint8 buf[MT_ZDO_JOIN_CNF_LEN];
// 2065   zdoJoinCnf_t *joinCnf = pStr;
// 2066 
// 2067   /* Join Complete. De-register the callback with ZDO */
// 2068   ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
// 2069 
// 2070   buf[0] = joinCnf->status;
// 2071   buf[1] = LO_UINT16( joinCnf->deviceAddr );
// 2072   buf[2] = HI_UINT16( joinCnf->deviceAddr );
// 2073   buf[3] = LO_UINT16( joinCnf->parentAddr );
// 2074   buf[4] = HI_UINT16( joinCnf->parentAddr );
// 2075 
// 2076   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2077                                MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
// 2078 
// 2079   return NULL;
// 2080 }
// 2081 
// 2082 /*************************************************************************************************
// 2083  * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
// 2084  *
// 2085  * @brief   MT proxy for ZDO_RegisterForZDOMsg.
// 2086  *
// 2087  * @param   pBuf  - MT message data
// 2088  *
// 2089  * @return  void
// 2090  *************************************************************************************************/
// 2091 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
// 2092 {
// 2093   uint8 cmd0, cmd1, tmp;
// 2094   uint16 cId;
// 2095 
// 2096   /* parse header */
// 2097   cmd0 = pBuf[MT_RPC_POS_CMD0];
// 2098   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 2099   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2100 
// 2101   cId = osal_build_uint16( pBuf );
// 2102   tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
// 2103 
// 2104   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
// 2105   {
// 2106     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
// 2107   }
// 2108 }
// 2109 
// 2110 /*************************************************************************************************
// 2111  * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
// 2112  *
// 2113  * @brief   MT proxy for ZDO_RemoveRegisteredCB.
// 2114  *
// 2115  * @param   pBuf  - MT message data
// 2116  *
// 2117  * @return  void
// 2118  *************************************************************************************************/
// 2119 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
// 2120 {
// 2121   uint8 cmd0, cmd1, tmp;
// 2122   uint16 cId;
// 2123 
// 2124   /* parse header */
// 2125   cmd0 = pBuf[MT_RPC_POS_CMD0];
// 2126   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 2127   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2128 
// 2129   cId = osal_build_uint16( pBuf );
// 2130   tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
// 2131 
// 2132   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
// 2133   {
// 2134     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
// 2135   }
// 2136 }
// 2137 
// 2138 /*************************************************************************************************
// 2139  * @fn      MT_ZdoSetRejoinParameters(pBuf);
// 2140  *
// 2141  * @brief   Set Rejoin backoff and scan duration from MT
// 2142  *
// 2143  * @param   pBuf  - MT message data
// 2144  *
// 2145  * @return  void
// 2146  *************************************************************************************************/
// 2147 static void MT_ZdoSetRejoinParameters(uint8 *pBuf)
// 2148 {
// 2149   uint8 cmdId;
// 2150   uint8 retValue;
// 2151   uint32 rejoinBackoffDuration, rejoinScanDuration;
// 2152 
// 2153   // parse header
// 2154   cmdId = pBuf[MT_RPC_POS_CMD1];
// 2155   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2156 
// 2157   //Rejoin Backoff Duration
// 2158   rejoinBackoffDuration = osal_build_uint32(pBuf, 4);
// 2159   pBuf += 4;
// 2160 
// 2161   //Rejoin Scan Duration
// 2162   rejoinScanDuration = osal_build_uint32(pBuf, 4);
// 2163 
// 2164   ZDApp_SetRejoinScanDuration(rejoinScanDuration);
// 2165   ZDApp_SetRejoinBackoffDuration(rejoinBackoffDuration);
// 2166 
// 2167   retValue = ZSuccess;
// 2168 
// 2169   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 2170 
// 2171 }
// 2172 
// 2173 #endif /* MT_ZDO_FUNC */
// 2174 
// 2175 
// 2176 /***************************************************************************************************
// 2177  * Callback handling function
// 2178  ***************************************************************************************************/
// 2179 
// 2180 #if defined (MT_ZDO_CB_FUNC)
// 2181 
// 2182 /***************************************************************************************************
// 2183  * @fn      MT_ZdoStateChangeCB
// 2184  *
// 2185  * @brief   Handle state change OSAL message from ZDO.
// 2186  *
// 2187  * @param   pMsg  - Message data
// 2188  *
// 2189  * @return  void
// 2190  */
// 2191 void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
// 2192 {
// 2193   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2194                                        MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
// 2195 }
// 2196 
// 2197 /***************************************************************************************************
// 2198  * @fn     MT_ZdoDirectCB()
// 2199  *
// 2200  * @brief  ZDO direct callback.  Build an MT message directly from the
// 2201  *         over-the-air ZDO message.
// 2202  *
// 2203  * @param  pData - Incoming AF frame.
// 2204  *
// 2205  * @return  none
// 2206  ***************************************************************************************************/
// 2207 void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 2208 {
// 2209   uint8 len, *pBuf;
// 2210   uint16 origClusterId;
// 2211 
// 2212   // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
// 2213   origClusterId = pData->clusterId;
// 2214 
// 2215   // Is the message an exception or not a response?
// 2216   if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
// 2217   {
// 2218     return;  // Handled somewhere else or not needed.
// 2219   }
// 2220 
// 2221   /* ZDO data starts after one-byte sequence number and the msg buffer length includes
// 2222    * two bytes for srcAddr.
// 2223    */
// 2224   len = pData->cmd.DataLength - 1 + sizeof(uint16);
// 2225 
// 2226   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2227   {
// 2228     uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
// 2229 
// 2230     pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
// 2231     pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
// 2232 
// 2233     /* copy ZDO data, skipping one-byte sequence number */
// 2234     osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
// 2235 
// 2236     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 2237     osal_mem_free(pBuf);
// 2238   }
// 2239 }
// 2240 
// 2241 /***************************************************************************************************
// 2242  * @fn     MT_ZdoHandleExceptions()
// 2243  *
// 2244  * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
// 2245  *
// 2246  * @param  pData - Incoming AF frame.
// 2247  *
// 2248  * @return  TRUE if handled by this function, FALSE if not
// 2249  ***************************************************************************************************/
// 2250 static uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 2251 {
// 2252   uint8 ret = TRUE;
// 2253   ZDO_NwkIEEEAddrResp_t *nwkRsp;
// 2254   ZDO_DeviceAnnce_t devAnnce;
// 2255   uint8 doDefault = FALSE;
// 2256 
// 2257   switch ( inMsg->clusterID )
// 2258   {
// 2259     case NWK_addr_rsp:
// 2260     case IEEE_addr_rsp:
// 2261       if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
// 2262       {
// 2263         if ( nwkRsp->status == ZDO_SUCCESS )
// 2264         {
// 2265           MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
// 2266         }
// 2267         osal_mem_free( nwkRsp );
// 2268       }
// 2269       break;
// 2270 
// 2271     case Device_annce:
// 2272       ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
// 2273       MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
// 2274       break;
// 2275 
// 2276     case Simple_Desc_rsp:
// 2277       if ( pData->cmd.DataLength > 5 )
// 2278       {
// 2279         ret = FALSE;
// 2280       }
// 2281       else
// 2282       {
// 2283         doDefault = TRUE;
// 2284       }
// 2285       break;
// 2286 
// 2287     default:
// 2288       ret = FALSE;
// 2289       break;
// 2290   }
// 2291 
// 2292   if ( doDefault )
// 2293   {
// 2294     ret = FALSE;
// 2295     pData->clusterId = MtZdoDef_rsp;
// 2296     pData->cmd.DataLength = 2;
// 2297   }
// 2298 
// 2299   return ( ret );
// 2300 }
// 2301 
// 2302 /***************************************************************************************************
// 2303  * @fn      MT_ZdoAddrRspCB
// 2304  *
// 2305  * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
// 2306  *
// 2307  * @param   pMsg  - Message data
// 2308  *
// 2309  * @return  void
// 2310  */
// 2311 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
// 2312 {
// 2313   uint8   listLen, len, *pBuf;
// 2314 
// 2315   /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
// 2316 
// 2317   /* get length, sanity check length */
// 2318   listLen = pMsg->numAssocDevs;
// 2319 
// 2320   /* calculate msg length */
// 2321   len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
// 2322 
// 2323   /* get buffer */
// 2324   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2325   {
// 2326     uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
// 2327     uint8 *pTmp = pBuf;
// 2328 
// 2329     *pTmp++ = pMsg->status;
// 2330 
// 2331     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 2332     pTmp += Z_EXTADDR_LEN;
// 2333 
// 2334     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 2335     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 2336 
// 2337     *pTmp++ = pMsg->startIndex;
// 2338     *pTmp++ = listLen;
// 2339 
// 2340     MT_Word2Buf(pTmp, pMsg->devList, listLen);
// 2341 
// 2342     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 2343     osal_mem_free(pBuf);
// 2344   }
// 2345 }
// 2346 
// 2347 /***************************************************************************************************
// 2348  * @fn      MT_ZdoEndDevAnnceCB
// 2349  *
// 2350  * @brief   Handle end device announce OSAL message from ZDO.
// 2351  *
// 2352  * @param   pMsg  - Message data
// 2353  *
// 2354  * @return  void
// 2355  */
// 2356 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
// 2357 {
// 2358   uint8 *pBuf;
// 2359 
// 2360   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
// 2361   {
// 2362     uint8 *pTmp = pBuf;
// 2363 
// 2364     *pTmp++ = LO_UINT16(srcAddr);
// 2365     *pTmp++ = HI_UINT16(srcAddr);
// 2366 
// 2367     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 2368     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 2369 
// 2370     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 2371     pTmp += Z_EXTADDR_LEN;
// 2372 
// 2373     *pTmp = pMsg->capabilities;
// 2374 
// 2375     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2376                                          MT_ZDO_END_DEVICE_ANNCE_IND,
// 2377                                          MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
// 2378     osal_mem_free(pBuf);
// 2379   }
// 2380 }
// 2381 
// 2382 /***************************************************************************************************
// 2383  * @fn      MT_ZdoSrcRtgCB
// 2384  *
// 2385  * @brief   Handle Src Route from ZDO.
// 2386  *
// 2387  * @param   pStr  - pointer to the data structure for the src route
// 2388  *
// 2389  * @return  void*
// 2390  */
// 2391 void* MT_ZdoSrcRtgCB( void *pStr )
// 2392 {
// 2393   uint8 len, *pBuf;
// 2394   zdoSrcRtg_t *pSrcRtg = pStr;
// 2395 
// 2396   // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
// 2397   len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
// 2398 
// 2399   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2400   {
// 2401     uint8 idx, *pTmp = pBuf;
// 2402     uint16 *pRelay;
// 2403 
// 2404     // Packet payload
// 2405     *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
// 2406     *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
// 2407     *pTmp++ = pSrcRtg->relayCnt;
// 2408 
// 2409     // Relay List
// 2410     if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
// 2411     {
// 2412       for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
// 2413       {
// 2414         *pTmp++ = LO_UINT16(*pRelay);
// 2415         *pTmp++ = HI_UINT16(*pRelay);
// 2416         pRelay++;
// 2417       }
// 2418     }
// 2419     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2420                                          MT_ZDO_SRC_RTG_IND, len, pBuf);
// 2421     osal_mem_free(pBuf);
// 2422   }
// 2423 
// 2424   return NULL;
// 2425 }
// 2426 
// 2427 /***************************************************************************************************
// 2428  * @fn          MT_ZdoConcentratorIndCB
// 2429  *
// 2430  * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
// 2431  *
// 2432  * @param       pStr - pointer to a parameter and a structure of parameters
// 2433  *
// 2434  * @return      NULL
// 2435  ***************************************************************************************************/
// 2436 void *MT_ZdoConcentratorIndCB(void *pStr)
// 2437 {
// 2438   uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
// 2439   zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
// 2440 
// 2441   *pTmp++ = LO_UINT16(pInd->nwkAddr);
// 2442   *pTmp++ = HI_UINT16(pInd->nwkAddr);
// 2443   pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
// 2444   *pTmp = pInd->pktCost;
// 2445 
// 2446   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2447                                     MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
// 2448   return NULL;
// 2449 }
// 2450 
// 2451 /***************************************************************************************************
// 2452  * @fn          MT_ZdoLeaveInd
// 2453  *
// 2454  * @brief       Handle the ZDO Leave Indication callback from the ZDO.
// 2455  *
// 2456  * @param       vPtr - Pointer to the received Leave Indication message.
// 2457  *
// 2458  * @return      NULL
// 2459  ***************************************************************************************************/
// 2460 static void *MT_ZdoLeaveInd(void *vPtr)
// 2461 {
// 2462   NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
// 2463   uint8 buf[sizeof(NLME_LeaveInd_t)];
// 2464 
// 2465   buf[0] = LO_UINT16(pInd->srcAddr);
// 2466   buf[1] = HI_UINT16(pInd->srcAddr);
// 2467   (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
// 2468   buf[2+Z_EXTADDR_LEN] = pInd->request;
// 2469   buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
// 2470   buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
// 2471 
// 2472   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2473                                        MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
// 2474   return NULL;
// 2475 }
// 2476 
// 2477 /***************************************************************************************************
// 2478  * @fn          MT_ZdoTcDeviceInd
// 2479  *
// 2480  * @brief       Handle the ZDO TC Device Indication callback from the ZDO.
// 2481  *
// 2482  * @param       params - pointer to Trust Center joining device information
// 2483  *
// 2484  * @return      NULL
// 2485  ***************************************************************************************************/
// 2486 void *MT_ZdoTcDeviceInd( void *params )
// 2487 {
// 2488   ZDO_TC_Device_t *pDev = (ZDO_TC_Device_t *)params;
// 2489   uint8 buf[12];
// 2490 
// 2491   buf[0] = LO_UINT16( pDev->nwkAddr );
// 2492   buf[1] = HI_UINT16( pDev->nwkAddr );
// 2493   (void)osal_memcpy( &buf[2], pDev->extAddr, Z_EXTADDR_LEN);
// 2494   buf[2+Z_EXTADDR_LEN] = LO_UINT16( pDev->parentAddr );
// 2495   buf[3+Z_EXTADDR_LEN] = HI_UINT16( pDev->parentAddr );
// 2496 
// 2497   MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2498                                        MT_ZDO_TC_DEVICE_IND, 12, buf );
// 2499 
// 2500   return ( NULL );
// 2501 }
// 2502 
// 2503 /***************************************************************************************************
// 2504  * @fn          MT_ZdoPermitJoinInd
// 2505  *
// 2506  * @brief       Handle the ZDO Permit Join Indication callback from the ZDO.
// 2507  *
// 2508  * @param       duration - permit join duration
// 2509  *
// 2510  * @return      NULL
// 2511  ***************************************************************************************************/
// 2512 void *MT_ZdoPermitJoinInd( void *duration )
// 2513 {
// 2514   if ( ignoreIndication == FALSE )
// 2515   {
// 2516     // The following condition was moved here from NLME_PermitJoiningSet. It was removed there to
// 2517     // support calling the callback for every time a permit join command is processed, and let the
// 2518     // callback decide how to act.
// 2519     if ((( *(uint8*)duration == 0x00 ) && ( NLME_PermitJoining )) || (( *(uint8*)duration != 0x00 ) && ( ! NLME_PermitJoining )))
// 2520     {  
// 2521       MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2522                                        MT_ZDO_PERMIT_JOIN_IND, 1, (uint8 *)duration );
// 2523     }
// 2524   }
// 2525 
// 2526   return ( NULL );
// 2527 }
// 2528 #endif // MT_ZDO_CB_FUNC
// 2529 
// 2530 /***************************************************************************************************
// 2531  * @fn      MT_ZdoSendMsgCB
// 2532  *
// 2533  * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
// 2534  *
// 2535  * @param   pMsg  - Message data
// 2536  *
// 2537  * @return  void
// 2538  */
// 2539 void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
// 2540 {
// 2541   uint8 len = pMsg->asduLen + 9;
// 2542   uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
// 2543 
// 2544   if (pBuf != NULL)
// 2545   {
// 2546     uint8 *pTmp = pBuf;
// 2547 
// 2548     // Assuming exclusive use of network short addresses.
// 2549     *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
// 2550     *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
// 2551     *pTmp++ = pMsg->wasBroadcast;
// 2552     *pTmp++ = LO_UINT16(pMsg->clusterID);
// 2553     *pTmp++ = HI_UINT16(pMsg->clusterID);
// 2554     *pTmp++ = pMsg->SecurityUse;
// 2555     *pTmp++ = pMsg->TransSeq;
// 2556     // Skipping asduLen since it can be deduced from the RPC packet length.
// 2557     *pTmp++ = LO_UINT16(pMsg->macDestAddr);
// 2558     *pTmp++ = HI_UINT16(pMsg->macDestAddr);
// 2559     (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
// 2560 
// 2561     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2562                                          MT_ZDO_MSG_CB_INCOMING, len, pBuf);
// 2563 
// 2564     osal_mem_free(pBuf);
// 2565   }
// 2566 }
// 2567 
// 2568 
// 2569 #if defined ( MT_ZDO_EXTENSIONS )
// 2570 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 2571 /***************************************************************************************************
// 2572  * @fn          MT_ZdoSecUpdateNwkKey
// 2573  *
// 2574  * @brief       Handle the ZDO Security Update Network Key extension message
// 2575  *
// 2576  * @param       pBuf - Pointer to the received message data.
// 2577  *
// 2578  * @return      NULL
// 2579  ***************************************************************************************************/
// 2580 static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf )
// 2581 {
// 2582   uint16 dstAddr;
// 2583   uint8 keySeqNum;
// 2584   uint8 status;
// 2585 
// 2586   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2587 
// 2588   dstAddr = osal_build_uint16( pBuf );
// 2589   pBuf += 2;
// 2590   keySeqNum = *pBuf++;
// 2591 
// 2592   status = ZDSecMgrUpdateNwkKey( pBuf, keySeqNum, dstAddr );
// 2593 
// 2594   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2595                                        MT_ZDO_EXT_UPDATE_NWK_KEY, 1, &status );
// 2596 }
// 2597 
// 2598 /***************************************************************************************************
// 2599  * @fn          MT_ZdoSecSwitchNwkKey
// 2600  *
// 2601  * @brief       Handle the ZDO Security Switch Network Key extension message
// 2602  *
// 2603  * @param       pBuf - Pointer to the received message data.
// 2604  *
// 2605  * @return      NULL
// 2606  ***************************************************************************************************/
// 2607 static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf )
// 2608 {
// 2609   uint16 dstAddr;
// 2610   uint8 keySeqNum;
// 2611   uint8 status;
// 2612 
// 2613   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2614 
// 2615   dstAddr = osal_build_uint16( pBuf );
// 2616   pBuf += 2;
// 2617   keySeqNum = *pBuf++;
// 2618 
// 2619   status = ZDSecMgrSwitchNwkKey( keySeqNum, dstAddr );
// 2620 
// 2621   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2622                                        MT_ZDO_EXT_SWITCH_NWK_KEY, 1, &status );
// 2623 }
// 2624 #endif // ZG_BUILD_COORDINATOR_TYPE
// 2625 
// 2626 /***************************************************************************************************
// 2627  * @fn          MT_ZdoSecAddLinkKey
// 2628  *
// 2629  * @brief       Handle the ZDO Security Add Link Key extension message
// 2630  *
// 2631  * @param       pBuf - Pointer to the received message data.
// 2632  *
// 2633  * @return      NULL
// 2634  ***************************************************************************************************/
// 2635 static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
// 2636 {
// 2637   uint16 shortAddr;
// 2638   uint8 *pExtAddr;
// 2639   uint8 status;
// 2640 
// 2641   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2642 
// 2643   shortAddr = osal_build_uint16( pBuf );
// 2644   pBuf += 2;
// 2645   pExtAddr = pBuf;
// 2646   pBuf += Z_EXTADDR_LEN;
// 2647 
// 2648   status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
// 2649 
// 2650   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2651                                        MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
// 2652 }
// 2653 
// 2654 /***************************************************************************************************
// 2655  * @fn          MT_ZdoSecEntryLookupExt
// 2656  *
// 2657  * @brief       Handle the ZDO Security Entry Lookup Extended extension message
// 2658  *
// 2659  * @param       pBuf - Pointer to the received message data.
// 2660  *
// 2661  * @return      NULL
// 2662  ***************************************************************************************************/
// 2663 static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
// 2664 {
// 2665   ZDSecMgrEntry_t *pEntry = NULL;
// 2666   uint8 buf[6] = {0};
// 2667 
// 2668   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2669 
// 2670   // lookup entry index for specified EXT address
// 2671   buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
// 2672   if ( pEntry )
// 2673   {
// 2674     buf[1] = LO_UINT16( pEntry->ami );
// 2675     buf[2] = HI_UINT16( pEntry->ami );
// 2676     buf[3] = LO_UINT16( pEntry->keyNvId );
// 2677     buf[4] = HI_UINT16( pEntry->keyNvId );
// 2678     buf[5] = (uint8)pEntry->authenticateOption;
// 2679   }
// 2680 
// 2681   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2682                                        MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
// 2683 }
// 2684 
// 2685 /***************************************************************************************************
// 2686  * @fn          MT_ZdoSecDeviceRemove
// 2687  *
// 2688  * @brief       Handle the ZDO Security Remove Device extension message
// 2689  *
// 2690  * @param       pBuf - Pointer to the received message data.
// 2691  *
// 2692  * @return      NULL
// 2693  ***************************************************************************************************/
// 2694 static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
// 2695 {
// 2696   ZStatus_t status;
// 2697 
// 2698   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2699 
// 2700   // lookup entry index for specified EXT address
// 2701   status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
// 2702 
// 2703   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2704                                        MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
// 2705 }
// 2706 
// 2707 /***************************************************************************************************
// 2708  * @fn          MT_ZdoExtRouteDisc
// 2709  *
// 2710  * @brief       Handle the ZDO Route Discovery extension message
// 2711  *
// 2712  * @param       pBuf - Pointer to the received message data.
// 2713  *
// 2714  * @return      NULL
// 2715  ***************************************************************************************************/
// 2716 static void MT_ZdoExtRouteDisc( uint8 *pBuf )
// 2717 {
// 2718   ZStatus_t status;
// 2719   uint16 dstAddr;
// 2720 
// 2721   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2722 
// 2723   dstAddr = osal_build_uint16( pBuf );
// 2724 
// 2725   status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
// 2726 
// 2727 
// 2728   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2729                                        MT_ZDO_EXT_ROUTE_DISC, 1, &status );
// 2730 }
// 2731 
// 2732 /***************************************************************************************************
// 2733  * @fn          MT_ZdoExtRouteCheck
// 2734  *
// 2735  * @brief       Handle the ZDO Route Check extension message
// 2736  *
// 2737  * @param       pBuf - Pointer to the received message data.
// 2738  *
// 2739  * @return      NULL
// 2740  ***************************************************************************************************/
// 2741 static void MT_ZdoExtRouteCheck( uint8 *pBuf )
// 2742 {
// 2743   ZStatus_t status;
// 2744   uint16 dstAddr;
// 2745 
// 2746   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2747 
// 2748   dstAddr = osal_build_uint16( pBuf );
// 2749 
// 2750   status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
// 2751 
// 2752   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2753                                        MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
// 2754 }
// 2755 
// 2756 /***************************************************************************************************
// 2757  * @fn          MT_ZdoExtRemoveGroup
// 2758  *
// 2759  * @brief       Handle the ZDO extension Remove Group message
// 2760  *
// 2761  * @param       pBuf - Pointer to the received message data.
// 2762  *
// 2763  * @return      NULL
// 2764  ***************************************************************************************************/
// 2765 static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
// 2766 {
// 2767   ZStatus_t status;
// 2768   uint8 endpoint;
// 2769   uint16 groupID;
// 2770 
// 2771   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2772 
// 2773   endpoint = *pBuf++;
// 2774   groupID = osal_build_uint16( pBuf );
// 2775 
// 2776   if ( aps_RemoveGroup( endpoint, groupID ) )
// 2777   {
// 2778     status = ZSuccess;
// 2779   }
// 2780   else
// 2781   {
// 2782     status = ZFailure;
// 2783   }
// 2784 
// 2785   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2786                                        MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
// 2787 }
// 2788 
// 2789 /***************************************************************************************************
// 2790  * @fn          MT_ZdoExtRemoveAllGroup
// 2791  *
// 2792  * @brief       Handle the ZDO extension Remove All Groups message
// 2793  *
// 2794  * @param       pBuf - Pointer to the received message data.
// 2795  *
// 2796  * @return      NULL
// 2797  ***************************************************************************************************/
// 2798 static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
// 2799 {
// 2800   ZStatus_t status = ZSuccess;
// 2801 
// 2802   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2803 
// 2804   aps_RemoveAllGroup( *pBuf );
// 2805 
// 2806   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2807                                        MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
// 2808 }
// 2809 
// 2810 /***************************************************************************************************
// 2811  * @fn          MT_ZdoExtFindAllGroupsEndpoint
// 2812  *
// 2813  * @brief       Handle the ZDO extension Find All Groups for Endpoint message
// 2814  *
// 2815  * @param       pBuf - Pointer to the received message data.
// 2816  *
// 2817  * @return      NULL
// 2818  ***************************************************************************************************/
// 2819 static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
// 2820 {
// 2821   uint16 groupList[ APS_MAX_GROUPS ];
// 2822   uint8 groups;
// 2823   uint8 msgLen;
// 2824   uint8 *pMsg;
// 2825 
// 2826   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2827 
// 2828   groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
// 2829 
// 2830   msgLen = 1 + (2 * groups);
// 2831   pMsg = osal_mem_alloc( msgLen );
// 2832   if ( pMsg )
// 2833   {
// 2834     uint8 x;
// 2835     uint8 *pBuf = pMsg;
// 2836 
// 2837     *pBuf++ = groups;
// 2838     for ( x = 0; x < groups; x++ )
// 2839     {
// 2840       *pBuf++ = LO_UINT16( groupList[x] );
// 2841       *pBuf++ = HI_UINT16( groupList[x] );
// 2842     }
// 2843 
// 2844     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2845                                        MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
// 2846     osal_mem_free( pMsg );
// 2847   }
// 2848   else
// 2849   {
// 2850     groups = 0;
// 2851     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2852                                        MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
// 2853   }
// 2854 }
// 2855 
// 2856 /***************************************************************************************************
// 2857  * @fn          MT_ZdoExtFindGroup
// 2858  *
// 2859  * @brief       Handle the ZDO extension Find Group message
// 2860  *
// 2861  * @param       pBuf - Pointer to the received message data.
// 2862  *
// 2863  * @return      NULL
// 2864  ***************************************************************************************************/
// 2865 static void MT_ZdoExtFindGroup( uint8 *pBuf )
// 2866 {
// 2867   uint8 endpoint;
// 2868   uint16 groupID;
// 2869   aps_Group_t *pGroup;
// 2870   uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
// 2871 
// 2872   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2873 
// 2874   endpoint = *pBuf++;
// 2875   groupID = osal_build_uint16( pBuf );
// 2876 
// 2877   pGroup = aps_FindGroup( endpoint, groupID );
// 2878   if ( pGroup  )
// 2879   {
// 2880     buf[0] = ZSuccess;
// 2881     buf[1] = LO_UINT16( pGroup->ID );
// 2882     buf[2] = HI_UINT16( pGroup->ID );
// 2883     buf[3] = pGroup->name[0];
// 2884     osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
// 2885   }
// 2886   else
// 2887   {
// 2888     buf[0] = ZFailure;
// 2889   }
// 2890 
// 2891   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2892                       MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
// 2893 }
// 2894 
// 2895 /***************************************************************************************************
// 2896  * @fn          MT_ZdoExtAddGroup
// 2897  *
// 2898  * @brief       Handle the ZDO extension Add Group message
// 2899  *
// 2900  * @param       pBuf - Pointer to the received message data.
// 2901  *
// 2902  * @return      NULL
// 2903  ***************************************************************************************************/
// 2904 static void MT_ZdoExtAddGroup( uint8 *pBuf )
// 2905 {
// 2906   ZStatus_t status = ZSuccess;
// 2907   aps_Group_t group = {0};
// 2908   uint8 endpoint;
// 2909 
// 2910   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2911 
// 2912   endpoint = *pBuf++;
// 2913   group.ID = osal_build_uint16( pBuf );
// 2914   group.name[0] = pBuf[2];
// 2915   if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
// 2916   {
// 2917     group.name[0] = (APS_GROUP_NAME_LEN-1);
// 2918   }
// 2919 
// 2920   if (group.name[0] > 0 )
// 2921   {
// 2922     osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
// 2923   }
// 2924 
// 2925   status = aps_AddGroup( endpoint, &group );
// 2926 
// 2927   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2928                                        MT_ZDO_EXT_ADD_GROUP, 1, &status );
// 2929 }
// 2930 
// 2931 /***************************************************************************************************
// 2932  * @fn          MT_ZdoExtCountAllGroups
// 2933  *
// 2934  * @brief       Handle the ZDO extension Count All Groups message
// 2935  *
// 2936  * @param       pBuf - Pointer to the received message data.
// 2937  *
// 2938  * @return      NULL
// 2939  ***************************************************************************************************/
// 2940 static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
// 2941 {
// 2942   ZStatus_t status = 0;
// 2943 
// 2944   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2945 
// 2946   status = (ZStatus_t)aps_CountAllGroups();
// 2947 
// 2948   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2949                                        MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
// 2950 }
// 2951 
// 2952 
// 2953 /***************************************************************************************************
// 2954  * @fn          MT_ZdoExtRxIdle
// 2955  *
// 2956  * @brief       Handle the ZDO extension Get/Set RxOnIdle to ZMac message
// 2957  *
// 2958  * @param       pBuf - Pointer to the received message data.
// 2959  *
// 2960  * @return      NULL
// 2961  ***************************************************************************************************/
// 2962 static void MT_ZdoExtRxIdle( uint8 *pBuf )
// 2963 {
// 2964   uint8 setFlag;
// 2965   uint8 setValue;
// 2966 
// 2967   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2968 
// 2969   setFlag = *pBuf++;
// 2970   setValue = *pBuf++;
// 2971 
// 2972   if ( setFlag )
// 2973   {
// 2974     ZMacSetReq( ZMacRxOnIdle, &setValue );
// 2975   }
// 2976   else
// 2977   {
// 2978     ZMacGetReq( ZMacRxOnIdle, &setValue );
// 2979   }
// 2980 
// 2981   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 2982                                        MT_ZDO_EXT_RX_IDLE, 1, &setValue );
// 2983 }
// 2984 
// 2985 /***************************************************************************************************
// 2986  * @fn          MT_ZdoExtNwkInfo
// 2987  *
// 2988  * @brief       Handle the ZDO extension Network Info Request message
// 2989  *
// 2990  * @param       pBuf - Pointer to the received message data.
// 2991  *
// 2992  * @return      NULL
// 2993  ***************************************************************************************************/
// 2994 static void MT_ZdoExtNwkInfo( uint8 *pBuf )
// 2995 {
// 2996   uint8 buf[24];
// 2997   uint8 *pMsg;
// 2998 
// 2999   pMsg = buf;
// 3000 
// 3001   *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
// 3002   *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
// 3003 
// 3004   *pMsg++ = devState;
// 3005   *pMsg++ = LO_UINT16( _NIB.nwkPanId );
// 3006   *pMsg++ = HI_UINT16( _NIB.nwkPanId );
// 3007   *pMsg++ = LO_UINT16( _NIB.nwkCoordAddress );
// 3008   *pMsg++ = HI_UINT16( _NIB.nwkCoordAddress );
// 3009   osal_memcpy( pMsg, _NIB.extendedPANID, 8 );
// 3010   pMsg += 8;
// 3011   osal_memcpy( pMsg, _NIB.nwkCoordExtAddress, 8 );
// 3012   pMsg += 8;
// 3013   *pMsg++ = _NIB.nwkLogicalChannel;
// 3014 
// 3015   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 3016                                        MT_ZDO_EXT_NWK_INFO, 24, buf );
// 3017 }
// 3018 
// 3019 /***************************************************************************************************
// 3020  * @fn          MT_ZdoExtSecApsRemoveReq
// 3021  *
// 3022  * @brief       Handle the ZDO extension Security Manager APS Remove Request message
// 3023  *
// 3024  * @param       pBuf - Pointer to the received message data.
// 3025  *
// 3026  * @return      NULL
// 3027  ***************************************************************************************************/
// 3028 static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf )
// 3029 {
// 3030   ZStatus_t status = 0;
// 3031   uint16 parentAddr;
// 3032   uint16 nwkAddr;
// 3033 
// 3034   pBuf += MT_RPC_FRAME_HDR_SZ;
// 3035 
// 3036   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 3037   {
// 3038     parentAddr = osal_build_uint16( pBuf );
// 3039     pBuf += 2;
// 3040 
// 3041     nwkAddr = osal_build_uint16( pBuf );
// 3042     pBuf += 2;
// 3043 
// 3044     status = ZDSecMgrAPSRemove( nwkAddr, pBuf, parentAddr );
// 3045   }
// 3046   else
// 3047   {
// 3048     status = ZUnsupportedMode;
// 3049   }
// 3050 
// 3051   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 3052                                        MT_ZDO_EXT_SEC_APS_REMOVE_REQ, 1, &status );
// 3053 }
// 3054 
// 3055 /***************************************************************************************************
// 3056  * @fn          MT_ZdoExtSetParams
// 3057  *
// 3058  * @brief       Set Parameters not settable through NV.
// 3059  *
// 3060  * @param       pBuf - Pointer to the received message data.
// 3061  *
// 3062  * @return      NULL
// 3063  ***************************************************************************************************/
// 3064 static void MT_ZdoExtSetParams( uint8 *pBuf )
// 3065 {
// 3066   ZStatus_t status = ZSuccess;
// 3067   uint8 useMultiCast;
// 3068 
// 3069   pBuf += MT_RPC_FRAME_HDR_SZ;
// 3070 
// 3071   // Is the useMulticast in this message
// 3072   useMultiCast = *pBuf++;
// 3073   if ( useMultiCast & 0x80 )
// 3074   {
// 3075     if ( useMultiCast & 0x7F )
// 3076     {
// 3077       _NIB.nwkUseMultiCast = TRUE;
// 3078     }
// 3079     else
// 3080     {
// 3081       _NIB.nwkUseMultiCast = FALSE;
// 3082     }
// 3083   }
// 3084 
// 3085   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
// 3086                                        MT_ZDO_EXT_SET_PARAMS, 1, &status );
// 3087 }
// 3088 #endif // MT_ZDO_EXTENSIONS
// 3089 
// 3090 #endif   /*ZDO Command Processing in MT*/
// 3091 /***************************************************************************************************
// 3092 ***************************************************************************************************/
// 
//
// 
//
//
//Errors: none
//Warnings: none
