###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               22/Nov/2023  15:42:47
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\fuzzing-coordinator-response-collection\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWAFDA.tmp
#        (D:\fuzzing-coordinator-response-collection\Components\stack\zdo\ZDObject.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
#        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
#        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
#        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
#        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\ZDObject.lst
#    Object file        =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\ZDObject.r51
#
###############################################################################

D:\fuzzing-coordinator-response-collection\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2015-10-01 15:01:50 -0700 (Thu, 01 Oct 2015) $
      4            Revision:       $Revision: 44513 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #include "bdb.h"
     67          
     68          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     69          #include "gp_common.h"
     70          #endif
     71           
     72          #if defined( LCD_SUPPORTED )
     73            #include "OnBoard.h"
     74          #endif
     75          
     76          /* HAL */
     77          #include "hal_lcd.h"
     78          
     79          /*********************************************************************
     80           * MACROS
     81           */
     82          
     83          /*********************************************************************
     84           * CONSTANTS
     85           */
     86          // NLME Stub Implementations
     87          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          #if defined ( REFLECTOR )
     93          typedef struct
     94          {
     95            byte SrcTransSeq;
     96            zAddrType_t SrcAddr;
     97            uint16 LocalCoordinator;
     98            byte epIntf;
     99            uint16 ProfileID;
    100            byte numInClusters;
    101            uint16 *inClusters;
    102            byte numOutClusters;
    103            uint16 *outClusters;
    104            byte SecurityUse;
    105            byte status;
    106          } ZDO_EDBind_t;
    107          #endif // defined ( REFLECTOR )
    108          
    109          enum
    110          {
    111            ZDMATCH_INIT,           // Initialized
    112            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    113            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    114          };
    115          
    116          enum
    117          {
    118            ZDMATCH_SENDING_NOT,
    119            ZDMATCH_SENDING_UNBIND,
    120            ZDMATCH_SENDING_BIND
    121          };
    122          
    123          /*********************************************************************
    124           * GLOBAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          extern bool  requestNewTrustCenterLinkKey;   
    132             
    133          /*********************************************************************
    134           * EXTERNAL FUNCTIONS
    135           */
    136          
    137          /*********************************************************************
    138           * LOCAL VARIABLES
    139           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    141          
    142          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    144          #endif
    145          
    146          #if defined ( MANAGED_SCAN )
    147            uint32 managedScanNextChannel = 0;
    148            uint32 managedScanChannelMask = 0;
    149            uint8  managedScanTimesPerChannel = 0;
    150          #endif
    151          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    153          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    155          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    156          int16 zdpExternalStateTaskID = -1;
   \                     zdpExternalStateTaskID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zdpExternalStateTaskID>`
   \   000002                REQUIRE __INIT_XDATA_I
    157          
    158          /*********************************************************************
    159           * LOCAL FUNCTIONS
    160           */
    161          static void ZDODeviceSetup( void );
    162          #if defined ( MANAGED_SCAN )
    163            static void ZDOManagedScan_Next( void );
    164          #endif
    165          #if defined ( REFLECTOR )
    166            static void ZDO_RemoveEndDeviceBind( void );
    167            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    168          #endif
    169          #if ( ZG_BUILD_COORDINATOR_TYPE )
    170            static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    171                                                 byte numList2, uint16 *list2, uint16 *pMatches );
    172            static void ZDO_RemoveMatchMemory( void );
    173            static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    174            static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    175          #endif
    176          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    177          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    178          
    179          /*********************************************************************
    180           * @fn          ZDO_Init
    181           *
    182           * @brief       ZDObject and ZDProfile initialization.
    183           *
    184           * @param       none
    185           *
    186           * @return      none
    187           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    188          void ZDO_Init( void )
   \                     ZDO_Init:
    189          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    190            // Initialize ZD items
    191            #if defined ( REFLECTOR )
    192            ZDO_EDBind = NULL;
   \   000004   90....       MOV       DPTR,#ZDO_EDBind
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
    193            #endif
    194          
    195            // Initialize default ZDO_UseExtendedPANID to the APS one.
    196            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV       R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV       R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV       R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV       R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    197          
    198            // Setup the device - type of device to create.
    199            ZDODeviceSetup();
   \   000016                ; Setup parameters for call to function NLME_CoordinatorInit
   \   000016   12....       LCALL     `??NLME_CoordinatorInit::?relay`; Banked call to: NLME_CoordinatorInit
   \   000019                ; Setup parameters for call to function APS_ReflectorInit
   \   000019   12....       LCALL     `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
    200          }
   \   00001C   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    201          
    202          #if defined ( MANAGED_SCAN )
    203          /*********************************************************************
    204           * @fn      ZDOManagedScan_Next()
    205           *
    206           * @brief   Setup a managed scan.
    207           *
    208           * @param   none
    209           *
    210           * @return  none
    211           */
    212          static void ZDOManagedScan_Next( void )
    213          {
    214            // Is it the first time
    215            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    216            {
    217              // Setup the defaults
    218              managedScanNextChannel  = 1;
    219          
    220              while( managedScanNextChannel && (runtimeChannel & managedScanNextChannel) == 0 )
    221                managedScanNextChannel <<= 1;
    222          
    223              managedScanChannelMask = managedScanNextChannel;
    224              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    225            }
    226            else
    227            {
    228              // Do we need to go to the next channel
    229              if ( managedScanTimesPerChannel == 0 )
    230              {
    231                // Find next active channel
    232                managedScanChannelMask  = managedScanNextChannel;
    233                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    234              }
    235              else
    236              {
    237                managedScanTimesPerChannel--;
    238          
    239                if ( managedScanTimesPerChannel == 0 )
    240                {
    241                  managedScanNextChannel  <<= 1;
    242                  while( managedScanNextChannel && (runtimeChannel & managedScanNextChannel) == 0 )
    243                    managedScanNextChannel <<= 1;
    244          
    245                  if ( managedScanNextChannel == 0 )
    246                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    247                }
    248              }
    249            }
    250          }
    251          #endif // MANAGED_SCAN
    252          
    253          /*********************************************************************
    254           * @fn      ZDODeviceSetup()
    255           *
    256           * @brief   Call set functions depending on the type of device compiled.
    257           *
    258           * @param   none
    259           *
    260           * @return  none
    261           */
    262          static void ZDODeviceSetup( void )
    263          {
    264            if ( ZG_BUILD_COORDINATOR_TYPE )
    265            {
    266              NLME_CoordinatorInit();
    267            }
    268          
    269          #if defined ( REFLECTOR )
    270            APS_ReflectorInit();
    271          #endif
    272          
    273            if ( ZG_BUILD_JOINING_TYPE )
    274            {
    275              NLME_DeviceJoiningInit();
    276            }
    277          }
    278          
    279          
    280          
    281          
    282          /*********************************************************************
    283           * @fn          ZDO_StartDevice
    284           *
    285           * @brief       This function starts a device in a network. Added distributed network for router devices
    286           *
    287           * @param       logicalType     - Device type to start
    288           *              startMode       - indicates mode of device startup
    289           *              beaconOrder     - indicates time betwen beacons
    290           *              superframeOrder - indicates length of active superframe
    291           *              distributed     - indicates if the network will be formed
    292           *
    293           * @return      none
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    296          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FF           MOV       R7,A
   \   000007   EB           MOV       A,R3
   \   000008   FE           MOV       R6,A
   \   000009   8C..         MOV       ?V0,R4
    297            ZStatus_t ret;
    298          #if defined ( ZIGBEE_FREQ_AGILITY )
    299            static uint8 discRetries = 0;
    300          #endif
    301          #if defined ( ZIGBEE_COMMISSIONING )
    302            static uint8 scanCnt = 0;
    303          #endif
    304          
    305            ret = ZUnsupportedMode;
    306          
    307            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
   \   00000B   E9           MOV       A,R1
   \   00000C   7063         JNZ       ??ZDO_StartDevice_0
    308            {
    309              if ( startMode == MODE_HARD )
   \   00000E   7402         MOV       A,#0x2
   \   000010   6F           XRL       A,R7
   \   000011   7049         JNZ       ??ZDO_StartDevice_1
    310              {
    311                ZDApp_ChangeState( DEV_COORD_STARTING );
   \   000013                ; Setup parameters for call to function ZDApp_ChangeState
   \   000013   7908         MOV       R1,#0x8
   \   000015   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    312                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, runtimeChannel,
    313                                                    zgDefaultStartingScanDuration, beaconOrder,
    314                                                    superframeOrder, false, false, 0 );
   \   000018                ; Setup parameters for call to function NLME_NetworkFormationRequest
   \   000018   E4           CLR       A
   \   000019   F5..         MOV       ?V2,A
   \   00001B   F5..         MOV       ?V3,A
   \   00001D   78..         MOV       R0,#?V2
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000027   78..         MOV       R0,#?V2
   \   000029   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002C   E5..         MOV       A,?V0
   \   00002E   F5..         MOV       ?V2,A
   \   000030   78..         MOV       R0,#?V2
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000035   EE           MOV       A,R6
   \   000036   F5..         MOV       ?V2,A
   \   000038   78..         MOV       R0,#?V2
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003D   90....       MOV       DPTR,#runtimeChannel
   \   000040   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000043   90....       MOV       DPTR,#bdbAttributes + 13
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F9           MOV       R1,A
   \   000048   7C..         MOV       R4,#zgApsUseExtendedPANID & 0xff
   \   00004A   7D..         MOV       R5,#(zgApsUseExtendedPANID >> 8) & 0xff
   \   00004C   90....       MOV       DPTR,#zgConfigPANID
   \   00004F   12....       LCALL     ??Subroutine224_0 & 0xFFFF
    315              }
   \                     ??CrossCallReturnLabel_464:
   \   000052   12....       LCALL     `??NLME_NetworkFormationRequest::?relay`; Banked call to: NLME_NetworkFormationRequest
   \   000055   740A         MOV       A,#0xa
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   8012         SJMP      ??ZDO_StartDevice_2
    316              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_1:
   \   00005C   7401         MOV       A,#0x1
   \   00005E   6F           XRL       A,R7
   \   00005F   7010         JNZ       ??ZDO_StartDevice_0
    317              {
    318                // Just start the coordinator
    319                ZDApp_ChangeState( DEV_COORD_STARTING );
   \   000061                ; Setup parameters for call to function ZDApp_ChangeState
   \   000061   7908         MOV       R1,#0x8
   \   000063   12....       LCALL     `??ZDApp_ChangeState::?relay`; Banked call to: ZDApp_ChangeState
    320                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
   \   000066                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000066   7B00         MOV       R3,#0x0
   \   000068   EE           MOV       A,R6
   \   000069   FA           MOV       R2,A
   \   00006A   F9           MOV       R1,A
   \   00006B   12....       LCALL     `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \                     ??ZDO_StartDevice_2:
   \   00006E   E9           MOV       A,R1
    321              }
    322              else
    323              {
    324          #if defined( LCD_SUPPORTED )
    325                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    326          #endif
    327              }
    328            }
    329          
    330            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
    331            {
    332              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
    333              {
    334                if(APSME_IsDistributedSecurity() && (startMode != MODE_REJOIN))
    335                {
    336                        ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, runtimeChannel,
    337                                                    zgDefaultStartingScanDuration, beaconOrder,
    338                                                    superframeOrder, false, true, osal_rand() );
    339                  
    340                }
    341                else
    342                {
    343                  ZDApp_ChangeState( DEV_NWK_DISC );
    344          
    345                #if defined( MANAGED_SCAN )
    346                  ZDOManagedScan_Next();
    347                  ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    348                #else
    349                  ret = NLME_NetworkDiscoveryRequest( runtimeChannel, zgDefaultStartingScanDuration );
    350                  #if defined ( ZIGBEE_FREQ_AGILITY )
    351                  if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    352                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
    353                  {
    354                    // For devices with RxOnWhenIdle equals to FALSE, any network channel
    355                    // change will not be recieved. On these devices or routers that have
    356                    // lost the network, an active scan shall be conducted on the Default
    357                    // Channel list using the extended PANID to find the network. If the
    358                    // extended PANID isn't found using the Default Channel list, an scan
    359                    // should be completed using all channels.
    360                    runtimeChannel = MAX_CHANNELS_24GHZ;
    361                  }
    362                  #endif // ZIGBEE_FREQ_AGILITY
    363                  #if defined ( ZIGBEE_COMMISSIONING )
    364                  if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
    365                  {
    366                    // When ApsUseExtendedPanID is commissioned to a non zero value via
    367                    // application specific means, the device shall conduct an active scan
    368                    // on the Default Channel list and join the PAN with the same
    369                    // ExtendedPanID. If the PAN is not found, an scan should be completed
    370                    // on all channels.
    371                    // When devices rejoin the network and the PAN is not found from
    372                    runtimeChannel = MAX_CHANNELS_24GHZ;
    373                  }
    374                  #endif // ZIGBEE_COMMISSIONING
    375                #endif
    376                }
    377              }
    378              else if ( startMode == MODE_RESUME )
    379              {
    380                if ( logicalType == NODETYPE_ROUTER )
    381                {
    382                  uint16 panID;
    383                  
    384                  ZDApp_ChangeState( DEV_NWK_ORPHAN );
    385                  
    386                  // Stop the rejoin timeout
    387                  osal_stop_timerEx( NWK_TaskID, NWK_REJOIN_TIMEOUT_EVT );
    388                  ZMacGetReq( ZMacPanId, (uint8 *)&( panID ) );
    389                  
    390                  _NIB.nwkPanId = panID;
    391                  NLME_JoinConfirm(  _NIB.nwkPanId, ZSuccess );
    392          
    393                  ret = ZSuccess;
    394                }
    395                else
    396                {
    397                  ZDApp_ChangeState( DEV_NWK_ORPHAN );
    398                  //set timer for scan and rejoin
    399                  osal_start_timerEx( ZDAppTaskID, ZDO_REJOIN_BACKOFF, zgDefaultRejoinScan );
    400                  ret = NLME_OrphanJoinRequest( runtimeChannel,
    401                                                zgDefaultStartingScanDuration );
    402                }
    403              }
    404              else
    405              {
    406          #if defined( LCD_SUPPORTED )
    407                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    408          #endif
    409              }
    410            }
    411          
    412            if ( ret != ZSuccess )
   \   00006F   6017         JZ        ??ZDO_StartDevice_3
    413            {
    414              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_0:
   \   000071                ; Setup parameters for call to function osal_start_timerEx
   \   000071   90....       MOV       DPTR,#__Constant_3e8
   \   000074   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000077   7A01         MOV       R2,#0x1
   \   000079   7B00         MOV       R3,#0x0
   \   00007B   90....       MOV       DPTR,#ZDAppTaskID
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   F9           MOV       R1,A
   \   000080   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000083   7404         MOV       A,#0x4
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
    415            }
    416          }
   \                     ??ZDO_StartDevice_3:
   \   000088   80..         SJMP      ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    417          
    418          /**************************************************************************************************
    419           * @fn          zdoSendStateChangeMsg
    420           *
    421           * @brief       Helper function for ZDO_UpdateNwkStatus.
    422           *
    423           * input parameters
    424           *
    425           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    426           * @param       state - The current device state.
    427           *
    428           * output parameters
    429           *
    430           * None.
    431           *
    432           * @return      None.
    433           **************************************************************************************************
    434           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    435          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
   \                     zdoSendStateChangeMsg:
    436          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
    437            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
   \   000009                ; Setup parameters for call to function osal_msg_find
   \   000009   7AD1         MOV       R2,#-0x2f
   \   00000B   F9           MOV       R1,A
   \   00000C   12....       LCALL     `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   00000F   8A82         MOV       DPL,R2
   \   000011   8B83         MOV       DPH,R3
    438          
    439            if (NULL == pMsg)
   \   000013   E582         MOV       A,DPL
   \   000015   4583         ORL       A,DPH
   \   000017   702A         JNZ       ??zdoSendStateChangeMsg_0
    440            {
    441              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
   \   000019                ; Setup parameters for call to function osal_msg_allocate
   \   000019   7A02         MOV       R2,#0x2
   \   00001B   7B00         MOV       R3,#0x0
   \   00001D   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000020   EA           MOV       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   700E         JNZ       ??zdoSendStateChangeMsg_1
    442              {
    443                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    444                // try again later when more Heap may be available.
    445                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   7A10         MOV       R2,#0x10
   \   000026   7B00         MOV       R3,#0x0
   \   000028   90....       MOV       DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000030   8014         SJMP      ??zdoSendStateChangeMsg_2
    446              }
    447              else
    448              {
    449                pMsg->event = ZDO_STATE_CHANGE;
   \                     ??zdoSendStateChangeMsg_1:
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   74D1         MOV       A,#-0x2f
   \   000038   F0           MOVX      @DPTR,A
    450                pMsg->status = state;
   \   000039   EF           MOV       A,R7
   \   00003A   A3           INC       DPTR
   \   00003B   F0           MOVX      @DPTR,A
    451          
    452                (void)osal_msg_send(taskId, (uint8 *)pMsg);
   \   00003C                ; Setup parameters for call to function osal_msg_send
   \   00003C   EE           MOV       A,R6
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000041   8003         SJMP      ??zdoSendStateChangeMsg_2
    453              }
    454            }
    455            else
    456            {
    457              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    458              pMsg->status = state;
   \                     ??zdoSendStateChangeMsg_0:
   \   000043   EF           MOV       A,R7
   \   000044   A3           INC       DPTR
   \   000045   F0           MOVX      @DPTR,A
    459            }
    460          }
   \                     ??zdoSendStateChangeMsg_2:
   \   000046   02....       LJMP      ??Subroutine203_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    461          
    462          /**************************************************************************************************
    463           * @fn          ZDO_UpdateNwkStatus
    464           *
    465           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    466           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    467           *              than one registered EndPoint, it will only receive one notification per state
    468           *              change. Although the device may go through a sequence of state changes, the
    469           *              Application task may only receive notification of the final, steady-state state
    470           *              because it has the lowest priority and never even runs to receive the intermediate
    471           *              state change notifications.
    472           *
    473           * input parameters
    474           *
    475           * @param       state - The current device state.
    476           *
    477           * output parameters
    478           *
    479           * None.
    480           *
    481           * @return      None.
    482           **************************************************************************************************
    483           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    484          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    485          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
    486            epList_t *pItem = epList;
   \   000007   90....       MOV       DPTR,#epList
   \   00000A   8017         SJMP      ??ZDO_UpdateNwkStatus_0
    487          
    488          #if defined MT_ZDO_CB_FUNC
    489            if ( zdpExternalStateTaskID == -1 )
    490            {
    491              zdpExternalStateTaskID = MT_TaskID;
    492            }
    493          #endif
    494          
    495            while (pItem != NULL)
    496            {
    497              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_UpdateNwkStatus_1:
   \   00000C   8E82         MOV       DPL,R6
   \   00000E   8F83         MOV       DPH,R7
   \   000010   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000013   E0           MOVX      A,@DPTR
   \   000014   6009         JZ        ??ZDO_UpdateNwkStatus_2
    498              {
    499                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \   000016                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000016   12....       LCALL     ?Subroutine79 & 0xFFFF
    500              }
   \                     ??CrossCallReturnLabel_374:
   \   000019   FA           MOV       R2,A
   \   00001A   A9..         MOV       R1,?V0
   \   00001C   12....       LCALL     `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    501          
    502              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
    503            }
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000023   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000026   4F           ORL       A,R7
   \   000027   70E3         JNZ       ??ZDO_UpdateNwkStatus_1
    504          
    505            if ( zdpExternalStateTaskID != -1 )
   \   000029   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F4           CPL       A
   \   00002E   7003         JNZ       ??ZDO_UpdateNwkStatus_3
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F4           CPL       A
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000033   600A         JZ        ??ZDO_UpdateNwkStatus_4
    506            {
    507              zdoSendStateChangeMsg( state, zdpExternalStateTaskID );
   \   000035                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000035   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   000038   E0           MOVX      A,@DPTR
   \   000039   FA           MOV       R2,A
   \   00003A   A9..         MOV       R1,?V0
   \   00003C   12....       LCALL     `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    508            }
    509          
    510            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_4:
   \   00003F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003F   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000042   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000045   12....       LCALL     ?Subroutine40 & 0xFFFF
    511            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_356:
   \   000048                ; Setup parameters for call to function NLME_GetExtAddr
   \   000048   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    512          }
   \   00004B                REQUIRE ?Subroutine3
   \   00004B                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine198_0
   \   000002                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001                REQUIRE ??Subroutine199_0
   \   000001                ; // Fall through to label ??Subroutine199_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   8983         MOV       DPH,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine209_0
   \   000001                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   EB           MOV       A,R3
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003   EE           MOV       A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine211_0
   \   000002                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001                REQUIRE ??Subroutine212_0
   \   000001                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine194:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
    513          
    514          #if defined ( REFLECTOR )
    515          /*********************************************************************
    516           * @fn          ZDO_RemoveEndDeviceBind
    517           *
    518           * @brief       Remove the end device bind
    519           *
    520           * @param  none
    521           *
    522           * @return      none
    523           */
    524          static void ZDO_RemoveEndDeviceBind( void )
    525          {
    526            if ( ZDO_EDBind != NULL )
    527            {
    528              // Free the RAM
    529              if ( ZDO_EDBind->inClusters != NULL )
    530              {
    531                osal_mem_free( ZDO_EDBind->inClusters );
    532              }
    533              if ( ZDO_EDBind->outClusters != NULL )
    534              {
    535                osal_mem_free( ZDO_EDBind->outClusters );
    536              }
    537              osal_mem_free( ZDO_EDBind );
    538              ZDO_EDBind = NULL;
    539            }
    540          }
    541          #endif // REFLECTOR
    542          
    543          #if defined ( REFLECTOR )
    544          /*********************************************************************
    545           * @fn          ZDO_SendEDBindRsp
    546           *
    547           * @brief       Send the end device bind response
    548           *
    549           * @param  none
    550           *
    551           * @return      none
    552           */
    553          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    554          {
    555            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    556          
    557          #if defined( LCD_SUPPORTED )
    558            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    559            if ( Status == ZDP_SUCCESS )
    560            {
    561              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    562            }
    563            else
    564            {
    565              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    566            }
    567          #endif
    568          
    569          }
    570          #endif // REFLECTOR
    571          
    572          #if ( ZG_BUILD_COORDINATOR_TYPE )
    573          /*********************************************************************
    574           * @fn          ZDO_CompareClusterLists
    575           *
    576           * @brief       Compare one list to another list
    577           *
    578           * @param       numList1 - number of items in list 1
    579           * @param       list1 - first list of cluster IDs
    580           * @param       numList2 - number of items in list 2
    581           * @param       list2 - second list of cluster IDs
    582           * @param       pMatches - buffer to put matches
    583           *
    584           * @return      number of matches
    585           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    586          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    587                                    byte numList2, uint16 *list2, uint16 *pMatches )
    588          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   8C..         MOV       ?V4,R4
    589            byte x, y;
    590            uint16 z;
    591            byte numMatches = 0;
   \   00000D   7A00         MOV       R2,#0x0
    592          
    593            // Check the first in against the seconds out
    594            for ( x = 0; x < numList1; x++ )
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   7410         MOV       A,#0x10
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000019   7412         MOV       A,#0x12
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000021   804B         SJMP      ??ZDO_CompareClusterLists_0
    595            {
    596              for ( y = 0; y < numList2; y++ )
    597              {
    598                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000023   A8..         MOV       R0,?V1
   \   000025   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000028   EC           MOV       A,R4
   \   000029   28           ADD       A,R0
   \   00002A   F582         MOV       DPL,A
   \   00002C   ED           MOV       A,R5
   \   00002D   39           ADDC      A,R1
   \   00002E   F583         MOV       DPH,A
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F5..         MOV       ?V2,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   F5..         MOV       ?V3,A
    599                if ( list1[x] == z )
   \   000037   EB           MOV       A,R3
   \   000038   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00003B   E5..         MOV       A,?V6
   \   00003D   28           ADD       A,R0
   \   00003E   F582         MOV       DPL,A
   \   000040   E5..         MOV       A,?V7
   \   000042   39           ADDC      A,R1
   \   000043   F583         MOV       DPH,A
   \   000045   E0           MOVX      A,@DPTR
   \   000046   65..         XRL       A,?V2
   \   000048   7004         JNZ       ??ZDO_CompareClusterLists_2
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   65..         XRL       A,?V3
   \                     ??ZDO_CompareClusterLists_2:
   \   00004E   7014         JNZ       ??ZDO_CompareClusterLists_3
    600                {
    601                  pMatches[numMatches++] = z;
   \   000050   EA           MOV       A,R2
   \   000051   12....       LCALL     ?Subroutine120 & 0xFFFF
    602                }
    603              }
   \                     ??CrossCallReturnLabel_199:
   \   000054   EE           MOV       A,R6
   \   000055   28           ADD       A,R0
   \   000056   F582         MOV       DPL,A
   \   000058   EF           MOV       A,R7
   \   000059   39           ADDC      A,R1
   \   00005A   F583         MOV       DPH,A
   \   00005C   E5..         MOV       A,?V2
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   A3           INC       DPTR
   \   000060   E5..         MOV       A,?V3
   \   000062   F0           MOVX      @DPTR,A
   \   000063   0A           INC       R2
   \                     ??ZDO_CompareClusterLists_3:
   \   000064   05..         INC       ?V1
   \                     ??ZDO_CompareClusterLists_4:
   \   000066   E5..         MOV       A,?V1
   \   000068   C3           CLR       C
   \   000069   95..         SUBB      A,?V4
   \   00006B   40B6         JC        ??ZDO_CompareClusterLists_1
   \   00006D   0B           INC       R3
   \                     ??ZDO_CompareClusterLists_0:
   \   00006E   EB           MOV       A,R3
   \   00006F   C3           CLR       C
   \   000070   95..         SUBB      A,?V0
   \   000072   5005         JNC       ??ZDO_CompareClusterLists_5
   \   000074   75..00       MOV       ?V1,#0x0
   \   000077   80ED         SJMP      ??ZDO_CompareClusterLists_4
    604            }
    605          
    606            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   000079   EA           MOV       A,R2
   \   00007A   F9           MOV       R1,A
   \   00007B   80..         SJMP      ??Subroutine201_0
    607          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   E8           MOV       A,R0
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   F9           MOV       R1,A
   \   000006   22           RET
    608          #endif // ZG_BUILD_COORDINATOR_TYPE
    609          
    610          /*********************************************************************
    611           * Utility functions
    612           */
    613          
    614          /*********************************************************************
    615           * @fn          ZDO_CompareByteLists
    616           *
    617           * @brief       Compares two lists for matches.
    618           *
    619           * @param       ACnt  - number of entries in list A
    620           * @param       AList  - List A
    621           * @param       BCnt  - number of entries in list B
    622           * @param       BList  - List B
    623           *
    624           * @return      true if a match is found
    625           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    626          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    627          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   8C..         MOV       ?V2,R4
    628            byte x, y;
    629          
    630            for ( x = 0; x < ACnt; x++ )
   \   000009   7F00         MOV       R7,#0x0
   \   00000B   740C         MOV       A,#0xc
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   000013   8001         SJMP      ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000015   0F           INC       R7
   \                     ??ZDO_AnyClusterMatches_0:
   \   000016   EF           MOV       A,R7
   \   000017   C3           CLR       C
   \   000018   9E           SUBB      A,R6
   \   000019   503C         JNC       ??ZDO_AnyClusterMatches_2
    631            {
    632              for ( y = 0; y < BCnt; y++ )
   \   00001B   75..00       MOV       ?V3,#0x0
   \   00001E   8002         SJMP      ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000020   05..         INC       ?V3
   \                     ??ZDO_AnyClusterMatches_3:
   \   000022   E5..         MOV       A,?V3
   \   000024   C3           CLR       C
   \   000025   95..         SUBB      A,?V2
   \   000027   50EC         JNC       ??ZDO_AnyClusterMatches_1
    633              {
    634                if ( AList[x] == BList[y] )
   \   000029   EF           MOV       A,R7
   \   00002A   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   00002D   EA           MOV       A,R2
   \   00002E   2C           ADD       A,R4
   \   00002F   F582         MOV       DPL,A
   \   000031   EB           MOV       A,R3
   \   000032   3D           ADDC      A,R5
   \   000033   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   000036   F5..         MOV       ?V1,A
   \   000038   AC..         MOV       R4,?V3
   \   00003A   EC           MOV       A,R4
   \   00003B   2C           ADD       A,R4
   \   00003C   FC           MOV       R4,A
   \   00003D   E4           CLR       A
   \   00003E   33           RLC       A
   \   00003F   FD           MOV       R5,A
   \   000040   E8           MOV       A,R0
   \   000041   2C           ADD       A,R4
   \   000042   F582         MOV       DPL,A
   \   000044   E9           MOV       A,R1
   \   000045   3D           ADDC      A,R5
   \   000046   F583         MOV       DPH,A
   \   000048   E0           MOVX      A,@DPTR
   \   000049   65..         XRL       A,?V0
   \   00004B   7004         JNZ       ??ZDO_AnyClusterMatches_5
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   65..         XRL       A,?V1
   \                     ??ZDO_AnyClusterMatches_5:
   \   000051   70CD         JNZ       ??ZDO_AnyClusterMatches_4
    635                {
    636                  return true;
   \   000053   7901         MOV       R1,#0x1
   \   000055   8002         SJMP      ??ZDO_AnyClusterMatches_6
    637                }
    638              }
    639            }
    640          
    641            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   000057   7900         MOV       R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000059   02....       LJMP      ??Subroutine197_0 & 0xFFFF
    642          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   FC           MOV       R4,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FD           MOV       R5,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine248_0
   \   000002                ; // Fall through to label ??Subroutine248_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
    643          
    644          /*********************************************************************
    645           * Callback functions from ZDProfile
    646           */
    647          
    648          
    649          /*********************************************************************
    650           * @fn          ZDO_ProcessNodeDescRsp
    651           *
    652           * @brief       This function processes the Node_Desc_rsp and request
    653           *              Update the TC Link key if the TC supports it.
    654           *
    655           * @param       inMsg - incoming message
    656           *
    657           * @return      none
    658           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    659          void ZDO_ProcessNodeDescRsp ( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescRsp:
    660          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    661          }
   \   000000   02....       LJMP      ?BRET
    662          
    663          
    664          /*********************************************************************
    665           * @fn          ZDO_ProcessNodeDescReq
    666           *
    667           * @brief       This function processes and responds to the
    668           *              Node_Desc_req message.
    669           *
    670           * @param       inMsg - incoming message
    671           *
    672           * @return      none
    673           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    674          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    675          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine52 & 0xFFFF
    676            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    677            NodeDescriptorFormat_t *desc = NULL;
    678          
    679            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_87:
   \   000008   7003         JNZ       ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   6D           XRL       A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ       ??ZDO_ProcessNodeDescReq_1
    680            {
    681              desc = &ZDO_Config_Node_Descriptor;
    682            }
    683          
    684            if ( desc != NULL )
    685            {
    686              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV       ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV       ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV       A,R6
   \   00001B   FA           MOV       R2,A
   \   00001C   12....       LCALL     `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   801F         SJMP      ??ZDO_ProcessNodeDescReq_2
    687            }
    688            else
    689            {
    690              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    691                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV       ?V0,#0x2
   \   000029   75..80       MOV       ?V1,#-0x80
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV       ?V0,R4
   \   000033   8D..         MOV       ?V1,R5
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL     ?Subroutine60 & 0xFFFF
    692            }
   \                     ??CrossCallReturnLabel_101:
   \   00003D   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV       A,#0x4
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
    693          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000045   80..         SJMP      ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   EE           MOV       A,R6
   \   000001   240E         ADD       A,#0xe
   \   000003   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   000006   FD           MOV       R5,A
   \   000007   7C80         MOV       R4,#-0x80
   \   000009   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   00000C   EE           MOV       A,R6
   \   00000D   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000010   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   000013   F9           MOV       R1,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   EE           MOV       A,R6
   \   000005   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_641:
   \   000008   3F           ADDC      A,R7
   \   000009   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00000C   FC           MOV       R4,A
   \   00000D   E4           CLR       A
   \   00000E   39           ADDC      A,R1
   \   00000F   FD           MOV       R5,A
   \   000010   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000013   E0           MOVX      A,@DPTR
   \   000014   6C           XRL       A,R4
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   EE           MOV       A,R6
   \   000001   2402         ADD       A,#0x2
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   FB           MOV       R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F8           MOV       R0,A
   \   000007   E4           CLR       A
   \   000008   C8           XCH       A,R0
   \   000009   F9           MOV       R1,A
   \   00000A   EA           MOV       A,R2
   \   00000B   28           ADD       A,R0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   240F         ADD       A,#0xf
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   8882         MOV       DPL,R0
   \   000009   8983         MOV       DPH,R1
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine242_0
   \   000003                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   3F           ADDC      A,R7
   \   000001   F583         MOV       DPH,A
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   2413         ADD       A,#0x13
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET
    694          
    695          /*********************************************************************
    696           * @fn          ZDO_ProcessPowerDescReq
    697           *
    698           * @brief       This function processes and responds to the
    699           *              Node_Power_req message.
    700           *
    701           * @param       inMsg  - incoming request
    702           *
    703           * @return      none
    704           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    705          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    706          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine52 & 0xFFFF
    707            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    708            NodePowerDescriptorFormat_t *desc = NULL;
    709          
    710            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_88:
   \   000008   7003         JNZ       ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   6D           XRL       A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ       ??ZDO_ProcessPowerDescReq_1
    711            {
    712              desc = &ZDO_Config_Power_Descriptor;
    713            }
    714          
    715            if ( desc != NULL )
    716            {
    717              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV       ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV       ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV       R0,#?V0
   \   000017   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV       A,R6
   \   00001B   FA           MOV       R2,A
   \   00001C   12....       LCALL     `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?DEALLOC_XSTACK8
   \   000024   801F         SJMP      ??ZDO_ProcessPowerDescReq_2
    718            }
    719            else
    720            {
    721              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    722                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV       ?V0,#0x3
   \   000029   75..80       MOV       ?V1,#-0x80
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV       ?V0,R4
   \   000033   8D..         MOV       ?V1,R5
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL     ?Subroutine60 & 0xFFFF
    723            }
   \                     ??CrossCallReturnLabel_102:
   \   00003D   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV       A,#0x4
   \   000042   12....       LCALL     ?DEALLOC_XSTACK8
    724          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000045   80..         SJMP      ??Subroutine203_0
    725          
    726          /*********************************************************************
    727           * @fn          ZDO_ProcessSimpleDescReq
    728           *
    729           * @brief       This function processes and responds to the
    730           *              Simple_Desc_req message.
    731           *
    732           * @param       inMsg - incoming message (request)
    733           *
    734           * @return      none
    735           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine202_0
   \   000002                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine203_0
   \   000003                ; // Fall through to label ??Subroutine203_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    736          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    737          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    738            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
   \   000016   A3           INC       DPTR
   \   000017   F0           MOVX      @DPTR,A
    739            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   EE           MOV       A,R6
   \   000019   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   00001C   3F           ADDC      A,R7
   \   00001D   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000020   FB           MOV       R3,A
   \   000021   EC           MOV       A,R4
   \   000022   FA           MOV       R2,A
    740            byte endPoint = inMsg->asdu[2];
   \   000023   8882         MOV       DPL,R0
   \   000025   8983         MOV       DPH,R1
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F9           MOV       R1,A
    741            byte free = false;
   \   00002B   75..00       MOV       ?V1,#0x0
    742            byte stat = ZDP_SUCCESS;
   \   00002E   75..00       MOV       ?V0,#0x0
    743          
    744            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   000031   6005         JZ        ??ZDO_ProcessSimpleDescReq_0
   \   000033   74FF         MOV       A,#-0x1
   \   000035   69           XRL       A,R1
   \   000036   7005         JNZ       ??ZDO_ProcessSimpleDescReq_1
    745            {
    746              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000038   75..82       MOV       ?V0,#-0x7e
   \   00003B   802F         SJMP      ??ZDO_ProcessSimpleDescReq_2
    747            }
    748            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003D   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6A           XRL       A,R2
   \   000042   7003         JNZ       ??ZDO_ProcessSimpleDescReq_3
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   6B           XRL       A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000047   7015         JNZ       ??ZDO_ProcessSimpleDescReq_4
    749            {
    750              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000049                ; Setup parameters for call to function afFindSimpleDesc
   \   000049   AA..         MOV       R2,?XSP + 0
   \   00004B   AB..         MOV       R3,?XSP + 1
   \   00004D   12....       LCALL     `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   000050   E9           MOV       A,R1
   \   000051   FA           MOV       R2,A
    751              if ( sDesc == NULL )
   \   000052   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000055   7003         JNZ       ??ZDO_ProcessSimpleDescReq_5
    752              {
    753                stat = ZDP_NOT_ACTIVE;
   \   000057   75..83       MOV       ?V0,#-0x7d
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   00005A   8A..         MOV       ?V1,R2
   \   00005C   800E         SJMP      ??ZDO_ProcessSimpleDescReq_2
    754              }
    755            }
    756            else
    757            {
    758              if ( ZSTACK_ROUTER_BUILD )
    759              {
    760                //If child found, then no descriptor
    761                if(AssocIsChild(aoi))
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   00005E                ; Setup parameters for call to function AssocIsChild
   \   00005E   12....       LCALL     `??AssocIsChild::?relay`; Banked call to: AssocIsChild
   \   000061   E9           MOV       A,R1
   \   000062   6005         JZ        ??ZDO_ProcessSimpleDescReq_6
    762                {
    763                  stat = ZDP_NO_DESCRIPTOR;
   \   000064   75..89       MOV       ?V0,#-0x77
   \   000067   8003         SJMP      ??ZDO_ProcessSimpleDescReq_2
    764                }
    765                //Otherwise no device found
    766                else
    767                {
    768                  stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   000069   75..81       MOV       ?V0,#-0x7f
    769                }
    770              }
    771              else if ( ZSTACK_END_DEVICE_BUILD )
    772              {
    773                stat = ZDP_INVALID_REQTYPE;
    774              }
    775            }
    776          
    777            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   00006C                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   00006C   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   00006F   A9..         MOV       R1,?V0
   \   000071   EE           MOV       A,R6
   \   000072   FA           MOV       R2,A
   \   000073   EF           MOV       A,R7
   \   000074   FB           MOV       R3,A
   \   000075   12....       LCALL     `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
    778          
    779            if ( free && sDesc )
   \   000078   E5..         MOV       A,?V1
   \   00007A   600B         JZ        ??ZDO_ProcessSimpleDescReq_7
   \   00007C   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   00007F   6006         JZ        ??ZDO_ProcessSimpleDescReq_7
    780            {
    781              osal_mem_free( sDesc );
   \   000081                ; Setup parameters for call to function osal_mem_free
   \   000081   12....       LCALL     ?Subroutine99 & 0xFFFF
    782            }
   \                     ??CrossCallReturnLabel_488:
   \   000084   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    783          }
   \                     ??ZDO_ProcessSimpleDescReq_7:
   \   000087   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_644:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   FC           MOV       R4,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine213_0
   \   000006                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine217_0
   \   000006                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine224_0
   \   000006                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   12....       LCALL     ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000003   22           RET
    784          
    785          /*********************************************************************
    786           * @fn          ZDO_ProcessSimpleDescRsp
    787           *
    788           * @brief       This function processes and responds to the
    789           *              Simple_Desc_rsp message.
    790           *
    791           * @param       inMsg - incoming message (request)
    792           *
    793           * @return      none
    794           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    795          void ZDO_ProcessSimpleDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescRsp:
    796          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    797          
    798          }
   \   000000   02....       LJMP      ?BRET
    799          
    800          /*********************************************************************
    801           * @fn          ZDO_ProcessActiveEPReq
    802           *
    803           * @brief       This function processes and responds to the
    804           *              Active_EP_req message.
    805           *
    806           * @param       inMsg  - incoming message (request)
    807           *
    808           * @return      none
    809           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    810          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    811          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
    812            byte cnt = 0;
   \   000009   75..00       MOV       ?V0,#0x0
    813            uint16 aoi;
    814            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV       ?V1,#0x0
    815          
    816            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000012   35..         ADDC      A,?V5
   \   000014   12....       LCALL     ?Subroutine58 & 0xFFFF
    817          
    818            if ( aoi == NLME_GetShortAddr() )
   \                     ??CrossCallReturnLabel_97:
   \   000017                ; Setup parameters for call to function NLME_GetShortAddr
   \   000017   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001A   EA           MOV       A,R2
   \   00001B   6E           XRL       A,R6
   \   00001C   7002         JNZ       ??ZDO_ProcessActiveEPReq_0
   \   00001E   EB           MOV       A,R3
   \   00001F   6F           XRL       A,R7
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000020   7012         JNZ       ??ZDO_ProcessActiveEPReq_1
    819            {
    820              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000022                ; Setup parameters for call to function afNumEndPoints
   \   000022   12....       LCALL     `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   000025   E9           MOV       A,R1
   \   000026   14           DEC       A
   \   000027   F5..         MOV       ?V0,A
    821              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   000029                ; Setup parameters for call to function afEndPoints
   \   000029   7901         MOV       R1,#0x1
   \   00002B   7A..         MOV       R2,#ZDOBuildBuf & 0xff
   \   00002D   7B..         MOV       R3,#(ZDOBuildBuf >> 8) & 0xff
   \   00002F   12....       LCALL     `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   000032   8003         SJMP      ??ZDO_ProcessActiveEPReq_2
    822            }
    823            else
    824            {
    825              if(ZG_BUILD_ENDDEVICE_TYPE)
    826              {
    827                stat = ZDP_INVALID_REQTYPE;
    828              }
    829              else
    830              {
    831                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000034   75..81       MOV       ?V1,#-0x7f
    832              }
    833            }
    834          
    835            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    836                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   000037                ; Setup parameters for call to function ZDP_EPRsp
   \   000037   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_573:
   \   00003A   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   00003D   F5..         MOV       ?V2,A
   \   00003F   78..         MOV       R0,#?V2
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000044   75....       MOV       ?V2,#ZDOBuildBuf & 0xff
   \   000047   75....       MOV       ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   00004A   78..         MOV       R0,#?V2
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   78..         MOV       R0,#?V0
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000054   8E..         MOV       ?V2,R6
   \   000056   8F..         MOV       ?V3,R7
   \   000058   78..         MOV       R0,#?V2
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   E5..         MOV       A,?V1
   \   00005F   F5..         MOV       ?V0,A
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000066   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000069   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   00006C   F9           MOV       R1,A
   \   00006D   7A05         MOV       R2,#0x5
   \   00006F   7B80         MOV       R3,#-0x80
   \   000071   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000074   7407         MOV       A,#0x7
   \   000076   02....       LJMP      ?Subroutine5 & 0xFFFF
    837          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine204_0
   \   000001                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   FE           MOV       R6,A
   \   000004   E4           CLR       A
   \   000005   39           ADDC      A,R1
   \   000006   FF           MOV       R7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   E5..         MOV       A,?V4
   \   000002   2402         ADD       A,#0x2
   \   000004   FC           MOV       R4,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V5
   \   000008   FD           MOV       R5,A
   \   000009   E5..         MOV       A,?V4
   \   00000B   240F         ADD       A,#0xf
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine222_0
   \   000003                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine232_0
   \   000003                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   35..         ADDC      A,?V5
   \   000002   F583         MOV       DPH,A
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   E5..         MOV       A,?V4
   \   000002                REQUIRE ??Subroutine239_0
   \   000002                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   240E         ADD       A,#0xe
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET
    838          
    839          /*********************************************************************
    840           * @fn          ZDO_ConvertOTAClusters
    841           *
    842           * @brief       This function will convert the over-the-air cluster list
    843           *              format to an internal format.
    844           *
    845           * @param       inMsg  - incoming message (request)
    846           *
    847           * @return      pointer to incremented inBuf
    848           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    849          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    850          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FF           MOV       R7,A
    851            uint8 x;
    852          
    853            for ( x = 0; x < cnt; x++ )
   \   000007   7E00         MOV       R6,#0x0
   \   000009   802D         SJMP      ??ZDO_ConvertOTAClusters_0
    854            {
    855              // convert ota format to internal
    856              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV       DPL,R2
   \   00000D   8B83         MOV       DPH,R3
   \   00000F   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_621:
   \   000012   F8           MOV       R0,A
   \   000013   E4           CLR       A
   \   000014   C8           XCH       A,R0
   \   000015   F9           MOV       R1,A
   \   000016   E5..         MOV       A,?V0
   \   000018   28           ADD       A,R0
   \   000019   E4           CLR       A
   \   00001A   39           ADDC      A,R1
   \   00001B   F5..         MOV       ?V1,A
   \   00001D   EE           MOV       A,R6
   \   00001E   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000021   EC           MOV       A,R4
   \   000022   28           ADD       A,R0
   \   000023   F582         MOV       DPL,A
   \   000025   ED           MOV       A,R5
   \   000026   39           ADDC      A,R1
   \   000027   F583         MOV       DPH,A
   \   000029   E5..         MOV       A,?V0
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   A3           INC       DPTR
   \   00002D   E5..         MOV       A,?V1
   \   00002F   F0           MOVX      @DPTR,A
    857              inBuf += sizeof( uint16 );
   \   000030   EA           MOV       A,R2
   \   000031   2402         ADD       A,#0x2
   \   000033   FA           MOV       R2,A
   \   000034   5001         JNC       ??ZDO_ConvertOTAClusters_2
   \   000036   0B           INC       R3
    858            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   000037   0E           INC       R6
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000038   EE           MOV       A,R6
   \   000039   C3           CLR       C
   \   00003A   9F           SUBB      A,R7
   \   00003B   40CE         JC        ??ZDO_ConvertOTAClusters_1
    859            return ( inBuf );
   \   00003D   02....       LJMP      ??Subroutine203_0 & 0xFFFF
    860          }
    861          
    862          /*********************************************************************
    863           * @fn          ZDO_ProcessMatchDescReq
    864           *
    865           * @brief       This function processes and responds to the
    866           *              Match_Desc_req message.
    867           *
    868           * @param       inMsg  - incoming message (request)
    869           *
    870           * @return      none
    871           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    872          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    873          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV       A,#-0x13
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   740B         MOV       A,#0xb
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine39 & 0xFFFF
    874            uint8 epCnt = 0;
   \                     ??CrossCallReturnLabel_65:
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   E4           CLR       A
   \   000016   F0           MOVX      @DPTR,A
    875            uint8 numInClusters;
    876            uint16 *inClusters = NULL;
   \   000017   7405         MOV       A,#0x5
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E4           CLR       A
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   F0           MOVX      @DPTR,A
    877            uint8 numOutClusters;
    878            uint16 *outClusters = NULL;
   \   000020   7403         MOV       A,#0x3
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   E4           CLR       A
   \   000026   F0           MOVX      @DPTR,A
   \   000027   A3           INC       DPTR
   \   000028   F0           MOVX      @DPTR,A
    879            epList_t *epDesc;
    880            SimpleDescriptionFormat_t *sDesc = NULL;
    881            uint8 allocated;
    882            uint8 *msg;
    883            uint16 aoi;
    884            uint16 profileID;
    885          
    886            // Parse the incoming message
    887            msg = inMsg->asdu;
   \   000029   740B         MOV       A,#0xb
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_660:
   \   000031   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000034   38           ADDC      A,R0
   \   000035   12....       LCALL     ?Subroutine83 & 0xFFFF
    888            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_138:
   \   000038   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   00003B   28           ADD       A,R0
   \   00003C   F5..         MOV       ?V2,A
   \   00003E   E4           CLR       A
   \   00003F   39           ADDC      A,R1
   \   000040   F5..         MOV       ?V3,A
    889            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000042   85..82       MOV       DPL,?V0
   \   000045   85..83       MOV       DPH,?V1
   \   000048   A3           INC       DPTR
   \   000049   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   EA           MOV       A,R2
   \   000050   FE           MOV       R6,A
   \   000051   E4           CLR       A
   \   000052   39           ADDC      A,R1
   \   000053   FF           MOV       R7,A
    890            msg += 4;
    891          
    892            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000054   740B         MOV       A,#0xb
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   240F         ADD       A,#0xf
   \   00005C   F8           MOV       R0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   3400         ADDC      A,#0x0
   \   000061   F9           MOV       R1,A
   \   000062   740F         MOV       A,#0xf
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000070   7409         MOV       A,#0x9
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   240E         ADD       A,#0xe
   \   00007E   F8           MOV       R0,A
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   3400         ADDC      A,#0x0
   \   000083   F9           MOV       R1,A
   \   000084   740D         MOV       A,#0xd
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   00008C                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00008C   AA..         MOV       R2,?V2
   \   00008E   AB..         MOV       R3,?V3
   \   000090   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000093   E9           MOV       A,R1
   \   000094   6401         XRL       A,#0x1
   \   000096   7040         JNZ       ??ZDO_ProcessMatchDescReq_0
    893            {
    894              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    895                                    aoi, 0, NULL, inMsg->SecurityUse );
   \   000098                ; Setup parameters for call to function ZDP_EPRsp
   \   000098   740D         MOV       A,#0xd
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A3   E4           CLR       A
   \   0000A4   F5..         MOV       ?V0,A
   \   0000A6   F5..         MOV       ?V1,A
   \   0000A8   78..         MOV       R0,#?V0
   \   0000AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AD   78..         MOV       R0,#?V0
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B2   78..         MOV       R0,#?V2
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B7   75..80       MOV       ?V0,#-0x80
   \   0000BA   78..         MOV       R0,#?V0
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BF   7410         MOV       A,#0x10
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   0000CD   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000D0   7407         MOV       A,#0x7
   \   0000D2   12....       LCALL     ?DEALLOC_XSTACK8
    896              return;
   \   0000D5   02....       LJMP      ??ZDO_ProcessMatchDescReq_1 & 0xFFFF
    897            }
    898            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   0000D8                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   0000D8   AA..         MOV       R2,?V2
   \   0000DA   AB..         MOV       R3,?V3
   \   0000DC   12....       LCALL     `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   0000DF   E9           MOV       A,R1
   \   0000E0   7058         JNZ       ??ZDO_ProcessMatchDescReq_2
   \   0000E2   90....       MOV       DPTR,#ZDAppNwkAddr
   \   0000E5   E0           MOVX      A,@DPTR
   \   0000E6   65..         XRL       A,?V2
   \   0000E8   7004         JNZ       ??ZDO_ProcessMatchDescReq_3
   \   0000EA   A3           INC       DPTR
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   65..         XRL       A,?V3
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0000EE   604A         JZ        ??ZDO_ProcessMatchDescReq_2
    899            {
    900          #if (ZG_BUILD_ENDDEVICE_TYPE)
    901              if(ZG_DEVICE_ENDDEVICE_TYPE)
    902              {    
    903              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    904                                       aoi, 0, NULL, inMsg->SecurityUse );
    905              }
    906          #else 
    907              if (ZG_DEVICE_RTR_TYPE)
   \   0000F0   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000F3   E0           MOVX      A,@DPTR
   \   0000F4   6004         JZ        ??ZDO_ProcessMatchDescReq_4
   \   0000F6   6401         XRL       A,#0x1
   \   0000F8   703D         JNZ       ??ZDO_ProcessMatchDescReq_5
    908              {
    909              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_DEVICE_NOT_FOUND,
    910                                       aoi, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000FA                ; Setup parameters for call to function ZDP_EPRsp
   \   0000FA   740D         MOV       A,#0xd
   \   0000FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FF   12....       LCALL     ?Subroutine51 & 0xFFFF
    911              }
   \                     ??CrossCallReturnLabel_84:
   \   000102   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000105   E4           CLR       A
   \   000106   F5..         MOV       ?V0,A
   \   000108   F5..         MOV       ?V1,A
   \   00010A   78..         MOV       R0,#?V0
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010F   78..         MOV       R0,#?V0
   \   000111   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000114   78..         MOV       R0,#?V2
   \   000116   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000119   75..81       MOV       ?V0,#-0x7f
   \   00011C   78..         MOV       R0,#?V0
   \   00011E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000121   7410         MOV       A,#0x10
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000129   12....       LCALL     ?XSTACK_DISP0_8
   \   00012C   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00012F   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000132   7407         MOV       A,#0x7
   \   000134   12....       LCALL     ?DEALLOC_XSTACK8
    912          #endif
    913              return;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   000137   02....       LJMP      ??ZDO_ProcessMatchDescReq_1 & 0xFFFF
    914            }
    915          
    916            if ((numInClusters = *msg++) &&
    917                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   00013A   85..82       MOV       DPL,?V0
   \   00013D   85..83       MOV       DPH,?V1
   \   000140   A3           INC       DPTR
   \   000141   A3           INC       DPTR
   \   000142   A3           INC       DPTR
   \   000143   A3           INC       DPTR
   \   000144   E0           MOVX      A,@DPTR
   \   000145   F5..         MOV       ?V6,A
   \   000147   E5..         MOV       A,?V0
   \   000149   2405         ADD       A,#0x5
   \   00014B   F5..         MOV       ?V0,A
   \   00014D   5002         JNC       ??ZDO_ProcessMatchDescReq_6
   \   00014F   05..         INC       ?V1
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   000151   E5..         MOV       A,?V6
   \   000153   602B         JZ        ??ZDO_ProcessMatchDescReq_7
   \   000155                ; Setup parameters for call to function osal_mem_alloc
   \   000155   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000158   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00015B   7405         MOV       A,#0x5
   \   00015D   12....       LCALL     ?XSTACK_DISP0_8
   \   000160   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000163   7405         MOV       A,#0x5
   \   000165   12....       LCALL     ?XSTACK_DISP0_8
   \   000168   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   00016B   6013         JZ        ??ZDO_ProcessMatchDescReq_7
    918            {
    919              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   00016D                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00016D   7405         MOV       A,#0x5
   \   00016F   12....       LCALL     ?XSTACK_DISP0_8
   \   000172   12....       LCALL     ?Subroutine102 & 0xFFFF
    920            }
   \                     ??CrossCallReturnLabel_162:
   \   000175   A9..         MOV       R1,?V6
   \   000177   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   00017A   8A..         MOV       ?V0,R2
   \   00017C   8B..         MOV       ?V1,R3
   \   00017E   8003         SJMP      ??ZDO_ProcessMatchDescReq_8
    921            else
    922            {
    923              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000180   75..00       MOV       ?V6,#0x0
    924            }
    925          
    926            if ((numOutClusters = *msg++) &&
    927                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000183   85..82       MOV       DPL,?V0
   \   000186   85..83       MOV       DPH,?V1
   \   000189   E0           MOVX      A,@DPTR
   \   00018A   F5..         MOV       ?V3,A
   \   00018C   A3           INC       DPTR
   \   00018D   8582..       MOV       ?V0,DPL
   \   000190   8583..       MOV       ?V1,DPH
   \   000193   6025         JZ        ??ZDO_ProcessMatchDescReq_9
   \   000195                ; Setup parameters for call to function osal_mem_alloc
   \   000195   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000198   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00019B   7403         MOV       A,#0x3
   \   00019D   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A0   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0001A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A6   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   0001A9   600F         JZ        ??ZDO_ProcessMatchDescReq_9
    928            {
    929              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   0001AB                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0001AB   7403         MOV       A,#0x3
   \   0001AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B0   12....       LCALL     ?Subroutine102 & 0xFFFF
    930            }
   \                     ??CrossCallReturnLabel_163:
   \   0001B3   A9..         MOV       R1,?V3
   \   0001B5   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0001B8   8003         SJMP      ??ZDO_ProcessMatchDescReq_10
    931            else
    932            {
    933              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   0001BA   75..00       MOV       ?V3,#0x0
    934            }
    935          
    936            // First count the number of endpoints that match.
    937            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   0001BD   90....       MOV       DPTR,#epList
   \   0001C0   8054         SJMP      ??CrossCallReturnLabel_652
    938            while ( epDesc )
    939            {
    940              // Don't search endpoint 0 and check if response is allowed
    941              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    942              {
    943                if ( epDesc->pfnDescCB )
    944                {
    945                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    946                  allocated = TRUE;
    947                }
    948                else
    949                {
    950                  sDesc = epDesc->epDesc->simpleDesc;
    951                  allocated = FALSE;
    952                }
    953          
    954                // Allow specific ProfileId or Wildcard ProfileID
    955                if ( sDesc && ( ( sDesc->AppProfId == profileID ) || ( profileID == ZDO_WILDCARD_PROFILE_ID ) ) )
    956                {
    957                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    958          
    959                  // Are there matching input clusters?
    960                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    961                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    962                      // Are there matching output clusters?
    963                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    964                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    965                  {
    966                    // Notify the endpoint of the match.
    967                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    968                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    969          
    970                    if (pRspSent)
    971                    {
    972                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    973                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    974                      pRspSent->numInClusters = numInClusters;
    975                      pRspSent->numOutClusters = numOutClusters;
    976          
    977                      if (numInClusters)
    978                      {
    979                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    980                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    981                      }
    982                      else
    983                      {
    984                        pRspSent->pInClusters = NULL;
    985                      }
    986          
    987                      if (numOutClusters)
    988                      {
    989                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    990                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    991                      }
    992                      else
    993                      {
    994                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   0001C2   E4           CLR       A
   \   0001C3   F0           MOVX      @DPTR,A
   \   0001C4   A3           INC       DPTR
   \   0001C5   F0           MOVX      @DPTR,A
    995                      }
    996          
    997                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   0001C6                ; Setup parameters for call to function osal_msg_send
   \   0001C6   AA..         MOV       R2,?V4
   \   0001C8   AB..         MOV       R3,?V5
   \   0001CA   7411         MOV       A,#0x11
   \   0001CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CF   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   0001D2   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   0001D5   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   0001D8   F9           MOV       R1,A
   \   0001D9   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    998                    }
    999          
   1000                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   0001DC   85..82       MOV       DPL,?XSP + 0
   \   0001DF   85..83       MOV       DPH,?XSP + 1
   \   0001E2   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   0001E5   C0E0         PUSH      A
   \   0001E7   7402         MOV       A,#0x2
   \   0001E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EC   E0           MOVX      A,@DPTR
   \   0001ED   F8           MOV       R0,A
   \   0001EE   74..         MOV       A,#ZDOBuildBuf & 0xff
   \   0001F0   28           ADD       A,R0
   \   0001F1   F582         MOV       DPL,A
   \   0001F3   E4           CLR       A
   \   0001F4   34..         ADDC      A,#(ZDOBuildBuf >> 8) & 0xff
   \   0001F6   F583         MOV       DPH,A
   \   0001F8   D0E0         POP       A
   \   0001FA   F0           MOVX      @DPTR,A
   \   0001FB   7402         MOV       A,#0x2
   \   0001FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000200   E0           MOVX      A,@DPTR
   \   000201   04           INC       A
   \   000202   F0           MOVX      @DPTR,A
   1001                  }
   1002                }
   1003          
   1004                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000203   A2..         MOV       C,?VB.0
   \   000205   5006         JNC       ??ZDO_ProcessMatchDescReq_15
   1005                {
   1006                  osal_mem_free( sDesc );
   \   000207                ; Setup parameters for call to function osal_mem_free
   \   000207   12....       LCALL     ?Subroutine99 & 0xFFFF
   1007                }
   \                     ??CrossCallReturnLabel_489:
   \   00020A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1008              }
   1009              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   00020D   7407         MOV       A,#0x7
   \   00020F   12....       LCALL     ?XSTACK_DISP0_8
   \   000212   E0           MOVX      A,@DPTR
   \   000213   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_652:
   \   000216   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   000219   7407         MOV       A,#0x7
   \   00021B   12....       LCALL     ?XSTACK_DISP0_8
   \   00021E   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000221   7407         MOV       A,#0x7
   \   000223   12....       LCALL     ?XSTACK_DISP0_8
   \   000226   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000229   7003         JNZ       $+5
   \   00022B   02....       LJMP      ??ZDO_ProcessMatchDescReq_16 & 0xFFFF
   \   00022E   7407         MOV       A,#0x7
   \   000230   12....       LCALL     ?XSTACK_DISP0_8
   \   000233   12....       LCALL     ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000236   7411         MOV       A,#0x11
   \   000238   12....       LCALL     ?XSTACK_DISP0_8
   \   00023B   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   00023E   7411         MOV       A,#0x11
   \   000240   12....       LCALL     ?XSTACK_DISP0_8
   \   000243   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000246   E8           MOV       A,R0
   \   000247   FA           MOV       R2,A
   \   000248   E9           MOV       A,R1
   \   000249   FB           MOV       R3,A
   \   00024A   8A82         MOV       DPL,R2
   \   00024C   8B83         MOV       DPH,R3
   \   00024E   E0           MOVX      A,@DPTR
   \   00024F   FC           MOV       R4,A
   \   000250   60BB         JZ        ??ZDO_ProcessMatchDescReq_15
   \   000252   7407         MOV       A,#0x7
   \   000254   12....       LCALL     ?XSTACK_DISP0_8
   \   000257   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_661:
   \   00025A   2408         ADD       A,#0x8
   \   00025C   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00025F   A2E0         MOV       C,0xE0 /* A   */.0
   \   000261   50AA         JNC       ??ZDO_ProcessMatchDescReq_15
   \   000263   7407         MOV       A,#0x7
   \   000265   12....       LCALL     ?XSTACK_DISP0_8
   \   000268   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_654:
   \   00026B   A3           INC       DPTR
   \   00026C   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   00026F   E582         MOV       A,DPL
   \   000271   4583         ORL       A,DPH
   \   000273   6014         JZ        ??ZDO_ProcessMatchDescReq_17
   \   000275                ; Setup parameters for indirect call
   \   000275   EC           MOV       A,R4
   \   000276   FA           MOV       R2,A
   \   000277   7901         MOV       R1,#0x1
   \   000279   12....       LCALL     ?CALL_IND
   \   00027C   85..82       MOV       DPL,?XSP + 0
   \   00027F   85..83       MOV       DPH,?XSP + 1
   \   000282   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000285   D2..         SETB      ?VB.0
   \   000287   8011         SJMP      ??ZDO_ProcessMatchDescReq_18
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   000289   8A82         MOV       DPL,R2
   \   00028B   8B83         MOV       DPH,R3
   \   00028D   A3           INC       DPTR
   \   00028E   A3           INC       DPTR
   \   00028F   A3           INC       DPTR
   \   000290   A3           INC       DPTR
   \   000291   E0           MOVX      A,@DPTR
   \   000292   F8           MOV       R0,A
   \   000293   A3           INC       DPTR
   \   000294   E0           MOVX      A,@DPTR
   \   000295   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000298   C2..         CLR       ?VB.0
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   00029A   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   00029D   7003         JNZ       $+5
   \   00029F   02....       LJMP      ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   0002A2   85..82       MOV       DPL,?XSP + 0
   \   0002A5   85..83       MOV       DPH,?XSP + 1
   \   0002A8   12....       LCALL     ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_653:
   \   0002AB   E0           MOVX      A,@DPTR
   \   0002AC   6E           XRL       A,R6
   \   0002AD   7003         JNZ       ??ZDO_ProcessMatchDescReq_19
   \   0002AF   A3           INC       DPTR
   \   0002B0   E0           MOVX      A,@DPTR
   \   0002B1   6F           XRL       A,R7
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   0002B2   600D         JZ        ??ZDO_ProcessMatchDescReq_20
   \   0002B4   74FF         MOV       A,#-0x1
   \   0002B6   6E           XRL       A,R6
   \   0002B7   7003         JNZ       ??ZDO_ProcessMatchDescReq_21
   \   0002B9   74FF         MOV       A,#-0x1
   \   0002BB   6F           XRL       A,R7
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   0002BC   6003         JZ        $+5
   \   0002BE   02....       LJMP      ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   0002C1                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0002C1   85..82       MOV       DPL,?XSP + 0
   \   0002C4   85..83       MOV       DPH,?XSP + 1
   \   0002C7   A3           INC       DPTR
   \   0002C8   E0           MOVX      A,@DPTR
   \   0002C9   C8           XCH       A,R0
   \   0002CA   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0002CD   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0002D0   7402         MOV       A,#0x2
   \   0002D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D5   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_662:
   \   0002D8   2406         ADD       A,#0x6
   \   0002DA   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   0002DD   FC           MOV       R4,A
   \   0002DE   7407         MOV       A,#0x7
   \   0002E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E3   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   0002E6   A9..         MOV       R1,?V6
   \   0002E8   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   0002EB   7402         MOV       A,#0x2
   \   0002ED   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002F0   E9           MOV       A,R1
   \   0002F1   7036         JNZ       ??ZDO_ProcessMatchDescReq_22
   \   0002F3                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0002F3   85..82       MOV       DPL,?XSP + 0
   \   0002F6   85..83       MOV       DPH,?XSP + 1
   \   0002F9   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_663:
   \   0002FC   240A         ADD       A,#0xa
   \   0002FE   F582         MOV       DPL,A
   \   000300   E4           CLR       A
   \   000301   38           ADDC      A,R0
   \   000302   F583         MOV       DPH,A
   \   000304   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000307   7402         MOV       A,#0x2
   \   000309   12....       LCALL     ?XSTACK_DISP0_8
   \   00030C   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00030F   E0           MOVX      A,@DPTR
   \   000310   FC           MOV       R4,A
   \   000311   7405         MOV       A,#0x5
   \   000313   12....       LCALL     ?XSTACK_DISP0_8
   \   000316   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   000319   A9..         MOV       R1,?V3
   \   00031B   12....       LCALL     `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00031E   7402         MOV       A,#0x2
   \   000320   12....       LCALL     ?DEALLOC_XSTACK8
   \   000323   E9           MOV       A,R1
   \   000324   7003         JNZ       $+5
   \   000326   02....       LJMP      ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   000329                ; Setup parameters for call to function osal_msg_allocate
   \   000329   E5..         MOV       A,?V3
   \   00032B   25..         ADD       A,?V6
   \   00032D   C3           CLR       C
   \   00032E   33           RLC       A
   \   00032F   240A         ADD       A,#0xa
   \   000331   FA           MOV       R2,A
   \   000332   7B00         MOV       R3,#0x0
   \   000334   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000337   8A..         MOV       ?V4,R2
   \   000339   8B..         MOV       ?V5,R3
   \   00033B   EA           MOV       A,R2
   \   00033C   45..         ORL       A,?V5
   \   00033E   7003         JNZ       $+5
   \   000340   02....       LJMP      ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \   000343   8A82         MOV       DPL,R2
   \   000345   8B83         MOV       DPH,R3
   \   000347   74D2         MOV       A,#-0x2e
   \   000349   F0           MOVX      @DPTR,A
   \   00034A   7409         MOV       A,#0x9
   \   00034C   12....       LCALL     ?XSTACK_DISP0_8
   \   00034F   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000352   8A82         MOV       DPL,R2
   \   000354   8B83         MOV       DPH,R3
   \   000356   A3           INC       DPTR
   \   000357   A3           INC       DPTR
   \   000358   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   00035B   8A82         MOV       DPL,R2
   \   00035D   8B83         MOV       DPH,R3
   \   00035F   A3           INC       DPTR
   \   000360   A3           INC       DPTR
   \   000361   A3           INC       DPTR
   \   000362   A3           INC       DPTR
   \   000363   E5..         MOV       A,?V6
   \   000365   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   000368   A3           INC       DPTR
   \   000369   A3           INC       DPTR
   \   00036A   A3           INC       DPTR
   \   00036B   A3           INC       DPTR
   \   00036C   A3           INC       DPTR
   \   00036D   A3           INC       DPTR
   \   00036E   E5..         MOV       A,?V3
   \   000370   F0           MOVX      @DPTR,A
   \   000371   EA           MOV       A,R2
   \   000372   2405         ADD       A,#0x5
   \   000374   F582         MOV       DPL,A
   \   000376   E4           CLR       A
   \   000377   35..         ADDC      A,?V5
   \   000379   F583         MOV       DPH,A
   \   00037B   E5..         MOV       A,?V6
   \   00037D   6028         JZ        ??ZDO_ProcessMatchDescReq_23
   \   00037F   EA           MOV       A,R2
   \   000380   240A         ADD       A,#0xa
   \   000382   FA           MOV       R2,A
   \   000383   E4           CLR       A
   \   000384   35..         ADDC      A,?V5
   \   000386   FB           MOV       R3,A
   \   000387   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   00038A                ; Setup parameters for call to function osal_memcpy
   \   00038A   7405         MOV       A,#0x5
   \   00038C   12....       LCALL     ?XSTACK_DISP0_8
   \   00038F   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000392   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000395   AC..         MOV       R4,?V6
   \   000397   EC           MOV       A,R4
   \   000398   2C           ADD       A,R4
   \   000399   FC           MOV       R4,A
   \   00039A   E4           CLR       A
   \   00039B   33           RLC       A
   \   00039C   FD           MOV       R5,A
   \   00039D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003A0   7403         MOV       A,#0x3
   \   0003A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003A5   8004         SJMP      ??ZDO_ProcessMatchDescReq_24
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0003A7   E4           CLR       A
   \   0003A8   F0           MOVX      @DPTR,A
   \   0003A9   A3           INC       DPTR
   \   0003AA   F0           MOVX      @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   0003AB   E5..         MOV       A,?V4
   \   0003AD   2408         ADD       A,#0x8
   \   0003AF   F582         MOV       DPL,A
   \   0003B1   E4           CLR       A
   \   0003B2   35..         ADDC      A,?V5
   \   0003B4   F583         MOV       DPH,A
   \   0003B6   E5..         MOV       A,?V3
   \   0003B8   7003         JNZ       $+5
   \   0003BA   02....       LJMP      ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   \   0003BD   A8..         MOV       R0,?V6
   \   0003BF   12....       LCALL     ?Subroutine177 & 0xFFFF
   1010            }
   \                     ??CrossCallReturnLabel_294:
   \   0003C2   E5..         MOV       A,?V4
   \   0003C4   28           ADD       A,R0
   \   0003C5   F8           MOV       R0,A
   \   0003C6   E5..         MOV       A,?V5
   \   0003C8   39           ADDC      A,R1
   \   0003C9   F9           MOV       R1,A
   \   0003CA   E8           MOV       A,R0
   \   0003CB   240A         ADD       A,#0xa
   \   0003CD   FA           MOV       R2,A
   \   0003CE   E4           CLR       A
   \   0003CF   39           ADDC      A,R1
   \   0003D0   FB           MOV       R3,A
   \   0003D1   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0003D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D7   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0003DA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003DD   AC..         MOV       R4,?V3
   \   0003DF   EC           MOV       A,R4
   \   0003E0   2C           ADD       A,R4
   \   0003E1   FC           MOV       R4,A
   \   0003E2   E4           CLR       A
   \   0003E3   33           RLC       A
   \   0003E4   FD           MOV       R5,A
   \   0003E5   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003E8   7403         MOV       A,#0x3
   \   0003EA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003ED   02....       LJMP      ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   1011          
   1012            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   0003F0   7402         MOV       A,#0x2
   \   0003F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0003F5   E0           MOVX      A,@DPTR
   \   0003F6   602C         JZ        ??ZDO_ProcessMatchDescReq_25
   1013            {
   1014              // Send the message if at least one match found.
   1015              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
   1016                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   0003F8                ; Setup parameters for call to function ZDP_EPRsp
   \   0003F8   740D         MOV       A,#0xd
   \   0003FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0003FD   12....       LCALL     ?Subroutine51 & 0xFFFF
   1017              {
   1018          #if defined( LCD_SUPPORTED )
   1019                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   1020          #endif
   1021              }
   1022            }
   \                     ??CrossCallReturnLabel_85:
   \   000400   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000403   75....       MOV       ?V0,#ZDOBuildBuf & 0xff
   \   000406   75....       MOV       ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000409   78..         MOV       R0,#?V0
   \   00040B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00040E   7405         MOV       A,#0x5
   \   000410   12....       LCALL     ?XSTACK_DISP0_8
   \   000413   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   000416   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000419   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00041C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00041F   75..00       MOV       ?V0,#0x0
   \   000422   802E         SJMP      ??ZDO_ProcessMatchDescReq_26
   1023            else
   1024            {
   1025              if (!inMsg->wasBroadcast)
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   000424   740B         MOV       A,#0xb
   \   000426   12....       LCALL     ?XSTACK_DISP0_8
   \   000429   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00042C   703F         JNZ       ??ZDO_ProcessMatchDescReq_27
   1026              {
   1027                // send response message with match length = 0
   1028                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
   1029                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   00042E                ; Setup parameters for call to function ZDP_EPRsp
   \   00042E   740D         MOV       A,#0xd
   \   000430   12....       LCALL     ?XSTACK_DISP0_8
   \   000433   12....       LCALL     ?Subroutine51 & 0xFFFF
   1030          #if defined( LCD_SUPPORTED )
   1031                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
   1032          #endif
   1033              }
   1034              else
   1035              {
   1036                // no response mesage for broadcast message
   1037          #if defined( LCD_SUPPORTED )
   1038                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   1039          #endif
   1040              }
   1041            }
   \                     ??CrossCallReturnLabel_86:
   \   000436   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000439   75....       MOV       ?V0,#ZDOBuildBuf & 0xff
   \   00043C   75....       MOV       ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00043F   78..         MOV       R0,#?V0
   \   000441   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000444   75..00       MOV       ?V0,#0x0
   \   000447   78..         MOV       R0,#?V0
   \   000449   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00044C   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00044F   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   000452   78..         MOV       R0,#?V0
   \   000454   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000457   7410         MOV       A,#0x10
   \   000459   12....       LCALL     ?XSTACK_DISP0_8
   \   00045C   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00045F   12....       LCALL     ?XSTACK_DISP0_8
   \   000462   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000465   12....       LCALL     `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000468   7407         MOV       A,#0x7
   \   00046A   12....       LCALL     ?DEALLOC_XSTACK8
   1042          
   1043            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   00046D   7405         MOV       A,#0x5
   \   00046F   12....       LCALL     ?XSTACK_DISP0_8
   \   000472   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000475   600B         JZ        ??ZDO_ProcessMatchDescReq_28
   1044            {
   1045              osal_mem_free( inClusters );
   \   000477                ; Setup parameters for call to function osal_mem_free
   \   000477   7405         MOV       A,#0x5
   \   000479   12....       LCALL     ?XSTACK_DISP0_8
   \   00047C   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   1046            }
   \                     ??CrossCallReturnLabel_467:
   \   00047F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1047          
   1048            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_28:
   \   000482   7403         MOV       A,#0x3
   \   000484   12....       LCALL     ?XSTACK_DISP0_8
   \   000487   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   00048A   600B         JZ        ??ZDO_ProcessMatchDescReq_1
   1049            {
   1050              osal_mem_free( outClusters );
   \   00048C                ; Setup parameters for call to function osal_mem_free
   \   00048C   7403         MOV       A,#0x3
   \   00048E   12....       LCALL     ?XSTACK_DISP0_8
   \   000491   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   1051            }
   \                     ??CrossCallReturnLabel_468:
   \   000494   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1052          }
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   000497   7413         MOV       A,#0x13
   \   000499                REQUIRE ?Subroutine6
   \   000499                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2402         ADD       A,#0x2
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   FA           MOV       R2,A
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine205_0
   \   000002                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E4           CLR       A
   \   000003   C8           XCH       A,R0
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   AA..         MOV       R2,?V0
   \   000007   AB..         MOV       R3,?V1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   7416         MOV       A,#0x16
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   F9           MOV       R1,A
   \   000004   7A06         MOV       R2,#0x6
   \   000006   7B80         MOV       R3,#-0x80
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   F5..         MOV       ?V0,A
   \   000005   78..         MOV       R0,#?V0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7402         MOV       A,#0x2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   F9           MOV       R1,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine215_0
   \   000007                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine216_0
   \   000001                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000005                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000005   740B         MOV       A,#0xb
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000005   7403         MOV       A,#0x3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_698:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   25E0         ADD       A,0xE0 /* A   */
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   33           RLC       A
   \   000005   FB           MOV       R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003                REQUIRE ??Subroutine235_0
   \   000003                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   38           ADDC      A,R0
   \   000001   F583         MOV       DPH,A
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_689:
   \   000003   240B         ADD       A,#0xb
   \   000005   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   FA           MOV       R2,A
   \   000003   85..82       MOV       DPL,?V0
   \   000006   85..83       MOV       DPH,?V1
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   F583         MOV       DPH,A
   \   000002   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   000005   85..82       MOV       DPL,?V0
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   2407         ADD       A,#0x7
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   F8           MOV       R0,A
   \   000001                REQUIRE ??Subroutine252_0
   \   000001                ; // Fall through to label ??Subroutine252_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine252_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine253_0
   \   000001                ; // Fall through to label ??Subroutine253_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine253_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F583         MOV       DPH,A
   \   000003   8882         MOV       DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002                REQUIRE ??Subroutine254_0
   \   000002                ; // Fall through to label ??Subroutine254_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine254_0:
   \   000000   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_659:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine256_0:
   \   000000   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_694:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_696:
   \   000003   2409         ADD       A,#0x9
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   000003   75..00       MOV       ?V2,#0x0
   \   000006   78..         MOV       R0,#?V0
   \   000008   22           RET
   1053          
   1054          #if defined ( REFLECTOR )
   1055          /*********************************************************************
   1056           * @fn      ZDO_ProcessBindUnbindReq()
   1057           *
   1058           * @brief   Called to process a Bind or Unbind Request message.
   1059           *
   1060           * @param   inMsg  - incoming message (request)
   1061           * @param   pReq - place to put parsed information
   1062           *
   1063           * @return  none
   1064           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine201_0
   \   000003                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1065          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
   1066          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   1067            zAddrType_t SourceAddr;       // Binding Source addres
   1068            byte bindStat;
   1069          
   1070            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV       A,#0xb
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   7403         MOV       A,#0x3
   \   000019   F0           MOVX      @DPTR,A
   1071            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL     ?XSTACK_DISP101_8
   \   00001D   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1072          
   1073            // If the local device is not the primary binding cache
   1074            // check the src address of the bind request.
   1075            // If it is not the local device's extended address
   1076            // discard the request.
   1077            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
   1078                  (pReq->dstAddress.addrMode != Addr64Bit &&
   1079                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000023   8A..         MOV       ?V2,R2
   \   000025   8B..         MOV       ?V3,R3
   \   000027   AC..         MOV       R4,?V2
   \   000029   AD..         MOV       R5,?V3
   \   00002B                ; Setup parameters for call to function sAddrExtCmp
   \   00002B   7403         MOV       A,#0x3
   \   00002D   12....       LCALL     ?XSTACK_DISP101_8
   \   000030   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000033   E9           MOV       A,R1
   \   000034   601A         JZ        ??ZDO_ProcessBindUnbindReq_0
   \   000036   EE           MOV       A,R6
   \   000037   2413         ADD       A,#0x13
   \   000039   F5..         MOV       ?V6,A
   \   00003B   E4           CLR       A
   \   00003C   3F           ADDC      A,R7
   \   00003D   F5..         MOV       ?V7,A
   \   00003F   85..82       MOV       DPL,?V6
   \   000042   F583         MOV       DPH,A
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F8           MOV       R0,A
   \   000046   7403         MOV       A,#0x3
   \   000048   68           XRL       A,R0
   \   000049   6010         JZ        ??ZDO_ProcessBindUnbindReq_1
   \   00004B   7401         MOV       A,#0x1
   \   00004D   68           XRL       A,R0
   \   00004E   600B         JZ        ??ZDO_ProcessBindUnbindReq_1
   1080            {
   1081              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000050   85..82       MOV       DPL,?XSP + 0
   \   000053   85..83       MOV       DPH,?XSP + 1
   \   000056   7484         MOV       A,#-0x7c
   \   000058   02....       LJMP      ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1082            }
   1083            else
   1084            {
   1085              // Check source & destination endpoints
   1086              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
   1087                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1088                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00005B   EE           MOV       A,R6
   \   00005C   2408         ADD       A,#0x8
   \   00005E   F5..         MOV       ?V2,A
   \   000060   E4           CLR       A
   \   000061   3F           ADDC      A,R7
   \   000062   F5..         MOV       ?V3,A
   \   000064   85..82       MOV       DPL,?V2
   \   000067   F583         MOV       DPH,A
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F9           MOV       R1,A
   \   00006B   601E         JZ        ??ZDO_ProcessBindUnbindReq_3
   \   00006D   74FF         MOV       A,#-0x1
   \   00006F   69           XRL       A,R1
   \   000070   6019         JZ        ??ZDO_ProcessBindUnbindReq_3
   \   000072   EE           MOV       A,R6
   \   000073   2414         ADD       A,#0x14
   \   000075   FC           MOV       R4,A
   \   000076   E4           CLR       A
   \   000077   3F           ADDC      A,R7
   \   000078   FD           MOV       R5,A
   \   000079   7403         MOV       A,#0x3
   \   00007B   68           XRL       A,R0
   \   00007C   7018         JNZ       ??ZDO_ProcessBindUnbindReq_4
   \   00007E   8C82         MOV       DPL,R4
   \   000080   8D83         MOV       DPH,R5
   \   000082   E0           MOVX      A,@DPTR
   \   000083   F8           MOV       R0,A
   \   000084   6005         JZ        ??ZDO_ProcessBindUnbindReq_3
   \   000086   74FF         MOV       A,#-0x1
   \   000088   68           XRL       A,R0
   \   000089   700B         JNZ       ??ZDO_ProcessBindUnbindReq_4
   1089              {
   1090                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   00008B   85..82       MOV       DPL,?XSP + 0
   \   00008E   85..83       MOV       DPH,?XSP + 1
   \   000091   7482         MOV       A,#-0x7e
   \   000093   02....       LJMP      ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1091              }
   1092              else
   1093              {
   1094                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   000096   EE           MOV       A,R6
   \   000097   2409         ADD       A,#0x9
   \   000099   FA           MOV       R2,A
   \   00009A   E4           CLR       A
   \   00009B   3F           ADDC      A,R7
   \   00009C   FB           MOV       R3,A
   \   00009D   EE           MOV       A,R6
   \   00009E   240B         ADD       A,#0xb
   \   0000A0   FE           MOV       R6,A
   \   0000A1   5001         JNC       ??ZDO_ProcessBindUnbindReq_5
   \   0000A3   0F           INC       R7
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000A4   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_592:
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   6421         XRL       A,#0x21
   \   0000AA   7002         JNZ       ??ZDO_ProcessBindUnbindReq_6
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   0000AE   7065         JNZ       ??ZDO_ProcessBindUnbindReq_7
   1095                {
   1096                  // Assume the table is full
   1097                  bindStat = ZDP_TABLE_FULL;
   \   0000B0   85..82       MOV       DPL,?XSP + 0
   \   0000B3   85..83       MOV       DPH,?XSP + 1
   \   0000B6   748C         MOV       A,#-0x74
   \   0000B8   12....       LCALL     ?Subroutine24 & 0xFFFF
   1098          
   1099          #if defined( APP_TP ) || defined( APP_TP2 )
   1100                  // For ZigBee Conformance Testing
   1101                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1102          #endif
   1103                  {
   1104          #if defined ( ZDP_BIND_VALIDATION )
   1105                    uint16 nwkAddr;
   1106          
   1107                    // Verifies that a valid NWK address exists for the device
   1108                    // before creating a Binding entry. If NWK address does not
   1109                    // exist the request is sent out and the BindReq is saved, to
   1110                    // create the Bind Entry once the NwkAddrRsp is received
   1111                    if ( ( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1112                         ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE ) )
   1113                    {
   1114                      // find an empty bind slot in the pending Bind Req list
   1115                      ZDO_PendingBindReq_t *pPendingBind;
   1116          
   1117                      if ( ( pPendingBind = ZDApp_GetEmptyPendingBindReq() ) != NULL )
   1118                      {
   1119                        // copy the received request into the empty slot and all required info
   1120                        osal_memcpy( &(pPendingBind->bindReq), pReq, sizeof( ZDO_BindUnbindReq_t ) );
   1121          
   1122                        pPendingBind->srcAddr = inMsg->srcAddr;
   1123                        pPendingBind->securityUse = inMsg->SecurityUse;
   1124                        pPendingBind->transSeq = inMsg->TransSeq;
   1125                        pPendingBind->age = MAX_TIME_ADDR_REQ;
   1126          
   1127                        // create an entry in Address Manager
   1128                        ( void )bindAddrIndexGet( &(pReq->dstAddress) );
   1129          
   1130                        ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1131          
   1132                        osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   1133                                            AGE_OUT_PEND_BIND_REQ_DELAY );
   1134                        return;
   1135                      }
   1136                    }
   1137                    // Add Bind entry
   1138                    else if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1139                                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   1140                    {
   1141                      // valid entry
   1142                      bindStat = ZDP_SUCCESS;
   1143          
   1144                      // Notify to save info into NV
   1145                      ZDApp_NVUpdate();
   1146                    }
   1147          #else // ZDP_BIND_VALIDATION  is not Defined
   1148                    // Create binding entry first independently of existance of  valid NWK addres
   1149                    // if NWK address does not exist a request is sent out
   1150                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1151                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??CrossCallReturnLabel_34:
   \   0000BB   E0           MOVX      A,@DPTR
   \   0000BC   F5..         MOV       ?V4,A
   \   0000BE   78..         MOV       R0,#?V4
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C3   EE           MOV       A,R6
   \   0000C4   FC           MOV       R4,A
   \   0000C5   EF           MOV       A,R7
   \   0000C6   FD           MOV       R5,A
   \   0000C7   8A82         MOV       DPL,R2
   \   0000C9   8B83         MOV       DPH,R3
   \   0000CB   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   0000CE   85..82       MOV       DPL,?V2
   \   0000D1   85..83       MOV       DPH,?V3
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   F9           MOV       R1,A
   \   0000D6   12....       LCALL     `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   0000D9   7401         MOV       A,#0x1
   \   0000DB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DE   E9           MOV       A,R1
   \   0000DF   7066         JNZ       ??ZDO_ProcessBindUnbindReq_8
   1152                    {
   1153                      uint16 nwkAddr;
   1154          
   1155                      // valid entry
   1156                      bindStat = ZDP_SUCCESS;
   \   0000E1   85..82       MOV       DPL,?XSP + 0
   \   0000E4   85..83       MOV       DPH,?XSP + 1
   \   0000E7   E4           CLR       A
   \   0000E8   F0           MOVX      @DPTR,A
   1157          
   1158                      // Notify to save info into NV
   1159                      ZDApp_NVUpdate();
   \   0000E9                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000E9   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1160          
   1161                      // Check for the destination address
   1162                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   0000EC   85..82       MOV       DPL,?V6
   \   0000EF   85..83       MOV       DPH,?V7
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   6403         XRL       A,#0x3
   \   0000F5   7050         JNZ       ??ZDO_ProcessBindUnbindReq_8
   1163                      {
   1164                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   \   0000F7                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   0000F7   7401         MOV       A,#0x1
   \   0000F9   12....       LCALL     ?XSTACK_DISP102_8
   \   0000FC   EE           MOV       A,R6
   \   0000FD   FA           MOV       R2,A
   \   0000FE   EF           MOV       A,R7
   \   0000FF   FB           MOV       R3,A
   \   000100   12....       LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   000103   E9           MOV       A,R1
   \   000104   7041         JNZ       ??ZDO_ProcessBindUnbindReq_8
   1165                        {
   1166                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000106                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000106   7D00         MOV       R5,#0x0
   \   000108   7C00         MOV       R4,#0x0
   \   00010A   7900         MOV       R1,#0x0
   \   00010C   EE           MOV       A,R6
   \   00010D   FA           MOV       R2,A
   \   00010E   EF           MOV       A,R7
   \   00010F   FB           MOV       R3,A
   \   000110   12....       LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000113   8032         SJMP      ??ZDO_ProcessBindUnbindReq_8
   1167                        }
   1168                      }
   1169                    }
   1170          #endif
   1171                  }
   1172                }
   1173                else // Unbind_req
   1174                {
   1175                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1176                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   000115                ; Setup parameters for call to function APSME_UnBindRequest
   \   000115   8C82         MOV       DPL,R4
   \   000117   8D83         MOV       DPH,R5
   \   000119   E0           MOVX      A,@DPTR
   \   00011A   F5..         MOV       ?V2,A
   \   00011C   78..         MOV       R0,#?V2
   \   00011E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000121   EE           MOV       A,R6
   \   000122   FC           MOV       R4,A
   \   000123   EF           MOV       A,R7
   \   000124   FD           MOV       R5,A
   \   000125   8A82         MOV       DPL,R2
   \   000127   8B83         MOV       DPH,R3
   \   000129   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   00012C   12....       LCALL     `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   00012F   7401         MOV       A,#0x1
   \   000131   12....       LCALL     ?DEALLOC_XSTACK8
   \   000134   E9           MOV       A,R1
   \   000135   85..82       MOV       DPL,?XSP + 0
   \   000138   85..83       MOV       DPH,?XSP + 1
   \   00013B   7007         JNZ       ??ZDO_ProcessBindUnbindReq_9
   1177                  {
   1178                    bindStat = ZDP_SUCCESS;
   \   00013D   E4           CLR       A
   \   00013E   F0           MOVX      @DPTR,A
   1179          
   1180                    // Notify to save info into NV
   1181                    ZDApp_NVUpdate();
   \   00013F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00013F   12....       LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000142   8003         SJMP      ??ZDO_ProcessBindUnbindReq_8
   1182                  }
   1183                  else
   1184                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_9:
   \   000144   7488         MOV       A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   000146   F0           MOVX      @DPTR,A
   1185                }
   1186              }
   1187            }
   1188          
   1189            // Send back a response message
   1190            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1191                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1192                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   000147                ; Setup parameters for call to function ZDP_SendData
   \   000147   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00014A   F5..         MOV       ?V2,A
   \   00014C   78..         MOV       R0,#?V2
   \   00014E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000151   7401         MOV       A,#0x1
   \   000153   12....       LCALL     ?XSTACK_DISP100_8
   \   000156   88..         MOV       ?V2,R0
   \   000158   89..         MOV       ?V3,R1
   \   00015A   78..         MOV       R0,#?V2
   \   00015C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015F   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   000162   E0           MOVX      A,@DPTR
   \   000163   F5..         MOV       ?V2,A
   \   000165   A3           INC       DPTR
   \   000166   E0           MOVX      A,@DPTR
   \   000167   4480         ORL       A,#0x80
   \   000169   F5..         MOV       ?V3,A
   \   00016B   78..         MOV       R0,#?V2
   \   00016D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000170   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000173   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000176   7405         MOV       A,#0x5
   \   000178   12....       LCALL     ?DEALLOC_XSTACK8
   1193          }
   \   00017B   740C         MOV       A,#0xc
   \   00017D   02....       LJMP      ??Subroutine200_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   7901         MOV       R1,#0x1
   \   000002   E5..         MOV       A,?V0
   \   000004   2402         ADD       A,#0x2
   \   000006   FC           MOV       R4,A
   \   000007   E4           CLR       A
   \   000008   35..         ADDC      A,?V1
   \   00000A   FD           MOV       R5,A
   \   00000B   E5..         MOV       A,?V0
   \   00000D   240F         ADD       A,#0xf
   \   00000F   FA           MOV       R2,A
   \   000010   E4           CLR       A
   \   000011   35..         ADDC      A,?V1
   \   000013   FB           MOV       R3,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function APSME_BindRequest
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   E5..         MOV       A,?V0
   \   000002   240C         ADD       A,#0xc
   \   000004                REQUIRE ??Subroutine241_0
   \   000004                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   E5..         MOV       A,?V0
   \   000002   240E         ADD       A,#0xe
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V1
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET
   1194          #endif // REFLECTOR
   1195          
   1196          /*********************************************************************
   1197           * @fn      ZDO_UpdateAddrManager
   1198           *
   1199           * @brief   Update the Address Manager.
   1200           *
   1201           * @param   nwkAddr - network address
   1202           * @param   extAddr - extended address
   1203           *
   1204           * @return  none
   1205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1206          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1207          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV       A,#-0xd
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   1208            AddrMgrEntry_t addrEntry;
   1209          
   1210            // Update the address manager
   1211            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   1212            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC       A
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine18 & 0xFFFF
   1213            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_21:
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   AA82         MOV       R2,DPL
   \   00001D   AB83         MOV       R3,DPH
   \   00001F   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1214            AddrMgrEntryUpdate( &addrEntry );
   \   000022                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000022   AA..         MOV       R2,?XSP + 0
   \   000024   AB..         MOV       R3,?XSP + 1
   \   000026   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1215          }
   \   000029   740D         MOV       A,#0xd
   \   00002B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002E   02....       LJMP      ?Subroutine0 & 0xFFFF
   1216          
   1217          /*********************************************************************
   1218           * @fn      ZDO_ProcessServerDiscReq
   1219           *
   1220           * @brief   Process the Server_Discovery_req message.
   1221           *
   1222           * @param   inMsg  - incoming message (request)
   1223           *
   1224           * @return  none
   1225           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1226          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1227          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   1228            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1229            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \   000009   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00000C   12....       LCALL     ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   00000F   12....       LCALL     ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_575:
   \   000012   F8           MOV       R0,A
   \   000013   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000016   E0           MOVX      A,@DPTR
   \   000017   58           ANL       A,R0
   \   000018   F5..         MOV       ?V0,A
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   59           ANL       A,R1
   \   00001D   F5..         MOV       ?V1,A
   1230          
   1231            if ( matchMask )
   \   00001F   E5..         MOV       A,?V0
   \   000021   45..         ORL       A,?V1
   \   000023   6028         JZ        ??ZDO_ProcessServerDiscReq_0
   1232            {
   1233              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1234                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000025                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002A   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00002D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000030   EE           MOV       A,R6
   \   000031   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   1235            }
   \                     ??CrossCallReturnLabel_569:
   \   000034   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   000037   FD           MOV       R5,A
   \   000038   7C00         MOV       R4,#0x0
   \   00003A   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   00003D   EE           MOV       A,R6
   \   00003E   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000041   12....       LCALL     ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   000044   F9           MOV       R1,A
   \   000045   12....       LCALL     `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   000048   7404         MOV       A,#0x4
   \   00004A   12....       LCALL     ?DEALLOC_XSTACK8
   1236          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00004D   02....       LJMP      ??Subroutine203_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   EE           MOV       A,R6
   \   000001   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   000004   3F           ADDC      A,R7
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   EA           MOV       A,R2
   \   000006   22           RET
   1237          
   1238          /*********************************************************************
   1239           * Call Back Functions from APS  - API
   1240           */
   1241          
   1242          /*********************************************************************
   1243           * @fn          ZDO_EndDeviceTimeoutCB
   1244           *
   1245           * @brief       This function handles the binding timer for the End
   1246           *              Device Bind command.
   1247           *
   1248           * @param       none
   1249           *
   1250           * @return      none
   1251           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1252          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1253          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1254          #if defined ( REFLECTOR )
   1255            byte stat;
   1256            if ( ZDO_EDBind )
   \   00000A   90....       MOV       DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000010   7003         JNZ       $+5
   \   000012   02....       LJMP      ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1257            {
   1258              stat = ZDO_EDBind->status;
   1259          
   1260              // Send the response message to the first sent
   1261              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1262                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E0           MOVX      A,@DPTR
   \   000016   C8           XCH       A,R0
   \   000017   2415         ADD       A,#0x15
   \   000019   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00001C   F8           MOV       R0,A
   \   00001D   90....       MOV       DPTR,#ZDO_EDBind
   \   000020   E0           MOVX      A,@DPTR
   \   000021   F9           MOV       R1,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   C9           XCH       A,R1
   \   000025   2416         ADD       A,#0x16
   \   000027   F582         MOV       DPL,A
   \   000029   E4           CLR       A
   \   00002A   39           ADDC      A,R1
   \   00002B   F583         MOV       DPH,A
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   C0E0         PUSH      A
   \   000030   7401         MOV       A,#0x1
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   D0E0         POP       A
   \   000037   F0           MOVX      @DPTR,A
   \   000038   90....       MOV       DPTR,#ZDO_EDBind
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F9           MOV       R1,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F583         MOV       DPH,A
   \   000041   8982         MOV       DPL,R1
   \   000043   E0           MOVX      A,@DPTR
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B                ; Setup parameters for call to function ZDP_SendData
   \   00004B   E8           MOV       A,R0
   \   00004C   F5..         MOV       ?V0,A
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000053   7402         MOV       A,#0x2
   \   000055   12....       LCALL     ?XSTACK_DISP100_8
   \   000058   88..         MOV       ?V0,R0
   \   00005A   89..         MOV       ?V1,R1
   \   00005C   78..         MOV       R0,#?V0
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   75..20       MOV       ?V0,#0x20
   \   000064   75..80       MOV       ?V1,#-0x80
   \   000067   78..         MOV       R0,#?V0
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   7901         MOV       R1,#0x1
   \   00006E   90....       MOV       DPTR,#ZDO_EDBind
   \   000071   E0           MOVX      A,@DPTR
   \   000072   29           ADD       A,R1
   \   000073   FC           MOV       R4,A
   \   000074   A3           INC       DPTR
   \   000075   E0           MOVX      A,@DPTR
   \   000076   3400         ADDC      A,#0x0
   \   000078   FD           MOV       R5,A
   \   000079   7405         MOV       A,#0x5
   \   00007B   12....       LCALL     ?XSTACK_DISP101_8
   \   00007E   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000081   7405         MOV       A,#0x5
   \   000083   12....       LCALL     ?DEALLOC_XSTACK8
   1263          
   1264              ZDO_RemoveEndDeviceBind();
   \   000086   90....       MOV       DPTR,#ZDO_EDBind
   \   000089   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   1265            }
   \                     ??CrossCallReturnLabel_385:
   \   00008C   602C         JZ        ??ZDO_EndDeviceTimeoutCB_0
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   C8           XCH       A,R0
   \   000090   2410         ADD       A,#0x10
   \   000092   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000095   6003         JZ        ??ZDO_EndDeviceTimeoutCB_1
   \   000097                ; Setup parameters for call to function osal_mem_free
   \   000097   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   00009A   90....       MOV       DPTR,#ZDO_EDBind
   \   00009D   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_664:
   \   0000A0   2413         ADD       A,#0x13
   \   0000A2   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   0000A5   6003         JZ        ??ZDO_EndDeviceTimeoutCB_2
   \   0000A7                ; Setup parameters for call to function osal_mem_free
   \   0000A7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   0000AA                ; Setup parameters for call to function osal_mem_free
   \   0000AA   90....       MOV       DPTR,#ZDO_EDBind
   \   0000AD   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   0000B0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000B3   90....       MOV       DPTR,#ZDO_EDBind
   \   0000B6   E4           CLR       A
   \   0000B7   F0           MOVX      @DPTR,A
   \   0000B8   A3           INC       DPTR
   \   0000B9   F0           MOVX      @DPTR,A
   1266          #endif  // REFLECTOR
   1267          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000BA   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004                REQUIRE ??Subroutine206_0
   \   000004                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine207_0
   \   000002                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   12....       LCALL     ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET
   1268          
   1269          /*********************************************************************
   1270           * Optional Management Messages
   1271           */
   1272          
   1273          /*********************************************************************
   1274           * @fn          ZDO_ProcessMgmtLqiReq
   1275           *
   1276           * @brief       This function handles parsing the incoming Management
   1277           *              LQI request and generate the response.
   1278           *
   1279           *   Note:      This function will limit the number of items returned
   1280           *              to ZDO_MAX_LQI_ITEMS items.
   1281           *
   1282           * @param       inMsg - incoming message (request)
   1283           *
   1284           * @return      none
   1285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1286          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1287          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 42
   \   000005   74D6         MOV       A,#-0x2a
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine39 & 0xFFFF
   1288            byte x;
   1289            byte index;
   1290            byte numItems;
   1291            byte maxItems;
   1292            ZDP_MgmtLqiItem_t* table = NULL;
   \                     ??CrossCallReturnLabel_66:
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   E4           CLR       A
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   F0           MOVX      @DPTR,A
   1293            ZDP_MgmtLqiItem_t* item;
   1294            neighborEntry_t    entry;
   1295            byte aItems = 0;
   \   000019   75..00       MOV       ?V4,#0x0
   1296            associated_devices_t *aDevice;
   1297            AddrMgrEntry_t  nwkEntry;
   1298            uint8 StartIndex = inMsg->asdu[0];
   \   00001C   7404         MOV       A,#0x4
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   F0           MOVX      @DPTR,A
   1299          
   1300            // Get the number of neighbor items
   1301            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   00002B                ; Setup parameters for call to function NLME_GetRequest
   \   00002B   7401         MOV       A,#0x1
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   7A00         MOV       R2,#0x0
   \   000032   7B00         MOV       R3,#0x0
   \   000034   799C         MOV       R1,#-0x64
   \   000036   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1302          
   1303            //Routing devices uses assoc table, end devices don't
   1304            if ( ZG_DEVICE_RTR_TYPE )
   \   000039   90....       MOV       DPTR,#zgDeviceLogicalType
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   6004         JZ        ??ZDO_ProcessMgmtLqiReq_0
   \   00003F   6401         XRL       A,#0x1
   \   000041   7013         JNZ       ??ZDO_ProcessMgmtLqiReq_1
   1305            {
   1306              // Get the number of associated items
   1307              aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000043                ; Setup parameters for call to function AssocCount
   \   000043   7A04         MOV       R2,#0x4
   \   000045   7900         MOV       R1,#0x0
   \   000047   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   00004A   EA           MOV       A,R2
   \   00004B   F5..         MOV       ?V4,A
   1308              // Total number of items
   1309              maxItems += aItems;
   \   00004D   7401         MOV       A,#0x1
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   E0           MOVX      A,@DPTR
   \   000053   2A           ADD       A,R2
   \   000054   8007         SJMP      ??ZDO_ProcessMgmtLqiReq_2
   1310            }
   1311            else
   1312            {
   1313              maxItems = 1;
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000056   7401         MOV       A,#0x1
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   7401         MOV       A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   00005D   F0           MOVX      @DPTR,A
   1314            }
   1315          
   1316            // Start with the supplied index
   1317            if ( maxItems > StartIndex )
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F8           MOV       R0,A
   \   000060   85..82       MOV       DPL,?XSP + 0
   \   000063   85..83       MOV       DPH,?XSP + 1
   \   000066   E0           MOVX      A,@DPTR
   \   000067   C3           CLR       C
   \   000068   98           SUBB      A,R0
   \   000069   4003         JC        $+5
   \   00006B   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   1318            {
   1319              numItems = maxItems - StartIndex;
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F8           MOV       R0,A
   \   000070   7401         MOV       A,#0x1
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   E0           MOVX      A,@DPTR
   \   000076   C3           CLR       C
   \   000077   98           SUBB      A,R0
   \   000078   F5..         MOV       ?V1,A
   1320          
   1321              // limit the size of the list
   1322              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   00007A   C3           CLR       C
   \   00007B   9404         SUBB      A,#0x4
   \   00007D   4003         JC        ??ZDO_ProcessMgmtLqiReq_4
   1323              {
   1324                numItems = ZDO_MAX_LQI_ITEMS;
   \   00007F   75..03       MOV       ?V1,#0x3
   1325              }
   1326              
   1327              // Allocate the memory to build the table
   1328              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1329                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   000082                ; Setup parameters for call to function osal_mem_alloc
   \   000082   E5..         MOV       A,?V1
   \   000084   75F01A       MOV       B,#0x1a
   \   000087   A4           MUL       AB
   \   000088   FA           MOV       R2,A
   \   000089   ABF0         MOV       R3,B
   \   00008B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00008E   7402         MOV       A,#0x2
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   12....       LCALL     ?Subroutine39 & 0xFFFF
   1330          
   1331              if ( table != NULL )
   \                     ??CrossCallReturnLabel_67:
   \   000096   12....       LCALL     ?XSTACK_DISP0_8
   \   000099   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   00009C   7003         JNZ       $+5
   \   00009E   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   1332              {
   1333                x = 0;
   \   0000A1   75..00       MOV       ?V5,#0x0
   1334                item = table;
   \   0000A4   7402         MOV       A,#0x2
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL     ?Subroutine114 & 0xFFFF
   1335                index = StartIndex;
   \                     ??CrossCallReturnLabel_181:
   \   0000AC   85..82       MOV       DPL,?XSP + 0
   \   0000AF   85..83       MOV       DPH,?XSP + 1
   \   0000B2   E0           MOVX      A,@DPTR
   \   0000B3   F5..         MOV       ?V0,A
   \   0000B5   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_6 & 0xFFFF
   1336          
   1337                // Loop through associated items and build list
   1338                for ( ; x < numItems; x++ )
   1339                {
   1340                  if ( index < aItems )
   1341                  {
   1342                    // get next associated device
   1343                    aDevice = AssocFindDevice( index++ );
   1344          
   1345                    // set basic fields
   1346                    item->panID   = _NIB.nwkPanId;
   1347                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1348                    item->nwkAddr = aDevice->shortAddr;
   1349                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1350                    item->depth   = 0xFF;
   1351                    item->lqi     = aDevice->linkInfo.rxLqi;
   1352          
   1353                    // set extented address
   1354                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1355                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1356          
   1357                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1358                    {
   1359                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1360                    }
   1361                    else
   1362                    {
   1363                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000B8                ; Setup parameters for call to function osal_memset
   \   0000B8   7C08         MOV       R4,#0x8
   \   0000BA   7D00         MOV       R5,#0x0
   \   0000BC   79FF         MOV       R1,#-0x1
   \   0000BE   AA..         MOV       R2,?V2
   \   0000C0   AB..         MOV       R3,?V3
   \   0000C2   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1364                    }
   1365          
   1366                    // use association info to set other fields
   1367                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000C5   E5..         MOV       A,?V6
   \   0000C7   2404         ADD       A,#0x4
   \   0000C9   F8           MOV       R0,A
   \   0000CA   E4           CLR       A
   \   0000CB   35..         ADDC      A,?V7
   \   0000CD   F9           MOV       R1,A
   \   0000CE   EE           MOV       A,R6
   \   0000CF   2415         ADD       A,#0x15
   \   0000D1   FA           MOV       R2,A
   \   0000D2   E4           CLR       A
   \   0000D3   3F           ADDC      A,R7
   \   0000D4   FB           MOV       R3,A
   \   0000D5   EE           MOV       A,R6
   \   0000D6   2414         ADD       A,#0x14
   \   0000D8   FC           MOV       R4,A
   \   0000D9   E4           CLR       A
   \   0000DA   3F           ADDC      A,R7
   \   0000DB   FD           MOV       R5,A
   \   0000DC   8882         MOV       DPL,R0
   \   0000DE   8983         MOV       DPH,R1
   \   0000E0   E0           MOVX      A,@DPTR
   \   0000E1   7031         JNZ       ??ZDO_ProcessMgmtLqiReq_9
   1368                    {
   1369                      if (  aDevice->shortAddr == 0 )
   \   0000E3   85..82       MOV       DPL,?V6
   \   0000E6   85..83       MOV       DPH,?V7
   \   0000E9   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   0000EC   8C82         MOV       DPL,R4
   \   0000EE   8D83         MOV       DPH,R5
   \   0000F0   7008         JNZ       ??ZDO_ProcessMgmtLqiReq_10
   1370                      {
   1371                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000F2   E4           CLR       A
   \   0000F3   F0           MOVX      @DPTR,A
   1372                        item->depth = 0;
   \   0000F4   12....       LCALL     ?Subroutine141 & 0xFFFF
   1373                      }
   \                     ??CrossCallReturnLabel_239:
   \   0000F7   E4           CLR       A
   \   0000F8   800F         SJMP      ??ZDO_ProcessMgmtLqiReq_11
   1374                      else
   1375                      {
   1376                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0000FA   7401         MOV       A,#0x1
   \   0000FC   F0           MOVX      @DPTR,A
   1377                        item->depth = _NIB.nodeDepth - 1;
   \   0000FD   90....       MOV       DPTR,#_NIB + 52
   \   000100   E0           MOVX      A,@DPTR
   \   000101   14           DEC       A
   \   000102   C0E0         PUSH      A
   \   000104   12....       LCALL     ?Subroutine141 & 0xFFFF
   1378                      }
   1379          
   1380                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1381                      item->relation = ZDP_MGMT_REL_PARENT;
   1382                    }
   \                     ??CrossCallReturnLabel_240:
   \   000107   D0E0         POP       A
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   000109   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   00010C   7402         MOV       A,#0x2
   \   00010E   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000111   E4           CLR       A
   \   000112   8032         SJMP      ??ZDO_ProcessMgmtLqiReq_12
   1383                    else
   1384                    {
   1385                      // If not parent, then it's a child
   1386                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   000114   90....       MOV       DPTR,#_NIB + 52
   \   000117   E0           MOVX      A,@DPTR
   \   000118   04           INC       A
   \   000119   C0E0         PUSH      A
   \   00011B   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   00011E   D0E0         POP       A
   \   000120   12....       LCALL     ?Subroutine45 & 0xFFFF
   1387          
   1388                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_73:
   \   000123   C3           CLR       C
   \   000124   9403         SUBB      A,#0x3
   \   000126   8C82         MOV       DPL,R4
   \   000128   8D83         MOV       DPH,R5
   \   00012A   4003         JC        $+5
   \   00012C   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   1389                      {
   1390                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   00012F   7402         MOV       A,#0x2
   \   000131   12....       LCALL     ?Subroutine45 & 0xFFFF
   1391          
   1392                        if ( aDevice->nodeRelation == CHILD_RFD )
   1393                        {
   1394                          item->rxOnIdle = FALSE;
   1395                        }
   1396                        else
   1397                        {
   1398                          item->rxOnIdle = TRUE;
   1399                        }
   1400                      }
   \                     ??CrossCallReturnLabel_74:
   \   000134   6401         XRL       A,#0x1
   \   000136   7003         JNZ       $+5
   \   000138   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_14 & 0xFFFF
   1401                      else
   1402                      {
   1403                        item->devType = ZDP_MGMT_DT_ROUTER;
   1404          
   1405                        if ( aDevice->nodeRelation == CHILD_FFD )
   1406                        {
   1407                          item->rxOnIdle = FALSE;
   1408                        }
   1409                        else
   1410                        {
   1411                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   00013B   8A82         MOV       DPL,R2
   \   00013D   8B83         MOV       DPH,R3
   \   00013F   7401         MOV       A,#0x1
   1412                        }
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   000141   12....       LCALL     ?Subroutine36 & 0xFFFF
   1413                      }
   1414          
   1415                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??CrossCallReturnLabel_59:
   \   000144   7401         MOV       A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000146   F0           MOVX      @DPTR,A
   1416                    }
   1417          
   1418                    item++;
   \   000147   EE           MOV       A,R6
   \   000148   241A         ADD       A,#0x1a
   \   00014A   FE           MOV       R6,A
   \   00014B   5001         JNC       ??ZDO_ProcessMgmtLqiReq_17
   \   00014D   0F           INC       R7
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   00014E   05..         INC       ?V5
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   000150   E5..         MOV       A,?V5
   \   000152   C3           CLR       C
   \   000153   95..         SUBB      A,?V1
   \   000155   4003         JC        $+5
   \   000157   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_18 & 0xFFFF
   \   00015A   E5..         MOV       A,?V0
   \   00015C   C3           CLR       C
   \   00015D   95..         SUBB      A,?V4
   \   00015F   4003         JC        $+5
   \   000161   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_19 & 0xFFFF
   \   000164                ; Setup parameters for call to function AssocFindDevice
   \   000164   AA..         MOV       R2,?V0
   \   000166   7B00         MOV       R3,#0x0
   \   000168   12....       LCALL     `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   00016B   8A..         MOV       ?V6,R2
   \   00016D   8B..         MOV       ?V7,R3
   \   00016F   05..         INC       ?V0
   \   000171   90....       MOV       DPTR,#_NIB + 33
   \   000174   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000177   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00017A   85..82       MOV       DPL,?V6
   \   00017D   85..83       MOV       DPH,?V7
   \   000180   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000183   EE           MOV       A,R6
   \   000184   2412         ADD       A,#0x12
   \   000186   F582         MOV       DPL,A
   \   000188   E4           CLR       A
   \   000189   3F           ADDC      A,R7
   \   00018A   F583         MOV       DPH,A
   \   00018C   E8           MOV       A,R0
   \   00018D   F0           MOVX      @DPTR,A
   \   00018E   A3           INC       DPTR
   \   00018F   E9           MOV       A,R1
   \   000190   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000193   12....       LCALL     ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000196   74FF         MOV       A,#-0x1
   \   000198   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00019B   A3           INC       DPTR
   \   00019C   A3           INC       DPTR
   \   00019D   A3           INC       DPTR
   \   00019E   A3           INC       DPTR
   \   00019F   A3           INC       DPTR
   \   0001A0   A3           INC       DPTR
   \   0001A1   A3           INC       DPTR
   \   0001A2   A3           INC       DPTR
   \   0001A3   E0           MOVX      A,@DPTR
   \   0001A4   C0E0         PUSH      A
   \   0001A6   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   0001A9   D0E0         POP       A
   \   0001AB   F0           MOVX      @DPTR,A
   \   0001AC   7406         MOV       A,#0x6
   \   0001AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B1   E4           CLR       A
   \   0001B2   F0           MOVX      @DPTR,A
   \   0001B3   85..82       MOV       DPL,?V6
   \   0001B6   85..83       MOV       DPH,?V7
   \   0001B9   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   0001BC   7407         MOV       A,#0x7
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   0001C4   EE           MOV       A,R6
   \   0001C5   240A         ADD       A,#0xa
   \   0001C7   F5..         MOV       ?V2,A
   \   0001C9   E4           CLR       A
   \   0001CA   3F           ADDC      A,R7
   \   0001CB   F5..         MOV       ?V3,A
   \   0001CD                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0001CD   7406         MOV       A,#0x6
   \   0001CF   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D2   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0001D5   E9           MOV       A,R1
   \   0001D6   6401         XRL       A,#0x1
   \   0001D8   6003         JZ        $+5
   \   0001DA   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_7 & 0xFFFF
   \   0001DD                ; Setup parameters for call to function sAddrExtCpy
   \   0001DD   7409         MOV       A,#0x9
   \   0001DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E2   AC82         MOV       R4,DPL
   \   0001E4   AD83         MOV       R5,DPH
   \   0001E6   AA..         MOV       R2,?V2
   \   0001E8   AB..         MOV       R3,?V3
   \   0001EA   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001ED   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_8 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   0001F0   7401         MOV       A,#0x1
   \   0001F2   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0001F5   6403         XRL       A,#0x3
   \   0001F7   6003         JZ        $+5
   \   0001F9   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_15 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0001FC   8A82         MOV       DPL,R2
   \   0001FE   8B83         MOV       DPH,R3
   \   000200   E4           CLR       A
   \   000201   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_16 & 0xFFFF
   1419                  }
   1420                  else
   1421                  {
   1422                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   000204   85..82       MOV       DPL,?XSP + 0
   \   000207   85..83       MOV       DPH,?XSP + 1
   \   00020A   E0           MOVX      A,@DPTR
   \   00020B   F8           MOV       R0,A
   \   00020C   E5..         MOV       A,?V4
   \   00020E   C3           CLR       C
   \   00020F   98           SUBB      A,R0
   \   000210   4005         JC        ??ZDO_ProcessMgmtLqiReq_20
   1423                      // Start with 1st neighbor
   1424                      index = 0;
   \   000212   75..00       MOV       ?V0,#0x0
   \   000215   8057         SJMP      ??ZDO_ProcessMgmtLqiReq_21
   1425                    else
   1426                      // Start with >1st neighbor
   1427                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   000217   E0           MOVX      A,@DPTR
   \   000218   C3           CLR       C
   \   000219   95..         SUBB      A,?V4
   \   00021B   F5..         MOV       ?V0,A
   \   00021D   804F         SJMP      ??ZDO_ProcessMgmtLqiReq_21
   1428                    break;
   1429                  }
   1430                }
   1431          
   1432                // Loop through neighbor items and finish list
   1433                for ( ; x < numItems; x++ )
   1434                {
   1435                  // Add next neighbor table item
   1436                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1437          
   1438                  // set ZDP_MgmtLqiItem_t fields
   1439                  item->panID    = entry.panId;
   1440                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1441                  osal_cpyExtAddr( item->extAddr, entry.neighborExtAddr);
   1442                  item->nwkAddr  = entry.neighborAddress;
   1443          
   1444                  if ( ZG_DEVICE_RTR_TYPE )
   1445                  {
   1446                    item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1447                    item->relation = ZDP_MGMT_REL_UNKNOWN;
   1448                    item->depth    = 0xFF;
   1449                  }
   1450                  else
   1451                  {
   1452                    //end devices knows this for sure
   1453                    item->rxOnIdle = ZDP_MGMT_BOOL_RECEIVER_ON;
   \                     ??ZDO_ProcessMgmtLqiReq_22:
   \   00021F   85..82       MOV       DPL,?V2
   \   000222   85..83       MOV       DPH,?V3
   \   000225   E4           CLR       A
   \   000226   12....       LCALL     ?Subroutine24 & 0xFFFF
   1454                    item->relation = ZDP_MGMT_REL_PARENT;
   \                     ??CrossCallReturnLabel_35:
   \   000229   F0           MOVX      @DPTR,A
   1455                    item->depth = _NIB.nodeDepth - 1;
   \   00022A   90....       MOV       DPTR,#_NIB + 52
   \   00022D   E0           MOVX      A,@DPTR
   \   00022E   14           DEC       A
   \   00022F   8A82         MOV       DPL,R2
   \   000231   8B83         MOV       DPH,R3
   1456                  }
   \                     ??ZDO_ProcessMgmtLqiReq_23:
   \   000233   12....       LCALL     ?Subroutine23 & 0xFFFF
   1457                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1458                  item->lqi      = entry.linkInfo.rxLqi;
   \                     ??CrossCallReturnLabel_33:
   \   000236   7422         MOV       A,#0x22
   \   000238   12....       LCALL     ?XSTACK_DISP0_8
   \   00023B   E0           MOVX      A,@DPTR
   \   00023C   C0E0         PUSH      A
   \   00023E   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000241   D0E0         POP       A
   \   000243   F0           MOVX      @DPTR,A
   1459          
   1460                  if ( item->nwkAddr == 0 )
   \   000244   EE           MOV       A,R6
   \   000245   2414         ADD       A,#0x14
   \   000247   FA           MOV       R2,A
   \   000248   E4           CLR       A
   \   000249   3F           ADDC      A,R7
   \   00024A   FB           MOV       R3,A
   \   00024B   8882         MOV       DPL,R0
   \   00024D   8983         MOV       DPH,R1
   \   00024F   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   000252   8A82         MOV       DPL,R2
   \   000254   8B83         MOV       DPH,R3
   \   000256   7003         JNZ       ??ZDO_ProcessMgmtLqiReq_24
   1461                  {
   1462                    item->devType = ZDP_MGMT_DT_COORD;
   \   000258   E4           CLR       A
   \   000259   8002         SJMP      ??ZDO_ProcessMgmtLqiReq_25
   1463                  }
   1464                  else
   1465                  {
   1466                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_24:
   \   00025B   7401         MOV       A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_25:
   \   00025D   F0           MOVX      @DPTR,A
   1467                  }
   1468          
   1469                  item++;
   \   00025E   EE           MOV       A,R6
   \   00025F   241A         ADD       A,#0x1a
   \   000261   FE           MOV       R6,A
   \   000262   5001         JNC       ??ZDO_ProcessMgmtLqiReq_26
   \   000264   0F           INC       R7
   \                     ??ZDO_ProcessMgmtLqiReq_26:
   \   000265   05..         INC       ?V5
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   000267   E5..         MOV       A,?V5
   \   000269   C3           CLR       C
   \   00026A   95..         SUBB      A,?V1
   \   00026C   507F         JNC       ??ZDO_ProcessMgmtLqiReq_5
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   00026E                ; Setup parameters for call to function NLME_GetRequest
   \   00026E   7413         MOV       A,#0x13
   \   000270   12....       LCALL     ?XSTACK_DISP102_8
   \   000273   AA..         MOV       R2,?V0
   \   000275   7B00         MOV       R3,#0x0
   \   000277   7987         MOV       R1,#-0x79
   \   000279   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   00027C   05..         INC       ?V0
   \   00027E   741D         MOV       A,#0x1d
   \   000280   12....       LCALL     ?XSTACK_DISP0_8
   \   000283   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000286   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000289                ; Setup parameters for call to function sAddrExtCpy
   \   000289   7415         MOV       A,#0x15
   \   00028B   12....       LCALL     ?XSTACK_DISP0_8
   \   00028E   AC82         MOV       R4,DPL
   \   000290   AD83         MOV       R5,DPH
   \   000292   EE           MOV       A,R6
   \   000293   240A         ADD       A,#0xa
   \   000295   FA           MOV       R2,A
   \   000296   E4           CLR       A
   \   000297   3F           ADDC      A,R7
   \   000298   FB           MOV       R3,A
   \   000299   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00029C   EE           MOV       A,R6
   \   00029D   2412         ADD       A,#0x12
   \   00029F   F8           MOV       R0,A
   \   0002A0   E4           CLR       A
   \   0002A1   3F           ADDC      A,R7
   \   0002A2   F9           MOV       R1,A
   \   0002A3   7413         MOV       A,#0x13
   \   0002A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A8   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   0002AB   8882         MOV       DPL,R0
   \   0002AD   8983         MOV       DPH,R1
   \   0002AF   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   0002B2   EE           MOV       A,R6
   \   0002B3   2418         ADD       A,#0x18
   \   0002B5   FA           MOV       R2,A
   \   0002B6   E4           CLR       A
   \   0002B7   3F           ADDC      A,R7
   \   0002B8   FB           MOV       R3,A
   \   0002B9   EE           MOV       A,R6
   \   0002BA   2416         ADD       A,#0x16
   \   0002BC   FC           MOV       R4,A
   \   0002BD   E4           CLR       A
   \   0002BE   3F           ADDC      A,R7
   \   0002BF   FD           MOV       R5,A
   \   0002C0   EE           MOV       A,R6
   \   0002C1   2415         ADD       A,#0x15
   \   0002C3   F5..         MOV       ?V2,A
   \   0002C5   E4           CLR       A
   \   0002C6   3F           ADDC      A,R7
   \   0002C7   F5..         MOV       ?V3,A
   \   0002C9   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0002CC   E0           MOVX      A,@DPTR
   \   0002CD   6007         JZ        ??ZDO_ProcessMgmtLqiReq_27
   \   0002CF   6401         XRL       A,#0x1
   \   0002D1   6003         JZ        $+5
   \   0002D3   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_22 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_27:
   \   0002D6   85..82       MOV       DPL,?V2
   \   0002D9   85..83       MOV       DPH,?V3
   \   0002DC   7402         MOV       A,#0x2
   \   0002DE   12....       LCALL     ?Subroutine24 & 0xFFFF
   1470                }
   1471              }
   1472            }
   \                     ??CrossCallReturnLabel_36:
   \   0002E1   04           INC       A
   \   0002E2   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   0002E5   74FF         MOV       A,#-0x1
   \   0002E7   02....       LJMP      ??ZDO_ProcessMgmtLqiReq_23 & 0xFFFF
   1473            else
   1474            {
   1475              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   0002EA   75..00       MOV       ?V1,#0x0
   1476            }
   1477          
   1478            // Send response
   1479            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1480                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   0002ED                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   0002ED   75..00       MOV       ?V0,#0x0
   \   0002F0   78..         MOV       R0,#?V0
   \   0002F2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0002F5   7403         MOV       A,#0x3
   \   0002F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0002FA   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0002FD   E5..         MOV       A,?V1
   \   0002FF   F5..         MOV       ?V0,A
   \   000301   78..         MOV       R0,#?V0
   \   000303   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000306   7404         MOV       A,#0x4
   \   000308   12....       LCALL     ?XSTACK_DISP0_8
   \   00030B   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   00030E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000311   7406         MOV       A,#0x6
   \   000313   12....       LCALL     ?XSTACK_DISP0_8
   \   000316   E0           MOVX      A,@DPTR
   \   000317   FD           MOV       R5,A
   \   000318   7C00         MOV       R4,#0x0
   \   00031A   7409         MOV       A,#0x9
   \   00031C   12....       LCALL     ?XSTACK_DISP0_8
   \   00031F   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000322   7409         MOV       A,#0x9
   \   000324   12....       LCALL     ?XSTACK_DISP0_8
   \   000327   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00032A   12....       LCALL     `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   00032D   7405         MOV       A,#0x5
   \   00032F   12....       LCALL     ?DEALLOC_XSTACK8
   1481          
   1482            if ( table )
   \   000332   7402         MOV       A,#0x2
   \   000334   12....       LCALL     ?XSTACK_DISP0_8
   \   000337   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   00033A   600B         JZ        ??ZDO_ProcessMgmtLqiReq_28
   1483            {
   1484              osal_mem_free( table );
   \   00033C                ; Setup parameters for call to function osal_mem_free
   \   00033C   7402         MOV       A,#0x2
   \   00033E   12....       LCALL     ?XSTACK_DISP0_8
   \   000341   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   1485            }
   \                     ??CrossCallReturnLabel_473:
   \   000344   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1486          }
   \                     ??ZDO_ProcessMgmtLqiReq_28:
   \   000347   742A         MOV       A,#0x2a
   \   000349   02....       LJMP      ??Subroutine200_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   EE           MOV       A,R6
   \   000001   2419         ADD       A,#0x19
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   EE           MOV       A,R6
   \   000001   2418         ADD       A,#0x18
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3F           ADDC      A,R7
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2416         ADD       A,#0x16
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2417         ADD       A,#0x17
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   3F           ADDC      A,R7
   \   000008   F583         MOV       DPH,A
   \   00000A   7402         MOV       A,#0x2
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   000003   8E82         MOV       DPL,R6
   \   000005   8F83         MOV       DPH,R7
   \   000007   E8           MOV       A,R0
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   E9           MOV       A,R1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   7C..         MOV       R4,#(_NIB + 53) & 0xff
   \   00000E   7D..         MOV       R5,#((_NIB + 53) >> 8) & 0xff
   \   000010   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2402         ADD       A,#0x2
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_688:
   \   000003   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000006   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000009   F9           MOV       R1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_687:
   \   000003   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_642:
   \   000006   38           ADDC      A,R0
   \   000007   F583         MOV       DPH,A
   \   000009   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V6
   \   000004   85..83       MOV       DPH,?V7
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
   1487          
   1488          /*********************************************************************
   1489           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1490           *
   1491           * @brief       This function handles parsing the incoming Management
   1492           *              Network Discover request and starts the request.
   1493           *
   1494           * @param       inMsg - incoming message (request)
   1495           *
   1496           * @return      none
   1497           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1498          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1499          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV       A,#-0x7
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine121 & 0xFFFF
   1500            NLME_ScanFields_t scan;
   1501            uint8             index;
   1502            uint8             *msg;
   1503          
   1504            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_201:
   \   00000D   12....       LCALL     ?Subroutine89 & 0xFFFF
   1505            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_146:
   \   000010   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000013   EA           MOV       A,R2
   \   000014   F8           MOV       R0,A
   \   000015   EB           MOV       A,R3
   \   000016   F9           MOV       R1,A
   \   000017   EC           MOV       A,R4
   \   000018   FA           MOV       R2,A
   \   000019   ED           MOV       A,R5
   \   00001A   FB           MOV       R3,A
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   12....       LCALL     ?XSTORE_R0123
   1506            msg += 4;
   1507            scan.duration = *msg++;
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   C0E0         PUSH      A
   \   00002F   7404         MOV       A,#0x4
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   12....       LCALL     ?Subroutine34 & 0xFFFF
   1508            index         = *msg;
   \                     ??CrossCallReturnLabel_54:
   \   000039   F8           MOV       R0,A
   1509            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   00003A   7405         MOV       A,#0x5
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   7401         MOV       A,#0x1
   \   000041   F0           MOVX      @DPTR,A
   1510            scan.scanApp  = NLME_DISC_SCAN;
   \   000042   7406         MOV       A,#0x6
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   7401         MOV       A,#0x1
   \   000049   F0           MOVX      @DPTR,A
   1511          
   1512            // Save off the information to be used for the response
   1513            zdappMgmtNwkDiscReqInProgress          = true;
   \   00004A   90....       MOV       DPTR,#zdappMgmtNwkDiscReqInProgress
   \   00004D   F0           MOVX      @DPTR,A
   1514            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   00004E   90....       MOV       DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000051   04           INC       A
   \   000052   12....       LCALL     ?Subroutine47 & 0xFFFF
   1515            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_79:
   \   000055   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   000058   90....       MOV       DPTR,#zdappMgmtNwkDiscRspAddr
   \   00005B   12....       LCALL     ?Subroutine40 & 0xFFFF
   1516            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_361:
   \   00005E   E8           MOV       A,R0
   \   00005F   90....       MOV       DPTR,#zdappMgmtNwkDiscStartIndex
   \   000062   F0           MOVX      @DPTR,A
   1517            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000063   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000066   E0           MOVX      A,@DPTR
   \   000067   90....       MOV       DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   00006A   F0           MOVX      @DPTR,A
   1518          
   1519            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   00006B                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   00006B   AA..         MOV       R2,?XSP + 0
   \   00006D   AB..         MOV       R3,?XSP + 1
   \   00006F   12....       LCALL     `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   000072   E9           MOV       A,R1
   \   000073   6003         JZ        ??ZDO_ProcessMgmtNwkDiscReq_0
   1520            {
   1521              NLME_NwkDiscTerm();
   \   000075                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000075   12....       LCALL     `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1522          
   1523              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1524            }
   1525          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000078   7407         MOV       A,#0x7
   \   00007A   02....       LJMP      ??Subroutine202_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   E5..         MOV       A,?V0
   \   000002                REQUIRE ??Subroutine208_0
   \   000002                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000003   35..         ADDC      A,?V1
   \   000005   F583         MOV       DPH,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   000007   35..         ADDC      A,?V1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine221_0
   \   000002                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_631:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine196:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   EA           MOV       A,R2
   \   000001                REQUIRE ??Subroutine246_0
   \   000001                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   7904         MOV       R1,#0x4
   \   000005   EE           MOV       A,R6
   \   000006   FA           MOV       R2,A
   \   000007   EF           MOV       A,R7
   \   000008   FB           MOV       R3,A
   \   000009   22           RET
   1526          
   1527          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1528          /*********************************************************************
   1529           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1530           *
   1531           * @brief       This function finishes the processing of the Management
   1532           *              Network Discover Request and generates the response.
   1533           *
   1534           *   Note:      This function will limit the number of items returned
   1535           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1536           *
   1537           * @param       ResultCountSrcAddr - source of the request
   1538           * @param       msg - pointer to incoming message
   1539           * @param       SecurityUse -
   1540           *
   1541           * @return      none
   1542           */
   1543          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1544          {
   1545            byte count, i, ResultCount = 0;
   1546            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1547          
   1548            NetworkList = nwk_getNwkDescList();
   1549          
   1550            // Count the number of nwk descriptors in the list
   1551            pList = nwk_getNwkDescList();
   1552            while (pList)
   1553            {
   1554              ResultCount++;
   1555              pList = pList->nextDesc;
   1556            }
   1557          
   1558            if ( ZSTACK_ROUTER_BUILD )
   1559            {
   1560              // Look for my PanID.
   1561              pList = nwk_getNwkDescList();
   1562              while ( pList )
   1563              {
   1564                if ( pList->panId == _NIB.nwkPanId )
   1565                {
   1566                  break;
   1567                }
   1568          
   1569          
   1570                if ( !pList->nextDesc )
   1571                {
   1572                  break;
   1573                }
   1574                pList = pList->nextDesc;
   1575              }
   1576          
   1577          
   1578              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1579              // prepend it.
   1580              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1581              {
   1582                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1583                if ( newDesc )
   1584                {
   1585                  byte pJoin;
   1586          
   1587                  newDesc->panId = _NIB.nwkPanId;
   1588                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1589                  newDesc->version = NLME_GetProtocolVersion();
   1590                  newDesc->stackProfile = zgStackProfile;
   1591          
   1592                  //Extended PanID
   1593                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1594          
   1595                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1596                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1597                                                     INVALID_NODE_ADDR);
   1598          
   1599                  newDesc->nextDesc = NetworkList;
   1600                  NetworkList = newDesc;
   1601                  ResultCount++;
   1602                }
   1603              }
   1604            }
   1605          
   1606            // Calc the count and apply a max count.
   1607            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1608            {
   1609              count = 0;
   1610            }
   1611            else
   1612            {
   1613              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1614              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1615              {
   1616                count = ZDO_MAX_NWKDISC_ITEMS;
   1617              }
   1618          
   1619              // Move the list pointer up to the start index.
   1620              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1621              {
   1622                NetworkList = NetworkList->nextDesc;
   1623              }
   1624            }
   1625          
   1626            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1627                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1628                                zdappMgmtNwkDiscStartIndex,
   1629                                count,
   1630                                NetworkList,
   1631                                false );
   1632          
   1633            if ( ZSTACK_ROUTER_BUILD )
   1634            {
   1635              if ( newDesc != NULL )
   1636              {
   1637                osal_mem_free( newDesc );
   1638              }
   1639            }
   1640          
   1641            NLME_NwkDiscTerm();
   1642          }
   1643          #endif
   1644          
   1645          /*********************************************************************
   1646           * @fn          ZDO_ProcessMgmtRtgReq
   1647           *
   1648           * @brief       This function finishes the processing of the Management
   1649           *              Routing Request and generates the response.
   1650           *
   1651           *   Note:      This function will limit the number of items returned
   1652           *              to ZDO_MAX_RTG_ITEMS items.
   1653           *
   1654           * @param       inMsg - incoming message (request)
   1655           *
   1656           * @return      none
   1657           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1658          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1659          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   1660            byte x;
   1661            byte maxNumItems;
   1662            byte numItems = 0;
   \   00000E   7E00         MOV       R6,#0x0
   1663            uint8 *pBuf = NULL;
   \   000010   8E..         MOV       ?V4,R6
   \   000012   8E..         MOV       ?V5,R6
   1664            rtgItem_t *pList;
   1665            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   000017   35..         ADDC      A,?V7
   \   000019   F583         MOV       DPH,A
   \   00001B   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   00001E   F5..         MOV       ?V0,A
   1666          
   1667            // Get the number of table items
   1668            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   000020                ; Setup parameters for call to function NLME_GetRequest
   \   000020   AC..         MOV       R4,?XSP + 0
   \   000022   AD..         MOV       R5,?XSP + 1
   \   000024   7A00         MOV       R2,#0x0
   \   000026   7B00         MOV       R3,#0x0
   \   000028   799D         MOV       R1,#-0x63
   \   00002A   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1669          
   1670            if ( maxNumItems > StartIndex )
   \   00002D   85..82       MOV       DPL,?XSP + 0
   \   000030   85..83       MOV       DPH,?XSP + 1
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F8           MOV       R0,A
   \   000035   E5..         MOV       A,?V0
   \   000037   C3           CLR       C
   \   000038   98           SUBB      A,R0
   \   000039   5071         JNC       ??ZDO_ProcessMgmtRtgReq_0
   1671            {
   1672              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   C3           CLR       C
   \   00003D   95..         SUBB      A,?V0
   \   00003F   FE           MOV       R6,A
   1673          
   1674              // limit the size of the list
   1675              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   000040   C3           CLR       C
   \   000041   940B         SUBB      A,#0xb
   \   000043   4002         JC        ??ZDO_ProcessMgmtRtgReq_1
   1676              {
   1677                numItems = ZDO_MAX_RTG_ITEMS;
   \   000045   7E0A         MOV       R6,#0xa
   1678              }
   1679          
   1680              // Allocate the memory to build the table
   1681              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000047                ; Setup parameters for call to function osal_mem_alloc
   \   000047   EE           MOV       A,R6
   \   000048   75F007       MOV       B,#0x7
   \   00004B   A4           MUL       AB
   \   00004C   FA           MOV       R2,A
   \   00004D   ABF0         MOV       R3,B
   \   00004F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000052   8A..         MOV       ?V2,R2
   \   000054   8B..         MOV       ?V3,R3
   \   000056   8A..         MOV       ?V4,R2
   \   000058   8B..         MOV       ?V5,R3
   1682          
   1683              if ( pBuf != NULL )
   \   00005A   EA           MOV       A,R2
   \   00005B   45..         ORL       A,?V5
   \   00005D   604B         JZ        ??ZDO_ProcessMgmtRtgReq_2
   1684              {
   1685                // Convert buffer to list
   1686                pList = (rtgItem_t *)pBuf;
   1687          
   1688                // Loop through items and build list
   1689                for ( x = 0; x < numItems; x++ )
   \   00005F   7F00         MOV       R7,#0x0
   \   000061   800E         SJMP      ??ZDO_ProcessMgmtRtgReq_3
   1690                {
   1691                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1692          
   1693                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1694                  switch( pList->status )
   1695                  {
   1696                    case RT_ACTIVE:
   1697                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1698                      break;
   1699          
   1700                    case RT_DISC:
   1701                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1702                      break;
   1703          
   1704                    case RT_LINK_FAIL:
   1705                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   1706                      break;
   1707          
   1708                    case RT_INIT:
   1709                    case RT_REPAIR:
   1710                    default:
   1711                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000063   7403         MOV       A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000065   F0           MOVX      @DPTR,A
   1712                      break;
   1713                  }
   1714          
   1715                  // Increment pointer to next record
   1716                  pList++;
   \   000066   E5..         MOV       A,?V2
   \   000068   2407         ADD       A,#0x7
   \   00006A   F5..         MOV       ?V2,A
   \   00006C   5002         JNC       ??ZDO_ProcessMgmtRtgReq_6
   \   00006E   05..         INC       ?V3
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   000070   0F           INC       R7
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   000071   EF           MOV       A,R7
   \   000072   C3           CLR       C
   \   000073   9E           SUBB      A,R6
   \   000074   5036         JNC       ??ZDO_ProcessMgmtRtgReq_0
   \   000076                ; Setup parameters for call to function NLME_GetRequest
   \   000076   AC..         MOV       R4,?V2
   \   000078   AD..         MOV       R5,?V3
   \   00007A   EF           MOV       A,R7
   \   00007B   A8..         MOV       R0,?V0
   \   00007D   28           ADD       A,R0
   \   00007E   FA           MOV       R2,A
   \   00007F   E4           CLR       A
   \   000080   3400         ADDC      A,#0x0
   \   000082   FB           MOV       R3,A
   \   000083   798B         MOV       R1,#-0x75
   \   000085   12....       LCALL     `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000088   E5..         MOV       A,?V2
   \   00008A   2405         ADD       A,#0x5
   \   00008C   F582         MOV       DPL,A
   \   00008E   E4           CLR       A
   \   00008F   35..         ADDC      A,?V3
   \   000091   F583         MOV       DPH,A
   \   000093   E0           MOVX      A,@DPTR
   \   000094   14           DEC       A
   \   000095   6008         JZ        ??ZDO_ProcessMgmtRtgReq_7
   \   000097   14           DEC       A
   \   000098   6008         JZ        ??ZDO_ProcessMgmtRtgReq_8
   \   00009A   14           DEC       A
   \   00009B   6009         JZ        ??ZDO_ProcessMgmtRtgReq_9
   \   00009D   80C4         SJMP      ??ZDO_ProcessMgmtRtgReq_4
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   00009F   E4           CLR       A
   \   0000A0   80C3         SJMP      ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   0000A2   7401         MOV       A,#0x1
   \   0000A4   80BF         SJMP      ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   0000A6   7402         MOV       A,#0x2
   \   0000A8   80BB         SJMP      ??ZDO_ProcessMgmtRtgReq_5
   1717                }
   1718              }
   1719              else
   1720              {
   1721                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000AA   7E00         MOV       R6,#0x0
   1722              }
   1723            }
   1724          
   1725            // Send response
   1726            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1727                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000AC                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000AC   75..00       MOV       ?V1,#0x0
   \   0000AF   78..         MOV       R0,#?V1
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B4   78..         MOV       R0,#?V4
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   EE           MOV       A,R6
   \   0000BA   F5..         MOV       ?V1,A
   \   0000BC   78..         MOV       R0,#?V1
   \   0000BE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C6   7405         MOV       A,#0x5
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   FD           MOV       R5,A
   \   0000CD   7C00         MOV       R4,#0x0
   \   0000CF   E5..         MOV       A,?V6
   \   0000D1   2402         ADD       A,#0x2
   \   0000D3   FA           MOV       R2,A
   \   0000D4   E4           CLR       A
   \   0000D5   35..         ADDC      A,?V7
   \   0000D7   FB           MOV       R3,A
   \   0000D8   E5..         MOV       A,?V6
   \   0000DA   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   0000DD   35..         ADDC      A,?V7
   \   0000DF   F583         MOV       DPH,A
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   F9           MOV       R1,A
   \   0000E3   12....       LCALL     `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   0000E6   7405         MOV       A,#0x5
   \   0000E8   12....       LCALL     ?DEALLOC_XSTACK8
   1728          
   1729            if ( pBuf != NULL )
   \   0000EB   E5..         MOV       A,?V4
   \   0000ED   45..         ORL       A,?V5
   \   0000EF   6007         JZ        ??ZDO_ProcessMgmtRtgReq_10
   1730            {
   1731              osal_mem_free( pBuf );
   \   0000F1                ; Setup parameters for call to function osal_mem_free
   \   0000F1   AA..         MOV       R2,?V4
   \   0000F3   AB..         MOV       R3,?V5
   \   0000F5   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1732            }
   1733          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   0000F8   7401         MOV       A,#0x1
   \   0000FA   02....       LJMP      ??Subroutine200_0 & 0xFFFF
   1734          
   1735          /*********************************************************************
   1736           * @fn          ZDO_ProcessMgmtBindReq
   1737           *
   1738           * @brief       This function finishes the processing of the Management
   1739           *              Bind Request and generates the response.
   1740           *
   1741           *   Note:      This function will limit the number of items returned
   1742           *              to ZDO_MAX_BIND_ITEMS items.
   1743           *
   1744           * @param       inMsg - incoming message (request)
   1745           *
   1746           * @return      none
   1747           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1748          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1749          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine40 & 0xFFFF
   1750          #if defined ( REFLECTOR )
   1751            byte x;
   1752            uint16 maxNumItems;
   1753            uint16 numItems;
   1754            uint8 *pBuf = NULL;
   \                     ??CrossCallReturnLabel_362:
   \   000012   75..00       MOV       ?V2,#0x0
   \   000015   75..00       MOV       ?V3,#0x0
   1755            apsBindingItem_t *pList;
   1756            uint8 StartIndex = inMsg->asdu[0];
   \   000018   7402         MOV       A,#0x2
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000020   F5..         MOV       ?V6,A
   1757            uint8 status;
   1758          
   1759            // Get the number of table items
   1760            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000022                ; Setup parameters for call to function APSME_GetRequest
   \   000022   AC..         MOV       R4,?XSP + 0
   \   000024   AD..         MOV       R5,?XSP + 1
   \   000026   7A00         MOV       R2,#0x0
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   79A3         MOV       R1,#-0x5d
   \   00002C   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1761          
   1762            if ( maxNumItems > StartIndex )
   \   00002F   AA..         MOV       R2,?V6
   \   000031   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000034   C3           CLR       C
   \   000035   EA           MOV       A,R2
   \   000036   98           SUBB      A,R0
   \   000037   E4           CLR       A
   \   000038   99           SUBB      A,R1
   \   000039   501E         JNC       ??ZDO_ProcessMgmtBindReq_0
   1763            {
   1764              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00003B   85..82       MOV       DPL,?XSP + 0
   \   00003E   85..83       MOV       DPH,?XSP + 1
   \   000041   E0           MOVX      A,@DPTR
   \   000042   C3           CLR       C
   \   000043   9A           SUBB      A,R2
   \   000044   FE           MOV       R6,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   9400         SUBB      A,#0x0
   \   000049   FF           MOV       R7,A
   1765            }
   1766            else
   1767            {
   1768              numItems = 0;
   1769            }
   1770          
   1771            // limit the size of the list
   1772            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   00004A   C3           CLR       C
   \   00004B   EE           MOV       A,R6
   \   00004C   9404         SUBB      A,#0x4
   \   00004E   EF           MOV       A,R7
   \   00004F   9400         SUBB      A,#0x0
   \   000051   405E         JC        ??ZDO_ProcessMgmtBindReq_1
   1773            {
   1774              numItems = ZDO_MAX_BIND_ITEMS;
   \   000053   7E03         MOV       R6,#0x3
   \   000055   7F00         MOV       R7,#0x0
   \   000057   805C         SJMP      ??ZDO_ProcessMgmtBindReq_2
   1775            }
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   000059   7E00         MOV       R6,#0x0
   1776          
   1777            // Allocate the memory to build the table
   1778            if ( numItems )
   1779            {
   1780              pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems );
   1781              
   1782              if(pBuf != NULL)
   1783              {
   1784              
   1785                status = ZSuccess;
   1786          
   1787                // Convert buffer to list
   1788                pList = (apsBindingItem_t *)pBuf;
   1789          
   1790                // Loop through items and build list
   1791                for ( x = 0; x < numItems; x++ )
   1792                {
   1793                  APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   1794                  pList++;
   1795                }
   1796              }
   1797              else
   1798              {
   1799                //No memory to allocate response, respond unsupported attribute
   1800                status = ZApsUnsupportedAttrib;
   1801                numItems = 0;
   1802              }
   1803            }
   1804            else
   1805            {
   1806              status = ZSuccess;
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   00005B   75..00       MOV       ?V0,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   00005E   EE           MOV       A,R6
   \   00005F   F9           MOV       R1,A
   1807            }
   1808          
   1809            // Send response
   1810            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1811                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   000060                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   000060   75..00       MOV       ?V1,#0x0
   \   000063   78..         MOV       R0,#?V1
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000068   78..         MOV       R0,#?V2
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   E9           MOV       A,R1
   \   00006E   F5..         MOV       ?V1,A
   \   000070   78..         MOV       R0,#?V1
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000075   E5..         MOV       A,?V6
   \   000077   F5..         MOV       ?V1,A
   \   000079   78..         MOV       R0,#?V1
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007E   7405         MOV       A,#0x5
   \   000080   12....       LCALL     ?XSTACK_DISP0_8
   \   000083   E0           MOVX      A,@DPTR
   \   000084   FD           MOV       R5,A
   \   000085   AC..         MOV       R4,?V0
   \   000087   7407         MOV       A,#0x7
   \   000089   12....       LCALL     ?XSTACK_DISP0_8
   \   00008C   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00008F   7407         MOV       A,#0x7
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000097   12....       LCALL     `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   00009A   7405         MOV       A,#0x5
   \   00009C   12....       LCALL     ?DEALLOC_XSTACK8
   1812          
   1813            if ( pBuf )
   \   00009F   E5..         MOV       A,?V2
   \   0000A1   45..         ORL       A,?V3
   \   0000A3   6007         JZ        ??ZDO_ProcessMgmtBindReq_6
   1814            {
   1815              osal_mem_free( pBuf );
   \   0000A5                ; Setup parameters for call to function osal_mem_free
   \   0000A5   AA..         MOV       R2,?V2
   \   0000A7   AB..         MOV       R3,?V3
   \   0000A9   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1816            }
   1817          #else
   1818            (void)inMsg;
   1819          #endif
   1820          }
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000AC   7404         MOV       A,#0x4
   \   0000AE   02....       LJMP      ?Subroutine6 & 0xFFFF
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   0000B1   EE           MOV       A,R6
   \   0000B2   4F           ORL       A,R7
   \   0000B3   60A6         JZ        ??ZDO_ProcessMgmtBindReq_3
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   0000B5                ; Setup parameters for call to function osal_mem_alloc
   \   0000B5   EE           MOV       A,R6
   \   0000B6   FA           MOV       R2,A
   \   0000B7   EF           MOV       A,R7
   \   0000B8   FB           MOV       R3,A
   \   0000B9   EA           MOV       A,R2
   \   0000BA   75F015       MOV       B,#0x15
   \   0000BD   A4           MUL       AB
   \   0000BE   FA           MOV       R2,A
   \   0000BF   A8F0         MOV       R0,B
   \   0000C1   75F015       MOV       B,#0x15
   \   0000C4   EB           MOV       A,R3
   \   0000C5   A4           MUL       AB
   \   0000C6   28           ADD       A,R0
   \   0000C7   FB           MOV       R3,A
   \   0000C8   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000CB   8A..         MOV       ?V2,R2
   \   0000CD   8B..         MOV       ?V3,R3
   \   0000CF   EA           MOV       A,R2
   \   0000D0   45..         ORL       A,?V3
   \   0000D2   6036         JZ        ??ZDO_ProcessMgmtBindReq_7
   \   0000D4   75..00       MOV       ?V0,#0x0
   \   0000D7   8A..         MOV       ?V4,R2
   \   0000D9   8B..         MOV       ?V5,R3
   \   0000DB   75..00       MOV       ?V1,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_8:
   \   0000DE   C3           CLR       C
   \   0000DF   E5..         MOV       A,?V1
   \   0000E1   9E           SUBB      A,R6
   \   0000E2   E4           CLR       A
   \   0000E3   9F           SUBB      A,R7
   \   0000E4   4003         JC        $+5
   \   0000E6   02....       LJMP      ??ZDO_ProcessMgmtBindReq_4 & 0xFFFF
   \   0000E9                ; Setup parameters for call to function APSME_GetRequest
   \   0000E9   AC..         MOV       R4,?V4
   \   0000EB   AD..         MOV       R5,?V5
   \   0000ED   A8..         MOV       R0,?V6
   \   0000EF   E5..         MOV       A,?V1
   \   0000F1   28           ADD       A,R0
   \   0000F2   FA           MOV       R2,A
   \   0000F3   E4           CLR       A
   \   0000F4   3400         ADDC      A,#0x0
   \   0000F6   FB           MOV       R3,A
   \   0000F7   79A2         MOV       R1,#-0x5e
   \   0000F9   12....       LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   0000FC   E5..         MOV       A,?V4
   \   0000FE   2415         ADD       A,#0x15
   \   000100   F5..         MOV       ?V4,A
   \   000102   5002         JNC       ??ZDO_ProcessMgmtBindReq_9
   \   000104   05..         INC       ?V5
   \                     ??ZDO_ProcessMgmtBindReq_9:
   \   000106   05..         INC       ?V1
   \   000108   80D4         SJMP      ??ZDO_ProcessMgmtBindReq_8
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   00010A   75..B5       MOV       ?V0,#-0x4b
   \   00010D   7900         MOV       R1,#0x0
   \   00010F   02....       LJMP      ??ZDO_ProcessMgmtBindReq_5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine218_0
   \   000006                ; // Fall through to label ??Subroutine218_0
   1821          
   1822          /*********************************************************************
   1823           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1824           *
   1825           * @brief       This function finishes the processing of the Management
   1826           *              Direct Join Request and generates the response.
   1827           *
   1828           * @param       inMsg - incoming message (request)
   1829           *
   1830           * @return      none
   1831           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1832          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1833          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1834            uint8 *deviceAddr;
   1835            uint8 capInfo;
   1836            uint8 stat;
   1837          
   1838            // Parse the message
   1839            deviceAddr = inMsg->asdu;
   1840            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1841          
   1842            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \   00000E   EE           MOV       A,R6
   \   00000F   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000012   3F           ADDC      A,R7
   \   000013   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F9           MOV       R1,A
   \   000020   12....       LCALL     `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   000023   E9           MOV       A,R1
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   F0           MOVX      @DPTR,A
   1843          
   1844            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00002B                ; Setup parameters for call to function ZDP_SendData
   \   00002B   75..00       MOV       ?V0,#0x0
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000033   7401         MOV       A,#0x1
   \   000035   12....       LCALL     ?XSTACK_DISP100_8
   \   000038   88..         MOV       ?V0,R0
   \   00003A   89..         MOV       ?V1,R1
   \   00003C   78..         MOV       R0,#?V0
   \   00003E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000041   75..35       MOV       ?V0,#0x35
   \   000044   75..80       MOV       ?V1,#-0x80
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004C   7901         MOV       R1,#0x1
   \   00004E   EE           MOV       A,R6
   \   00004F   2402         ADD       A,#0x2
   \   000051   FC           MOV       R4,A
   \   000052   E4           CLR       A
   \   000053   3F           ADDC      A,R7
   \   000054   FD           MOV       R5,A
   \   000055   EE           MOV       A,R6
   \   000056   240F         ADD       A,#0xf
   \   000058   FA           MOV       R2,A
   \   000059   E4           CLR       A
   \   00005A   3F           ADDC      A,R7
   \   00005B   FB           MOV       R3,A
   \   00005C   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00005F   7405         MOV       A,#0x5
   \   000061   12....       LCALL     ?DEALLOC_XSTACK8
   1845          }
   \   000064   7401         MOV       A,#0x1
   \   000066   02....       LJMP      ??Subroutine202_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine226_0
   \   000002                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000003                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   22           RET
   1846          
   1847          /*********************************************************************
   1848           * @fn          ZDO_ProcessMgmtLeaveReq
   1849           *
   1850           * @brief       This function processes a Management Leave Request
   1851           *              and generates the response.
   1852           *
   1853           * @param       inMsg - incoming message (request)
   1854           *
   1855           * @return      none
   1856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine197_0
   \   000003                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1857          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1858          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine121 & 0xFFFF
   1859            NLME_LeaveReq_t req;
   1860            ZStatus_t       status;
   1861            uint8           option;
   1862            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_202:
   \   00000D   12....       LCALL     ?Subroutine100 & 0xFFFF
   1863            
   1864            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1865                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_365:
   \   000010   FA           MOV       R2,A
   \   000011   EF           MOV       A,R7
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000016   E9           MOV       A,R1
   \   000017   6017         JZ        ??ZDO_ProcessMgmtLeaveReq_0
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00001C   8A..         MOV       ?V2,R2
   \   00001E   8B..         MOV       ?V3,R3
   \   000020   AC..         MOV       R4,?V2
   \   000022   AD..         MOV       R5,?V3
   \   000024                ; Setup parameters for call to function sAddrExtCmp
   \   000024   EE           MOV       A,R6
   \   000025   FA           MOV       R2,A
   \   000026   EF           MOV       A,R7
   \   000027   FB           MOV       R3,A
   \   000028   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002B   E9           MOV       A,R1
   \   00002C   6401         XRL       A,#0x1
   \   00002E   7002         JNZ       ??ZDO_ProcessMgmtLeaveReq_1
   1866            {
   1867              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1868              {
   1869                // Coordinator shall drop the leave request for itself
   1870                // section 3.6.1.10.3.1 R21
   1871                return;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   000030   8075         SJMP      ??ZDO_ProcessMgmtLeaveReq_2
   1872              }
   1873              else
   1874              {
   1875                // Remove this device
   1876                req.extAddr = NULL;
   1877              }
   1878            }
   1879            else
   1880            {
   1881              // Remove child device
   1882              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   000032   7401         MOV       A,#0x1
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   EE           MOV       A,R6
   \   000038   F0           MOVX      @DPTR,A
   \   000039   A3           INC       DPTR
   \   00003A   EF           MOV       A,R7
   \   00003B   12....       LCALL     ?Subroutine22 & 0xFFFF
   1883            }
   1884            if ( ( ZG_BUILD_ENDDEVICE_TYPE ) && ( ZG_DEVICE_ENDDEVICE_TYPE ) )
   1885            {
   1886              //Only the parent device can request to leave, otherwise silently discard the frame
   1887              if(inMsg->srcAddr.addr.shortAddr != _NIB.nwkCoordAddress)
   1888              {
   1889                return;
   1890              }
   1891            }
   1892          
   1893            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_30:
   \   00003E   FE           MOV       R6,A
   1894            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   00003F   A2E6         MOV       C,0xE0 /* A   */.6
   \   000041   5008         JNC       ??ZDO_ProcessMgmtLeaveReq_3
   1895            {
   1896              req.removeChildren = TRUE;
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   7401         MOV       A,#0x1
   \   00004A   F0           MOVX      @DPTR,A
   1897            }
   1898          
   1899            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   00004B   EE           MOV       A,R6
   \   00004C   A2E7         MOV       C,0xE0 /* A   */.7
   \   00004E   5008         JNC       ??ZDO_ProcessMgmtLeaveReq_4
   1900            {
   1901               req.rejoin = TRUE;
   \   000050   7404         MOV       A,#0x4
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   7401         MOV       A,#0x1
   \   000057   F0           MOVX      @DPTR,A
   1902            }
   1903          
   1904            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000058   7405         MOV       A,#0x5
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   E4           CLR       A
   \   00005E   12....       LCALL     ?Subroutine188 & 0xFFFF
   1905            
   1906            //According to R21 spec sec2.4.3.3.5.2 Mgmt leave rsp must contain the status response from the nwk leave processing. 
   1907            //Latest discussion in Zigbee indicates that mgmt leave rsp due to an OTA command must have status=success (9/12/16)
   1908            status = ZSuccess;
   \                     ??CrossCallReturnLabel_450:
   \   000061   F0           MOVX      @DPTR,A
   1909            
   1910            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   000062                ; Setup parameters for call to function ZDP_SendData
   \   000062   F5..         MOV       ?V2,A
   \   000064   78..         MOV       R0,#?V2
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000069   7401         MOV       A,#0x1
   \   00006B   12....       LCALL     ?XSTACK_DISP100_8
   \   00006E   88..         MOV       ?V2,R0
   \   000070   89..         MOV       ?V3,R1
   \   000072   78..         MOV       R0,#?V2
   \   000074   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000077   75..34       MOV       ?V2,#0x34
   \   00007A   75..80       MOV       ?V3,#-0x80
   \   00007D   78..         MOV       R0,#?V2
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000082   12....       LCALL     ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000085   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000088   7405         MOV       A,#0x5
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   1911            
   1912            if ( ZG_BUILD_ENDDEVICE_TYPE )
   1913            {
   1914              // Stop polling and get ready to reset
   1915              NLME_SetPollRate( 0 );
   1916              NLME_SetResponseRate(0);
   1917              NLME_SetQueuedPollRate(0);
   1918            }
   1919            
   1920            NLME_LeaveReq(&req);
   \   00008D                ; Setup parameters for call to function NLME_LeaveReq
   \   00008D   7401         MOV       A,#0x1
   \   00008F   12....       LCALL     ?XSTACK_DISP101_8
   \   000092   12....       LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   1921            
   1922            if (! (option & ZDP_MGMT_LEAVE_REQ_REJOIN) )
   \   000095   EE           MOV       A,R6
   \   000096   A2E7         MOV       C,0xE0 /* A   */.7
   \   000098   400D         JC        ??ZDO_ProcessMgmtLeaveReq_2
   1923            {
   1924              if(req.extAddr == NULL)
   \   00009A   7401         MOV       A,#0x1
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   0000A2   7003         JNZ       ??ZDO_ProcessMgmtLeaveReq_2
   1925              {
   1926                bdb_setFN();
   \   0000A4                ; Setup parameters for call to function bdb_setFN
   \   0000A4   12....       LCALL     `??bdb_setFN::?relay`; Banked call to: bdb_setFN
   1927              }
   1928            }
   1929          }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   0000A7   7406         MOV       A,#0x6
   \   0000A9   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine210_0
   \   000002                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function AssocGetWithExt
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET
   1930          
   1931          
   1932          /*********************************************************************
   1933           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1934           *
   1935           * @brief       This function processes a Management Permit Join Request
   1936           *              and generates the response.
   1937           *
   1938           * @param       inMsg - incoming message (request)
   1939           *
   1940           * @return      none
   1941           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1942          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1943          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1944            uint8 stat;
   1945            uint8 duration;
   1946          #if (ZG_BUILD_COORDINATOR_TYPE)
   1947            if(ZG_DEVICE_COORDINATOR_TYPE)
   1948            {
   1949              //If zgAllowRemoteTCPolicyChange is set to FALSE, the request from other 
   1950              //devices cannot affect the  Trust Center policies
   1951              if((zgAllowRemoteTCPolicyChange == 0) && (inMsg->srcAddr.addr.shortAddr!= 0x0000))
   \   00000E   EE           MOV       A,R6
   \   00000F   2402         ADD       A,#0x2
   \   000011   F5..         MOV       ?V0,A
   \   000013   E4           CLR       A
   \   000014   3F           ADDC      A,R7
   \   000015   F5..         MOV       ?V1,A
   \   000017   90....       MOV       DPTR,#zgAllowRemoteTCPolicyChange
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   700B         JNZ       ??ZDO_ProcessMgmtPermitJoinReq_0
   \   00001D   85..82       MOV       DPL,?V0
   \   000020   85..83       MOV       DPH,?V1
   \   000023   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000026   7069         JNZ       ??ZDO_ProcessMgmtPermitJoinReq_1
   1952              {
   1953                return;
   1954              }
   1955            }
   1956          #endif
   1957            
   1958            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   000028   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00002B   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   00002E   F5..         MOV       ?V2,A
   1959            // Per R21 Spec this field is not longer relevant 2.4.3.3.7.2 (Mgmt_Permit_Joining_req Effect on Receipt)
   1960            //tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1961          
   1962            // Per R21 Spec this duration cannot last forever 2.4.3.3.7.2 (Mgmt_Permit_Joining_req Effect on Receipt)
   1963            if(duration == 0xFF)
   \   000030   74FF         MOV       A,#-0x1
   \   000032   65..         XRL       A,?V2
   \   000034   7003         JNZ       ??ZDO_ProcessMgmtPermitJoinReq_2
   1964            {
   1965              duration = 0xFE;
   \   000036   75..FE       MOV       ?V2,#-0x2
   1966            }
   1967            
   1968            // Set the network layer permit join duration
   1969            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??ZDO_ProcessMgmtPermitJoinReq_2:
   \   000039                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000039   A9..         MOV       R1,?V2
   \   00003B   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   00003E   E9           MOV       A,R1
   \   00003F   85..82       MOV       DPL,?XSP + 0
   \   000042   85..83       MOV       DPH,?XSP + 1
   \   000045   F0           MOVX      @DPTR,A
   1970          
   1971            //Handle the permit joining if running a distributed network
   1972            if(APSME_IsDistributedSecurity())
   \   000046                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000046   12....       LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000049   E9           MOV       A,R1
   \   00004A   6005         JZ        ??ZDO_ProcessMgmtPermitJoinReq_3
   1973            {
   1974              ZDSecMgrPermitJoining( duration );
   \   00004C                ; Setup parameters for call to function ZDSecMgrPermitJoining
   \   00004C   A9..         MOV       R1,?V2
   \   00004E   12....       LCALL     `??ZDSecMgrPermitJoining::?relay`; Banked call to: ZDSecMgrPermitJoining
   1975            }
   1976            
   1977            // Handle the Trust Center Significance
   1978            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1979            {
   1980              ZDSecMgrPermitJoining( duration );
   \                     ??ZDO_ProcessMgmtPermitJoinReq_3:
   \   000051                ; Setup parameters for call to function ZDSecMgrPermitJoining
   \   000051   A9..         MOV       R1,?V2
   \   000053   12....       LCALL     `??ZDSecMgrPermitJoining::?relay`; Banked call to: ZDSecMgrPermitJoining
   1981            }
   1982          
   1983            // Send a response if unicast
   1984            if ( !inMsg->wasBroadcast )
   \   000056   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000059   7036         JNZ       ??ZDO_ProcessMgmtPermitJoinReq_1
   1985            {
   1986              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   00005B                ; Setup parameters for call to function ZDP_SendData
   \   00005B   75..00       MOV       ?V2,#0x0
   \   00005E   78..         MOV       R0,#?V2
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000063   7401         MOV       A,#0x1
   \   000065   12....       LCALL     ?XSTACK_DISP100_8
   \   000068   88..         MOV       ?V2,R0
   \   00006A   89..         MOV       ?V3,R1
   \   00006C   78..         MOV       R0,#?V2
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000071   75..36       MOV       ?V2,#0x36
   \   000074   75..80       MOV       ?V3,#-0x80
   \   000077   78..         MOV       R0,#?V2
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007C   7901         MOV       R1,#0x1
   \   00007E   AC..         MOV       R4,?V0
   \   000080   AD..         MOV       R5,?V1
   \   000082   EE           MOV       A,R6
   \   000083   240F         ADD       A,#0xf
   \   000085   FA           MOV       R2,A
   \   000086   E4           CLR       A
   \   000087   3F           ADDC      A,R7
   \   000088   FB           MOV       R3,A
   \   000089   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00008C   7405         MOV       A,#0x5
   \   00008E   12....       LCALL     ?DEALLOC_XSTACK8
   1987            }
   1988          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   000091   7401         MOV       A,#0x1
   \   000093   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   EE           MOV       A,R6
   \   000001   240B         ADD       A,#0xb
   \   000003   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   000006   22           RET
   1989          
   1990          /*
   1991           * This function stub allows the next higher layer to be notified of
   1992           * a permit joining timeout.
   1993           */
   1994          /*********************************************************************
   1995           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1996           *
   1997           * @brief       This function stub allows the next higher layer to be
   1998           *              notified of a permit joining timeout. Currently, this
   1999           *              directly bypasses the APS layer.
   2000           *
   2001           * @param       none
   2002           *
   2003           * @return      none
   2004           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2005          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   2006          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2007            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   2008            // Currently, only the ZDSecMgr needs to be notified
   2009            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   2010            {
   2011              ZDSecMgrPermitJoiningTimeout();
   \   000004                ; Setup parameters for call to function ZDSecMgrPermitJoiningTimeout
   \   000004   12....       LCALL     `??ZDSecMgrPermitJoiningTimeout::?relay`; Banked call to: ZDSecMgrPermitJoiningTimeout
   2012            }
   2013            #endif
   2014          }
   \   000007                REQUIRE ?Subroutine0
   \   000007                ; // Fall through to label ?Subroutine0
   2015          
   2016          /*********************************************************************
   2017           * @fn          ZDO_ProcessUserDescReq
   2018           *
   2019           * @brief       This function finishes the processing of the User
   2020           *              Descriptor Request and generates the response.
   2021           *
   2022           * @param       inMsg - incoming message (request)
   2023           *
   2024           * @return      none
   2025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2026          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   2027          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV       A,#-0x11
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine121 & 0xFFFF
   2028            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_203:
   \   00000D   12....       LCALL     ?Subroutine58 & 0xFFFF
   2029            UserDescriptorFormat_t userDesc;
   2030          
   2031            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   2032                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \                     ??CrossCallReturnLabel_98:
   \   000010   E5..         MOV       A,?V0
   \   000012   240F         ADD       A,#0xf
   \   000014   F5..         MOV       ?V6,A
   \   000016   E4           CLR       A
   \   000017   35..         ADDC      A,?V1
   \   000019   F5..         MOV       ?V7,A
   \   00001B   E5..         MOV       A,?V0
   \   00001D   2402         ADD       A,#0x2
   \   00001F   F5..         MOV       ?V2,A
   \   000021   E4           CLR       A
   \   000022   35..         ADDC      A,?V1
   \   000024   F5..         MOV       ?V3,A
   \   000026   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6E           XRL       A,R6
   \   00002B   7003         JNZ       ??ZDO_ProcessUserDescReq_0
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6F           XRL       A,R7
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000030   705B         JNZ       ??ZDO_ProcessUserDescReq_1
   \   000032                ; Setup parameters for call to function osal_nv_read
   \   000032   A8..         MOV       R0,?XSP + 0
   \   000034   A9..         MOV       R1,?XSP + 1
   \   000036   88..         MOV       ?V4,R0
   \   000038   89..         MOV       ?V5,R1
   \   00003A   78..         MOV       R0,#?V4
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   75..11       MOV       ?V4,#0x11
   \   000042   75..00       MOV       ?V5,#0x0
   \   000045   78..         MOV       R0,#?V4
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7C00         MOV       R4,#0x0
   \   00004C   7D00         MOV       R5,#0x0
   \   00004E   7A81         MOV       R2,#-0x7f
   \   000050   7B00         MOV       R3,#0x0
   \   000052   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000055   7404         MOV       A,#0x4
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005A   E9           MOV       A,R1
   \   00005B   7030         JNZ       ??ZDO_ProcessUserDescReq_1
   2033            {
   2034              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00005D                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00005D   75..00       MOV       ?V0,#0x0
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000065   7401         MOV       A,#0x1
   \   000067   12....       LCALL     ?XSTACK_DISP100_8
   \   00006A   88..         MOV       ?V0,R0
   \   00006C   89..         MOV       ?V1,R1
   \   00006E   78..         MOV       R0,#?V0
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000073   EE           MOV       A,R6
   \   000074   FC           MOV       R4,A
   \   000075   EF           MOV       A,R7
   \   000076   FD           MOV       R5,A
   \   000077   AA..         MOV       R2,?V2
   \   000079   AB..         MOV       R3,?V3
   \   00007B   85..82       MOV       DPL,?V6
   \   00007E   85..83       MOV       DPH,?V7
   \   000081   E0           MOVX      A,@DPTR
   \   000082   F9           MOV       R1,A
   \   000083   12....       LCALL     `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   000086   7403         MOV       A,#0x3
   \   000088   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008B   802E         SJMP      ??ZDO_ProcessUserDescReq_2
   2035            }
   2036            else
   2037            {
   2038              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   2039                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   00008D                ; Setup parameters for call to function ZDP_GenericRsp
   \   00008D   75..11       MOV       ?V4,#0x11
   \   000090   75..80       MOV       ?V5,#-0x80
   \   000093   78..         MOV       R0,#?V4
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   8E..         MOV       ?V4,R6
   \   00009A   8F..         MOV       ?V5,R7
   \   00009C   78..         MOV       R0,#?V4
   \   00009E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A1   12....       LCALL     ?Subroutine130 & 0xFFFF
   2040            }
   \                     ??CrossCallReturnLabel_215:
   \   0000A4   FD           MOV       R5,A
   \   0000A5   7C84         MOV       R4,#-0x7c
   \   0000A7   AA..         MOV       R2,?V2
   \   0000A9   AB..         MOV       R3,?V3
   \   0000AB   85..82       MOV       DPL,?V6
   \   0000AE   85..83       MOV       DPH,?V7
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   F9           MOV       R1,A
   \   0000B3   12....       LCALL     `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000B6   7404         MOV       A,#0x4
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
   2041          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000BB   7411         MOV       A,#0x11
   \   0000BD   02....       LJMP      ??Subroutine200_0 & 0xFFFF
   2042          
   2043          /*********************************************************************
   2044           * @fn          ZDO_ProcessUserDescSet
   2045           *
   2046           * @brief       This function finishes the processing of the User
   2047           *              Descriptor Set and generates the response.
   2048           *
   2049           * @param       inMsg - incoming message (request)
   2050           *
   2051           * @return      none
   2052           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2053          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   2054          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   2055            uint8 *msg;
   2056            uint16 aoi;
   2057            UserDescriptorFormat_t userDesc;
   2058            uint8 outMsg[3];
   2059            uint8 status;
   2060          
   2061            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   000011   35..         ADDC      A,?V5
   \   000013   12....       LCALL     ?Subroutine77 & 0xFFFF
   2062            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_130:
   \   000016   FA           MOV       R2,A
   \   000017   E4           CLR       A
   \   000018   CA           XCH       A,R2
   \   000019   FB           MOV       R3,A
   \   00001A   EC           MOV       A,R4
   \   00001B   2A           ADD       A,R2
   \   00001C   FE           MOV       R6,A
   \   00001D   E4           CLR       A
   \   00001E   3B           ADDC      A,R3
   \   00001F   FF           MOV       R7,A
   2063          
   2064            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000020   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6E           XRL       A,R6
   \   000025   7003         JNZ       ??ZDO_ProcessUserDescSet_0
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   6F           XRL       A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   00002A   6003         JZ        $+5
   \   00002C   02....       LJMP      ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   2065            {
   2066              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002F   8882         MOV       DPL,R0
   \   000031   8983         MOV       DPH,R1
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FA           MOV       R2,A
   \   000037   9410         SUBB      A,#0x10
   \   000039   5004         JNC       ??ZDO_ProcessUserDescSet_2
   \   00003B   8A..         MOV       ?V3,R2
   \   00003D   8003         SJMP      ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   00003F   75..10       MOV       ?V3,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000042   7404         MOV       A,#0x4
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E5..         MOV       A,?V3
   \   000049   12....       LCALL     ?Subroutine38 & 0xFFFF
   2067              msg ++;  // increment one for the length field
   2068          
   2069              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_62:
   \   00004C   A982         MOV       R1,DPL
   \   00004E   AA83         MOV       R2,DPH
   \   000050   89..         MOV       ?V0,R1
   \   000052   8A..         MOV       ?V1,R2
   \   000054   75..00       MOV       ?V2,#0x0
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00005C   7407         MOV       A,#0x7
   \   00005E   12....       LCALL     ?XSTACK_DISP0_8
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FC           MOV       R4,A
   \   000063   7D00         MOV       R5,#0x0
   \   000065   7408         MOV       A,#0x8
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   AA82         MOV       R2,DPL
   \   00006C   AB83         MOV       R3,DPH
   \   00006E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000071   7403         MOV       A,#0x3
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   2070              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000076                ; Setup parameters for call to function osal_nv_write
   \   000076   7404         MOV       A,#0x4
   \   000078   12....       LCALL     ?XSTACK_DISP100_8
   \   00007B   88..         MOV       ?V0,R0
   \   00007D   89..         MOV       ?V1,R1
   \   00007F   78..         MOV       R0,#?V0
   \   000081   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000084   75..11       MOV       ?V0,#0x11
   \   000087   75..00       MOV       ?V1,#0x0
   \   00008A   78..         MOV       R0,#?V0
   \   00008C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008F   7C00         MOV       R4,#0x0
   \   000091   7D00         MOV       R5,#0x0
   \   000093   7A81         MOV       R2,#-0x7f
   \   000095   7B00         MOV       R3,#0x0
   \   000097   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00009A   7404         MOV       A,#0x4
   \   00009C   12....       LCALL     ?DEALLOC_XSTACK8
   2071              if ( userDesc.len != 0 )
   \   00009F   7404         MOV       A,#0x4
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   90....       MOV       DPTR,#ZDO_Config_Node_Descriptor
   \   0000A8   6005         JZ        ??ZDO_ProcessUserDescSet_4
   2072              {
   2073                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   D2E4         SETB      0xE0 /* A   */.4
   \   0000AD   8003         SJMP      ??ZDO_ProcessUserDescSet_5
   2074              }
   2075              else
   2076              {
   2077                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000AF   E0           MOVX      A,@DPTR
   \   0000B0   C2E4         CLR       0xE0 /* A   */.4
   2078              }
   2079          
   2080              status = ZDP_SUCCESS;
   2081            }
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000B2   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   0000B5   E4           CLR       A
   \   0000B6   8008         SJMP      ??ZDO_ProcessUserDescSet_6
   2082            else
   2083            {
   2084              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000B8   85..82       MOV       DPL,?XSP + 0
   \   0000BB   85..83       MOV       DPH,?XSP + 1
   \   0000BE   7484         MOV       A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000C0   F0           MOVX      @DPTR,A
   2085            }
   2086          
   2087            outMsg[0] = status;
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   C0E0         PUSH      A
   \   0000C4   7401         MOV       A,#0x1
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   D0E0         POP       A
   \   0000CB   F0           MOVX      @DPTR,A
   2088            outMsg[1] = LO_UINT16( aoi );
   \   0000CC   7402         MOV       A,#0x2
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   EE           MOV       A,R6
   \   0000D2   F0           MOVX      @DPTR,A
   2089            outMsg[2] = LO_UINT16( aoi );
   \   0000D3   7403         MOV       A,#0x3
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   EE           MOV       A,R6
   \   0000D9   F0           MOVX      @DPTR,A
   2090          
   2091            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   2092                         inMsg->SecurityUse );
   \   0000DA                ; Setup parameters for call to function ZDP_SendData
   \   0000DA   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_574:
   \   0000DD   35..         ADDC      A,?V5
   \   0000DF   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   0000E2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E5   7402         MOV       A,#0x2
   \   0000E7   12....       LCALL     ?XSTACK_DISP100_8
   \   0000EA   88..         MOV       ?V0,R0
   \   0000EC   89..         MOV       ?V1,R1
   \   0000EE   78..         MOV       R0,#?V0
   \   0000F0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F3   75..14       MOV       ?V0,#0x14
   \   0000F6   75..80       MOV       ?V1,#-0x80
   \   0000F9   78..         MOV       R0,#?V0
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FE   7903         MOV       R1,#0x3
   \   000100   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000103   FA           MOV       R2,A
   \   000104   E4           CLR       A
   \   000105   35..         ADDC      A,?V5
   \   000107   FB           MOV       R3,A
   \   000108   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00010B   7405         MOV       A,#0x5
   \   00010D   12....       LCALL     ?DEALLOC_XSTACK8
   2093          }
   \   000110   7415         MOV       A,#0x15
   \   000112   02....       LJMP      ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine225_0
   \   000002                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   2094          
   2095          /*********************************************************************
   2096           * @fn          ZDO_ProcessDeviceAnnce
   2097           *
   2098           * @brief       This function processes a device annouce message.
   2099           *
   2100           * @param       inMsg - incoming message
   2101           *
   2102           * @return      none
   2103           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2104          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   2105          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 40
   \   000005   74D8         MOV       A,#-0x28
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2106            ZDO_DeviceAnnce_t Annce;
   2107            AddrMgrEntry_t addrEntry;
   2108            uint8 parentExt[Z_EXTADDR_LEN];
   2109          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   2110            uint8 invalidIEEE[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000011   7420         MOV       A,#0x20
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   7408         MOV       A,#0x8
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   2111          #endif
   2112          
   2113            if ( (_NIB.nwkState != NWK_ROUTER) && (_NIB.nwkState != NWK_ENDDEVICE) )
   \   00001B   90....       MOV       DPTR,#_NIB + 35
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   7408         MOV       A,#0x8
   \   000022   68           XRL       A,R0
   \   000023   6008         JZ        ??ZDO_ProcessDeviceAnnce_0
   \   000025   7404         MOV       A,#0x4
   \   000027   68           XRL       A,R0
   \   000028   6003         JZ        $+5
   \   00002A   02....       LJMP      ??ZDO_ProcessDeviceAnnce_1 & 0xFFFF
   2114            {
   2115              // we aren�t stable, ignore the message
   2116              return;
   2117            }
   2118            
   2119            // Parse incoming message
   2120            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   00002D                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00002D   AC..         MOV       R4,?XSP + 0
   \   00002F   AD..         MOV       R5,?XSP + 1
   \   000031   12....       LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   2121          
   2122            if ( ZSTACK_END_DEVICE_BUILD )
   2123            {
   2124              // Make sure the message didn't come from myself - end device only
   2125              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   2126              {
   2127                return;
   2128              }
   2129            }
   2130          
   2131          #if defined ( ZIGBEEPRO )
   2132            // Clean up the neighbor table
   2133            nwkNeighborRemoveAllStranded();
   \   000034                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000034   12....       LCALL     `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   2134          
   2135            // If address conflict is detected, no need to update the address manager
   2136            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   000037                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   000037   7402         MOV       A,#0x2
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   AC82         MOV       R4,DPL
   \   00003E   AD83         MOV       R5,DPH
   \   000040   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   000043   12....       LCALL     `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   000046   E9           MOV       A,R1
   \   000047   6401         XRL       A,#0x1
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??ZDO_ProcessDeviceAnnce_1 & 0xFFFF
   2137            {
   2138              return;
   2139            }
   2140          
   2141            // Check for parent's address
   2142            NLME_GetCoordExtAddr( parentExt );
   \   00004E                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00004E   7418         MOV       A,#0x18
   \   000050   12....       LCALL     ?XSTACK_DISP101_8
   \   000053   12....       LCALL     `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   2143            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   000056                ; Setup parameters for call to function sAddrExtCmp
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   AC82         MOV       R4,DPL
   \   00005D   AD83         MOV       R5,DPH
   \   00005F   7418         MOV       A,#0x18
   \   000061   12....       LCALL     ?XSTACK_DISP101_8
   \   000064   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000067   E9           MOV       A,R1
   \   000068   602C         JZ        ??ZDO_ProcessDeviceAnnce_2
   2144            {
   2145              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   00006A                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00006A   12....       LCALL     `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00006D   8A..         MOV       ?V0,R2
   \   00006F   8B..         MOV       ?V1,R3
   \   000071   A8..         MOV       R0,?V0
   \   000073   A9..         MOV       R1,?V1
   \   000075   85..82       MOV       DPL,?XSP + 0
   \   000078   85..83       MOV       DPH,?XSP + 1
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   68           XRL       A,R0
   \   00007D   7003         JNZ       ??ZDO_ProcessDeviceAnnce_3
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   69           XRL       A,R1
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   000082   6012         JZ        ??ZDO_ProcessDeviceAnnce_2
   2146              {
   2147                // Set the Parent's MAC's new short address
   2148                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   000084   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000087   90....       MOV       DPTR,#_NIB + 23
   \   00008A   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   2149                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_412:
   \   00008D                ; Setup parameters for call to function ZMacSetReq
   \   00008D   7A..         MOV       R2,#(_NIB + 23) & 0xff
   \   00008F   7B..         MOV       R3,#((_NIB + 23) >> 8) & 0xff
   \   000091   794B         MOV       R1,#0x4b
   \   000093   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2150              }
   2151            }
   2152          
   2153            if ( ZSTACK_ROUTER_BUILD )
   2154            {
   2155              // If the device annce comes from a end device child that has moved
   2156              // to another parent, remove it from associated device list
   2157          
   2158              // If the dev annce is coming from other device's children,
   2159              // (The dev annce from its own children shall be unicast to itself,
   2160              // So check the mac destination address)
   2161              // Remove it from the associated device list. If it is not
   2162              // a child, no action will be taken in AssocRemove() anyway.
   2163              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   000096                ; Setup parameters for call to function NLME_GetShortAddr
   \   000096   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000099   8A..         MOV       ?V0,R2
   \   00009B   8B..         MOV       ?V1,R3
   \   00009D   A8..         MOV       R0,?V0
   \   00009F   A9..         MOV       R1,?V1
   \   0000A1   EE           MOV       A,R6
   \   0000A2   2411         ADD       A,#0x11
   \   0000A4   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_599:
   \   0000A7   68           XRL       A,R0
   \   0000A8   7003         JNZ       ??ZDO_ProcessDeviceAnnce_4
   \   0000AA   A3           INC       DPTR
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   69           XRL       A,R1
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   0000AD   604E         JZ        ??ZDO_ProcessDeviceAnnce_5
   2164              {
   2165                associated_devices_t *dev_ptr;
   2166          
   2167                // If it's an end device child
   2168                dev_ptr = AssocGetWithExt( Annce.extAddr );
   \   0000AF                ; Setup parameters for call to function AssocGetWithExt
   \   0000AF   7402         MOV       A,#0x2
   \   0000B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B4   AA82         MOV       R2,DPL
   \   0000B6   AB83         MOV       R3,DPH
   \   0000B8   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   0000BB   8A82         MOV       DPL,R2
   \   0000BD   8B83         MOV       DPH,R3
   2169                if ( dev_ptr )
   \   0000BF   E582         MOV       A,DPL
   \   0000C1   4583         ORL       A,DPH
   \   0000C3   601C         JZ        ??ZDO_ProcessDeviceAnnce_6
   2170                {
   2171                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2172                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   F8           MOV       R0,A
   \   0000CB   7401         MOV       A,#0x1
   \   0000CD   68           XRL       A,R0
   \   0000CE   6005         JZ        ??ZDO_ProcessDeviceAnnce_7
   \   0000D0   7402         MOV       A,#0x2
   \   0000D2   68           XRL       A,R0
   \   0000D3   700C         JNZ       ??ZDO_ProcessDeviceAnnce_6
   2173                  {
   2174                    AssocRemove( Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_7:
   \   0000D5                ; Setup parameters for call to function AssocRemove
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   AA82         MOV       R2,DPL
   \   0000DC   AB83         MOV       R3,DPH
   \   0000DE   12....       LCALL     `??AssocRemove::?relay`; Banked call to: AssocRemove
   2175                  }
   2176                }
   2177          
   2178                // Remove the address from the SrcMatch table,
   2179                // just in case the device was aged out by Child Management Table process
   2180                if ( ( pNwkNotMyChildListDelete != NULL ) &&
   2181                     ( zgChildAgingEnable == TRUE ) )
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   0000E1   90....       MOV       DPTR,#pNwkNotMyChildListDelete
   \   0000E4   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   0000E7   6014         JZ        ??ZDO_ProcessDeviceAnnce_5
   \   0000E9   90....       MOV       DPTR,#zgChildAgingEnable
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   6401         XRL       A,#0x1
   \   0000EF   700C         JNZ       ??ZDO_ProcessDeviceAnnce_5
   2182                {
   2183                  pNwkNotMyChildListDelete( Annce.nwkAddr );
   \   0000F1                ; Setup parameters for indirect call
   \   0000F1   12....       LCALL     ?Subroutine99 & 0xFFFF
   2184                }
   2185              }
   2186            }
   \                     ??CrossCallReturnLabel_491:
   \   0000F4   90....       MOV       DPTR,#pNwkNotMyChildListDelete + 1
   \   0000F7   12....       LCALL     ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_648:
   \   0000FA   12....       LCALL     ?CALL_IND
   2187          
   2188            // Assume that the device has moved, remove existing routing entries
   2189            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   0000FD                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000FD   7900         MOV       R1,#0x0
   \   0000FF   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   000102   12....       LCALL     `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2190          
   2191            // Remove entry from neighborTable
   2192            nwkNeighborRemove( Annce.nwkAddr, _NIB.nwkPanId );
   \   000105                ; Setup parameters for call to function nwkNeighborRemove
   \   000105   90....       MOV       DPTR,#_NIB + 33
   \   000108   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   00010B   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   00010E   12....       LCALL     `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2193          
   2194          #endif // ZIGBEEPRO
   2195          
   2196            // Fill in the extended address in address manager if we don't have it already.
   2197            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000111   740B         MOV       A,#0xb
   \   000113   12....       LCALL     ?XSTACK_DISP0_8
   \   000116   E4           CLR       A
   \   000117   12....       LCALL     ?Subroutine14 & 0xFFFF
   2198            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_10:
   \   00011A   F8           MOV       R0,A
   \   00011B   A3           INC       DPTR
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   F9           MOV       R1,A
   \   00011E   740C         MOV       A,#0xc
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   12....       LCALL     ?Subroutine27 & 0xFFFF
   2199            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_42:
   \   000126   12....       LCALL     ?XSTACK_DISP101_8
   \   000129   12....       LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00012C   E9           MOV       A,R1
   \   00012D   603F         JZ        ??ZDO_ProcessDeviceAnnce_8
   2200            {
   2201              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   00012F                ; Setup parameters for call to function osal_memset
   \   00012F   7C08         MOV       R4,#0x8
   \   000131   7D00         MOV       R5,#0x0
   \   000133   7900         MOV       R1,#0x0
   \   000135   7418         MOV       A,#0x18
   \   000137   12....       LCALL     ?XSTACK_DISP101_8
   \   00013A   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2202              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   00013D                ; Setup parameters for call to function sAddrExtCmp
   \   00013D   740E         MOV       A,#0xe
   \   00013F   12....       LCALL     ?XSTACK_DISP0_8
   \   000142   AC82         MOV       R4,DPL
   \   000144   AD83         MOV       R5,DPH
   \   000146   7418         MOV       A,#0x18
   \   000148   12....       LCALL     ?XSTACK_DISP101_8
   \   00014B   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00014E   E9           MOV       A,R1
   \   00014F   601D         JZ        ??ZDO_ProcessDeviceAnnce_8
   2203              {
   2204                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   000151                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000151   7402         MOV       A,#0x2
   \   000153   12....       LCALL     ?XSTACK_DISP0_8
   \   000156   AC82         MOV       R4,DPL
   \   000158   AD83         MOV       R5,DPH
   \   00015A   740E         MOV       A,#0xe
   \   00015C   12....       LCALL     ?XSTACK_DISP0_8
   \   00015F   AA82         MOV       R2,DPL
   \   000161   AB83         MOV       R3,DPH
   \   000163   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2205                AddrMgrEntryUpdate( &addrEntry );
   \   000166                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000166   740B         MOV       A,#0xb
   \   000168   12....       LCALL     ?XSTACK_DISP101_8
   \   00016B   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2206              }
   2207            }
   2208          
   2209            // Update the short address in address manager if it's been changed
   2210            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_8:
   \   00016E                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00016E   7402         MOV       A,#0x2
   \   000170   12....       LCALL     ?XSTACK_DISP0_8
   \   000173   AC82         MOV       R4,DPL
   \   000175   AD83         MOV       R5,DPH
   \   000177   740E         MOV       A,#0xe
   \   000179   12....       LCALL     ?XSTACK_DISP0_8
   \   00017C   AA82         MOV       R2,DPL
   \   00017E   AB83         MOV       R3,DPH
   \   000180   12....       LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2211            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   000183                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000183   740B         MOV       A,#0xb
   \   000185   12....       LCALL     ?XSTACK_DISP101_8
   \   000188   12....       LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00018B   E9           MOV       A,R1
   \   00018C   6028         JZ        ??ZDO_ProcessDeviceAnnce_9
   2212            {
   2213              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   00018E   740C         MOV       A,#0xc
   \   000190   12....       LCALL     ?XSTACK_DISP0_8
   \   000193   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   000196   85..82       MOV       DPL,?XSP + 0
   \   000199   85..83       MOV       DPH,?XSP + 1
   \   00019C   E0           MOVX      A,@DPTR
   \   00019D   68           XRL       A,R0
   \   00019E   7003         JNZ       ??ZDO_ProcessDeviceAnnce_10
   \   0001A0   A3           INC       DPTR
   \   0001A1   E0           MOVX      A,@DPTR
   \   0001A2   69           XRL       A,R1
   \                     ??ZDO_ProcessDeviceAnnce_10:
   \   0001A3   6011         JZ        ??ZDO_ProcessDeviceAnnce_9
   2214              {
   2215                addrEntry.nwkAddr = Annce.nwkAddr;
   \   0001A5   12....       LCALL     ?Subroutine92 & 0xFFFF
   2216                AddrMgrEntryUpdate( &addrEntry );
   2217              }
   2218            }
   \                     ??CrossCallReturnLabel_443:
   \   0001A8   740C         MOV       A,#0xc
   \   0001AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AD   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0001B0   12....       LCALL     ?XSTACK_DISP101_8
   \   0001B3   12....       LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2219          
   2220          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
   2221            if(ZG_DEVICE_RTR_TYPE)
   \                     ??ZDO_ProcessDeviceAnnce_9:
   \   0001B6   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0001B9   E0           MOVX      A,@DPTR
   \   0001BA   6007         JZ        ??ZDO_ProcessDeviceAnnce_11
   \   0001BC   6401         XRL       A,#0x1
   \   0001BE   6003         JZ        $+5
   \   0001C0   02....       LJMP      ??ZDO_ProcessDeviceAnnce_1 & 0xFFFF
   2222            {
   2223              // Check GP proxy table to update the entry if necesary
   2224              if( osal_memcmp( Annce.extAddr, invalidIEEE, Z_EXTADDR_LEN ) )
   \                     ??ZDO_ProcessDeviceAnnce_11:
   \   0001C3                ; Setup parameters for call to function osal_memcmp
   \   0001C3   7420         MOV       A,#0x20
   \   0001C5   12....       LCALL     ?XSTACK_DISP100_8
   \   0001C8   88..         MOV       ?V0,R0
   \   0001CA   89..         MOV       ?V1,R1
   \   0001CC   75..00       MOV       ?V2,#0x0
   \   0001CF   78..         MOV       R0,#?V0
   \   0001D1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001D4   7C08         MOV       R4,#0x8
   \   0001D6   7D00         MOV       R5,#0x0
   \   0001D8   7405         MOV       A,#0x5
   \   0001DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DD   A982         MOV       R1,DPL
   \   0001DF   AA83         MOV       R2,DPH
   \   0001E1   7B00         MOV       R3,#0x0
   \   0001E3   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001E6   7403         MOV       A,#0x3
   \   0001E8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001EB   E9           MOV       A,R1
   \   0001EC   6043         JZ        ??ZDO_ProcessDeviceAnnce_12
   2225              {
   2226                if( osal_get_timeoutEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT ) )
   \   0001EE                ; Setup parameters for call to function osal_get_timeoutEx
   \   0001EE   7A10         MOV       R2,#0x10
   \   0001F0   7B00         MOV       R3,#0x0
   \   0001F2   90....       MOV       DPTR,#gp_TaskID
   \   0001F5   E0           MOVX      A,@DPTR
   \   0001F6   F9           MOV       R1,A
   \   0001F7   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   0001FA   EA           MOV       A,R2
   \   0001FB   4B           ORL       A,R3
   \   0001FC   4C           ORL       A,R4
   \   0001FD   4D           ORL       A,R5
   \   0001FE   604E         JZ        ??ZDO_ProcessDeviceAnnce_1
   2227                {
   2228                  if ( osal_memcmp( &Annce, GP_aliasConflictAnnce, sizeof( ZDO_DeviceAnnce_t ) ) )
   \   000200                ; Setup parameters for call to function osal_memcmp
   \   000200   90....       MOV       DPTR,#GP_aliasConflictAnnce
   \   000203   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000206   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000209   7C0B         MOV       R4,#0xb
   \   00020B   7D00         MOV       R5,#0x0
   \   00020D   7403         MOV       A,#0x3
   \   00020F   12....       LCALL     ?XSTACK_DISP0_8
   \   000212   A982         MOV       R1,DPL
   \   000214   AA83         MOV       R2,DPH
   \   000216   7B00         MOV       R3,#0x0
   \   000218   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00021B   7403         MOV       A,#0x3
   \   00021D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000220   E9           MOV       A,R1
   \   000221   602B         JZ        ??ZDO_ProcessDeviceAnnce_1
   2229                  {
   2230                    osal_stop_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT );
   \   000223                ; Setup parameters for call to function osal_stop_timerEx
   \   000223   7A10         MOV       R2,#0x10
   \   000225   7B00         MOV       R3,#0x0
   \   000227   90....       MOV       DPTR,#gp_TaskID
   \   00022A   E0           MOVX      A,@DPTR
   \   00022B   F9           MOV       R1,A
   \   00022C   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00022F   801D         SJMP      ??ZDO_ProcessDeviceAnnce_1
   2231                  }
   2232                }
   2233              }
   2234              else
   2235              {
   2236                if(GP_CheckAnnouncedDeviceGCB != NULL)
   \                     ??ZDO_ProcessDeviceAnnce_12:
   \   000231   90....       MOV       DPTR,#GP_CheckAnnouncedDeviceGCB
   \   000234   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000237   6015         JZ        ??ZDO_ProcessDeviceAnnce_1
   2237                {
   2238                  GP_CheckAnnouncedDeviceGCB( Annce.extAddr, Annce.nwkAddr );
   \   000239                ; Setup parameters for indirect call
   \   000239   12....       LCALL     ?Subroutine103 & 0xFFFF
   2239                }
   2240              }
   2241            }
   \                     ??CrossCallReturnLabel_432:
   \   00023C   7402         MOV       A,#0x2
   \   00023E   12....       LCALL     ?XSTACK_DISP0_8
   \   000241   AA82         MOV       R2,DPL
   \   000243   AB83         MOV       R3,DPH
   \   000245   90....       MOV       DPTR,#GP_CheckAnnouncedDeviceGCB + 1
   \   000248   12....       LCALL     ??Subroutine253_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_649:
   \   00024B   12....       LCALL     ?CALL_IND
   2242          #endif
   2243          }
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   00024E   7428         MOV       A,#0x28
   \   000250   12....       LCALL     ?DEALLOC_XSTACK8
   \   000253   7F03         MOV       R7,#0x3
   \   000255   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   12....       LCALL     ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000003   22           RET
   2244          
   2245          /*********************************************************************
   2246           * @fn          ZDO_ProcessParentAnnce
   2247           *
   2248           * @brief       This function processes a Parent annouce message.
   2249           *
   2250           * @param       inMsg - incoming message
   2251           *
   2252           * @return      none
   2253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7415         MOV       A,#0x15
   \   000002                REQUIRE ??Subroutine200_0
   \   000002                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2254          void ZDO_ProcessParentAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessParentAnnce:
   2255          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7408         MOV       A,#0x8
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine18 & 0xFFFF
   2256            ZDO_ParentAnnce_t *parentAnnce;
   2257            uint8 x;
   2258            uint8 childCount = 0;
   \                     ??CrossCallReturnLabel_22:
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   E4           CLR       A
   \   000016   F0           MOVX      @DPTR,A
   2259            uint32 localAge;
   2260          
   2261            ZDO_ChildInfoList_t *listHead = NULL;
   \   000017   FE           MOV       R6,A
   \   000018   FF           MOV       R7,A
   2262            ZDO_ChildInfoList_t *listTail;
   2263            ZDO_ChildInfoList_t *newNode;
   2264          
   2265            // Parse incoming message, memory is allocated by the parse function,
   2266            // it should be free after processing the message
   2267            parentAnnce = ZDO_ParseParentAnnce( inMsg );
   \   000019                ; Setup parameters for call to function ZDO_ParseParentAnnce
   \   000019   7408         MOV       A,#0x8
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000021   12....       LCALL     `??ZDO_ParseParentAnnce::?relay`; Banked call to: ZDO_ParseParentAnnce
   \   000024   7404         MOV       A,#0x4
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   12....       LCALL     ?Subroutine40 & 0xFFFF
   2268          
   2269            if ( parentAnnce != NULL )
   \                     ??CrossCallReturnLabel_363:
   \   00002C   7404         MOV       A,#0x4
   \   00002E   12....       LCALL     ?XSTACK_DISP0_8
   \   000031   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000034   7003         JNZ       $+5
   \   000036   02....       LJMP      ??ZDO_ProcessParentAnnce_0 & 0xFFFF
   2270            {
   2271              for ( x = 0; x < parentAnnce->numOfChildren; x++ )
   \   000039   85..82       MOV       DPL,?XSP + 0
   \   00003C   85..83       MOV       DPH,?XSP + 1
   \   00003F   E4           CLR       A
   \   000040   8013         SJMP      ??ZDO_ProcessParentAnnce_1
   2272              {
   2273                associated_devices_t *dev_ptr;
   2274                localAge = 0xFFFFFFFF;
   2275          
   2276                // If it's an End Device child
   2277                dev_ptr = AssocGetWithExt( parentAnnce->childInfo[x].extAddr );
   2278          
   2279                if ( dev_ptr )
   2280                {
   2281                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2282                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   2283                  {
   2284                    if ( dev_ptr->keepaliveRcv == TRUE )
   2285                    {
   2286                      localAge = dev_ptr->endDev.deviceTimeout - dev_ptr->timeoutCounter;
   2287                    }
   2288          
   2289                    if ( localAge < parentAnnce->childInfo[x].age )
   2290                    {
   2291                      // Add one element to the list
   2292                      newNode = (ZDO_ChildInfoList_t *)osal_mem_alloc( sizeof(ZDO_ChildInfoList_t) );
   2293          
   2294                      osal_cpyExtAddr( newNode->child.extAddr, parentAnnce->childInfo[x].extAddr );
   2295          
   2296                      newNode->child.age = localAge;
   2297          
   2298                      newNode->next = NULL;
   2299          
   2300                      if ( listHead == NULL )
   2301                      {
   2302                        // Initialize the head of the list
   2303                        listHead = listTail = newNode;
   2304                      }
   2305                      else
   2306                      {
   2307                        // Add new element to the end
   2308                        listTail->next = newNode;
   2309          
   2310                        listTail = listTail->next;
   2311                      }
   2312          
   2313                      childCount++;
   2314                    }
   2315                    else
   2316                    {
   2317                      AssocRemove( parentAnnce->childInfo[x].extAddr );
   \                     ??ZDO_ProcessParentAnnce_2:
   \   000042                ; Setup parameters for call to function AssocRemove
   \   000042   7406         MOV       A,#0x6
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2318                    }
   \                     ??CrossCallReturnLabel_476:
   \   00004A   12....       LCALL     `??AssocRemove::?relay`; Banked call to: AssocRemove
   \                     ??ZDO_ProcessParentAnnce_3:
   \   00004D   85..82       MOV       DPL,?XSP + 0
   \   000050   85..83       MOV       DPH,?XSP + 1
   \   000053   E0           MOVX      A,@DPTR
   \   000054   04           INC       A
   \                     ??ZDO_ProcessParentAnnce_1:
   \   000055   F0           MOVX      @DPTR,A
   \   000056   7404         MOV       A,#0x4
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   00005E   F8           MOV       R0,A
   \   00005F   85..82       MOV       DPL,?XSP + 0
   \   000062   85..83       MOV       DPH,?XSP + 1
   \   000065   E0           MOVX      A,@DPTR
   \   000066   C3           CLR       C
   \   000067   98           SUBB      A,R0
   \   000068   4003         JC        $+5
   \   00006A   02....       LJMP      ??ZDO_ProcessParentAnnce_4 & 0xFFFF
   \   00006D   75..FF       MOV       ?V0,#-0x1
   \   000070   75..FF       MOV       ?V1,#-0x1
   \   000073   75..FF       MOV       ?V2,#-0x1
   \   000076   75..FF       MOV       ?V3,#-0x1
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   75F00C       MOV       B,#0xc
   \   00007D   A4           MUL       AB
   \   00007E   F8           MOV       R0,A
   \   00007F   A9F0         MOV       R1,B
   \   000081   7404         MOV       A,#0x4
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   E0           MOVX      A,@DPTR
   \   000087   28           ADD       A,R0
   \   000088   F8           MOV       R0,A
   \   000089   A3           INC       DPTR
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   39           ADDC      A,R1
   \   00008C   F9           MOV       R1,A
   \   00008D   740A         MOV       A,#0xa
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000095   740A         MOV       A,#0xa
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00009D   F9           MOV       R1,A
   \   00009E   7406         MOV       A,#0x6
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   0000A6                ; Setup parameters for call to function AssocGetWithExt
   \   0000A6   7406         MOV       A,#0x6
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   0000AE   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   0000B1   EA           MOV       A,R2
   \   0000B2   4B           ORL       A,R3
   \   0000B3   6098         JZ        ??ZDO_ProcessParentAnnce_3
   \   0000B5   8A82         MOV       DPL,R2
   \   0000B7   8B83         MOV       DPH,R3
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   E0           MOVX      A,@DPTR
   \   0000BE   F8           MOV       R0,A
   \   0000BF   7401         MOV       A,#0x1
   \   0000C1   68           XRL       A,R0
   \   0000C2   6005         JZ        ??ZDO_ProcessParentAnnce_5
   \   0000C4   7402         MOV       A,#0x2
   \   0000C6   68           XRL       A,R0
   \   0000C7   7084         JNZ       ??ZDO_ProcessParentAnnce_3
   \                     ??ZDO_ProcessParentAnnce_5:
   \   0000C9   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   0000CC   700C         JNZ       ??ZDO_ProcessParentAnnce_6
   \   0000CE   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   0000D1   12....       LCALL     ?L_MOV_X
   \   0000D4   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   0000D7   12....       LCALL     ?L_SUB_X
   \                     ??ZDO_ProcessParentAnnce_6:
   \   0000DA   740A         MOV       A,#0xa
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0000E2   12....       LCALL     ?UL_GE_X
   \   0000E5   5003         JNC       $+5
   \   0000E7   02....       LJMP      ??ZDO_ProcessParentAnnce_2 & 0xFFFF
   \   0000EA                ; Setup parameters for call to function osal_mem_alloc
   \   0000EA   7A0E         MOV       R2,#0xe
   \   0000EC   7B00         MOV       R3,#0x0
   \   0000EE   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000F1   8A..         MOV       ?V6,R2
   \   0000F3   8B..         MOV       ?V7,R3
   \   0000F5                ; Setup parameters for call to function sAddrExtCpy
   \   0000F5   7406         MOV       A,#0x6
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   0000FD   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000100   85..82       MOV       DPL,?V6
   \   000103   85..83       MOV       DPH,?V7
   \   000106   A3           INC       DPTR
   \   000107   A3           INC       DPTR
   \   000108   A3           INC       DPTR
   \   000109   A3           INC       DPTR
   \   00010A   A3           INC       DPTR
   \   00010B   A3           INC       DPTR
   \   00010C   A3           INC       DPTR
   \   00010D   A3           INC       DPTR
   \   00010E   78..         MOV       R0,#?V0
   \   000110   12....       LCALL     ?L_MOV_TO_X
   \   000113   E5..         MOV       A,?V6
   \   000115   240C         ADD       A,#0xc
   \   000117   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   00011A   EE           MOV       A,R6
   \   00011B   4F           ORL       A,R7
   \   00011C   7016         JNZ       ??ZDO_ProcessParentAnnce_7
   \   00011E   7401         MOV       A,#0x1
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   E5..         MOV       A,?V6
   \   000125   F0           MOVX      @DPTR,A
   \   000126   A3           INC       DPTR
   \   000127   E5..         MOV       A,?V7
   \   000129   F0           MOVX      @DPTR,A
   \   00012A   7401         MOV       A,#0x1
   \   00012C   12....       LCALL     ?XSTACK_DISP0_8
   \   00012F   12....       LCALL     ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000132   8022         SJMP      ??CrossCallReturnLabel_415
   \                     ??ZDO_ProcessParentAnnce_7:
   \   000134   7401         MOV       A,#0x1
   \   000136   12....       LCALL     ?XSTACK_DISP0_8
   \   000139   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00013C   E5..         MOV       A,?V6
   \   00013E   F0           MOVX      @DPTR,A
   \   00013F   A3           INC       DPTR
   \   000140   E5..         MOV       A,?V7
   \   000142   F0           MOVX      @DPTR,A
   \   000143   7401         MOV       A,#0x1
   \   000145   12....       LCALL     ?XSTACK_DISP0_8
   \   000148   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00014B   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   00014E   7401         MOV       A,#0x1
   \   000150   12....       LCALL     ?XSTACK_DISP0_8
   \   000153   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000156   7403         MOV       A,#0x3
   \   000158   12....       LCALL     ?XSTACK_DISP0_8
   \   00015B   E0           MOVX      A,@DPTR
   \   00015C   04           INC       A
   \   00015D   F0           MOVX      @DPTR,A
   \   00015E   02....       LJMP      ??ZDO_ProcessParentAnnce_3 & 0xFFFF
   2319                  }
   2320                }
   2321              }
   2322          
   2323              // If the device has children that match some in the received list,
   2324              // it should send a unicast Parent_Annce_rsp message.
   2325              if ( childCount > 0 )
   \                     ??ZDO_ProcessParentAnnce_4:
   \   000161   7403         MOV       A,#0x3
   \   000163   12....       LCALL     ?XSTACK_DISP0_8
   \   000166   E0           MOVX      A,@DPTR
   \   000167   7003         JNZ       $+5
   \   000169   02....       LJMP      ??ZDO_ProcessParentAnnce_8 & 0xFFFF
   2326              {
   2327                ZDO_ChildInfo_t *childInfo;
   2328                zAddrType_t dstAddr;
   2329          
   2330                dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00016C   7414         MOV       A,#0x14
   \   00016E   12....       LCALL     ?XSTACK_DISP0_8
   \   000171   7402         MOV       A,#0x2
   \   000173   F0           MOVX      @DPTR,A
   2331                dstAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   000174   7408         MOV       A,#0x8
   \   000176   12....       LCALL     ?XSTACK_DISP0_8
   \   000179   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   00017C   740C         MOV       A,#0xc
   \   00017E   12....       LCALL     ?XSTACK_DISP0_8
   \   000181   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   2332          
   2333                x = 0;
   \                     ??CrossCallReturnLabel_416:
   \   000184   85..82       MOV       DPL,?XSP + 0
   \   000187   85..83       MOV       DPH,?XSP + 1
   \   00018A   E4           CLR       A
   \   00018B   F0           MOVX      @DPTR,A
   2334          
   2335                childInfo = (ZDO_ChildInfo_t *)osal_mem_alloc( childCount * sizeof(ZDO_ChildInfo_t) );
   \   00018C                ; Setup parameters for call to function osal_mem_alloc
   \   00018C   7403         MOV       A,#0x3
   \   00018E   12....       LCALL     ?XSTACK_DISP0_8
   \   000191   E0           MOVX      A,@DPTR
   \   000192   75F00C       MOV       B,#0xc
   \   000195   A4           MUL       AB
   \   000196   FA           MOV       R2,A
   \   000197   ABF0         MOV       R3,B
   \   000199   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00019C   8A..         MOV       ?V2,R2
   \   00019E   8B..         MOV       ?V3,R3
   2336          
   2337                if ( childInfo != NULL )
   \   0001A0   EA           MOV       A,R2
   \   0001A1   45..         ORL       A,?V3
   \   0001A3   7003         JNZ       $+5
   \   0001A5   02....       LJMP      ??ZDO_ProcessParentAnnce_9 & 0xFFFF
   \   0001A8   8062         SJMP      ??ZDO_ProcessParentAnnce_10
   2338                {
   2339                  // Copy the content of the link list into this buffer
   2340                  while ( listHead != NULL )
   2341                  {
   2342                    listTail = listHead;
   \                     ??ZDO_ProcessParentAnnce_11:
   \   0001AA   7401         MOV       A,#0x1
   \   0001AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AF   EE           MOV       A,R6
   \   0001B0   F0           MOVX      @DPTR,A
   \   0001B1   A3           INC       DPTR
   \   0001B2   EF           MOV       A,R7
   \   0001B3   12....       LCALL     ?Subroutine14 & 0xFFFF
   2343          
   2344                    osal_cpyExtAddr( childInfo[x].extAddr,  listHead->child.extAddr );
   \                     ??CrossCallReturnLabel_11:
   \   0001B6   75F00C       MOV       B,#0xc
   \   0001B9   A4           MUL       AB
   \   0001BA   F8           MOV       R0,A
   \   0001BB   A9F0         MOV       R1,B
   \   0001BD   E5..         MOV       A,?V2
   \   0001BF   28           ADD       A,R0
   \   0001C0   F5..         MOV       ?V0,A
   \   0001C2   E5..         MOV       A,?V3
   \   0001C4   39           ADDC      A,R1
   \   0001C5   F5..         MOV       ?V1,A
   \   0001C7                ; Setup parameters for call to function sAddrExtCpy
   \   0001C7   EE           MOV       A,R6
   \   0001C8   FC           MOV       R4,A
   \   0001C9   EF           MOV       A,R7
   \   0001CA   FD           MOV       R5,A
   \   0001CB   AA..         MOV       R2,?V0
   \   0001CD   AB..         MOV       R3,?V1
   \   0001CF   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2345                    childInfo[x].age = listHead->child.age;
   \   0001D2   8E82         MOV       DPL,R6
   \   0001D4   8F83         MOV       DPH,R7
   \   0001D6   A3           INC       DPTR
   \   0001D7   A3           INC       DPTR
   \   0001D8   A3           INC       DPTR
   \   0001D9   A3           INC       DPTR
   \   0001DA   A3           INC       DPTR
   \   0001DB   A3           INC       DPTR
   \   0001DC   A3           INC       DPTR
   \   0001DD   A3           INC       DPTR
   \   0001DE   12....       LCALL     ?XLOAD_R0123
   \   0001E1   85..82       MOV       DPL,?V0
   \   0001E4   85..83       MOV       DPH,?V1
   \   0001E7   A3           INC       DPTR
   \   0001E8   A3           INC       DPTR
   \   0001E9   A3           INC       DPTR
   \   0001EA   A3           INC       DPTR
   \   0001EB   A3           INC       DPTR
   \   0001EC   A3           INC       DPTR
   \   0001ED   A3           INC       DPTR
   \   0001EE   A3           INC       DPTR
   \   0001EF   12....       LCALL     ?XSTORE_R0123
   2346          
   2347                    x++;
   \   0001F2   85..82       MOV       DPL,?XSP + 0
   \   0001F5   85..83       MOV       DPH,?XSP + 1
   \   0001F8   E0           MOVX      A,@DPTR
   \   0001F9   04           INC       A
   \   0001FA   F0           MOVX      @DPTR,A
   2348          
   2349                    listHead = listTail->next;
   \   0001FB   7401         MOV       A,#0x1
   \   0001FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000200   12....       LCALL     ?Subroutine62 & 0xFFFF
   2350          
   2351                    // Free this element of the link list
   2352                    osal_mem_free( listTail );
   2353                  }
   \                     ??CrossCallReturnLabel_106:
   \   000203   12....       LCALL     ?XSTACK_DISP0_8
   \   000206   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   000209   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_ProcessParentAnnce_10:
   \   00020C   EE           MOV       A,R6
   \   00020D   4F           ORL       A,R7
   \   00020E   709A         JNZ       ??ZDO_ProcessParentAnnce_11
   2354          
   2355                  ZDP_ParentAnnceRsp( (inMsg->TransSeq), dstAddr, childCount,
   2356                                      ((uint8 *)childInfo), 0 );
   \   000210                ; Setup parameters for call to function ZDP_ParentAnnce
   \   000210   75..00       MOV       ?V0,#0x0
   \   000213   78..         MOV       R0,#?V0
   \   000215   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000218   75..1F       MOV       ?V0,#0x1f
   \   00021B   75..80       MOV       ?V1,#-0x80
   \   00021E   78..         MOV       R0,#?V0
   \   000220   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000223   78..         MOV       R0,#?V2
   \   000225   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000228   7408         MOV       A,#0x8
   \   00022A   12....       LCALL     ?XSTACK_DISP0_8
   \   00022D   E0           MOVX      A,@DPTR
   \   00022E   F9           MOV       R1,A
   \   00022F   7411         MOV       A,#0x11
   \   000231   12....       LCALL     ?XSTACK_DISP102_8
   \   000234   740D         MOV       A,#0xd
   \   000236   12....       LCALL     ?XSTACK_DISP0_8
   \   000239   E0           MOVX      A,@DPTR
   \   00023A   240F         ADD       A,#0xf
   \   00023C   FA           MOV       R2,A
   \   00023D   A3           INC       DPTR
   \   00023E   E0           MOVX      A,@DPTR
   \   00023F   3400         ADDC      A,#0x0
   \   000241   FB           MOV       R3,A
   \   000242   12....       LCALL     `??ZDP_ParentAnnce::?relay`; Banked call to: ZDP_ParentAnnce
   \   000245   7405         MOV       A,#0x5
   \   000247   12....       LCALL     ?DEALLOC_XSTACK8
   2357                  
   2358                  
   2359                  osal_mem_free(childInfo);
   \   00024A                ; Setup parameters for call to function osal_mem_free
   \   00024A   AA..         MOV       R2,?V2
   \   00024C   AB..         MOV       R3,?V3
   \   00024E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000251   801F         SJMP      ??ZDO_ProcessParentAnnce_8
   2360                }
   2361                else
   2362                {
   2363                  while(listHead != NULL)
   2364                  {
   2365                    listTail = listHead;
   \                     ??ZDO_ProcessParentAnnce_12:
   \   000253   7401         MOV       A,#0x1
   \   000255   12....       LCALL     ?XSTACK_DISP0_8
   \   000258   EE           MOV       A,R6
   \   000259   F0           MOVX      @DPTR,A
   \   00025A   A3           INC       DPTR
   \   00025B   EF           MOV       A,R7
   \   00025C   F0           MOVX      @DPTR,A
   2366                    listHead = listTail->next;
   \   00025D   7401         MOV       A,#0x1
   \   00025F   12....       LCALL     ?XSTACK_DISP0_8
   \   000262   12....       LCALL     ?Subroutine62 & 0xFFFF
   2367          
   2368                    // Free this element of the link list
   2369                    osal_mem_free( listTail );
   2370                  }  
   \                     ??CrossCallReturnLabel_107:
   \   000265   12....       LCALL     ?XSTACK_DISP0_8
   \   000268   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   00026B   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_ProcessParentAnnce_9:
   \   00026E   EE           MOV       A,R6
   \   00026F   4F           ORL       A,R7
   \   000270   70E1         JNZ       ??ZDO_ProcessParentAnnce_12
   2371                }
   2372              }
   2373              
   2374              // Free memory allocated by parsing function
   2375              osal_mem_free( parentAnnce );
   \                     ??ZDO_ProcessParentAnnce_8:
   \   000272                ; Setup parameters for call to function osal_mem_free
   \   000272   7404         MOV       A,#0x4
   \   000274   12....       LCALL     ?XSTACK_DISP0_8
   \   000277   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2376            }
   \                     ??CrossCallReturnLabel_480:
   \   00027A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2377          }
   \                     ??ZDO_ProcessParentAnnce_0:
   \   00027D   02....       LJMP      ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_695:
   \   000003   240C         ADD       A,#0xc
   \   000005   F582         MOV       DPL,A
   \   000007   E4           CLR       A
   \   000008   38           ADDC      A,R0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000003   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000006                ; Setup parameters for call to function osal_mem_free
   \   000006                ; Setup parameters for call to function osal_mem_free
   \   000006   7401         MOV       A,#0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   EA           MOV       A,R2
   \   000001   241B         ADD       A,#0x1b
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6401         XRL       A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   EA           MOV       A,R2
   \   000001   2417         ADD       A,#0x17
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2401         ADD       A,#0x1
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_658:
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V7
   \   000005   F583         MOV       DPH,A
   \   000007   E4           CLR       A
   \   000008   F0           MOVX      @DPTR,A
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   EA           MOV       A,R2
   \   000001   2413         ADD       A,#0x13
   \   000003   F582         MOV       DPL,A
   \   000005   E4           CLR       A
   \   000006   3B           ADDC      A,R3
   \   000007   F583         MOV       DPH,A
   \   000009   22           RET
   2378          
   2379          /*********************************************************************
   2380           * @fn          ZDO_ProcessParentAnnceRsp
   2381           *
   2382           * @brief       This function processes a Parent annouce response message.
   2383           *
   2384           * @param       inMsg - incoming message
   2385           *
   2386           * @return      none
   2387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2388          void ZDO_ProcessParentAnnceRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessParentAnnceRsp:
   2389          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2390            ZDO_ParentAnnce_t *parentAnnce;
   2391            uint8 x;
   2392            uint32 localAge;
   2393          
   2394            // Parse incoming message, memory is allocated by the parse function,
   2395            // it should be free after processing the message
   2396            parentAnnce = ZDO_ParseParentAnnce( inMsg );
   \   00000A                ; Setup parameters for call to function ZDO_ParseParentAnnce
   \   00000A   12....       LCALL     `??ZDO_ParseParentAnnce::?relay`; Banked call to: ZDO_ParseParentAnnce
   \   00000D   8A..         MOV       ?V6,R2
   \   00000F   8B..         MOV       ?V7,R3
   2397          
   2398            if ( parentAnnce != NULL )
   \   000011   EA           MOV       A,R2
   \   000012   45..         ORL       A,?V7
   \   000014   7003         JNZ       $+5
   \   000016   02....       LJMP      ??ZDO_ProcessParentAnnceRsp_0 & 0xFFFF
   2399            {
   2400              for ( x = 0; x < parentAnnce->numOfChildren; x++ )
   \   000019   7E00         MOV       R6,#0x0
   \   00001B   8073         SJMP      ??ZDO_ProcessParentAnnceRsp_1
   2401              {
   2402                associated_devices_t *dev_ptr;
   2403                localAge = 0xFFFFFFFF;
   \                     ??ZDO_ProcessParentAnnceRsp_2:
   \   00001D   75..FF       MOV       ?V0,#-0x1
   \   000020   75..FF       MOV       ?V1,#-0x1
   \   000023   75..FF       MOV       ?V2,#-0x1
   \   000026   75..FF       MOV       ?V3,#-0x1
   2404          
   2405                // If it's an End Device child
   2406                dev_ptr = AssocGetWithExt( parentAnnce->childInfo[x].extAddr );
   \   000029   EE           MOV       A,R6
   \   00002A   75F00C       MOV       B,#0xc
   \   00002D   A4           MUL       AB
   \   00002E   F8           MOV       R0,A
   \   00002F   A9F0         MOV       R1,B
   \   000031   E5..         MOV       A,?V6
   \   000033   28           ADD       A,R0
   \   000034   F8           MOV       R0,A
   \   000035   E5..         MOV       A,?V7
   \   000037   39           ADDC      A,R1
   \   000038   F9           MOV       R1,A
   \   000039   7402         MOV       A,#0x2
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000049   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   00004C   FA           MOV       R2,A
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   FB           MOV       R3,A
   \   000050   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   2407          
   2408                if ( dev_ptr )
   \   000053   EA           MOV       A,R2
   \   000054   4B           ORL       A,R3
   \   000055   6038         JZ        ??ZDO_ProcessParentAnnceRsp_3
   2409                {
   2410                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2411                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   000057   8A82         MOV       DPL,R2
   \   000059   8B83         MOV       DPH,R3
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F8           MOV       R0,A
   \   000061   7401         MOV       A,#0x1
   \   000063   68           XRL       A,R0
   \   000064   6005         JZ        ??ZDO_ProcessParentAnnceRsp_4
   \   000066   7402         MOV       A,#0x2
   \   000068   68           XRL       A,R0
   \   000069   7024         JNZ       ??ZDO_ProcessParentAnnceRsp_3
   2412                  {
   2413                    if ( dev_ptr->keepaliveRcv == TRUE )
   \                     ??ZDO_ProcessParentAnnceRsp_4:
   \   00006B   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   00006E   700C         JNZ       ??ZDO_ProcessParentAnnceRsp_5
   2414                    {
   2415                      localAge = dev_ptr->endDev.deviceTimeout - dev_ptr->timeoutCounter;
   \   000070   12....       LCALL     ?Subroutine122 & 0xFFFF
   2416                    }
   \                     ??CrossCallReturnLabel_205:
   \   000073   12....       LCALL     ?L_MOV_X
   \   000076   12....       LCALL     ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000079   12....       LCALL     ?L_SUB_X
   2417          
   2418                    if ( localAge >= parentAnnce->childInfo[x].age )
   \                     ??ZDO_ProcessParentAnnceRsp_5:
   \   00007C   7402         MOV       A,#0x2
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000084   12....       LCALL     ?UL_GE_X
   \   000087   5006         JNC       ??ZDO_ProcessParentAnnceRsp_3
   2419                    {
   2420                      AssocRemove( parentAnnce->childInfo[x].extAddr );
   \   000089                ; Setup parameters for call to function AssocRemove
   \   000089   12....       LCALL     ?Subroutine99 & 0xFFFF
   2421                    }
   2422                  }
   2423                }
   2424              }
   \                     ??CrossCallReturnLabel_494:
   \   00008C   12....       LCALL     `??AssocRemove::?relay`; Banked call to: AssocRemove
   \                     ??ZDO_ProcessParentAnnceRsp_3:
   \   00008F   0E           INC       R6
   \                     ??ZDO_ProcessParentAnnceRsp_1:
   \   000090   85..82       MOV       DPL,?V6
   \   000093   85..83       MOV       DPH,?V7
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F8           MOV       R0,A
   \   000098   EE           MOV       A,R6
   \   000099   C3           CLR       C
   \   00009A   98           SUBB      A,R0
   \   00009B   4080         JC        ??ZDO_ProcessParentAnnceRsp_2
   2425          
   2426              // Free memory allocated by parsing function
   2427              osal_mem_free( parentAnnce );
   \   00009D                ; Setup parameters for call to function osal_mem_free
   \   00009D   AA..         MOV       R2,?V6
   \   00009F   AB..         MOV       R3,?V7
   \   0000A1   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2428            }
   2429          }
   \                     ??ZDO_ProcessParentAnnceRsp_0:
   \   0000A4   7404         MOV       A,#0x4
   \   0000A6   02....       LJMP      ??Subroutine200_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F9           MOV       R1,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine219_0
   \   000007                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004                REQUIRE ??Subroutine220_0
   \   000004                ; // Fall through to label ??Subroutine220_0
   2430          
   2431          /*********************************************************************
   2432           * @fn          ZDO_BuildSimpleDescBuf
   2433           *
   2434           * @brief       Build a byte sequence representation of a Simple Descriptor.
   2435           *
   2436           * @param       buf  - pointer to a byte array big enough for data.
   2437           * @param       desc - SimpleDescriptionFormat_t *
   2438           *
   2439           * @return      none
   2440           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2441          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2442          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2443            byte cnt;
   2444            uint16 *ptr;
   2445          
   2446            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV       DPL,R4
   \   000007   8D83         MOV       DPH,R5
   \   000009   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   00000C   12....       LCALL     ?Subroutine24 & 0xFFFF
   2447            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_37:
   \   00000F   A3           INC       DPTR
   \   000010   A882         MOV       R0,DPL
   \   000012   A983         MOV       R1,DPH
   \   000014   A3           INC       DPTR
   \   000015   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   000018   12....       LCALL     ?Subroutine28 & 0xFFFF
   2448            *buf++ = LO_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_46:
   \   00001B   F0           MOVX      @DPTR,A
   2449            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   00001C   EC           MOV       A,R4
   \   00001D   2403         ADD       A,#0x3
   \   00001F   F8           MOV       R0,A
   \   000020   E4           CLR       A
   \   000021   3D           ADDC      A,R5
   \   000022   F9           MOV       R1,A
   \   000023   8882         MOV       DPL,R0
   \   000025   8983         MOV       DPH,R1
   \   000027   A3           INC       DPTR
   \   000028   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   12....       LCALL     ?Subroutine28 & 0xFFFF
   2450            *buf++ = LO_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_47:
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   12....       LCALL     ?Subroutine24 & 0xFFFF
   2451          
   2452            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_38:
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   C4           SWAP      A
   \   00003C   54F0         ANL       A,#0xf0
   \   00003E   8A82         MOV       DPL,R2
   \   000040   8B83         MOV       DPH,R3
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   F0           MOVX      @DPTR,A
   2453          
   2454            *buf++ = desc->AppNumInClusters;
   \   000048   EC           MOV       A,R4
   \   000049   2406         ADD       A,#0x6
   \   00004B   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   F0           MOVX      @DPTR,A
   \   000055   EA           MOV       A,R2
   \   000056   2407         ADD       A,#0x7
   \   000058   FA           MOV       R2,A
   \   000059   5001         JNC       ??ZDO_BuildSimpleDescBuf_0
   \   00005B   0B           INC       R3
   2455            ptr = desc->pAppInClusterList;
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   00005C   8C82         MOV       DPL,R4
   \   00005E   8D83         MOV       DPH,R5
   \   000060   12....       LCALL     ?Subroutine113 & 0xFFFF
   2456            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_178:
   \   000063   8018         SJMP      ??ZDO_BuildSimpleDescBuf_1
   2457            {
   2458              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   000065   12....       LCALL     ?Subroutine29 & 0xFFFF
   2459              *buf++ = LO_UINT16( *ptr );
   2460            }
   \                     ??CrossCallReturnLabel_602:
   \   000068   8882         MOV       DPL,R0
   \   00006A   8983         MOV       DPH,R1
   \   00006C   F0           MOVX      @DPTR,A
   \   00006D   EA           MOV       A,R2
   \   00006E   2402         ADD       A,#0x2
   \   000070   FA           MOV       R2,A
   \   000071   5001         JNC       ??ZDO_BuildSimpleDescBuf_3
   \   000073   0B           INC       R3
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   000074   EE           MOV       A,R6
   \   000075   2402         ADD       A,#0x2
   \   000077   FE           MOV       R6,A
   \   000078   5001         JNC       ??ZDO_BuildSimpleDescBuf_4
   \   00007A   0F           INC       R7
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   00007B   05..         INC       ?V0
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   00007D   8A82         MOV       DPL,R2
   \   00007F   8B83         MOV       DPH,R3
   \   000081   A3           INC       DPTR
   \   000082   A882         MOV       R0,DPL
   \   000084   A983         MOV       R1,DPH
   \   000086   85..82       MOV       DPL,?V2
   \   000089   85..83       MOV       DPH,?V3
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   F5..         MOV       ?V1,A
   \   00008F   E5..         MOV       A,?V0
   \   000091   C3           CLR       C
   \   000092   95..         SUBB      A,?V1
   \   000094   40CF         JC        ??ZDO_BuildSimpleDescBuf_2
   2461          
   2462            *buf++ = desc->AppNumOutClusters;
   \   000096   EC           MOV       A,R4
   \   000097   2409         ADD       A,#0x9
   \   000099   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   00009C   F0           MOVX      @DPTR,A
   \   00009D   E8           MOV       A,R0
   \   00009E   FA           MOV       R2,A
   \   00009F   E9           MOV       A,R1
   \   0000A0   FB           MOV       R3,A
   2463            ptr = desc->pAppOutClusterList;
   \   0000A1   8C82         MOV       DPL,R4
   \   0000A3   8D83         MOV       DPH,R5
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   12....       LCALL     ?Subroutine113 & 0xFFFF
   2464            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_179:
   \   0000AB   8019         SJMP      ??ZDO_BuildSimpleDescBuf_5
   2465            {
   2466              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_6:
   \   0000AD   12....       LCALL     ?Subroutine29 & 0xFFFF
   2467              *buf++ = LO_UINT16( *ptr );
   2468            }
   \                     ??CrossCallReturnLabel_603:
   \   0000B0   8A82         MOV       DPL,R2
   \   0000B2   8B83         MOV       DPH,R3
   \   0000B4   A3           INC       DPTR
   \   0000B5   F0           MOVX      @DPTR,A
   \   0000B6   EA           MOV       A,R2
   \   0000B7   2402         ADD       A,#0x2
   \   0000B9   FA           MOV       R2,A
   \   0000BA   5001         JNC       ??ZDO_BuildSimpleDescBuf_7
   \   0000BC   0B           INC       R3
   \                     ??ZDO_BuildSimpleDescBuf_7:
   \   0000BD   EE           MOV       A,R6
   \   0000BE   2402         ADD       A,#0x2
   \   0000C0   FE           MOV       R6,A
   \   0000C1   5001         JNC       ??ZDO_BuildSimpleDescBuf_8
   \   0000C3   0F           INC       R7
   \                     ??ZDO_BuildSimpleDescBuf_8:
   \   0000C4   05..         INC       ?V0
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000C6   85..82       MOV       DPL,?V2
   \   0000C9   85..83       MOV       DPH,?V3
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F8           MOV       R0,A
   \   0000CE   E5..         MOV       A,?V0
   \   0000D0   C3           CLR       C
   \   0000D1   98           SUBB      A,R0
   \   0000D2   40D9         JC        ??ZDO_BuildSimpleDescBuf_6
   2469          }
   \   0000D4   80..         SJMP      ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   00000A   75..00       MOV       ?V0,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   F5..         MOV       ?V2,A
   \   000002   E4           CLR       A
   \   000003   3D           ADDC      A,R5
   \   000004   F5..         MOV       ?V3,A
   \   000006   85..82       MOV       DPL,?V2
   \   000009   F583         MOV       DPH,A
   \   00000B                REQUIRE ??Subroutine238_0
   \   00000B                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A                REQUIRE ??Subroutine243_0
   \   00000A                ; // Fall through to label ??Subroutine243_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
   2470          
   2471          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2472          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   2473          /*********************************************************************
   2474           * @fn      ZDO_MatchEndDeviceBind()
   2475           *
   2476           * @brief
   2477           *
   2478           *   Called to match end device binding requests
   2479           *
   2480           * @param  bindReq  - binding request information
   2481           * @param  SecurityUse - Security enable/disable
   2482           *
   2483           * @return  none
   2484           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2485          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   2486          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   2487            zAddrType_t dstAddr;
   2488            uint8 sendRsp = FALSE;
   \   00000E   7E00         MOV       R6,#0x0
   2489            uint8 status;
   2490          
   2491            // Is this the first request?
   2492            if ( matchED == NULL )
   \   000010   90....       MOV       DPTR,#matchED
   \   000013   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000016   7050         JNZ       ??ZDO_MatchEndDeviceBind_0
   2493            {
   2494              // Create match info structure
   2495              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7A37         MOV       R2,#0x37
   \   00001A   7B00         MOV       R3,#0x0
   \   00001C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   90....       MOV       DPTR,#matchED
   \   000022   EA           MOV       A,R2
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   EB           MOV       A,R3
   \   000026   12....       LCALL     ?Subroutine35 & 0xFFFF
   2496              if ( matchED )
   \                     ??CrossCallReturnLabel_56:
   \   000029   6019         JZ        ??ZDO_MatchEndDeviceBind_1
   2497              {
   2498                // Clear the structure
   2499                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00002B                ; Setup parameters for call to function osal_memset
   \   00002B   7C37         MOV       R4,#0x37
   \   00002D   7D00         MOV       R5,#0x0
   \   00002F   7900         MOV       R1,#0x0
   \   000031   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2500          
   2501                // Copy the first request's information
   2502                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000034                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000034   AC..         MOV       R4,?V6
   \   000036   AD..         MOV       R5,?V7
   \   000038   90....       MOV       DPTR,#matchED
   \   00003B   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2503                {
   2504                  status = ZDP_NO_ENTRY;
   2505                  sendRsp = TRUE;
   2506                }
   2507              }
   \                     ??CrossCallReturnLabel_481:
   \   00003E   12....       LCALL     `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   000041   E9           MOV       A,R1
   \   000042   700B         JNZ       ??ZDO_MatchEndDeviceBind_2
   2508              else
   2509              {
   2510                status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   7488         MOV       A,#-0x78
   \   00004C   02....       LJMP      ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2511                sendRsp = TRUE;
   2512              }
   2513          
   2514              if ( !sendRsp )
   2515              {
   2516                // Set into the correct state
   2517                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   00004F   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_667:
   \   000052   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000055   7401         MOV       A,#0x1
   \   000057   F0           MOVX      @DPTR,A
   2518          
   2519                // Setup the timeout
   2520                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000058                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000058   7C..         MOV       R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   00005A   7D..         MOV       R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   00005C   90....       MOV       DPTR,#AIB_MaxBindingTime
   \   00005F   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2521              }
   2522            }
   \                     ??CrossCallReturnLabel_482:
   \   000062   12....       LCALL     `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   000065   02....       LJMP      ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   2523            else
   2524            {
   2525                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   000068   E0           MOVX      A,@DPTR
   \   000069   C8           XCH       A,R0
   \   00006A   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   00006D   7402         MOV       A,#0x2
   \   00006F   F0           MOVX      @DPTR,A
   2526          
   2527                // Copy the 2nd request's information
   2528                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   000070                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000070   AC..         MOV       R4,?V6
   \   000072   AD..         MOV       R5,?V7
   \   000074   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000077   12....       LCALL     `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   00007A   E9           MOV       A,R1
   \   00007B   700B         JNZ       ??ZDO_MatchEndDeviceBind_5
   2529                {
   2530                  status = ZDP_NO_ENTRY;
   \   00007D   85..82       MOV       DPL,?XSP + 0
   \   000080   85..83       MOV       DPH,?XSP + 1
   \   000083   7488         MOV       A,#-0x78
   \   000085   F0           MOVX      @DPTR,A
   2531                  sendRsp = TRUE;
   \   000086   7E01         MOV       R6,#0x1
   2532                }
   2533          
   2534                // Make a source match for ed1
   2535                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2536                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2537                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   000088                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000088   75....       MOV       ?V0,#ZDOBuildBuf & 0xff
   \   00008B   75....       MOV       ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   00008E   78..         MOV       R0,#?V0
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000093   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_668:
   \   000096   2429         ADD       A,#0x29
   \   000098   F582         MOV       DPL,A
   \   00009A   E4           CLR       A
   \   00009B   38           ADDC      A,R0
   \   00009C   F583         MOV       DPH,A
   \   00009E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000A1   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_669:
   \   0000A4   2428         ADD       A,#0x28
   \   0000A6   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_685:
   \   0000A9   2415         ADD       A,#0x15
   \   0000AB   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000AE   2414         ADD       A,#0x14
   \   0000B0   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   0000B3   F9           MOV       R1,A
   \   0000B4   12....       LCALL     `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   0000B7   7404         MOV       A,#0x4
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   E9           MOV       A,R1
   \   0000BD   F8           MOV       R0,A
   \   0000BE   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_670:
   \   0000C1   2431         ADD       A,#0x31
   \   0000C3   12....       LCALL     ?Subroutine21 & 0xFFFF
   2538                if ( matchED->ed1numMatched )
   \                     ??CrossCallReturnLabel_516:
   \   0000C6   2431         ADD       A,#0x31
   \   0000C8   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   0000CB   F8           MOV       R0,A
   \   0000CC   75..00       MOV       ?V2,#0x0
   \   0000CF   6034         JZ        ??ZDO_MatchEndDeviceBind_6
   2539                {
   2540                  // Save the match list
   2541                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000D1                ; Setup parameters for call to function osal_mem_alloc
   \   0000D1   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   0000D4   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000D7   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_671:
   \   0000DA   2432         ADD       A,#0x32
   \   0000DC   F582         MOV       DPL,A
   \   0000DE   E4           CLR       A
   \   0000DF   38           ADDC      A,R0
   \   0000E0   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   2542                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_534:
   \   0000E3   6015         JZ        ??ZDO_MatchEndDeviceBind_7
   2543                  {
   2544                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000E5                ; Setup parameters for call to function osal_memcpy
   \   0000E5   78..         MOV       R0,#?V0
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000EA   12....       LCALL     ?Subroutine56 & 0xFFFF
   2545                  }
   \                     ??CrossCallReturnLabel_94:
   \   0000ED   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   0000F0   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F3   7403         MOV       A,#0x3
   \   0000F5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F8   800B         SJMP      ??ZDO_MatchEndDeviceBind_6
   2546                  else
   2547                  {
   2548                    // Allocation error, stop
   2549                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   0000FA   85..82       MOV       DPL,?XSP + 0
   \   0000FD   85..83       MOV       DPH,?XSP + 1
   \   000100   7488         MOV       A,#-0x78
   \   000102   F0           MOVX      @DPTR,A
   2550                    sendRsp = TRUE;
   \   000103   7E01         MOV       R6,#0x1
   2551                  }
   2552                }
   2553          
   2554                // Make a source match for ed2
   2555                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2556                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2557                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   000105                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000105   75....       MOV       ?V4,#ZDOBuildBuf & 0xff
   \   000108   75....       MOV       ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   00010B   78..         MOV       R0,#?V4
   \   00010D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000110   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_672:
   \   000113   2412         ADD       A,#0x12
   \   000115   F582         MOV       DPL,A
   \   000117   E4           CLR       A
   \   000118   38           ADDC      A,R0
   \   000119   F583         MOV       DPH,A
   \   00011B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00011E   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_673:
   \   000121   2411         ADD       A,#0x11
   \   000123   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_686:
   \   000126   242C         ADD       A,#0x2c
   \   000128   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00012B   242B         ADD       A,#0x2b
   \   00012D   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000130   F9           MOV       R1,A
   \   000131   12....       LCALL     `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   000134   7404         MOV       A,#0x4
   \   000136   12....       LCALL     ?DEALLOC_XSTACK8
   \   000139   E9           MOV       A,R1
   \   00013A   F8           MOV       R0,A
   \   00013B   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_674:
   \   00013E   2434         ADD       A,#0x34
   \   000140   12....       LCALL     ?Subroutine21 & 0xFFFF
   2558                if ( matchED->ed2numMatched )
   \                     ??CrossCallReturnLabel_517:
   \   000143   2434         ADD       A,#0x34
   \   000145   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000148   6027         JZ        ??ZDO_MatchEndDeviceBind_8
   2559                {
   2560                  // Save the match list
   2561                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   00014A                ; Setup parameters for call to function osal_mem_alloc
   \   00014A   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00014D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000150   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_675:
   \   000153   2435         ADD       A,#0x35
   \   000155   F582         MOV       DPL,A
   \   000157   E4           CLR       A
   \   000158   38           ADDC      A,R0
   \   000159   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   2562                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_535:
   \   00015C   602E         JZ        ??ZDO_MatchEndDeviceBind_9
   2563                  {
   2564                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   00015E                ; Setup parameters for call to function osal_memcpy
   \   00015E   78..         MOV       R0,#?V0
   \   000160   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000163   12....       LCALL     ?Subroutine57 & 0xFFFF
   2565                  }
   \                     ??CrossCallReturnLabel_506:
   \   000166   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   000169   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00016C   7403         MOV       A,#0x3
   \   00016E   12....       LCALL     ?DEALLOC_XSTACK8
   2566                  else
   2567                  {
   2568                    // Allocation error, stop
   2569                    status = ZDP_NO_ENTRY;
   2570                    sendRsp = TRUE;
   2571                  }
   2572                }
   2573          
   2574                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   000171   EE           MOV       A,R6
   \   000172   A2E0         MOV       C,0xE0 /* A   */.0
   \   000174   401F         JC        ??ZDO_MatchEndDeviceBind_10
   \   000176   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000179   7005         JNZ       ??ZDO_MatchEndDeviceBind_11
   \   00017B   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   00017E   6015         JZ        ??ZDO_MatchEndDeviceBind_10
   2575                {
   2576                  // Do the first unbind/bind state
   2577                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   000180                ; Setup parameters for call to function ZDMatchSendState
   \   000180   7B00         MOV       R3,#0x0
   \   000182   7A00         MOV       R2,#0x0
   \   000184   7900         MOV       R1,#0x0
   \   000186   12....       LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2578                }
   2579                else
   2580                {
   2581                  status = ZDP_NO_MATCH;
   2582                  sendRsp = TRUE;
   2583                }
   2584            }
   2585          
   2586            if ( sendRsp )
   \   000189   02....       LJMP      ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   00018C   85..82       MOV       DPL,?XSP + 0
   \   00018F   85..83       MOV       DPH,?XSP + 1
   \   000192   7488         MOV       A,#-0x78
   \   000194   F0           MOVX      @DPTR,A
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   000195   85..82       MOV       DPL,?XSP + 0
   \   000198   85..83       MOV       DPH,?XSP + 1
   \   00019B   7486         MOV       A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   00019D   F0           MOVX      @DPTR,A
   2587            {
   2588              // send response to this requester
   2589              dstAddr.addrMode = Addr16Bit;
   \   00019E   7409         MOV       A,#0x9
   \   0001A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A3   7402         MOV       A,#0x2
   \   0001A5   12....       LCALL     ?Subroutine46 & 0xFFFF
   2590              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \                     ??CrossCallReturnLabel_78:
   \   0001A8   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   0001AB   7401         MOV       A,#0x1
   \   0001AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B0   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   2591              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_418:
   \   0001B3                ; Setup parameters for call to function ZDP_SendData
   \   0001B3   85..82       MOV       DPL,?V6
   \   0001B6   85..83       MOV       DPH,?V7
   \   0001B9   A3           INC       DPTR
   \   0001BA   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   0001BD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C0   7401         MOV       A,#0x1
   \   0001C2   12....       LCALL     ?XSTACK_DISP100_8
   \   0001C5   88..         MOV       ?V0,R0
   \   0001C7   89..         MOV       ?V1,R1
   \   0001C9   78..         MOV       R0,#?V0
   \   0001CB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001CE   75..20       MOV       ?V0,#0x20
   \   0001D1   75..80       MOV       ?V1,#-0x80
   \   0001D4   78..         MOV       R0,#?V0
   \   0001D6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D9   7901         MOV       R1,#0x1
   \   0001DB   7406         MOV       A,#0x6
   \   0001DD   12....       LCALL     ?XSTACK_DISP102_8
   \   0001E0   AA..         MOV       R2,?V6
   \   0001E2   AB..         MOV       R3,?V7
   \   0001E4   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0001E7   7405         MOV       A,#0x5
   \   0001E9   12....       LCALL     ?DEALLOC_XSTACK8
   2592          
   2593              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001EC   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0001EF   7044         JNZ       ??ZDO_MatchEndDeviceBind_12
   2594              {
   2595                // send response to first requester
   2596                dstAddr.addrMode = Addr16Bit;
   \   0001F1   7409         MOV       A,#0x9
   \   0001F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F6   7402         MOV       A,#0x2
   \   0001F8   F0           MOVX      @DPTR,A
   2597                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \   0001F9   12....       LCALL     ?Subroutine53 & 0xFFFF
   2598                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2599              }
   \                     ??CrossCallReturnLabel_509:
   \   0001FC   7401         MOV       A,#0x1
   \   0001FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000201   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000204   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000207   7401         MOV       A,#0x1
   \   000209   12....       LCALL     ?XSTACK_DISP100_8
   \   00020C   88..         MOV       ?V0,R0
   \   00020E   89..         MOV       ?V1,R1
   \   000210   78..         MOV       R0,#?V0
   \   000212   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000215   75..20       MOV       ?V0,#0x20
   \   000218   75..80       MOV       ?V1,#-0x80
   \   00021B   78..         MOV       R0,#?V0
   \   00021D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000220   7901         MOV       R1,#0x1
   \   000222   7406         MOV       A,#0x6
   \   000224   12....       LCALL     ?XSTACK_DISP102_8
   \   000227   90....       MOV       DPTR,#matchED
   \   00022A   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   00022D   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000230   7405         MOV       A,#0x5
   \   000232   12....       LCALL     ?DEALLOC_XSTACK8
   2600          
   2601              // Process ended - release memory used
   2602              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   000235                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000235   12....       LCALL     `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2603            }
   2604          }
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   000238   740A         MOV       A,#0xa
   \   00023A   02....       LJMP      ??Subroutine200_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   242E         ADD       A,#0x2e
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000007   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_692:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine227_0
   \   000003                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine228_0
   \   000003                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_693:
   \   000003   2434         ADD       A,#0x34
   \   000005   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine229_0
   \   000003                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006                REQUIRE ??Subroutine230_0
   \   000006                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   E9           MOV       A,R1
   \   000001                REQUIRE ??Subroutine231_0
   \   000001                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   90....       MOV       DPTR,#matchED
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F8           MOV       R0,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   F583         MOV       DPH,A
   \   000002   EA           MOV       A,R2
   \   000003   F0           MOVX      @DPTR,A
   \   000004   A3           INC       DPTR
   \   000005   EB           MOV       A,R3
   \   000006   F0           MOVX      @DPTR,A
   \   000007   EA           MOV       A,R2
   \   000008   4B           ORL       A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   E0           MOVX      A,@DPTR
   \   000004   2417         ADD       A,#0x17
   \   000006   FA           MOV       R2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   3400         ADDC      A,#0x0
   \   00000B   FB           MOV       R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_691:
   \   000003   242E         ADD       A,#0x2e
   \   000005   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   000008   6402         XRL       A,#0x2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_690:
   \   000003   2431         ADD       A,#0x31
   \   000005   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   49           ORL       A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   000006   F583         MOV       DPH,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   78..         MOV       R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   000003   FC           MOV       R4,A
   \   000004                REQUIRE ??Subroutine255_0
   \   000004                ; // Fall through to label ??Subroutine255_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine255_0:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003                REQUIRE ??Subroutine256_0
   \   000003                ; // Fall through to label ??Subroutine256_0
   2605          #endif
   2606          
   2607          /*********************************************************************
   2608           * @fn      ZDO_RemoveMatchMemory()
   2609           *
   2610           * @brief   Called to clear the memory used for the end device bind.
   2611           *
   2612           * @param  none
   2613           *
   2614           * @return  none
   2615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2616          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2617          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2618            if ( matchED != NULL )
   \   000004   90....       MOV       DPTR,#matchED
   \   000007   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   00000A   605D         JZ        ??ZDO_RemoveMatchMemory_0
   2619            {
   2620              if ( matchED->ed2Matched != NULL )
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   C8           XCH       A,R0
   \   00000E   2435         ADD       A,#0x35
   \   000010   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000013   6003         JZ        ??ZDO_RemoveMatchMemory_1
   2621              {
   2622                osal_mem_free( matchED->ed2Matched );
   \   000015                ; Setup parameters for call to function osal_mem_free
   \   000015   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2623              }
   2624              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_1:
   \   000018   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_676:
   \   00001B   2432         ADD       A,#0x32
   \   00001D   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000020   6003         JZ        ??ZDO_RemoveMatchMemory_2
   2625              {
   2626                osal_mem_free( matchED->ed1Matched );
   \   000022                ; Setup parameters for call to function osal_mem_free
   \   000022   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2627              }
   2628              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_2:
   \   000025   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_677:
   \   000028   2412         ADD       A,#0x12
   \   00002A   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   00002D   6003         JZ        ??ZDO_RemoveMatchMemory_3
   2629              {
   2630                osal_mem_free( matchED->ed1.inClusters );
   \   00002F                ; Setup parameters for call to function osal_mem_free
   \   00002F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2631              }
   2632              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   000032   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_678:
   \   000035   2415         ADD       A,#0x15
   \   000037   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   00003A   6003         JZ        ??ZDO_RemoveMatchMemory_4
   2633              {
   2634                osal_mem_free( matchED->ed1.outClusters );
   \   00003C                ; Setup parameters for call to function osal_mem_free
   \   00003C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2635              }
   2636              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   00003F   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_679:
   \   000042   2429         ADD       A,#0x29
   \   000044   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000047   6003         JZ        ??ZDO_RemoveMatchMemory_5
   2637              {
   2638                osal_mem_free( matchED->ed2.inClusters );
   \   000049                ; Setup parameters for call to function osal_mem_free
   \   000049   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2639              }
   2640              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   00004C   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_680:
   \   00004F   242C         ADD       A,#0x2c
   \   000051   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000054   6003         JZ        ??ZDO_RemoveMatchMemory_6
   2641              {
   2642                osal_mem_free( matchED->ed2.outClusters );
   \   000056                ; Setup parameters for call to function osal_mem_free
   \   000056   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2643              }
   2644          
   2645              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_6:
   \   000059                ; Setup parameters for call to function osal_mem_free
   \   000059   90....       MOV       DPTR,#matchED
   \   00005C   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   00005F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2646              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \   000062   90....       MOV       DPTR,#matchED
   \   000065   E4           CLR       A
   \   000066   F0           MOVX      @DPTR,A
   \   000067   A3           INC       DPTR
   \   000068   F0           MOVX      @DPTR,A
   2647            }
   2648          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   000069   02....       LJMP      ?Subroutine0 & 0xFFFF
   2649          
   2650          /*********************************************************************
   2651           * @fn      ZDO_CopyMatchInfo()
   2652           *
   2653           * @brief   Called to copy memory used for the end device bind.
   2654           *
   2655           * @param  srcReq - source information
   2656           * @param  dstReq - destination location
   2657           *
   2658           * @return  TRUE if copy was successful.
   2659           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V5
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008                REQUIRE ??Subroutine223_0
   \   000008                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2660          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2661          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   2662            uint8 allOK = TRUE;
   \   00000D   7E01         MOV       R6,#0x1
   2663          
   2664            // Copy bind information into the match info structure
   2665            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   00000F                ; Setup parameters for call to function osal_memcpy
   \   00000F   8C..         MOV       ?V0,R4
   \   000011   8D..         MOV       ?V1,R5
   \   000013   75..00       MOV       ?V2,#0x0
   \   000016   78..         MOV       R0,#?V0
   \   000018   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00001B   7C17         MOV       R4,#0x17
   \   00001D   7D00         MOV       R5,#0x0
   \   00001F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000022   7403         MOV       A,#0x3
   \   000024   12....       LCALL     ?DEALLOC_XSTACK8
   \   000027   E5..         MOV       A,?V6
   \   000029   2412         ADD       A,#0x12
   \   00002B   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00002E   E5..         MOV       A,?V6
   \   000030   2415         ADD       A,#0x15
   \   000032   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000035   E5..         MOV       A,?V4
   \   000037   2411         ADD       A,#0x11
   \   000039   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   00003C   602C         JZ        ??ZDO_CopyMatchInfo_0
   2666          
   2667            // Initialize the destination cluster pointers
   2668            destReq->inClusters = NULL;
   2669            destReq->outClusters = NULL;
   2670          
   2671            // Copy input cluster IDs
   2672            if ( srcReq->numInClusters )
   2673            {
   2674              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   00003E                ; Setup parameters for call to function osal_mem_alloc
   \   00003E   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000041   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000044   E5..         MOV       A,?V6
   \   000046   2412         ADD       A,#0x12
   \   000048   12....       LCALL     ?Subroutine26 & 0xFFFF
   2675              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_532:
   \   00004B   601B         JZ        ??ZDO_CopyMatchInfo_1
   2676              {
   2677                // Copy the clusters
   2678                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2679                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   00004D                ; Setup parameters for call to function osal_memcpy
   \   00004D   E5..         MOV       A,?V4
   \   00004F   2412         ADD       A,#0x12
   \   000051   12....       LCALL     ?Subroutine71 & 0xFFFF
   2680              }
   \                     ??CrossCallReturnLabel_527:
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000057   E5..         MOV       A,?V4
   \   000059   2411         ADD       A,#0x11
   \   00005B   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   00005E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000061   7403         MOV       A,#0x3
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
   \   000066   8002         SJMP      ??ZDO_CopyMatchInfo_0
   2681              else
   2682              {
   2683                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   000068   7E00         MOV       R6,#0x0
   \                     ??ZDO_CopyMatchInfo_0:
   \   00006A   E5..         MOV       A,?V4
   \   00006C   2414         ADD       A,#0x14
   2684              }
   2685            }
   \   00006E   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   000071   6028         JZ        ??ZDO_CopyMatchInfo_2
   2686          
   2687            // Copy output cluster IDs
   2688            if ( srcReq->numOutClusters )
   2689            {
   2690              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000073                ; Setup parameters for call to function osal_mem_alloc
   \   000073   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000076   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000079   E5..         MOV       A,?V6
   \   00007B   2415         ADD       A,#0x15
   \   00007D   12....       LCALL     ?Subroutine26 & 0xFFFF
   2691              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_533:
   \   000080   6045         JZ        ??ZDO_CopyMatchInfo_3
   2692              {
   2693                // Copy the clusters
   2694                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2695                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000082                ; Setup parameters for call to function osal_memcpy
   \   000082   E5..         MOV       A,?V4
   \   000084   2415         ADD       A,#0x15
   \   000086   12....       LCALL     ?Subroutine71 & 0xFFFF
   2696              }
   \                     ??CrossCallReturnLabel_528:
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008C   E5..         MOV       A,?V4
   \   00008E   2414         ADD       A,#0x14
   \   000090   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   000093   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000096   7403         MOV       A,#0x3
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
   2697              else
   2698              {
   2699                allOK = FALSE;
   2700              }
   2701            }
   2702          
   2703            if ( allOK == FALSE )
   \                     ??ZDO_CopyMatchInfo_2:
   \   00009B   EE           MOV       A,R6
   \   00009C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00009E   4022         JC        ??ZDO_CopyMatchInfo_4
   2704            {
   2705              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_5:
   \   0000A0   E5..         MOV       A,?V6
   \   0000A2   2412         ADD       A,#0x12
   \   0000A4   F582         MOV       DPL,A
   \   0000A6   E4           CLR       A
   \   0000A7   35..         ADDC      A,?V7
   \   0000A9   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   0000AC   6003         JZ        ??ZDO_CopyMatchInfo_6
   2706              {
   2707                osal_mem_free( destReq->inClusters );
   \   0000AE                ; Setup parameters for call to function osal_mem_free
   \   0000AE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2708              }
   2709              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_6:
   \   0000B1   E5..         MOV       A,?V6
   \   0000B3   2415         ADD       A,#0x15
   \   0000B5   F582         MOV       DPL,A
   \   0000B7   E4           CLR       A
   \   0000B8   35..         ADDC      A,?V7
   \   0000BA   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   0000BD   6003         JZ        ??ZDO_CopyMatchInfo_4
   2710              {
   2711                osal_mem_free( destReq->outClusters );
   \   0000BF                ; Setup parameters for call to function osal_mem_free
   \   0000BF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2712              }
   2713            }
   2714          
   2715            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_4:
   \   0000C2   EE           MOV       A,R6
   \   0000C3   F9           MOV       R1,A
   \   0000C4   02....       LJMP      ??Subroutine201_0 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_3:
   \   0000C7   7E00         MOV       R6,#0x0
   \   0000C9   80D5         SJMP      ??ZDO_CopyMatchInfo_5
   2716          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V5
   \   000005   F583         MOV       DPH,A
   \   000007                REQUIRE ??Subroutine233_0
   \   000007                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V7
   \   000005                REQUIRE ??Subroutine234_0
   \   000005                ; // Fall through to label ??Subroutine234_0
   2717          
   2718          /*********************************************************************
   2719           * @fn      ZDMatchSendState()
   2720           *
   2721           * @brief   State machine for the End device match message algorithm.
   2722           *
   2723           * @param  reason - state of algoritm
   2724           * @param  status - initial message status
   2725           * @param  TransSeq - next transaction sequence number
   2726           *
   2727           * @return  FALSE if error and we are not currently matching, TRUE
   2728           *          if success.
   2729           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2730          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2731          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   EB           MOV       A,R3
   \   000017   F0           MOVX      @DPTR,A
   \   000018   89..         MOV       ?V2,R1
   2732            uint8 *dstIEEEAddr = NULL;
   \   00001A   75..00       MOV       ?V4,#0x0
   \   00001D   75..00       MOV       ?V5,#0x0
   2733            uint8 dstEP = 0xFF;
   \   000020   75..FF       MOV       ?V3,#-0x1
   2734            zAddrType_t dstAddr;
   2735            zAddrType_t destinationAddr;
   2736            uint16 msgType;
   2737            uint16 clusterID = 0xFFFF;
   \   000023   7EFF         MOV       R6,#-0x1
   \   000025   7FFF         MOV       R7,#-0x1
   2738            ZDEndDeviceBind_t *ed = NULL;
   \   000027   75..00       MOV       ?V6,#0x0
   \   00002A   75..00       MOV       ?V7,#0x0
   2739            uint8 rspStatus = ZDP_SUCCESS;
   \   00002D   85..82       MOV       DPL,?XSP + 0
   \   000030   85..83       MOV       DPH,?XSP + 1
   \   000033   E4           CLR       A
   \   000034   12....       LCALL     ?Subroutine35 & 0xFFFF
   2740          
   2741            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_57:
   \   000037   6020         JZ        ??ZDMatchSendState_0
   2742            {
   2743              return ( FALSE );
   2744            }
   2745          
   2746            // Check sequence number
   2747            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \   000039   7403         MOV       A,#0x3
   \   00003B   65..         XRL       A,?V2
   \   00003D   6006         JZ        ??ZDMatchSendState_1
   \   00003F   7402         MOV       A,#0x2
   \   000041   65..         XRL       A,?V2
   \   000043   7019         JNZ       ??ZDMatchSendState_2
   2748            {
   2749              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_1:
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?XSTACK_DISP0_8
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   90....       MOV       DPTR,#matchED + 1
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   C8           XCH       A,R0
   \   000051   2430         ADD       A,#0x30
   \   000053   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000056   69           XRL       A,R1
   \   000057   6005         JZ        ??ZDMatchSendState_2
   2750              {
   2751                return( FALSE ); // ignore the message
   \                     ??ZDMatchSendState_0:
   \   000059   7900         MOV       R1,#0x0
   \   00005B   02....       LJMP      ??ZDMatchSendState_3 & 0xFFFF
   2752              }
   2753            }
   2754          
   2755            // turn off timer
   2756            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_2:
   \   00005E                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00005E   7C..         MOV       R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000060   7D..         MOV       R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000062   7A00         MOV       R2,#0x0
   \   000064   7B00         MOV       R3,#0x0
   \   000066   12....       LCALL     `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   2757          
   2758            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   000069   7401         MOV       A,#0x1
   \   00006B   65..         XRL       A,?V2
   \   00006D   700A         JNZ       ??ZDMatchSendState_4
   2759            {
   2760              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   00006F   85..82       MOV       DPL,?XSP + 0
   \   000072   85..83       MOV       DPH,?XSP + 1
   \   000075   7485         MOV       A,#-0x7b
   \   000077   8045         SJMP      ??ZDMatchSendState_5
   2761            }
   2762          
   2763            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_4:
   \   000079   E5..         MOV       A,?V2
   \   00007B   6006         JZ        ??ZDMatchSendState_6
   \   00007D   7403         MOV       A,#0x3
   \   00007F   65..         XRL       A,?V2
   \   000081   701D         JNZ       ??ZDMatchSendState_7
   2764            {
   2765              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_6:
   \   000083   90....       MOV       DPTR,#matchED
   \   000086   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000089   F0           MOVX      @DPTR,A
   2766          
   2767              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   00008A   7403         MOV       A,#0x3
   \   00008C   65..         XRL       A,?V2
   \   00008E   7031         JNZ       ??ZDMatchSendState_8
   \   000090   7401         MOV       A,#0x1
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   E0           MOVX      A,@DPTR
   \   000096   602D         JZ        ??ZDMatchSendState_9
   2768              {
   2769                rspStatus = status;
   \   000098   85..82       MOV       DPL,?XSP + 0
   \   00009B   85..83       MOV       DPH,?XSP + 1
   \   00009E   801E         SJMP      ??ZDMatchSendState_5
   2770              }
   2771            }
   2772            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_7:
   \   0000A0   7402         MOV       A,#0x2
   \   0000A2   65..         XRL       A,?V2
   \   0000A4   701F         JNZ       ??ZDMatchSendState_9
   2773            {
   2774              if ( status == ZDP_SUCCESS )
   \   0000A6   7401         MOV       A,#0x1
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   E0           MOVX      A,@DPTR
   \   0000AC   90....       MOV       DPTR,#matchED
   \   0000AF   7005         JNZ       ??ZDMatchSendState_10
   2775              {
   2776                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   0000B1   12....       LCALL     ?Subroutine70 & 0xFFFF
   2777              }
   \                     ??CrossCallReturnLabel_121:
   \   0000B4   8008         SJMP      ??ZDMatchSendState_5
   2778              else
   2779              {
   2780                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_10:
   \   0000B6   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   2781              }
   2782            }
   \                     ??CrossCallReturnLabel_665:
   \   0000B9   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   0000BC   7402         MOV       A,#0x2
   \                     ??ZDMatchSendState_5:
   \   0000BE   F0           MOVX      @DPTR,A
   \   0000BF   8004         SJMP      ??ZDMatchSendState_9
   2783          
   2784            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_8:
   \   0000C1   E5..         MOV       A,?V2
   \   0000C3   601D         JZ        ??ZDMatchSendState_11
   \                     ??ZDMatchSendState_9:
   \   0000C5   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000C8   7018         JNZ       ??ZDMatchSendState_11
   2785            {
   2786              // Move to the next cluster ID
   2787              if ( matchED->ed1numMatched )
   \   0000CA   90....       MOV       DPTR,#matchED
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   2431         ADD       A,#0x31
   \   0000D0   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000D3   700B         JNZ       ??ZDMatchSendState_12
   2788              {
   2789                matchED->ed1numMatched--;
   2790              }
   2791              else if ( matchED->ed2numMatched )
   \   0000D5   90....       MOV       DPTR,#matchED
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   2434         ADD       A,#0x34
   \   0000DB   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0000DE   6002         JZ        ??ZDMatchSendState_11
   2792              {
   2793                matchED->ed2numMatched--;
   \                     ??ZDMatchSendState_12:
   \   0000E0   2E           ADD       A,R6
   \   0000E1   F0           MOVX      @DPTR,A
   2794              }
   2795            }
   2796          
   2797            // What message do we send now
   2798            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_11:
   \   0000E2   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000E5   F8           MOV       R0,A
   \   0000E6   90....       MOV       DPTR,#matchED
   \   0000E9   601E         JZ        ??ZDMatchSendState_13
   2799            {
   2800              ed = &(matchED->ed1);
   \   0000EB   E0           MOVX      A,@DPTR
   \   0000EC   F5..         MOV       ?V6,A
   \   0000EE   A3           INC       DPTR
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   12....       LCALL     ?Subroutine116 & 0xFFFF
   2801              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \                     ??CrossCallReturnLabel_186:
   \   0000F3   2432         ADD       A,#0x32
   \   0000F5   12....       LCALL     ?Subroutine54 & 0xFFFF
   2802              dstIEEEAddr = matchED->ed2.ieeeAddr;
   \                     ??CrossCallReturnLabel_89:
   \   0000F8   241D         ADD       A,#0x1d
   \   0000FA   F5..         MOV       ?V4,A
   \   0000FC   A3           INC       DPTR
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   3400         ADDC      A,#0x0
   \   000100   F5..         MOV       ?V5,A
   2803              dstEP = matchED->ed2.endpoint;
   \   000102   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   2804            }
   \                     ??CrossCallReturnLabel_681:
   \   000105   2425         ADD       A,#0x25
   \   000107   8029         SJMP      ??ZDMatchSendState_14
   2805            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_13:
   \   000109   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   00010C   F8           MOV       R0,A
   \   00010D   6028         JZ        ??ZDMatchSendState_15
   2806            {
   2807              ed = &(matchED->ed2);
   \   00010F   90....       MOV       DPTR,#matchED
   \   000112   E0           MOVX      A,@DPTR
   \   000113   2417         ADD       A,#0x17
   \   000115   F5..         MOV       ?V6,A
   \   000117   A3           INC       DPTR
   \   000118   E0           MOVX      A,@DPTR
   \   000119   3400         ADDC      A,#0x0
   \   00011B   12....       LCALL     ?Subroutine116 & 0xFFFF
   2808              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \                     ??CrossCallReturnLabel_187:
   \   00011E   2435         ADD       A,#0x35
   \   000120   12....       LCALL     ?Subroutine54 & 0xFFFF
   2809              dstIEEEAddr = matchED->ed1.ieeeAddr;
   \                     ??CrossCallReturnLabel_90:
   \   000123   2406         ADD       A,#0x6
   \   000125   F5..         MOV       ?V4,A
   \   000127   A3           INC       DPTR
   \   000128   E0           MOVX      A,@DPTR
   \   000129   3400         ADDC      A,#0x0
   \   00012B   F5..         MOV       ?V5,A
   2810              dstEP = matchED->ed1.endpoint;
   \   00012D   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   2811            }
   \                     ??CrossCallReturnLabel_682:
   \   000130   240E         ADD       A,#0xe
   \                     ??ZDMatchSendState_14:
   \   000132   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000135   F5..         MOV       ?V3,A
   2812          
   2813            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_15:
   \   000137   740B         MOV       A,#0xb
   \   000139   12....       LCALL     ?XSTACK_DISP0_8
   \   00013C   7402         MOV       A,#0x2
   \   00013E   12....       LCALL     ?Subroutine14 & 0xFFFF
   2814          
   2815            // Send the next message
   2816            if ( (rspStatus == ZDP_SUCCESS) && ed )
   \                     ??CrossCallReturnLabel_12:
   \   000141   6003         JZ        $+5
   \   000143   02....       LJMP      ??ZDMatchSendState_16 & 0xFFFF
   \   000146   E5..         MOV       A,?V6
   \   000148   45..         ORL       A,?V7
   \   00014A   7003         JNZ       $+5
   \   00014C   02....       LJMP      ??ZDMatchSendState_16 & 0xFFFF
   2817            {
   2818              // Send unbind/bind message to source
   2819              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   00014F   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000152   7005         JNZ       ??ZDMatchSendState_17
   2820              {
   2821                msgType = Unbind_req;
   \   000154   75..22       MOV       ?V0,#0x22
   \   000157   8003         SJMP      ??ZDMatchSendState_18
   2822              }
   2823              else
   2824              {
   2825                msgType = Bind_req;
   \                     ??ZDMatchSendState_17:
   \   000159   75..21       MOV       ?V0,#0x21
   \                     ??ZDMatchSendState_18:
   \   00015C   75..00       MOV       ?V1,#0x0
   2826              }
   2827          
   2828              dstAddr.addr.shortAddr = ed->srcAddr;
   \   00015F   85..82       MOV       DPL,?V6
   \   000162   85..83       MOV       DPH,?V7
   \   000165   A3           INC       DPTR
   \   000166   A3           INC       DPTR
   \   000167   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00016A   12....       LCALL     ?XSTACK_DISP0_8
   \   00016D   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   2829          
   2830              // Save off the transaction sequence number
   2831              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_419:
   \   000170   90....       MOV       DPTR,#ZDP_TransID
   \   000173   E0           MOVX      A,@DPTR
   \   000174   C0E0         PUSH      A
   \   000176   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_683:
   \   000179   2430         ADD       A,#0x30
   \   00017B   F582         MOV       DPL,A
   \   00017D   E4           CLR       A
   \   00017E   38           ADDC      A,R0
   \   00017F   F583         MOV       DPH,A
   \   000181   D0E0         POP       A
   \   000183   F0           MOVX      @DPTR,A
   2832          
   2833              destinationAddr.addrMode = Addr64Bit;
   \   000184   7414         MOV       A,#0x14
   \   000186   12....       LCALL     ?XSTACK_DISP0_8
   \   000189   7403         MOV       A,#0x3
   \   00018B   F0           MOVX      @DPTR,A
   2834              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   00018C                ; Setup parameters for call to function sAddrExtCpy
   \   00018C   AC..         MOV       R4,?V4
   \   00018E   AD..         MOV       R5,?V5
   \   000190   740C         MOV       A,#0xc
   \   000192   12....       LCALL     ?XSTACK_DISP101_8
   \   000195   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2835          
   2836              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2837                  &destinationAddr, dstEP, ed->SecurityUse );
   \   000198                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000198   85..82       MOV       DPL,?V6
   \   00019B   85..83       MOV       DPH,?V7
   \   00019E   A3           INC       DPTR
   \   00019F   E0           MOVX      A,@DPTR
   \   0001A0   F5..         MOV       ?V4,A
   \   0001A2   78..         MOV       R0,#?V4
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A7   78..         MOV       R0,#?V3
   \   0001A9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001AC   740E         MOV       A,#0xe
   \   0001AE   12....       LCALL     ?XSTACK_DISP100_8
   \   0001B1   88..         MOV       ?V4,R0
   \   0001B3   89..         MOV       ?V5,R1
   \   0001B5   78..         MOV       R0,#?V4
   \   0001B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BA   8E..         MOV       ?V4,R6
   \   0001BC   8F..         MOV       ?V5,R7
   \   0001BE   78..         MOV       R0,#?V4
   \   0001C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C3   E5..         MOV       A,?V6
   \   0001C5   2406         ADD       A,#0x6
   \   0001C7   F5..         MOV       ?V4,A
   \   0001C9   E4           CLR       A
   \   0001CA   35..         ADDC      A,?V7
   \   0001CC   F5..         MOV       ?V5,A
   \   0001CE   78..         MOV       R0,#?V4
   \   0001D0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D3   E5..         MOV       A,?V6
   \   0001D5   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_570:
   \   0001D8   35..         ADDC      A,?V7
   \   0001DA   F583         MOV       DPH,A
   \   0001DC   E0           MOVX      A,@DPTR
   \   0001DD   F9           MOV       R1,A
   \   0001DE   740B         MOV       A,#0xb
   \   0001E0   12....       LCALL     ?XSTACK_DISP102_8
   \   0001E3   AA..         MOV       R2,?V0
   \   0001E5   AB..         MOV       R3,?V1
   \   0001E7   12....       LCALL     `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001EA   7408         MOV       A,#0x8
   \   0001EC   12....       LCALL     ?DEALLOC_XSTACK8
   2838          
   2839              // Set timeout for response
   2840              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001EF                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001EF   7C..         MOV       R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   0001F1   7D..         MOV       R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   0001F3   90....       MOV       DPTR,#AIB_MaxBindingTime
   \   0001F6   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   2841            }
   \                     ??CrossCallReturnLabel_485:
   \   0001F9   12....       LCALL     `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   0001FC   02....       LJMP      ??ZDMatchSendState_19 & 0xFFFF
   2842            else
   2843            {
   2844              // Send the response messages to requesting devices
   2845              // send response to first requester
   2846              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_16:
   \   0001FF   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000202   7403         MOV       A,#0x3
   \   000204   12....       LCALL     ?XSTACK_DISP0_8
   \   000207   12....       LCALL     ?Subroutine11 & 0xFFFF
   2847              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_7:
   \   00020A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00020D   7401         MOV       A,#0x1
   \   00020F   12....       LCALL     ?XSTACK_DISP100_8
   \   000212   88..         MOV       ?V0,R0
   \   000214   89..         MOV       ?V1,R1
   \   000216   78..         MOV       R0,#?V0
   \   000218   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00021B   75..20       MOV       ?V0,#0x20
   \   00021E   75..80       MOV       ?V1,#-0x80
   \   000221   78..         MOV       R0,#?V0
   \   000223   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000226   7901         MOV       R1,#0x1
   \   000228   7408         MOV       A,#0x8
   \   00022A   12....       LCALL     ?XSTACK_DISP102_8
   \   00022D   90....       MOV       DPTR,#matchED
   \   000230   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   000233   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000236   7405         MOV       A,#0x5
   \   000238   12....       LCALL     ?DEALLOC_XSTACK8
   2848          
   2849              // send response to second requester
   2850              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   00023B   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00023E   704E         JNZ       ??ZDMatchSendState_20
   2851              {
   2852                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   000240   12....       LCALL     ??Subroutine255_0 & 0xFFFF
   2853                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2854              }
   \                     ??CrossCallReturnLabel_684:
   \   000243   2419         ADD       A,#0x19
   \   000245   F582         MOV       DPL,A
   \   000247   E4           CLR       A
   \   000248   38           ADDC      A,R0
   \   000249   F583         MOV       DPH,A
   \   00024B   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00024E   12....       LCALL     ?XSTACK_DISP0_8
   \   000251   E8           MOV       A,R0
   \   000252   F0           MOVX      @DPTR,A
   \   000253   A3           INC       DPTR
   \   000254   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000257   2418         ADD       A,#0x18
   \   000259   F582         MOV       DPL,A
   \   00025B   E4           CLR       A
   \   00025C   38           ADDC      A,R0
   \   00025D   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000260   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000263   7401         MOV       A,#0x1
   \   000265   12....       LCALL     ?XSTACK_DISP100_8
   \   000268   88..         MOV       ?V0,R0
   \   00026A   89..         MOV       ?V1,R1
   \   00026C   78..         MOV       R0,#?V0
   \   00026E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000271   75..20       MOV       ?V0,#0x20
   \   000274   75..80       MOV       ?V1,#-0x80
   \   000277   78..         MOV       R0,#?V0
   \   000279   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00027C   7901         MOV       R1,#0x1
   \   00027E   7408         MOV       A,#0x8
   \   000280   12....       LCALL     ?XSTACK_DISP102_8
   \   000283   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000286   12....       LCALL     `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000289   7405         MOV       A,#0x5
   \   00028B   12....       LCALL     ?DEALLOC_XSTACK8
   2855          
   2856              // Process ended - release memory used
   2857              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_20:
   \   00028E                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00028E   12....       LCALL     `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2858            }
   2859          
   2860            return ( TRUE );
   \                     ??ZDMatchSendState_19:
   \   000291   7901         MOV       R1,#0x1
   \                     ??ZDMatchSendState_3:
   \   000293   02....       LJMP      ?Subroutine4 & 0xFFFF
   2861          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   F5..         MOV       ?V7,A
   \   000002   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000005   90....       MOV       DPTR,#matchED
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   CA           XCH       A,R2
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   F9           MOV       R1,A
   \   000006   8882         MOV       DPL,R0
   \   000008   8983         MOV       DPH,R1
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   90....       MOV       DPTR,#matchED
   \   000003   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000006   E0           MOVX      A,@DPTR
   \   000007   6401         XRL       A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   12....       LCALL     ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_697:
   \   000003   12....       LCALL     ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine195:
   \   000000   242F         ADD       A,#0x2f
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   38           ADDC      A,R0
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3A           ADDC      A,R2
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   28           ADD       A,R0
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   39           ADDC      A,R1
   \   00000C   F9           MOV       R1,A
   \   00000D   E8           MOV       A,R0
   \   00000E   24FE         ADD       A,#-0x2
   \   000010   F582         MOV       DPL,A
   \   000012   E9           MOV       A,R1
   \   000013   34FF         ADDC      A,#-0x1
   \   000015   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   000018   90....       MOV       DPTR,#matchED
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET
   2862          
   2863          /*********************************************************************
   2864           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2865           *
   2866           * @brief   End device bind timeout.
   2867           *
   2868           * @param  none
   2869           *
   2870           * @return  none
   2871           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2872          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2873          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2874            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV       R3,#0x0
   \   000006   7A85         MOV       R2,#-0x7b
   \   000008   7901         MOV       R1,#0x1
   \   00000A   12....       LCALL     `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2875          }
   \   00000D   02....       LJMP      ?Subroutine0 & 0xFFFF
   2876          #endif // ZG_BUILD_COORDINATOR_TYPE
   2877          
   2878          /*********************************************************************
   2879           * ZDO MESSAGE PARSING API FUNCTIONS
   2880           */
   2881          
   2882          #ifdef ZDO_ENDDEVICEBIND_RESPONSE
   2883          /*********************************************************************
   2884           * @fn          ZDO_ParseEndDeviceBindReq
   2885           *
   2886           * @brief       This function parses the End_Device_Bind_req message.
   2887           *
   2888           *     NOTE:  The clusters lists in bindReq are allocated in this
   2889           *            function and must be freed by that calling function.
   2890           *
   2891           * @param       inMsg  - incoming message (request)
   2892           * @param       bindReq - pointer to place to parse message to
   2893           *
   2894           * @return      none
   2895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2896          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2897          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   2898            uint8 *msg;
   2899          
   2900            // Parse the message
   2901            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV       A,R2
   \   00000A   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   00000D   3B           ADDC      A,R3
   \   00000E   F583         MOV       DPH,A
   \   000010   12....       LCALL     ?Subroutine42 & 0xFFFF
   2902            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_543:
   \   000013   A3           INC       DPTR
   \   000014   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000017   8C82         MOV       DPL,R4
   \   000019   8D83         MOV       DPH,R5
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   2903            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_420:
   \   000020   EA           MOV       A,R2
   \   000021   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_571:
   \   000024   3B           ADDC      A,R3
   \   000025   F583         MOV       DPH,A
   \   000027   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   00002A   12....       LCALL     ?Subroutine32 & 0xFFFF
   2904            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_50:
   \   00002D   FE           MOV       R6,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   FF           MOV       R7,A
   2905          
   2906            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   000031   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000034   12....       LCALL     ?Subroutine15 & 0xFFFF
   2907            msg += 2;
   \                     ??CrossCallReturnLabel_554:
   \   000037   5001         JNC       ??ZDO_ParseEndDeviceBindReq_0
   \   000039   0F           INC       R7
   2908          
   2909            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   00003A                ; Setup parameters for call to function sAddrExtCpy
   \   00003A   FC           MOV       R4,A
   \   00003B   EF           MOV       A,R7
   \   00003C   FD           MOV       R5,A
   \   00003D   E5..         MOV       A,?V0
   \   00003F   2406         ADD       A,#0x6
   \   000041   FA           MOV       R2,A
   \   000042   E4           CLR       A
   \   000043   35..         ADDC      A,?V1
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2910            msg += Z_EXTADDR_LEN;
   2911          
   2912            bindReq->endpoint = *msg++;
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   A3           INC       DPTR
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   E0           MOVX      A,@DPTR
   \   000056   C0E0         PUSH      A
   \   000058   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   00005B   D0E0         POP       A
   \   00005D   12....       LCALL     ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   000060   5001         JNC       ??ZDO_ParseEndDeviceBindReq_1
   \   000062   0F           INC       R7
   2913            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   000063   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000066   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000069   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   2914            msg += 2;
   2915          
   2916            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_421:
   \   00006C   E5..         MOV       A,?V0
   \   00006E   2412         ADD       A,#0x12
   \   000070   F5..         MOV       ?V6,A
   \   000072   E4           CLR       A
   \   000073   35..         ADDC      A,?V1
   \   000075   F5..         MOV       ?V7,A
   \   000077   85..82       MOV       DPL,?V6
   \   00007A   F583         MOV       DPH,A
   \   00007C   E4           CLR       A
   \   00007D   F0           MOVX      @DPTR,A
   \   00007E   A3           INC       DPTR
   \   00007F   F0           MOVX      @DPTR,A
   \   000080   E5..         MOV       A,?V0
   \   000082   2415         ADD       A,#0x15
   \   000084   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   000087   E4           CLR       A
   \   000088   F0           MOVX      @DPTR,A
   \   000089   A3           INC       DPTR
   \   00008A   12....       LCALL     ?Subroutine48 & 0xFFFF
   2917            bindReq->outClusters = NULL;
   2918          
   2919            if ((bindReq->numInClusters = *msg++) &&
   2920                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_81:
   \   00008D   F8           MOV       R0,A
   \   00008E   E5..         MOV       A,?V0
   \   000090   2411         ADD       A,#0x11
   \   000092   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000095   F0           MOVX      @DPTR,A
   \   000096   EE           MOV       A,R6
   \   000097   2403         ADD       A,#0x3
   \   000099   FE           MOV       R6,A
   \   00009A   5001         JNC       ??ZDO_ParseEndDeviceBindReq_2
   \   00009C   0F           INC       R7
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   00009D   E8           MOV       A,R0
   \   00009E   6038         JZ        ??ZDO_ParseEndDeviceBindReq_3
   \   0000A0                ; Setup parameters for call to function osal_mem_alloc
   \   0000A0   28           ADD       A,R0
   \   0000A1   FA           MOV       R2,A
   \   0000A2   E4           CLR       A
   \   0000A3   33           RLC       A
   \   0000A4   FB           MOV       R3,A
   \   0000A5   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000A8   8A..         MOV       ?V4,R2
   \   0000AA   8B..         MOV       ?V5,R3
   \   0000AC   AC..         MOV       R4,?V4
   \   0000AE   AD..         MOV       R5,?V5
   \   0000B0   85..82       MOV       DPL,?V6
   \   0000B3   85..83       MOV       DPH,?V7
   \   0000B6   EC           MOV       A,R4
   \   0000B7   F0           MOVX      @DPTR,A
   \   0000B8   A3           INC       DPTR
   \   0000B9   ED           MOV       A,R5
   \   0000BA   F0           MOVX      @DPTR,A
   \   0000BB   EC           MOV       A,R4
   \   0000BC   4D           ORL       A,R5
   \   0000BD   6019         JZ        ??ZDO_ParseEndDeviceBindReq_3
   2921            {
   2922              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000BF                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000BF   EE           MOV       A,R6
   \   0000C0   FA           MOV       R2,A
   \   0000C1   EF           MOV       A,R7
   \   0000C2   FB           MOV       R3,A
   \   0000C3   85..82       MOV       DPL,?V2
   \   0000C6   85..83       MOV       DPH,?V3
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   F9           MOV       R1,A
   \   0000CB   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000CE   8A..         MOV       ?V2,R2
   \   0000D0   8B..         MOV       ?V3,R3
   \   0000D2   AE..         MOV       R6,?V2
   \   0000D4   AF..         MOV       R7,?V3
   \   0000D6   8008         SJMP      ??ZDO_ParseEndDeviceBindReq_4
   2923            }
   2924            else
   2925            {
   2926              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000D8   85..82       MOV       DPL,?V2
   \   0000DB   85..83       MOV       DPH,?V3
   \   0000DE   E4           CLR       A
   \   0000DF   F0           MOVX      @DPTR,A
   2927            }
   2928          
   2929            if ((bindReq->numOutClusters = *msg++) &&
   2930                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0000E0   8E82         MOV       DPL,R6
   \   0000E2   8F83         MOV       DPH,R7
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   F8           MOV       R0,A
   \   0000E6   E5..         MOV       A,?V0
   \   0000E8   2414         ADD       A,#0x14
   \   0000EA   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0000ED   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000F0   6031         JZ        ??ZDO_ParseEndDeviceBindReq_5
   \   0000F2                ; Setup parameters for call to function osal_mem_alloc
   \   0000F2   28           ADD       A,R0
   \   0000F3   FA           MOV       R2,A
   \   0000F4   E4           CLR       A
   \   0000F5   33           RLC       A
   \   0000F6   FB           MOV       R3,A
   \   0000F7   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000FA   8A..         MOV       ?V4,R2
   \   0000FC   8B..         MOV       ?V5,R3
   \   0000FE   AC..         MOV       R4,?V4
   \   000100   AD..         MOV       R5,?V5
   \   000102   E5..         MOV       A,?V0
   \   000104   2415         ADD       A,#0x15
   \   000106   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_580:
   \   000109   EC           MOV       A,R4
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B   A3           INC       DPTR
   \   00010C   ED           MOV       A,R5
   \   00010D   F0           MOVX      @DPTR,A
   \   00010E   EC           MOV       A,R4
   \   00010F   4D           ORL       A,R5
   \   000110   6011         JZ        ??ZDO_ParseEndDeviceBindReq_5
   2931            {
   2932              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   000112                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000112   EE           MOV       A,R6
   \   000113   FA           MOV       R2,A
   \   000114   EF           MOV       A,R7
   \   000115   FB           MOV       R3,A
   \   000116   85..82       MOV       DPL,?V2
   \   000119   85..83       MOV       DPH,?V3
   \   00011C   E0           MOVX      A,@DPTR
   \   00011D   F9           MOV       R1,A
   \   00011E   12....       LCALL     `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000121   8008         SJMP      ??ZDO_ParseEndDeviceBindReq_6
   2933            }
   2934            else
   2935            {
   2936              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   000123   85..82       MOV       DPL,?V2
   \   000126   85..83       MOV       DPH,?V3
   \   000129   E4           CLR       A
   \   00012A   F0           MOVX      @DPTR,A
   2937            }
   2938          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   00012B   02....       LJMP      ??Subroutine201_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   F5..         MOV       ?V2,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V1
   \   000005   F5..         MOV       ?V3,A
   \   000007   E8           MOV       A,R0
   \   000008   85..82       MOV       DPL,?V2
   \   00000B   85..83       MOV       DPH,?V3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005                REQUIRE ??Subroutine236_0
   \   000005                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine237_0
   \   000001                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2402         ADD       A,#0x2
   \   000004   FE           MOV       R6,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_633:
   \   000003   AE82         MOV       R6,DPL
   \   000005   AF83         MOV       R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   000003   F8           MOV       R0,A
   \   000004   E5..         MOV       A,?V0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine240_0
   \   000004                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EE           MOV       A,R6
   \   000002   2409         ADD       A,#0x9
   \   000004   FE           MOV       R6,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   12....       LCALL     ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_632:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
   2939          #endif
   2940          
   2941          /*********************************************************************
   2942           * @fn          ZDO_ParseBindUnbindReq
   2943           *
   2944           * @brief       This function parses the Bind_req or Unbind_req message.
   2945           *
   2946           * @param       inMsg  - incoming message (request)
   2947           * @param       pReq - place to put parsed information
   2948           *
   2949           * @return      none
   2950           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2951          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2952          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine123 & 0xFFFF
   2953            uint8 *msg;
   2954          
   2955            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_634:
   \   000008   12....       LCALL     ?Subroutine100 & 0xFFFF
   2956            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_366:
   \   00000B   FC           MOV       R4,A
   \   00000C   EF           MOV       A,R7
   \   00000D   FD           MOV       R5,A
   \   00000E   AA..         MOV       R2,?V0
   \   000010   AB..         MOV       R3,?V1
   \   000012   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2957            msg += Z_EXTADDR_LEN;
   2958            pReq->srcEndpoint = *msg++;
   \   000015   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   000018   5001         JNC       ??ZDO_ParseBindUnbindReq_0
   \   00001A   0F           INC       R7
   2959            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   00001B   12....       LCALL     ?Subroutine10 & 0xFFFF
   2960            msg += 2;
   2961            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_4:
   \   00001E   5001         JNC       ??ZDO_ParseBindUnbindReq_1
   \   000020   0F           INC       R7
   2962            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000021   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000024   7021         JNZ       ??ZDO_ParseBindUnbindReq_2
   2963            {
   2964              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   000026                ; Setup parameters for call to function sAddrExtCpy
   \   000026   EE           MOV       A,R6
   \   000027   FC           MOV       R4,A
   \   000028   EF           MOV       A,R7
   \   000029   FD           MOV       R5,A
   \   00002A   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2965              msg += Z_EXTADDR_LEN;
   2966              pReq->dstEndpoint = *msg;
   \   00002D   8E82         MOV       DPL,R6
   \   00002F   8F83         MOV       DPH,R7
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   C0E0         PUSH      A
   \   00003C   E5..         MOV       A,?V0
   \   00003E   2414         ADD       A,#0x14
   \   000040   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   2967            }
   \                     ??CrossCallReturnLabel_581:
   \   000043   D0E0         POP       A
   \   000045   8006         SJMP      ??ZDO_ParseBindUnbindReq_3
   2968            else
   2969            {
   2970              // copy group address
   2971              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   000047   12....       LCALL     ?Subroutine97 & 0xFFFF
   2972            }
   \                     ??CrossCallReturnLabel_156:
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   E9           MOV       A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   00004D   F0           MOVX      @DPTR,A
   2973          }
   \   00004E   02....       LJMP      ??Subroutine203_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   E5..         MOV       A,?V0
   \   000002   240B         ADD       A,#0xb
   \   000004   FA           MOV       R2,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V1
   \   000008   FB           MOV       R3,A
   \   000009   7403         MOV       A,#0x3
   \   00000B   68           XRL       A,R0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FC           MOV       R4,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   EC           MOV       A,R4
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C                REQUIRE ??Subroutine245_0
   \   00000C                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   000008   F8           MOV       R0,A
   \   000009   E5..         MOV       A,?V0
   \   00000B   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_640:
   \   00000E   35..         ADDC      A,?V1
   \   000010   F583         MOV       DPH,A
   \   000012   E8           MOV       A,R0
   \   000013   F0           MOVX      @DPTR,A
   \   000014   EE           MOV       A,R6
   \   000015   2403         ADD       A,#0x3
   \   000017   FE           MOV       R6,A
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003                REQUIRE ??Subroutine250_0
   \   000003                ; // Fall through to label ??Subroutine250_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   8C..         MOV       ?V0,R4
   \   000002   8D..         MOV       ?V1,R5
   \   000004                REQUIRE ??Subroutine251_0
   \   000004                ; // Fall through to label ??Subroutine251_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine251_0:
   \   000000   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   000003   3B           ADDC      A,R3
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   12....       LCALL     ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   85..82       MOV       DPL,?V0
   \   000009   85..83       MOV       DPH,?V1
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   FA           MOV       R2,A
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   EA           MOV       A,R2
   \   00000A   85..82       MOV       DPL,?V0
   \   00000D   85..83       MOV       DPH,?V1
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   22           RET
   2974          
   2975          /*********************************************************************
   2976           * @fn      ZDO_ParseAddrRsp
   2977           *
   2978           * @brief   Turns the inMsg (incoming message) into the out parsed
   2979           *          structure.
   2980           *
   2981           * @param   inMsg - incoming message
   2982           *
   2983           * @return  pointer to parsed structures.  This structure was
   2984           *          allocated using osal_mem_alloc, so it must be freed
   2985           *          by the calling function [osal_mem_free()].
   2986           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2987          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2988          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2989            ZDO_NwkIEEEAddrResp_t *rsp;
   2990            uint8 *msg;
   2991            byte cnt = 0;
   \   000005   75..00       MOV       ?V2,#0x0
   2992          
   2993            // Calculate the number of items in the list
   2994            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   000008   EA           MOV       A,R2
   \   000009   2413         ADD       A,#0x13
   \   00000B   FE           MOV       R6,A
   \   00000C   E4           CLR       A
   \   00000D   3B           ADDC      A,R3
   \   00000E   FF           MOV       R7,A
   \   00000F   EA           MOV       A,R2
   \   000010   2410         ADD       A,#0x10
   \   000012   F582         MOV       DPL,A
   \   000014   E4           CLR       A
   \   000015   3B           ADDC      A,R3
   \   000016   F583         MOV       DPH,A
   \   000018   E0           MOVX      A,@DPTR
   \   000019   C3           CLR       C
   \   00001A   940C         SUBB      A,#0xc
   \   00001C   4009         JC        ??ZDO_ParseAddrRsp_0
   2995            {
   2996              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001E   8E82         MOV       DPL,R6
   \   000020   8F83         MOV       DPH,R7
   \   000022   12....       LCALL     ?Subroutine73 & 0xFFFF
   2997            }
   \                     ??CrossCallReturnLabel_123:
   \   000025   F5..         MOV       ?V2,A
   2998            else
   2999            {
   3000              cnt = 0;
   3001            }
   3002          
   3003            // Make buffer
   3004            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   A8..         MOV       R0,?V2
   \   000029   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   00002C   E8           MOV       A,R0
   \   00002D   240D         ADD       A,#0xd
   \   00002F   FA           MOV       R2,A
   \   000030   E4           CLR       A
   \   000031   39           ADDC      A,R1
   \   000032   FB           MOV       R3,A
   \   000033   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000036   8A..         MOV       ?V0,R2
   \   000038   8B..         MOV       ?V1,R3
   3005          
   3006            if ( rsp )
   \   00003A   EA           MOV       A,R2
   \   00003B   45..         ORL       A,?V1
   \   00003D   7003         JNZ       $+5
   \   00003F   02....       LJMP      ??ZDO_ParseAddrRsp_1 & 0xFFFF
   3007            {
   3008              msg = inMsg->asdu;
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   3009          
   3010              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_609:
   \   000049   F8           MOV       R0,A
   \   00004A   8A82         MOV       DPL,R2
   \   00004C   8B83         MOV       DPH,R3
   \   00004E   12....       LCALL     ?Subroutine17 & 0xFFFF
   3011              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_18:
   \   000051   6003         JZ        $+5
   \   000053   02....       LJMP      ??ZDO_ParseAddrRsp_1 & 0xFFFF
   3012              {
   3013                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000056                ; Setup parameters for call to function sAddrExtCpy
   \   000056   EE           MOV       A,R6
   \   000057   FC           MOV       R4,A
   \   000058   EF           MOV       A,R7
   \   000059   FD           MOV       R5,A
   \   00005A   EA           MOV       A,R2
   \   00005B   2403         ADD       A,#0x3
   \   00005D   FA           MOV       R2,A
   \   00005E   E4           CLR       A
   \   00005F   35..         ADDC      A,?V1
   \   000061   FB           MOV       R3,A
   \   000062   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3014                msg += Z_EXTADDR_LEN;
   \   000065   EE           MOV       A,R6
   \   000066   2408         ADD       A,#0x8
   \   000068   FE           MOV       R6,A
   \   000069   5001         JNC       ??ZDO_ParseAddrRsp_2
   \   00006B   0F           INC       R7
   3015                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   00006C   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_576:
   \   00006F   85..82       MOV       DPL,?V0
   \   000072   85..83       MOV       DPH,?V1
   \   000075   A3           INC       DPTR
   \   000076   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   3016          
   3017                msg += 2;
   3018                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_401:
   \   000079   E5..         MOV       A,?V0
   \   00007B   240B         ADD       A,#0xb
   \   00007D   F8           MOV       R0,A
   \   00007E   E4           CLR       A
   \   00007F   35..         ADDC      A,?V1
   \   000081   F9           MOV       R1,A
   \   000082   E8           MOV       A,R0
   \   000083   FA           MOV       R2,A
   \   000084   E9           MOV       A,R1
   \   000085   FB           MOV       R3,A
   \   000086   8A82         MOV       DPL,R2
   \   000088   8B83         MOV       DPH,R3
   \   00008A   E4           CLR       A
   \   00008B   F0           MOVX      @DPTR,A
   3019          
   3020                // StartIndex field is only present if NumAssocDev field is non-zero.
   3021                if ( cnt > 0 )
   \   00008C   E5..         MOV       A,?V2
   \   00008E   604B         JZ        ??ZDO_ParseAddrRsp_1
   3022                {
   3023                  uint16 *pList = &(rsp->devList[0]);
   \   000090   E5..         MOV       A,?V0
   \   000092   240D         ADD       A,#0xd
   \   000094   F8           MOV       R0,A
   \   000095   E4           CLR       A
   \   000096   35..         ADDC      A,?V1
   \   000098   F9           MOV       R1,A
   3024                  byte n = cnt;
   3025          
   3026                  rsp->numAssocDevs = *msg++;
   \   000099   8E82         MOV       DPL,R6
   \   00009B   8F83         MOV       DPH,R7
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   0000A2   12....       LCALL     ?Subroutine20 & 0xFFFF
   3027                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_27:
   \   0000A5   C0E0         PUSH      A
   \   0000A7   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   0000AA   D0E0         POP       A
   \   0000AC   F0           MOVX      @DPTR,A
   \   0000AD   EE           MOV       A,R6
   \   0000AE   2404         ADD       A,#0x4
   \   0000B0   FE           MOV       R6,A
   \   0000B1   5001         JNC       ??ZDO_ParseAddrRsp_3
   \   0000B3   0F           INC       R7
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000B4   AC..         MOV       R4,?V2
   3028          
   3029                  while ( n != 0 )
   3030                  {
   3031                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000B6   8E82         MOV       DPL,R6
   \   0000B8   8F83         MOV       DPH,R7
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   F5..         MOV       ?V2,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   FB           MOV       R3,A
   \   0000C0   E5..         MOV       A,?V2
   \   0000C2   8882         MOV       DPL,R0
   \   0000C4   8983         MOV       DPH,R1
   \   0000C6   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   0000C9   E8           MOV       A,R0
   \   0000CA   2402         ADD       A,#0x2
   \   0000CC   F8           MOV       R0,A
   \   0000CD   5001         JNC       ??ZDO_ParseAddrRsp_5
   \   0000CF   09           INC       R1
   3032                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000D0   EE           MOV       A,R6
   \   0000D1   2402         ADD       A,#0x2
   \   0000D3   FE           MOV       R6,A
   \   0000D4   5001         JNC       ??ZDO_ParseAddrRsp_6
   \   0000D6   0F           INC       R7
   3033                    n--;
   3034                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000D7   1C           DEC       R4
   \   0000D8   EC           MOV       A,R4
   \   0000D9   70DB         JNZ       ??ZDO_ParseAddrRsp_4
   3035                }
   3036              }
   3037            }
   3038          
   3039            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000DB   AA..         MOV       R2,?V0
   \   0000DD   AB..         MOV       R3,?V1
   \   0000DF   02....       LJMP      ??Subroutine222_0 & 0xFFFF
   3040          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   12....       LCALL     ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_611:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   8E82         MOV       DPL,R6
   \   000007   8F83         MOV       DPH,R7
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET
   3041          
   3042          /*********************************************************************
   3043           * @fn          ZDO_ParseNodeDescRsp
   3044           *
   3045           * @brief       This function parses the Node_Desc_rsp message.
   3046           *
   3047           * @param       inMsg - incoming message
   3048           * @param       pNDRsp - place to parse the message into
   3049           *
   3050           * @return      none
   3051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3052          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   3053          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3054            uint8 *msg;
   3055          
   3056            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine9 & 0xFFFF
   3057          
   3058            pNDRsp->status = *msg++;
   3059            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   3060          
   3061            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_2:
   \   000008   6003         JZ        $+5
   \   00000A   02....       LJMP      ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   3062            {
   3063              msg += 2;
   3064              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   00000D   E8           MOV       A,R0
   \   00000E   2402         ADD       A,#0x2
   \   000010   FA           MOV       R2,A
   \   000011   E4           CLR       A
   \   000012   39           ADDC      A,R1
   \   000013   FB           MOV       R3,A
   \   000014   EC           MOV       A,R4
   \   000015   2403         ADD       A,#0x3
   \   000017   FE           MOV       R6,A
   \   000018   E4           CLR       A
   \   000019   3D           ADDC      A,R5
   \   00001A   FF           MOV       R7,A
   \   00001B   8A82         MOV       DPL,R2
   \   00001D   8B83         MOV       DPH,R3
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   5407         ANL       A,#0x7
   \   000022   F5..         MOV       ?V0,A
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   E0           MOVX      A,@DPTR
   \   000029   54F8         ANL       A,#0xf8
   \   00002B   45..         ORL       A,?V0
   \   00002D   F5..         MOV       ?V1,A
   \   00002F   12....       LCALL     ?Subroutine43 & 0xFFFF
   3065          
   3066              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_68:
   \   000032   A2E3         MOV       C,0xE0 /* A   */.3
   \   000034   E4           CLR       A
   \   000035   33           RLC       A
   \   000036   F5..         MOV       ?V0,A
   \   000038   A2E0         MOV       C,0xE0 /* A   */.0
   \   00003A   E4           CLR       A
   \   00003B   33           RLC       A
   \   00003C   33           RLC       A
   \   00003D   33           RLC       A
   \   00003E   33           RLC       A
   \   00003F   F5..         MOV       ?V0,A
   \   000041   74F7         MOV       A,#-0x9
   \   000043   55..         ANL       A,?V1
   \   000045   45..         ORL       A,?V0
   \   000047   8E82         MOV       DPL,R6
   \   000049   8F83         MOV       DPH,R7
   \   00004B   12....       LCALL     ?Subroutine43 & 0xFFFF
   3067              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_69:
   \   00004E   A2E4         MOV       C,0xE0 /* A   */.4
   \   000050   E4           CLR       A
   \   000051   33           RLC       A
   \   000052   FA           MOV       R2,A
   \   000053   A2E0         MOV       C,0xE0 /* A   */.0
   \   000055   E4           CLR       A
   \   000056   33           RLC       A
   \   000057   C4           SWAP      A
   \   000058   FA           MOV       R2,A
   \   000059   8E82         MOV       DPL,R6
   \   00005B   8F83         MOV       DPH,R7
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   54EF         ANL       A,#0xef
   \   000060   4A           ORL       A,R2
   \   000061   F0           MOVX      @DPTR,A
   3068          
   3069              msg++;  // Reserved bits.
   3070              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000062   E8           MOV       A,R0
   \   000063   2403         ADD       A,#0x3
   \   000065   FA           MOV       R2,A
   \   000066   E4           CLR       A
   \   000067   39           ADDC      A,R1
   \   000068   FB           MOV       R3,A
   \   000069   EC           MOV       A,R4
   \   00006A   2404         ADD       A,#0x4
   \   00006C   0E           INC       R6
   \   00006D   E4           CLR       A
   \   00006E   3D           ADDC      A,R5
   \   00006F   FF           MOV       R7,A
   \   000070   8A82         MOV       DPL,R2
   \   000072   8B83         MOV       DPH,R3
   \   000074   E0           MOVX      A,@DPTR
   \   000075   54F8         ANL       A,#0xf8
   \   000077   F5..         MOV       ?V0,A
   \   000079   8E82         MOV       DPL,R6
   \   00007B   8F83         MOV       DPH,R7
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   5407         ANL       A,#0x7
   \   000080   45..         ORL       A,?V0
   \   000082   F5..         MOV       ?V0,A
   \   000084   12....       LCALL     ?Subroutine43 & 0xFFFF
   3071              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_70:
   \   000087   5407         ANL       A,#0x7
   \   000089   FA           MOV       R2,A
   \   00008A   74F8         MOV       A,#-0x8
   \   00008C   55..         ANL       A,?V0
   \   00008E   4A           ORL       A,R2
   \   00008F   8E82         MOV       DPL,R6
   \   000091   8F83         MOV       DPH,R7
   \   000093   12....       LCALL     ?Subroutine37 & 0xFFFF
   3072              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_60:
   \   000096   8C82         MOV       DPL,R4
   \   000098   8D83         MOV       DPH,R5
   \   00009A   A3           INC       DPTR
   \   00009B   A3           INC       DPTR
   \   00009C   A3           INC       DPTR
   \   00009D   A3           INC       DPTR
   \   00009E   A3           INC       DPTR
   \   00009F   12....       LCALL     ?Subroutine38 & 0xFFFF
   3073              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_63:
   \   0000A2   A3           INC       DPTR
   \   0000A3   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_618:
   \   0000A6   12....       LCALL     ?Subroutine33 & 0xFFFF
   3074              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_52:
   \   0000A9   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   0000AC   12....       LCALL     ?Subroutine33 & 0xFFFF
   3075              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_53:
   \   0000AF   12....       LCALL     ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_619:
   \   0000B2   12....       LCALL     ?Subroutine25 & 0xFFFF
   3076              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_40:
   \   0000B5   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000B8   12....       LCALL     ?Subroutine25 & 0xFFFF
   3077              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_41:
   \   0000BB   A3           INC       DPTR
   \   0000BC   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   A3           INC       DPTR
   \   0000C2   A3           INC       DPTR
   \   0000C3   A3           INC       DPTR
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   E8           MOV       A,R0
   \   0000CA   240A         ADD       A,#0xa
   \   0000CC   F8           MOV       R0,A
   \   0000CD   5001         JNC       ??ZDO_ParseNodeDescRsp_1
   \   0000CF   09           INC       R1
   3078              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   0000D0   8882         MOV       DPL,R0
   \   0000D2   8983         MOV       DPH,R1
   \   0000D4   E0           MOVX      A,@DPTR
   \   0000D5   FE           MOV       R6,A
   \   0000D6   A3           INC       DPTR
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   FB           MOV       R3,A
   \   0000D9   EE           MOV       A,R6
   \   0000DA   FA           MOV       R2,A
   \   0000DB   EC           MOV       A,R4
   \   0000DC   240B         ADD       A,#0xb
   \   0000DE   F582         MOV       DPL,A
   \   0000E0   E4           CLR       A
   \   0000E1   3D           ADDC      A,R5
   \   0000E2   F583         MOV       DPH,A
   \   0000E4   12....       LCALL     ?Subroutine40 & 0xFFFF
   3079              msg += 2;
   3080              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_364:
   \   0000E7   8882         MOV       DPL,R0
   \   0000E9   8983         MOV       DPH,R1
   \   0000EB   A3           INC       DPTR
   \   0000EC   A3           INC       DPTR
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   C0E0         PUSH      A
   \   0000F0   EC           MOV       A,R4
   \   0000F1   240D         ADD       A,#0xd
   \   0000F3   F582         MOV       DPL,A
   \   0000F5   E4           CLR       A
   \   0000F6   3D           ADDC      A,R5
   \   0000F7   F583         MOV       DPH,A
   \   0000F9   D0E0         POP       A
   \   0000FB   12....       LCALL     ?Subroutine38 & 0xFFFF
   3081              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   3082              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   3083            }
   \                     ??CrossCallReturnLabel_64:
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   C0E0         PUSH      A
   \   000101   EC           MOV       A,R4
   \   000102   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   000105   3D           ADDC      A,R5
   \   000106   F583         MOV       DPH,A
   \   000108   D0E0         POP       A
   \   00010A   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00010D   C0E0         PUSH      A
   \   00010F   EC           MOV       A,R4
   \   000110   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000113   3D           ADDC      A,R5
   \   000114   F583         MOV       DPH,A
   \   000116   D0E0         POP       A
   \   000118   F0           MOVX      @DPTR,A
   3084          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   000119   02....       LJMP      ??Subroutine203_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_645:
   \   000003   3B           ADDC      A,R3
   \   000004   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000007   8C82         MOV       DPL,R4
   \   000009   8D83         MOV       DPH,R5
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   8983         MOV       DPH,R1
   \   000010   A3           INC       DPTR
   \   000011   A882         MOV       R0,DPL
   \   000013   A983         MOV       R1,DPH
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FE           MOV       R6,A
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   FB           MOV       R3,A
   \   00001A   EE           MOV       A,R6
   \   00001B   8C82         MOV       DPL,R4
   \   00001D   8D83         MOV       DPH,R5
   \   00001F   A3           INC       DPTR
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   EB           MOV       A,R3
   \   000023   F0           MOVX      @DPTR,A
   \   000024   8C82         MOV       DPL,R4
   \   000026   8D83         MOV       DPH,R5
   \   000028   E0           MOVX      A,@DPTR
   \   000029   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine247_0
   \   000001                ; // Fall through to label ??Subroutine247_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET
   3085          
   3086          /*********************************************************************
   3087           * @fn          ZDO_ParsePowerDescRsp
   3088           *
   3089           * @brief       This function parses the Power_Desc_rsp message.
   3090           *
   3091           * @param       inMsg  - incoming message
   3092           * @param       pNPRsp - place to parse the message into
   3093           *
   3094           * @return      none
   3095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3096          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   3097          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3098            uint8 *msg;
   3099          
   3100            msg = inMsg->asdu;
   \   000005   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_636:
   \   000008   12....       LCALL     ?Subroutine98 & 0xFFFF
   3101            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_158:
   \   00000B   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   00000E   AA82         MOV       R2,DPL
   \   000010   AB83         MOV       R3,DPH
   3102            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000012   E0           MOVX      A,@DPTR
   \   000013   FE           MOV       R6,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   EE           MOV       A,R6
   \   000018   8C82         MOV       DPL,R4
   \   00001A   8D83         MOV       DPH,R5
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
   \   00001E   A3           INC       DPTR
   \   00001F   E9           MOV       A,R1
   \   000020   12....       LCALL     ?Subroutine24 & 0xFFFF
   3103          
   3104            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_39:
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6003         JZ        $+5
   \   000026   02....       LJMP      ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   3105            {
   3106              msg += 2;
   3107              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   000029   EA           MOV       A,R2
   \   00002A   2402         ADD       A,#0x2
   \   00002C   F8           MOV       R0,A
   \   00002D   E4           CLR       A
   \   00002E   3B           ADDC      A,R3
   \   00002F   F9           MOV       R1,A
   \   000030   E8           MOV       A,R0
   \   000031   FE           MOV       R6,A
   \   000032   E9           MOV       A,R1
   \   000033   FF           MOV       R7,A
   \   000034   EC           MOV       A,R4
   \   000035   2403         ADD       A,#0x3
   \   000037   E4           CLR       A
   \   000038   3D           ADDC      A,R5
   \   000039   0C           INC       R4
   \   00003A   0C           INC       R4
   \   00003B   0C           INC       R4
   \   00003C   FD           MOV       R5,A
   \   00003D   8C82         MOV       DPL,R4
   \   00003F   8D83         MOV       DPH,R5
   \   000041   E0           MOVX      A,@DPTR
   \   000042   540F         ANL       A,#0xf
   \   000044   F5..         MOV       ?V2,A
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00004B   7404         MOV       A,#0x4
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?S_SHL
   \   000052   E5..         MOV       A,?V2
   \   000054   45..         ORL       A,?V0
   \   000056   F8           MOV       R0,A
   \   000057   A9..         MOV       R1,?V3
   \   000059   8C82         MOV       DPL,R4
   \   00005B   8D83         MOV       DPH,R5
   \   00005D   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   3108              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_402:
   \   000060   E8           MOV       A,R0
   \   000061   54F0         ANL       A,#0xf0
   \   000063   F8           MOV       R0,A
   \   000064   8E82         MOV       DPL,R6
   \   000066   8F83         MOV       DPH,R7
   \   000068   E0           MOVX      A,@DPTR
   \   000069   540F         ANL       A,#0xf
   \   00006B   FE           MOV       R6,A
   \   00006C   E8           MOV       A,R0
   \   00006D   4E           ORL       A,R6
   \   00006E   F5..         MOV       ?V0,A
   \   000070   E9           MOV       A,R1
   \   000071   F5..         MOV       ?V1,A
   \   000073   8C82         MOV       DPL,R4
   \   000075   8D83         MOV       DPH,R5
   \   000077   E5..         MOV       A,?V0
   \   000079   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   3109              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \                     ??CrossCallReturnLabel_403:
   \   00007C   EA           MOV       A,R2
   \   00007D   2403         ADD       A,#0x3
   \   00007F   F8           MOV       R0,A
   \   000080   E4           CLR       A
   \   000081   3B           ADDC      A,R3
   \   000082   F9           MOV       R1,A
   \   000083   E8           MOV       A,R0
   \   000084   FE           MOV       R6,A
   \   000085   E9           MOV       A,R1
   \   000086   FF           MOV       R7,A
   \   000087   E5..         MOV       A,?V0
   \   000089   F5..         MOV       ?V2,A
   \   00008B   E5..         MOV       A,?V1
   \   00008D   540F         ANL       A,#0xf
   \   00008F   12....       LCALL     ?Subroutine109 & 0xFFFF
   3110              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   3111            }
   \                     ??CrossCallReturnLabel_173:
   \   000092   740C         MOV       A,#0xc
   \   000094   78..         MOV       R0,#?V0
   \   000096   12....       LCALL     ?S_SHL
   \   000099   E5..         MOV       A,?V3
   \   00009B   45..         ORL       A,?V1
   \   00009D   F9           MOV       R1,A
   \   00009E   8C82         MOV       DPL,R4
   \   0000A0   8D83         MOV       DPH,R5
   \   0000A2   E5..         MOV       A,?V2
   \   0000A4   F0           MOVX      @DPTR,A
   \   0000A5   A3           INC       DPTR
   \   0000A6   E9           MOV       A,R1
   \   0000A7   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   0000AA   540F         ANL       A,#0xf
   \   0000AC   F8           MOV       R0,A
   \   0000AD   EA           MOV       A,R2
   \   0000AE   2404         ADD       A,#0x4
   \   0000B0   8C82         MOV       DPL,R4
   \   0000B2   8D83         MOV       DPH,R5
   \   0000B4   A3           INC       DPTR
   \   0000B5   E0           MOVX      A,@DPTR
   \   0000B6   54F0         ANL       A,#0xf0
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   E8           MOV       A,R0
   \   0000BA   F9           MOV       R1,A
   \   0000BB   8C82         MOV       DPL,R4
   \   0000BD   8D83         MOV       DPH,R5
   \   0000BF   A3           INC       DPTR
   \   0000C0   E0           MOVX      A,@DPTR
   \   0000C1   49           ORL       A,R1
   \   0000C2   F0           MOVX      @DPTR,A
   3112          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   0000C3   02....       LJMP      ??Subroutine197_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   F5..         MOV       ?V3,A
   \   000002   8E82         MOV       DPL,R6
   \   000004   8F83         MOV       DPH,R7
   \   000006   E0           MOVX      A,@DPTR
   \   000007   C4           SWAP      A
   \   000008   540F         ANL       A,#0xf
   \   00000A   F5..         MOV       ?V0,A
   \   00000C   75..00       MOV       ?V1,#0x0
   \   00000F   22           RET
   3113          
   3114          /*********************************************************************
   3115           * @fn          ZDO_ParseSimpleDescRsp
   3116           *
   3117           * @brief       This function parse the Simple_Desc_rsp message.
   3118           *
   3119           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   3120           *         in the SimpleDescriptionFormat_t structure are allocated
   3121           *         and the calling function needs to free [osal_msg_free()]
   3122           *         these buffers.
   3123           *
   3124           * @param       inMsg  - incoming message
   3125           * @param       pSimpleDescRsp - place to parse the message into
   3126           *
   3127           * @return      none
   3128           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3129          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   3130          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3131            uint8 *msg;
   3132          
   3133            msg = inMsg->asdu;
   \   000005   12....       LCALL     ?Subroutine9 & 0xFFFF
   3134            pSimpleDescRsp->status = *msg++;
   3135            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   3136            msg += sizeof ( uint16 );
   3137            msg++; // Skip past the length field.
   3138          
   3139            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_3:
   \   000008   7011         JNZ       ??ZDO_ParseSimpleDescRsp_0
   3140            {
   3141              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV       A,R4
   \   00000B   2403         ADD       A,#0x3
   \   00000D   FC           MOV       R4,A
   \   00000E   5001         JNC       ??ZDO_ParseSimpleDescRsp_1
   \   000010   0D           INC       R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000011   E8           MOV       A,R0
   \   000012   2403         ADD       A,#0x3
   \   000014   FA           MOV       R2,A
   \   000015   E4           CLR       A
   \   000016   39           ADDC      A,R1
   \   000017   FB           MOV       R3,A
   \   000018   12....       LCALL     `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   3142            }
   3143          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001B   02....       LJMP      ?Subroutine3 & 0xFFFF
   3144          
   3145          /*********************************************************************
   3146           * @fn          ZDO_ParseEPListRsp
   3147           *
   3148           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   3149           *
   3150           * @param       inMsg  - incoming message
   3151           *
   3152           * @return      none
   3153           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3154          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   3155          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3156            ZDO_ActiveEndpointRsp_t *pRsp;
   3157            uint8 *msg;
   3158            uint8 Status;
   3159            uint8 cnt;
   3160          
   3161            msg = inMsg->asdu;
   \   000005   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_637:
   \   000008   12....       LCALL     ?Subroutine93 & 0xFFFF
   3162            Status = *msg++;
   \                     ??CrossCallReturnLabel_624:
   \   00000B   85..82       MOV       DPL,?V0
   \   00000E   F583         MOV       DPH,A
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F5..         MOV       ?V7,A
   \   000013   A3           INC       DPTR
   \   000014   8582..       MOV       ?V0,DPL
   \   000017   8583..       MOV       ?V1,DPH
   3163            cnt = msg[2];
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V6,A
   3164          
   3165            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   00001F   FE           MOV       R6,A
   \   000020                ; Setup parameters for call to function osal_mem_alloc
   \   000020   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000023   3400         ADDC      A,#0x0
   \   000025   FB           MOV       R3,A
   \   000026   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000029   8A..         MOV       ?V4,R2
   \   00002B   8B..         MOV       ?V5,R3
   3166            if ( pRsp )
   \   00002D   EA           MOV       A,R2
   \   00002E   45..         ORL       A,?V5
   \   000030   6046         JZ        ??ZDO_ParseEPListRsp_0
   3167            {
   3168              pRsp->status = Status;
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   E5..         MOV       A,?V7
   \   000038   12....       LCALL     ?Subroutine153 & 0xFFFF
   3169              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_261:
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   00003F   85..82       MOV       DPL,?V4
   \   000042   8B83         MOV       DPH,R3
   \   000044   A3           INC       DPTR
   \   000045   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   3170              msg += sizeof( uint16 );
   3171              pRsp->cnt = cnt;
   \                     ??CrossCallReturnLabel_404:
   \   000048   85..82       MOV       DPL,?V4
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   EE           MOV       A,R6
   \   000051   12....       LCALL     ?Subroutine47 & 0xFFFF
   3172              msg++; // pass cnt
   3173              osal_memcpy( pRsp->epList, msg, cnt );
   3174            }
   \                     ??CrossCallReturnLabel_80:
   \   000054   A3           INC       DPTR
   \   000055   A982         MOV       R1,DPL
   \   000057   AA83         MOV       R2,DPH
   \   000059   89..         MOV       ?V0,R1
   \   00005B   8A..         MOV       ?V1,R2
   \   00005D   88..         MOV       ?V2,R0
   \   00005F   78..         MOV       R0,#?V0
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   EE           MOV       A,R6
   \   000065   FC           MOV       R4,A
   \   000066   7D00         MOV       R5,#0x0
   \   000068   E5..         MOV       A,?V4
   \   00006A   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   00006D   35..         ADDC      A,?V5
   \   00006F   FB           MOV       R3,A
   \   000070   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000073   7403         MOV       A,#0x3
   \   000075   12....       LCALL     ?DEALLOC_XSTACK8
   3175          
   3176            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   000078   AA..         MOV       R2,?V4
   \   00007A   AB..         MOV       R3,?V5
   \   00007C   02....       LJMP      ??Subroutine201_0 & 0xFFFF
   3177          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   2404         ADD       A,#0x4
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET
   3178          
   3179          /*********************************************************************
   3180           * @fn          ZDO_ParseServerDiscRsp
   3181           *
   3182           * @brief       Parse the Server_Discovery_rsp message.
   3183           *
   3184           * @param       inMsg - incoming message.
   3185           * @param       pRsp - place to put the parsed information.
   3186           *
   3187           * @return      none
   3188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3189          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   3190          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3191            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV       A,R2
   \   000006   2413         ADD       A,#0x13
   \   000008   F8           MOV       R0,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F9           MOV       R1,A
   \   00000C   8882         MOV       DPL,R0
   \   00000E   8983         MOV       DPH,R1
   \   000010   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000013   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_616:
   \   000016   12....       LCALL     ?Subroutine45 & 0xFFFF
   3192            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_76:
   \   000019   12....       LCALL     ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   FA           MOV       R2,A
   \   00001F   8882         MOV       DPL,R0
   \   000021   8983         MOV       DPH,R1
   \   000023   A3           INC       DPTR
   \   000024   12....       LCALL     ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   000027   A3           INC       DPTR
   \   000028   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   3193          }
   \                     ??CrossCallReturnLabel_405:
   \   00002B   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F9           MOV       R1,A
   \   000003   EA           MOV       A,R2
   \   000004   8C82         MOV       DPL,R4
   \   000006   8D83         MOV       DPH,R5
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8A82         MOV       DPL,R2
   \   000008   22           RET
   3194          
   3195          /*********************************************************************
   3196           * @fn          ZDO_ParseMgmtLqiRsp
   3197           *
   3198           * @brief       This function parses the incoming Management
   3199           *              LQI response
   3200           *
   3201           * @param       inMsg - incoming message
   3202           *
   3203           * @return      a pointer to parsed response structure (NULL if not allocated).
   3204           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3205           *          by the calling function [osal_mem_free()].
   3206           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3207          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   3208          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3209            ZDO_MgmtLqiRsp_t *pRsp;
   3210            uint8 status;
   3211            uint8 startIndex = 0;
   \   000005   75..00       MOV       ?V5,#0x0
   3212            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV       ?V7,#0x0
   3213            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV       ?V4,#0x0
   3214            uint8 *msg;
   3215          
   3216            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine64 & 0xFFFF
   3217          
   3218            status = *msg++;
   3219            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_110:
   \   000011   700C         JNZ       ??ZDO_ParseMgmtLqiRsp_0
   3220            {
   3221              neighborLqiEntries = *msg++;
   \   000013   12....       LCALL     ?Subroutine74 & 0xFFFF
   3222              startIndex = *msg++;
   3223              neighborLqiCount = *msg++;
   3224            }
   \                     ??CrossCallReturnLabel_124:
   \   000016   F5..         MOV       ?V7,A
   \   000018   EE           MOV       A,R6
   \   000019   2403         ADD       A,#0x3
   \   00001B   FE           MOV       R6,A
   \   00001C   5001         JNC       ??ZDO_ParseMgmtLqiRsp_0
   \   00001E   0F           INC       R7
   3225          
   3226            // Allocate a buffer big enough to handle the list.
   3227            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   3228                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( ZDP_MgmtLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   E5..         MOV       A,?V7
   \   000021   75F01A       MOV       B,#0x1a
   \   000024   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000027   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV       ?V2,R2
   \   00002C   8B..         MOV       ?V3,R3
   3229            if ( pRsp )
   \   00002E   EA           MOV       A,R2
   \   00002F   45..         ORL       A,?V3
   \   000031   7003         JNZ       $+5
   \   000033   02....       LJMP      ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   3230            {
   3231              uint8 x;
   3232              ZDP_MgmtLqiItem_t *pList = pRsp->list;
   \   000036   12....       LCALL     ?Subroutine142 & 0xFFFF
   3233              pRsp->status = status;
   \                     ??CrossCallReturnLabel_243:
   \   000039   E5..         MOV       A,?V6
   \   00003B   12....       LCALL     ?Subroutine12 & 0xFFFF
   3234              pRsp->neighborLqiEntries = neighborLqiEntries;
   3235              pRsp->startIndex = startIndex;
   3236              pRsp->neighborLqiCount = neighborLqiCount;
   \                     ??CrossCallReturnLabel_8:
   \   00003E   E5..         MOV       A,?V7
   \   000040   F0           MOVX      @DPTR,A
   3237          
   3238              for ( x = 0; x < neighborLqiCount; x++ )
   \   000041   75..00       MOV       ?V4,#0x0
   \   000044   02....       LJMP      ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
   3239              {
   3240                uint8 tmp;
   3241          
   3242                pList->panID = 0; // This isn't in the record, why is it in the structure?
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   000047   85..82       MOV       DPL,?V0
   \   00004A   85..83       MOV       DPH,?V1
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   F0           MOVX      @DPTR,A
   3243                osal_cpyExtAddr(pList->extPanID, msg);   //Copy extended PAN ID
   \   000051                ; Setup parameters for call to function sAddrExtCpy
   \   000051   EE           MOV       A,R6
   \   000052   FC           MOV       R4,A
   \   000053   EF           MOV       A,R7
   \   000054   FD           MOV       R5,A
   \   000055   E5..         MOV       A,?V0
   \   000057   2402         ADD       A,#0x2
   \   000059   FA           MOV       R2,A
   \   00005A   E4           CLR       A
   \   00005B   35..         ADDC      A,?V1
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3244                msg += Z_EXTADDR_LEN;
   \   000061   EE           MOV       A,R6
   \   000062   2408         ADD       A,#0x8
   \   000064   FE           MOV       R6,A
   \   000065   5001         JNC       ??ZDO_ParseMgmtLqiRsp_4
   \   000067   0F           INC       R7
   3245          
   3246                osal_cpyExtAddr(pList->extAddr, msg);   //Copy extended address
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   000068                ; Setup parameters for call to function sAddrExtCpy
   \   000068   FC           MOV       R4,A
   \   000069   EF           MOV       A,R7
   \   00006A   FD           MOV       R5,A
   \   00006B   E5..         MOV       A,?V0
   \   00006D   240A         ADD       A,#0xa
   \   00006F   FA           MOV       R2,A
   \   000070   E4           CLR       A
   \   000071   35..         ADDC      A,?V1
   \   000073   FB           MOV       R3,A
   \   000074   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3247                msg += Z_EXTADDR_LEN;
   \   000077   EE           MOV       A,R6
   \   000078   2408         ADD       A,#0x8
   \   00007A   FE           MOV       R6,A
   \   00007B   5001         JNC       ??ZDO_ParseMgmtLqiRsp_5
   \   00007D   0F           INC       R7
   3248          
   3249                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   00007E   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000081   2412         ADD       A,#0x12
   \   000083   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   000086   E8           MOV       A,R0
   \   000087   12....       LCALL     ?Subroutine30 & 0xFFFF
   3250                msg += 2;
   3251          
   3252                tmp = *msg++;
   \                     ??CrossCallReturnLabel_48:
   \   00008A   F8           MOV       R0,A
   3253                pList->devType = tmp & 0x03;
   \   00008B   7403         MOV       A,#0x3
   \   00008D   58           ANL       A,R0
   \   00008E   C0E0         PUSH      A
   \   000090   E5..         MOV       A,?V0
   \   000092   2414         ADD       A,#0x14
   \   000094   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   000097   D0E0         POP       A
   \   000099   F0           MOVX      @DPTR,A
   3254                pList->rxOnIdle = (tmp >> 2) & 0x03;
   \   00009A   E8           MOV       A,R0
   \   00009B   13           RRC       A
   \   00009C   13           RRC       A
   \   00009D   543F         ANL       A,#0x3f
   \   00009F   5403         ANL       A,#0x3
   \   0000A1   C0E0         PUSH      A
   \   0000A3   E5..         MOV       A,?V0
   \   0000A5   2415         ADD       A,#0x15
   \   0000A7   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   0000AA   D0E0         POP       A
   \   0000AC   F0           MOVX      @DPTR,A
   3255                pList->relation = (tmp >> 4) & 0x07;
   \   0000AD   E8           MOV       A,R0
   \   0000AE   C4           SWAP      A
   \   0000AF   540F         ANL       A,#0xf
   \   0000B1   5407         ANL       A,#0x7
   \   0000B3   C0E0         PUSH      A
   \   0000B5   E5..         MOV       A,?V0
   \   0000B7   2416         ADD       A,#0x16
   \   0000B9   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   0000BC   D0E0         POP       A
   \   0000BE   12....       LCALL     ?Subroutine20 & 0xFFFF
   3256          
   3257                pList->permit = (*msg++) & 0x03;
   \                     ??CrossCallReturnLabel_28:
   \   0000C1   5403         ANL       A,#0x3
   \   0000C3   C0E0         PUSH      A
   \   0000C5   E5..         MOV       A,?V0
   \   0000C7   2417         ADD       A,#0x17
   \   0000C9   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   0000CC   D0E0         POP       A
   \   0000CE   12....       LCALL     ?Subroutine159 & 0xFFFF
   3258          
   3259                pList->depth = *msg++;
   \                     ??CrossCallReturnLabel_271:
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   C0E0         PUSH      A
   \   0000D5   E5..         MOV       A,?V0
   \   0000D7   2418         ADD       A,#0x18
   \   0000D9   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   0000DC   D0E0         POP       A
   \   0000DE   12....       LCALL     ?Subroutine34 & 0xFFFF
   3260          
   3261                pList->lqi = *msg++;
   \                     ??CrossCallReturnLabel_55:
   \   0000E1   C0E0         PUSH      A
   \   0000E3   E5..         MOV       A,?V0
   \   0000E5   2419         ADD       A,#0x19
   \   0000E7   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   0000EA   D0E0         POP       A
   \   0000EC   F0           MOVX      @DPTR,A
   \   0000ED   EE           MOV       A,R6
   \   0000EE   2406         ADD       A,#0x6
   \   0000F0   FE           MOV       R6,A
   \   0000F1   5001         JNC       ??ZDO_ParseMgmtLqiRsp_6
   \   0000F3   0F           INC       R7
   3262                pList++;
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   0000F4   E5..         MOV       A,?V0
   \   0000F6   241A         ADD       A,#0x1a
   \   0000F8   F5..         MOV       ?V0,A
   \   0000FA   5002         JNC       ??ZDO_ParseMgmtLqiRsp_7
   \   0000FC   05..         INC       ?V1
   3263              }
   \                     ??ZDO_ParseMgmtLqiRsp_7:
   \   0000FE   05..         INC       ?V4
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000100   E5..         MOV       A,?V4
   \   000102   C3           CLR       C
   \   000103   95..         SUBB      A,?V7
   \   000105   5003         JNC       $+5
   \   000107   02....       LJMP      ??ZDO_ParseMgmtLqiRsp_3 & 0xFFFF
   3264            }
   3265          
   3266            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   00010A                REQUIRE ?Subroutine7
   \   00010A                ; // Fall through to label ?Subroutine7
   3267          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   AA..         MOV       R2,?V2
   \   000002   AB..         MOV       R3,?V3
   \   000004   02....       LJMP      ??Subroutine201_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_610:
   \   000006   F5..         MOV       ?V6,A
   \   000008   A3           INC       DPTR
   \   000009   AE82         MOV       R6,DPL
   \   00000B   AF83         MOV       R7,DPH
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   A4           MUL       AB
   \   000001   A9F0         MOV       R1,B
   \   000003   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000006   39           ADDC      A,R1
   \   000007   FB           MOV       R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000003   8A82         MOV       DPL,R2
   \   000005   8B83         MOV       DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   EA           MOV       A,R2
   \   000001   2404         ADD       A,#0x4
   \   000003   F5..         MOV       ?V0,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V3
   \   000008   F5..         MOV       ?V1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   8E82         MOV       DPL,R6
   \   000009   8F83         MOV       DPH,R7
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E5..         MOV       A,?V4
   \   000004   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   000007   A3           INC       DPTR
   \   000008   E5..         MOV       A,?V5
   \   00000A   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_553:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_629:
   \   000003   22           RET
   3268          
   3269          /*********************************************************************
   3270           * @fn          ZDO_ParseMgmNwkDiscRsp
   3271           *
   3272           * @brief       This function parses the incoming Management
   3273           *              Network Discover response.
   3274           *
   3275           * @param       inMsg - incoming message
   3276           *
   3277           * @return      pointer to parsed response.  This structure was
   3278           *          allocated using osal_mem_alloc, so it must be freed
   3279           *          by the calling function [osal_mem_free()].
   3280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3281          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   3282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3283            ZDO_MgmNwkDiscRsp_t *pRsp;
   3284            uint8 status;
   3285            uint8 networkCount = 0;
   \   000005   75..00       MOV       ?V0,#0x0
   3286            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V1,#0x0
   3287            uint8 networkListCount = 0;
   \   00000B   75..00       MOV       ?V7,#0x0
   3288            uint8 *msg;
   3289          
   3290            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine64 & 0xFFFF
   3291            status = *msg++;
   3292          
   3293            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_111:
   \   000011   7015         JNZ       ??ZDO_ParseMgmNwkDiscRsp_0
   3294            {
   3295              networkCount = *msg++;
   \   000013   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   3296              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_620:
   \   000016   F5..         MOV       ?V1,A
   3297              networkListCount = *msg++;
   \   000018   8E82         MOV       DPL,R6
   \   00001A   8F83         MOV       DPH,R7
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V7,A
   \   000021   EE           MOV       A,R6
   \   000022   2403         ADD       A,#0x3
   \   000024   FE           MOV       R6,A
   \   000025   5001         JNC       ??ZDO_ParseMgmNwkDiscRsp_0
   \   000027   0F           INC       R7
   3298            }
   3299          
   3300            // Allocate a buffer big enough to handle the list.
   3301            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   3302                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   E5..         MOV       A,?V7
   \   00002A   F5..         MOV       ?V2,A
   \   00002C   75..00       MOV       ?V3,#0x0
   \   00002F   7404         MOV       A,#0x4
   \   000031   78..         MOV       R0,#?V2
   \   000033   12....       LCALL     ?S_SHL
   \   000036   E5..         MOV       A,?V2
   \   000038   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   00003B   35..         ADDC      A,?V3
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000041   8A..         MOV       ?V2,R2
   \   000043   8B..         MOV       ?V3,R3
   3303            if ( pRsp )
   \   000045   EA           MOV       A,R2
   \   000046   45..         ORL       A,?V3
   \   000048   7003         JNZ       $+5
   \   00004A   02....       LJMP      ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   3304            {
   3305              uint8 x;
   3306              mgmtNwkDiscItem_t *pList;
   3307          
   3308              pRsp->status = status;
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   E5..         MOV       A,?V6
   \   000053   F0           MOVX      @DPTR,A
   3309              pRsp->networkCount = networkCount;
   \   000054   A3           INC       DPTR
   \   000055   E5..         MOV       A,?V0
   \   000057   12....       LCALL     ?Subroutine16 & 0xFFFF
   3310              pRsp->startIndex = startIndex;
   3311              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_15:
   \   00005A   E5..         MOV       A,?V7
   \   00005C   F0           MOVX      @DPTR,A
   3312              pList = pRsp->list;
   \   00005D   12....       LCALL     ?Subroutine185 & 0xFFFF
   3313          
   3314              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_306:
   \   000060   75..00       MOV       ?V4,#0x0
   \   000063   807E         SJMP      ??ZDO_ParseMgmNwkDiscRsp_2
   3315              {
   3316                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000065                ; Setup parameters for call to function sAddrExtCpy
   \   000065   EE           MOV       A,R6
   \   000066   FC           MOV       R4,A
   \   000067   EF           MOV       A,R7
   \   000068   FD           MOV       R5,A
   \   000069   AA..         MOV       R2,?V0
   \   00006B   AB..         MOV       R3,?V1
   \   00006D   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3317                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   000070   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000073   A3           INC       DPTR
   \   000074   F0           MOVX      @DPTR,A
   \   000075   A3           INC       DPTR
   \   000076   E9           MOV       A,R1
   \   000077   12....       LCALL     ?Subroutine22 & 0xFFFF
   3318                msg += Z_EXTADDR_LEN;
   3319          
   3320                pList->logicalChannel = *msg++;
   \                     ??CrossCallReturnLabel_31:
   \   00007A   85..82       MOV       DPL,?V0
   \   00007D   85..83       MOV       DPH,?V1
   \   000080   A3           INC       DPTR
   \   000081   A3           INC       DPTR
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   A3           INC       DPTR
   \   000088   A3           INC       DPTR
   \   000089   A3           INC       DPTR
   \   00008A   F0           MOVX      @DPTR,A
   3321                pList->stackProfile = (*msg) & 0x0F;
   \   00008B   EE           MOV       A,R6
   \   00008C   2409         ADD       A,#0x9
   \   00008E   F8           MOV       R0,A
   \   00008F   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000092   C0E0         PUSH      A
   \   000094   E5..         MOV       A,?V0
   \   000096   240B         ADD       A,#0xb
   \   000098   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   00009B   D0E0         POP       A
   \   00009D   12....       LCALL     ?Subroutine44 & 0xFFFF
   3322                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_71:
   \   0000A0   C0E0         PUSH      A
   \   0000A2   12....       LCALL     ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   0000A5   D0E0         POP       A
   \   0000A7   F0           MOVX      @DPTR,A
   3323                pList->beaconOrder = (*msg) & 0x0F;
   \   0000A8   EE           MOV       A,R6
   \   0000A9   240A         ADD       A,#0xa
   \   0000AB   08           INC       R0
   \   0000AC   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   0000AF   C0E0         PUSH      A
   \   0000B1   E5..         MOV       A,?V0
   \   0000B3   240D         ADD       A,#0xd
   \   0000B5   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   0000B8   D0E0         POP       A
   \   0000BA   12....       LCALL     ?Subroutine44 & 0xFFFF
   3324                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_72:
   \   0000BD   C0E0         PUSH      A
   \   0000BF   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   0000C2   D0E0         POP       A
   \   0000C4   F0           MOVX      @DPTR,A
   3325                pList->permitJoining = *msg++;
   \   0000C5   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   0000C8   C0E0         PUSH      A
   \   0000CA   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   0000CD   D0E0         POP       A
   \   0000CF   F0           MOVX      @DPTR,A
   \   0000D0   EE           MOV       A,R6
   \   0000D1   240C         ADD       A,#0xc
   \   0000D3   FE           MOV       R6,A
   \   0000D4   5001         JNC       ??ZDO_ParseMgmNwkDiscRsp_4
   \   0000D6   0F           INC       R7
   3326                pList++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0000D7   E5..         MOV       A,?V0
   \   0000D9   2410         ADD       A,#0x10
   \   0000DB   F5..         MOV       ?V0,A
   \   0000DD   5002         JNC       ??ZDO_ParseMgmNwkDiscRsp_5
   \   0000DF   05..         INC       ?V1
   3327              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_5:
   \   0000E1   05..         INC       ?V4
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000E3   E5..         MOV       A,?V4
   \   0000E5   C3           CLR       C
   \   0000E6   95..         SUBB      A,?V7
   \   0000E8   5003         JNC       $+5
   \   0000EA   02....       LJMP      ??ZDO_ParseMgmNwkDiscRsp_3 & 0xFFFF
   3328            }
   3329          
   3330            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0000ED   02....       LJMP      ?Subroutine7 & 0xFFFF
   3331          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   E4           CLR       A
   \   000001   3F           ADDC      A,R7
   \   000002   F9           MOV       R1,A
   \   000003   8882         MOV       DPL,R0
   \   000005   8983         MOV       DPH,R1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   540F         ANL       A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003   C4           SWAP      A
   \   000004   540F         ANL       A,#0xf
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V1
   \   000006   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000003   22           RET
   3332          
   3333          /*********************************************************************
   3334           * @fn          ZDO_ParseMgmtRtgRsp
   3335           *
   3336           * @brief       This function parses the incoming Management
   3337           *              Routing response.
   3338           *
   3339           * @param       inMsg - incoming message
   3340           *
   3341           * @return      a pointer to parsed response structure (NULL if not allocated).
   3342           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3343           *          by the calling function [osal_mem_free()].
   3344           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3345          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   3346          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3347            ZDO_MgmtRtgRsp_t *pRsp;
   3348            uint8 status;
   3349            uint8 rtgCount = 0;
   \   000005   75..00       MOV       ?V4,#0x0
   3350            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V1,#0x0
   3351            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV       ?V0,#0x0
   3352            uint8 *msg;
   3353          
   3354            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine65 & 0xFFFF
   3355          
   3356            status = *msg++;
   \                     ??CrossCallReturnLabel_606:
   \   000011   F5..         MOV       ?V5,A
   \   000013   A3           INC       DPTR
   \   000014   AE82         MOV       R6,DPL
   \   000016   AF83         MOV       R7,DPH
   3357            if ( status == ZSuccess )
   \   000018   7017         JNZ       ??ZDO_ParseMgmtRtgRsp_0
   3358            {
   3359              rtgCount = *msg++;
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F5..         MOV       ?V4,A
   3360              startIndex = *msg++;
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V1,A
   3361              rtgListCount = *msg++;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F5..         MOV       ?V0,A
   \   00002A   EE           MOV       A,R6
   \   00002B   2403         ADD       A,#0x3
   \   00002D   FE           MOV       R6,A
   \   00002E   5001         JNC       ??ZDO_ParseMgmtRtgRsp_0
   \   000030   0F           INC       R7
   3362            }
   3363          
   3364            // Allocate a buffer big enough to handle the list
   3365            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   3366                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E5..         MOV       A,?V0
   \   000033   75F007       MOV       B,#0x7
   \   000036   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000039   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3367            if ( pRsp )
   \   00003C   EA           MOV       A,R2
   \   00003D   4B           ORL       A,R3
   \   00003E   6071         JZ        ??ZDO_ParseMgmtRtgRsp_1
   3368            {
   3369              uint8 x;
   3370              rtgItem_t *pList = pRsp->list;
   \   000040   EA           MOV       A,R2
   \   000041   2404         ADD       A,#0x4
   \   000043   F8           MOV       R0,A
   \   000044   E4           CLR       A
   \   000045   3B           ADDC      A,R3
   \   000046   F9           MOV       R1,A
   3371              pRsp->status = status;
   \   000047   8A82         MOV       DPL,R2
   \   000049   8B83         MOV       DPH,R3
   \   00004B   E5..         MOV       A,?V5
   \   00004D   F0           MOVX      @DPTR,A
   3372              pRsp->rtgCount = rtgCount;
   \   00004E   A3           INC       DPTR
   \   00004F   E5..         MOV       A,?V4
   \   000051   12....       LCALL     ?Subroutine16 & 0xFFFF
   3373              pRsp->startIndex = startIndex;
   3374              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_16:
   \   000054   E5..         MOV       A,?V0
   \   000056   F0           MOVX      @DPTR,A
   3375          
   3376              for ( x = 0; x < rtgListCount; x++ )
   \   000057   7C00         MOV       R4,#0x0
   \   000059   8050         SJMP      ??ZDO_ParseMgmtRtgRsp_2
   3377              {
   3378                uint8 statOpt;
   3379          
   3380                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   00005B   8E82         MOV       DPL,R6
   \   00005D   8F83         MOV       DPH,R7
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   E5..         MOV       A,?V3
   \   000067   12....       LCALL     ?Subroutine48 & 0xFFFF
   3381                msg += 2;
   3382                statOpt = *msg++;
   \                     ??CrossCallReturnLabel_82:
   \   00006A   FD           MOV       R5,A
   \   00006B   EE           MOV       A,R6
   \   00006C   2403         ADD       A,#0x3
   \   00006E   FE           MOV       R6,A
   \   00006F   5001         JNC       ??ZDO_ParseMgmtRtgRsp_4
   \   000071   0F           INC       R7
   3383                pList->status = (statOpt & 0x07);
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000072   7407         MOV       A,#0x7
   \   000074   5D           ANL       A,R5
   \   000075   8882         MOV       DPL,R0
   \   000077   8983         MOV       DPH,R1
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   F0           MOVX      @DPTR,A
   3384                pList->options = ((statOpt >> 3) & 0x07);
   \   00007F   ED           MOV       A,R5
   \   000080   13           RRC       A
   \   000081   13           RRC       A
   \   000082   13           RRC       A
   \   000083   541F         ANL       A,#0x1f
   \   000085   5407         ANL       A,#0x7
   \   000087   8882         MOV       DPL,R0
   \   000089   8983         MOV       DPH,R1
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   3385                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_605:
   \   000094   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000097   A3           INC       DPTR
   \   000098   A3           INC       DPTR
   \   000099   F0           MOVX      @DPTR,A
   \   00009A   A3           INC       DPTR
   \   00009B   E5..         MOV       A,?V3
   \   00009D   12....       LCALL     ?Subroutine155 & 0xFFFF
   3386                msg += 2;
   \                     ??CrossCallReturnLabel_559:
   \   0000A0   5001         JNC       ??ZDO_ParseMgmtRtgRsp_5
   \   0000A2   0F           INC       R7
   3387                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   0000A3   E8           MOV       A,R0
   \   0000A4   2407         ADD       A,#0x7
   \   0000A6   F8           MOV       R0,A
   \   0000A7   5001         JNC       ??ZDO_ParseMgmtRtgRsp_6
   \   0000A9   09           INC       R1
   3388              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   0000AA   0C           INC       R4
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   0000AB   EC           MOV       A,R4
   \   0000AC   C3           CLR       C
   \   0000AD   95..         SUBB      A,?V0
   \   0000AF   40AA         JC        ??ZDO_ParseMgmtRtgRsp_3
   3389            }
   3390          
   3391            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   0000B1   02....       LJMP      ??Subroutine222_0 & 0xFFFF
   3392          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   F5..         MOV       ?V4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F5..         MOV       ?V3,A
   \   000006   E5..         MOV       A,?V4
   \   000008   8882         MOV       DPL,R0
   \   00000A   8983         MOV       DPH,R1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003                REQUIRE ??Subroutine244_0
   \   000003                ; // Fall through to label ??Subroutine244_0
   3393          
   3394          /*********************************************************************
   3395           * @fn          ZDO_ParseMgmtBindRsp
   3396           *
   3397           * @brief       This function parses the incoming Management
   3398           *              Binding response.
   3399           *
   3400           * @param       inMsg - pointer to message to parse
   3401           *
   3402           * @return      a pointer to parsed response structure (NULL if not allocated).
   3403           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3404           *          by the calling function [osal_mem_free()].
   3405           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3406          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   3407          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3408            ZDO_MgmtBindRsp_t *pRsp;
   3409            uint8 status;
   3410            uint8 bindingCount = 0;
   \   000005   75..00       MOV       ?V4,#0x0
   3411            uint8 startIndex = 0;
   \   000008   75..00       MOV       ?V5,#0x0
   3412            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV       ?V6,#0x0
   3413            uint8 *msg;
   3414          
   3415            msg = inMsg->asdu;
   \   00000E   12....       LCALL     ?Subroutine65 & 0xFFFF
   3416          
   3417            status = *msg++;
   \                     ??CrossCallReturnLabel_607:
   \   000011   F5..         MOV       ?V7,A
   \   000013   A3           INC       DPTR
   \   000014   AE82         MOV       R6,DPL
   \   000016   AF83         MOV       R7,DPH
   3418            if ( status == ZSuccess )
   \   000018   700C         JNZ       ??ZDO_ParseMgmtBindRsp_0
   3419            {
   3420              bindingCount = *msg++;
   \   00001A   12....       LCALL     ?Subroutine74 & 0xFFFF
   3421              startIndex = *msg++;
   3422              bindingListCount = *msg++;
   3423            }
   \                     ??CrossCallReturnLabel_125:
   \   00001D   F5..         MOV       ?V6,A
   \   00001F   EE           MOV       A,R6
   \   000020   2403         ADD       A,#0x3
   \   000022   FE           MOV       R6,A
   \   000023   5001         JNC       ??ZDO_ParseMgmtBindRsp_0
   \   000025   0F           INC       R7
   3424          
   3425            // Allocate a buffer big enough to handle the list
   3426            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   3427                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   E5..         MOV       A,?V6
   \   000028   75F015       MOV       B,#0x15
   \   00002B   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00002E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000031   8A..         MOV       ?V2,R2
   \   000033   8B..         MOV       ?V3,R3
   3428            if ( pRsp )
   \   000035   EA           MOV       A,R2
   \   000036   45..         ORL       A,?V3
   \   000038   606F         JZ        ??ZDO_ParseMgmtBindRsp_1
   3429            {
   3430              uint8 x;
   3431              apsBindingItem_t *pList = pRsp->list;
   \   00003A   12....       LCALL     ?Subroutine142 & 0xFFFF
   3432              pRsp->status = status;
   \                     ??CrossCallReturnLabel_244:
   \   00003D   E5..         MOV       A,?V7
   \   00003F   12....       LCALL     ?Subroutine12 & 0xFFFF
   3433              pRsp->bindingCount = bindingCount;
   3434              pRsp->startIndex = startIndex;
   3435              pRsp->bindingListCount = bindingListCount;
   \                     ??CrossCallReturnLabel_9:
   \   000042   E5..         MOV       A,?V6
   \   000044   F0           MOVX      @DPTR,A
   3436          
   3437              for ( x = 0; x < bindingListCount; x++ )
   \   000045   75..00       MOV       ?V4,#0x0
   \   000048   8015         SJMP      ??ZDO_ParseMgmtBindRsp_2
   3438              {
   3439                osal_cpyExtAddr( pList->srcAddr, msg );
   3440                msg += Z_EXTADDR_LEN;
   3441                pList->srcEP = *msg++;
   3442          
   3443                // Get the Cluster ID
   3444          
   3445                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   3446                msg += 2;
   3447                pList->dstAddr.addrMode = *msg++;
   3448                if ( pList->dstAddr.addrMode == Addr64Bit )
   3449                {
   3450                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   3451                  msg += Z_EXTADDR_LEN;
   3452                  pList->dstEP = *msg++;
   3453                }
   3454                else
   3455                {
   3456                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00004A   12....       LCALL     ?Subroutine97 & 0xFFFF
   3457                  msg += 2;
   3458                }
   \                     ??CrossCallReturnLabel_157:
   \   00004D   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   000050   5001         JNC       ??ZDO_ParseMgmtBindRsp_4
   \   000052   0F           INC       R7
   3459          
   3460                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000053   E5..         MOV       A,?V0
   \   000055   2415         ADD       A,#0x15
   \   000057   F5..         MOV       ?V0,A
   \   000059   5002         JNC       ??ZDO_ParseMgmtBindRsp_5
   \   00005B   05..         INC       ?V1
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   00005D   05..         INC       ?V4
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   00005F   E5..         MOV       A,?V4
   \   000061   C3           CLR       C
   \   000062   95..         SUBB      A,?V6
   \   000064   5043         JNC       ??ZDO_ParseMgmtBindRsp_1
   \   000066                ; Setup parameters for call to function sAddrExtCpy
   \   000066   EE           MOV       A,R6
   \   000067   FC           MOV       R4,A
   \   000068   EF           MOV       A,R7
   \   000069   FD           MOV       R5,A
   \   00006A   AA..         MOV       R2,?V0
   \   00006C   AB..         MOV       R3,?V1
   \   00006E   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000071   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   000074   5001         JNC       ??ZDO_ParseMgmtBindRsp_6
   \   000076   0F           INC       R7
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   000077   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00007A   5001         JNC       ??ZDO_ParseMgmtBindRsp_7
   \   00007C   0F           INC       R7
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   00007D   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000080   70C8         JNZ       ??ZDO_ParseMgmtBindRsp_3
   \   000082                ; Setup parameters for call to function sAddrExtCpy
   \   000082   EE           MOV       A,R6
   \   000083   FC           MOV       R4,A
   \   000084   EF           MOV       A,R7
   \   000085   FD           MOV       R5,A
   \   000086   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000089   8E82         MOV       DPL,R6
   \   00008B   8F83         MOV       DPH,R7
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   E0           MOVX      A,@DPTR
   \   000096   C0E0         PUSH      A
   \   000098   E5..         MOV       A,?V0
   \   00009A   2414         ADD       A,#0x14
   \   00009C   12....       LCALL     ??Subroutine241_0 & 0xFFFF
   3461              }
   3462            }
   \                     ??CrossCallReturnLabel_591:
   \   00009F   D0E0         POP       A
   \   0000A1   12....       LCALL     ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_613:
   \   0000A4   50AD         JNC       ??ZDO_ParseMgmtBindRsp_4
   \   0000A6   0F           INC       R7
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   0000A7   80AA         SJMP      ??ZDO_ParseMgmtBindRsp_4
   3463          
   3464            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000A9   02....       LJMP      ?Subroutine7 & 0xFFFF
   3465          }
   3466          
   3467          /*********************************************************************
   3468           * @fn          ZDO_ParseUserDescRsp
   3469           *
   3470           * @brief       This function parses the incoming User
   3471           *              Descriptor Response.
   3472           *
   3473           * @param       inMsg - incoming response message
   3474           *
   3475           * @return      a pointer to parsed response structure (NULL if not allocated).
   3476           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3477           *          by the calling function [osal_mem_free()].
   3478           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3479          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3481            ZDO_UserDescRsp_t *pRsp;
   3482            uint8 *msg;
   3483            uint8 descLen = 0;
   \   000005   75..00       MOV       ?V2,#0x0
   3484          
   3485            msg = inMsg->asdu;
   \   000008   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_638:
   \   00000B   12....       LCALL     ?Subroutine83 & 0xFFFF
   3486          
   3487            if ( msg[0] == ZSuccess )
   \                     ??CrossCallReturnLabel_139:
   \   00000E   7006         JNZ       ??ZDO_ParseUserDescRsp_0
   3488            {
   3489              descLen = msg[3];
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   F5..         MOV       ?V2,A
   3490            }
   3491          
   3492            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   000016   AE..         MOV       R6,?V2
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   EE           MOV       A,R6
   \   000019   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   00001C   3400         ADDC      A,#0x0
   \   00001E   FB           MOV       R3,A
   \   00001F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000022   8A..         MOV       ?V6,R2
   \   000024   8B..         MOV       ?V7,R3
   3493            if ( pRsp )
   \   000026   EA           MOV       A,R2
   \   000027   45..         ORL       A,?V7
   \   000029   604C         JZ        ??ZDO_ParseUserDescRsp_1
   3494            {
   3495              pRsp->status = msg[0];
   \   00002B   85..82       MOV       DPL,?V0
   \   00002E   85..83       MOV       DPH,?V1
   \   000031   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   000034   12....       LCALL     ?Subroutine153 & 0xFFFF
   3496              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_263:
   \   000037   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00003A   12....       LCALL     ??Subroutine205_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   00003D   85..82       MOV       DPL,?V6
   \   000040   8B83         MOV       DPH,R3
   \   000042   A3           INC       DPTR
   \   000043   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   3497              pRsp->length = descLen;
   \                     ??CrossCallReturnLabel_406:
   \   000046   85..82       MOV       DPL,?V6
   \   000049   8B83         MOV       DPH,R3
   \   00004B   A3           INC       DPTR
   \   00004C   A3           INC       DPTR
   \   00004D   A3           INC       DPTR
   \   00004E   EE           MOV       A,R6
   \   00004F   F0           MOVX      @DPTR,A
   3498              if ( descLen )
   \   000050   6025         JZ        ??ZDO_ParseUserDescRsp_1
   3499              {
   3500                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000052                ; Setup parameters for call to function osal_memcpy
   \   000052   E5..         MOV       A,?V0
   \   000054   2404         ADD       A,#0x4
   \   000056   F5..         MOV       ?V0,A
   \   000058   5002         JNC       ??ZDO_ParseUserDescRsp_2
   \   00005A   05..         INC       ?V1
   \                     ??ZDO_ParseUserDescRsp_2:
   \   00005C   88..         MOV       ?V2,R0
   \   00005E   78..         MOV       R0,#?V0
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000063   EE           MOV       A,R6
   \   000064   FC           MOV       R4,A
   \   000065   7D00         MOV       R5,#0x0
   \   000067   E5..         MOV       A,?V6
   \   000069   12....       LCALL     ?Subroutine186 & 0xFFFF
   3501              }
   3502            }
   \                     ??CrossCallReturnLabel_312:
   \   00006C   35..         ADDC      A,?V7
   \   00006E   FB           MOV       R3,A
   \   00006F   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000072   7403         MOV       A,#0x3
   \   000074   12....       LCALL     ?DEALLOC_XSTACK8
   3503          
   3504            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000077   AA..         MOV       R2,?V6
   \   000079   AB..         MOV       R3,?V7
   \   00007B   02....       LJMP      ??Subroutine201_0 & 0xFFFF
   3505          }
   3506          
   3507          /*********************************************************************
   3508           * @fn          ZDO_ParseSimpleDescBuf
   3509           *
   3510           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3511           *
   3512           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3513           * @param       desc - SimpleDescriptionFormat_t *
   3514           *
   3515           *              This routine allocates storage for the cluster IDs because
   3516           *              they are 16-bit and need to be aligned to be properly processed.
   3517           *              This routine returns non-zero if an allocation fails.
   3518           *
   3519           *              NOTE: This means that the caller or user of the input structure
   3520           *                    is responsible for freeing the memory
   3521           *
   3522           * @return      0: success
   3523           *              1: failure due to malloc failure.
   3524           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3525          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3526          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   3527            uint8 num, i;
   3528          
   3529            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   12....       LCALL     ??Subroutine247_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   000014   12....       LCALL     ?Subroutine17 & 0xFFFF
   3530            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_19:
   \   000017   E0           MOVX      A,@DPTR
   \   000018   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   00001B   12....       LCALL     ?Subroutine15 & 0xFFFF
   3531            buf += 2;
   \                     ??CrossCallReturnLabel_555:
   \   00001E   5001         JNC       ??ZDO_ParseSimpleDescBuf_0
   \   000020   0F           INC       R7
   3532            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000021   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000024   12....       LCALL     ?Subroutine30 & 0xFFFF
   3533            buf += 2;
   3534            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_49:
   \   000027   C4           SWAP      A
   \   000028   540F         ANL       A,#0xf
   3535          
   3536            desc->Reserved = 0;
   \   00002A   8C82         MOV       DPL,R4
   \   00002C   8D83         MOV       DPH,R5
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   12....       LCALL     ?Subroutine20 & 0xFFFF
   3537            buf++;
   3538          
   3539            // move in input cluster list (if any). allocate aligned memory.
   3540            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_29:
   \   000036   F5..         MOV       ?V2,A
   \   000038   EE           MOV       A,R6
   \   000039   2404         ADD       A,#0x4
   \   00003B   FE           MOV       R6,A
   \   00003C   5001         JNC       ??ZDO_ParseSimpleDescBuf_1
   \   00003E   0F           INC       R7
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   00003F   8C82         MOV       DPL,R4
   \   000041   8D83         MOV       DPH,R5
   \   000043   A3           INC       DPTR
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E5..         MOV       A,?V2
   \   00004B   F0           MOVX      @DPTR,A
   3541            if ( num )
   \   00004C   EC           MOV       A,R4
   \   00004D   2407         ADD       A,#0x7
   \   00004F   F5..         MOV       ?V6,A
   \   000051   E4           CLR       A
   \   000052   35..         ADDC      A,?V1
   \   000054   F5..         MOV       ?V7,A
   \   000056   E5..         MOV       A,?V2
   \   000058   604C         JZ        ??ZDO_ParseSimpleDescBuf_2
   3542            {
   3543              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   00005A                ; Setup parameters for call to function osal_mem_alloc
   \   00005A   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   00005D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000060   8A..         MOV       ?V4,R2
   \   000062   8B..         MOV       ?V5,R3
   \   000064   A8..         MOV       R0,?V4
   \   000066   A9..         MOV       R1,?V5
   \   000068   85..82       MOV       DPL,?V6
   \   00006B   85..83       MOV       DPH,?V7
   \   00006E   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000071   E8           MOV       A,R0
   \   000072   49           ORL       A,R1
   \   000073   7003         JNZ       $+5
   \   000075   02....       LJMP      ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   3544              {
   3545                // malloc failed. we're done.
   3546                return 1;
   3547              }
   3548              for (i=0; i<num; ++i)
   \   000078   7A00         MOV       R2,#0x0
   \   00007A   8024         SJMP      ??ZDO_ParseSimpleDescBuf_4
   3549              {
   3550                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   00007C   8E82         MOV       DPL,R6
   \   00007E   8F83         MOV       DPH,R7
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F5..         MOV       ?V4,A
   \   000083   A3           INC       DPTR
   \   000084   E0           MOVX      A,@DPTR
   \   000085   FC           MOV       R4,A
   \   000086   E4           CLR       A
   \   000087   CC           XCH       A,R4
   \   000088   FD           MOV       R5,A
   \   000089   E5..         MOV       A,?V4
   \   00008B   2C           ADD       A,R4
   \   00008C   E4           CLR       A
   \   00008D   3D           ADDC      A,R5
   \   00008E   F5..         MOV       ?V5,A
   \   000090   12....       LCALL     ?Subroutine118 & 0xFFFF
   3551                buf += 2;
   3552              }
   \                     ??CrossCallReturnLabel_196:
   \   000093   E5..         MOV       A,?V4
   \   000095   F0           MOVX      @DPTR,A
   \   000096   A3           INC       DPTR
   \   000097   E5..         MOV       A,?V5
   \   000099   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   00009C   5001         JNC       ??ZDO_ParseSimpleDescBuf_6
   \   00009E   0F           INC       R7
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   00009F   0A           INC       R2
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   0000A0   EA           MOV       A,R2
   \   0000A1   C3           CLR       C
   \   0000A2   95..         SUBB      A,?V2
   \   0000A4   40D6         JC        ??ZDO_ParseSimpleDescBuf_5
   3553            }
   3554          
   3555            // move in output cluster list (if any). allocate aligned memory.
   3556            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   0000A6   8E82         MOV       DPL,R6
   \   0000A8   8F83         MOV       DPH,R7
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F5..         MOV       ?V2,A
   \   0000AD   A3           INC       DPTR
   \   0000AE   AE82         MOV       R6,DPL
   \   0000B0   AF83         MOV       R7,DPH
   \   0000B2   85..82       MOV       DPL,?V0
   \   0000B5   85..83       MOV       DPH,?V1
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   A3           INC       DPTR
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   F0           MOVX      @DPTR,A
   3557            if (num)
   \   0000C2   606D         JZ        ??ZDO_ParseSimpleDescBuf_7
   3558            {
   3559              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000C4                ; Setup parameters for call to function osal_mem_alloc
   \   0000C4   12....       LCALL     ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0000C7   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000CA   8A..         MOV       ?V4,R2
   \   0000CC   8B..         MOV       ?V5,R3
   \   0000CE   A8..         MOV       R0,?V4
   \   0000D0   A9..         MOV       R1,?V5
   \   0000D2   85..82       MOV       DPL,?V0
   \   0000D5   85..83       MOV       DPH,?V1
   \   0000D8   A3           INC       DPTR
   \   0000D9   A3           INC       DPTR
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   A3           INC       DPTR
   \   0000E1   A3           INC       DPTR
   \   0000E2   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_423:
   \   0000E5   E8           MOV       A,R0
   \   0000E6   49           ORL       A,R1
   \   0000E7   701C         JNZ       ??ZDO_ParseSimpleDescBuf_8
   3560              {
   3561                // malloc failed. free input cluster list memory if there is any
   3562                if ( desc->pAppInClusterList != NULL )
   \   0000E9   85..82       MOV       DPL,?V6
   \   0000EC   85..83       MOV       DPH,?V7
   \   0000EF   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   0000F2   600D         JZ        ??ZDO_ParseSimpleDescBuf_3
   3563                {
   3564                  osal_mem_free(desc->pAppInClusterList);
   \   0000F4                ; Setup parameters for call to function osal_mem_free
   \   0000F4   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3565          
   3566                  desc->pAppInClusterList = NULL;
   \   0000F7   85..82       MOV       DPL,?V6
   \   0000FA   85..83       MOV       DPH,?V7
   \   0000FD   E4           CLR       A
   \   0000FE   F0           MOVX      @DPTR,A
   \   0000FF   A3           INC       DPTR
   \   000100   F0           MOVX      @DPTR,A
   3567                }
   3568                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   000101   7901         MOV       R1,#0x1
   \   000103   802E         SJMP      ??ZDO_ParseSimpleDescBuf_9
   3569              }
   3570              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   000105   7A00         MOV       R2,#0x0
   \   000107   8022         SJMP      ??ZDO_ParseSimpleDescBuf_10
   3571              {
   3572                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   000109   8E82         MOV       DPL,R6
   \   00010B   8F83         MOV       DPH,R7
   \   00010D   12....       LCALL     ??Subroutine248_0 & 0xFFFF
   3573                buf += 2;
   3574              }
   \                     ??CrossCallReturnLabel_622:
   \   000110   FC           MOV       R4,A
   \   000111   E4           CLR       A
   \   000112   CC           XCH       A,R4
   \   000113   FD           MOV       R5,A
   \   000114   E5..         MOV       A,?V0
   \   000116   2C           ADD       A,R4
   \   000117   E4           CLR       A
   \   000118   3D           ADDC      A,R5
   \   000119   F5..         MOV       ?V1,A
   \   00011B   12....       LCALL     ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00011E   E5..         MOV       A,?V0
   \   000120   F0           MOVX      @DPTR,A
   \   000121   A3           INC       DPTR
   \   000122   E5..         MOV       A,?V1
   \   000124   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   000127   5001         JNC       ??ZDO_ParseSimpleDescBuf_12
   \   000129   0F           INC       R7
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   00012A   0A           INC       R2
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   00012B   EA           MOV       A,R2
   \   00012C   C3           CLR       C
   \   00012D   95..         SUBB      A,?V2
   \   00012F   40D8         JC        ??ZDO_ParseSimpleDescBuf_11
   3575            }
   3576            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   000131   7900         MOV       R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   000133   02....       LJMP      ??Subroutine201_0 & 0xFFFF
   3577          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   EA           MOV       A,R2
   \   000001   25E0         ADD       A,0xE0 /* A   */
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   33           RLC       A
   \   000006   FD           MOV       R5,A
   \   000007   E8           MOV       A,R0
   \   000008   2C           ADD       A,R4
   \   000009   F582         MOV       DPL,A
   \   00000B   E9           MOV       A,R1
   \   00000C   3D           ADDC      A,R5
   \   00000D   F583         MOV       DPH,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   FA           MOV       R2,A
   \   000001                REQUIRE ??Subroutine249_0
   \   000001                ; // Fall through to label ??Subroutine249_0
   3578          
   3579          /*********************************************************************
   3580           * @fn          ZDO_ParseDeviceAnnce
   3581           *
   3582           * @brief       Parse a Device Announce message.
   3583           *
   3584           * @param       inMsg - Incoming message
   3585           * @param       pAnnce - place to put the parsed information
   3586           *
   3587           * @return      none
   3588           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3589          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3590          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   3591            uint8 *msg;
   3592          
   3593            // Parse incoming message
   3594            msg = inMsg->asdu;
   \   000009   12....       LCALL     ?Subroutine65 & 0xFFFF
   3595            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_608:
   \   00000C   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_627:
   \   00000F   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   3596            msg += 2;
   \                     ??CrossCallReturnLabel_557:
   \   000012   5001         JNC       ??ZDO_ParseDeviceAnnce_0
   \   000014   0F           INC       R7
   3597            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   000015                ; Setup parameters for call to function sAddrExtCpy
   \   000015   FC           MOV       R4,A
   \   000016   EF           MOV       A,R7
   \   000017   FD           MOV       R5,A
   \   000018   E5..         MOV       A,?V0
   \   00001A   2402         ADD       A,#0x2
   \   00001C   FA           MOV       R2,A
   \   00001D   E4           CLR       A
   \   00001E   35..         ADDC      A,?V1
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3598            msg += Z_EXTADDR_LEN;
   3599            pAnnce->capabilities = *msg;
   \   000024   8E82         MOV       DPL,R6
   \   000026   8F83         MOV       DPH,R7
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   A3           INC       DPTR
   \   000032   F0           MOVX      @DPTR,A
   3600          }
   \   000033   02....       LJMP      ??Subroutine203_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003   22           RET
   3601          
   3602          /*********************************************************************
   3603           * @fn          ZDO_ParseParentAnnce
   3604           *
   3605           * @brief       Parse Parent Announce and Parent Announce Rsp messages,
   3606           *              both messages have the same payload.
   3607           *
   3608           * @param       inMsg - Incoming message
   3609           *
   3610           * @return      a pointer to parsed response structure (NULL if not allocated).
   3611           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3612           *          by the calling function [osal_mem_free()].
   3613           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3614          ZDO_ParentAnnce_t *ZDO_ParseParentAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseParentAnnce:
   3615          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3616            ZDO_ParentAnnce_t *pRcvdMsg;
   3617            uint8 *msg;
   3618            uint8 numChildren;
   3619          
   3620            msg = inMsg->asdu;
   \   000005   12....       LCALL     ??Subroutine251_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_639:
   \   000008   F583         MOV       DPH,A
   \   00000A   12....       LCALL     ?Subroutine114 & 0xFFFF
   3621            if ( inMsg->clusterID == Parent_annce_rsp)
   \                     ??CrossCallReturnLabel_183:
   \   00000D   EA           MOV       A,R2
   \   00000E   240C         ADD       A,#0xc
   \   000010   F582         MOV       DPL,A
   \   000012   E4           CLR       A
   \   000013   3B           ADDC      A,R3
   \   000014   F583         MOV       DPH,A
   \   000016   E0           MOVX      A,@DPTR
   \   000017   641F         XRL       A,#0x1f
   \   000019   7004         JNZ       ??ZDO_ParseParentAnnce_0
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   6480         XRL       A,#0x80
   \                     ??ZDO_ParseParentAnnce_0:
   \   00001F   7009         JNZ       ??ZDO_ParseParentAnnce_1
   3622            {
   3623              *msg++;
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   A3           INC       DPTR
   \   000026   AE82         MOV       R6,DPL
   \   000028   AF83         MOV       R7,DPH
   3624            }
   3625            numChildren = *msg++;
   \                     ??ZDO_ParseParentAnnce_1:
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F5..         MOV       ?V3,A
   \   000031   A3           INC       DPTR
   \   000032   AE82         MOV       R6,DPL
   \   000034   AF83         MOV       R7,DPH
   3626          
   3627            // Allocate a buffer big enough to handle the list
   3628            pRcvdMsg = (ZDO_ParentAnnce_t *)osal_mem_alloc(
   3629                       (sizeof(ZDO_ParentAnnce_t) + (numChildren * sizeof(ZDO_ChildInfo_t))));
   \   000036                ; Setup parameters for call to function osal_mem_alloc
   \   000036   75F00C       MOV       B,#0xc
   \   000039   A4           MUL       AB
   \   00003A   A9F0         MOV       R1,B
   \   00003C   2401         ADD       A,#0x1
   \   00003E   FA           MOV       R2,A
   \   00003F   E4           CLR       A
   \   000040   39           ADDC      A,R1
   \   000041   FB           MOV       R3,A
   \   000042   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000045   8A..         MOV       ?V4,R2
   \   000047   8B..         MOV       ?V5,R3
   3630          
   3631            if ( pRcvdMsg )
   \   000049   EA           MOV       A,R2
   \   00004A   45..         ORL       A,?V5
   \   00004C   6064         JZ        ??ZDO_ParseParentAnnce_2
   3632            {
   3633              uint8 x;
   3634              ZDO_ChildInfo_t *pList = pRcvdMsg->childInfo;
   \   00004E   8A82         MOV       DPL,R2
   \   000050   8B83         MOV       DPH,R3
   \   000052   A3           INC       DPTR
   \   000053   8582..       MOV       ?V0,DPL
   \   000056   8583..       MOV       ?V1,DPH
   3635          
   3636              pRcvdMsg->numOfChildren = numChildren;
   \   000059   8A82         MOV       DPL,R2
   \   00005B   8B83         MOV       DPH,R3
   \   00005D   E5..         MOV       A,?V3
   \   00005F   F0           MOVX      @DPTR,A
   3637          
   3638              for ( x = 0; x < numChildren; x++ )
   \   000060   75..00       MOV       ?V2,#0x0
   \   000063   8046         SJMP      ??ZDO_ParseParentAnnce_3
   3639              {
   3640                osal_cpyExtAddr( pList->extAddr, msg );
   \                     ??ZDO_ParseParentAnnce_4:
   \   000065                ; Setup parameters for call to function sAddrExtCpy
   \   000065   EE           MOV       A,R6
   \   000066   FC           MOV       R4,A
   \   000067   EF           MOV       A,R7
   \   000068   FD           MOV       R5,A
   \   000069   AA..         MOV       R2,?V0
   \   00006B   AB..         MOV       R3,?V1
   \   00006D   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3641                msg += Z_EXTADDR_LEN;
   \   000070   EE           MOV       A,R6
   \   000071   2408         ADD       A,#0x8
   \   000073   FE           MOV       R6,A
   \   000074   5001         JNC       ??ZDO_ParseParentAnnce_5
   \   000076   0F           INC       R7
   3642          
   3643                pList->age = osal_build_uint32( msg, 4 );
   \                     ??ZDO_ParseParentAnnce_5:
   \   000077                ; Setup parameters for call to function osal_build_uint32
   \   000077   7904         MOV       R1,#0x4
   \   000079   FA           MOV       R2,A
   \   00007A   EF           MOV       A,R7
   \   00007B   FB           MOV       R3,A
   \   00007C   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00007F   EA           MOV       A,R2
   \   000080   F8           MOV       R0,A
   \   000081   EB           MOV       A,R3
   \   000082   F9           MOV       R1,A
   \   000083   EC           MOV       A,R4
   \   000084   FA           MOV       R2,A
   \   000085   ED           MOV       A,R5
   \   000086   FB           MOV       R3,A
   \   000087   85..82       MOV       DPL,?V0
   \   00008A   85..83       MOV       DPH,?V1
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   A3           INC       DPTR
   \   000094   A3           INC       DPTR
   \   000095   12....       LCALL     ?XSTORE_R0123
   3644                msg += 4;
   \   000098   EE           MOV       A,R6
   \   000099   2404         ADD       A,#0x4
   \   00009B   FE           MOV       R6,A
   \   00009C   5001         JNC       ??ZDO_ParseParentAnnce_6
   \   00009E   0F           INC       R7
   3645          
   3646                pList++;
   \                     ??ZDO_ParseParentAnnce_6:
   \   00009F   E5..         MOV       A,?V0
   \   0000A1   240C         ADD       A,#0xc
   \   0000A3   F5..         MOV       ?V0,A
   \   0000A5   5002         JNC       ??ZDO_ParseParentAnnce_7
   \   0000A7   05..         INC       ?V1
   3647              }
   \                     ??ZDO_ParseParentAnnce_7:
   \   0000A9   05..         INC       ?V2
   \                     ??ZDO_ParseParentAnnce_3:
   \   0000AB   E5..         MOV       A,?V2
   \   0000AD   C3           CLR       C
   \   0000AE   95..         SUBB      A,?V3
   \   0000B0   40B3         JC        ??ZDO_ParseParentAnnce_4
   3648            }
   3649          
   3650            return ( pRcvdMsg );
   \                     ??ZDO_ParseParentAnnce_2:
   \   0000B2   AA..         MOV       R2,?V4
   \   0000B4   AB..         MOV       R3,?V5
   \   0000B6   02....       LJMP      ??Subroutine222_0 & 0xFFFF
   3651          }
   3652          
   3653          /*********************************************************************
   3654           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3655           *
   3656           * @brief       This function handles parsing of the incoming Management
   3657           *              Network Update notify.
   3658           *
   3659           * @param       inMsg - incoming message (request)
   3660           *
   3661           * @return      a pointer to parsed response structure (NULL if not allocated).
   3662           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3663           *          by the calling function [osal_mem_free()].
   3664           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005                REQUIRE ??Subroutine214_0
   \   000005                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3665          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3666          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   3667            uint8 status;
   3668            uint32 scannedChannels = 0;
   \   00000A   75..00       MOV       ?V0,#0x0
   \   00000D   75..00       MOV       ?V1,#0x0
   \   000010   75..00       MOV       ?V2,#0x0
   \   000013   75..00       MOV       ?V3,#0x0
   3669            uint16 totalTransmissions = 0;
   \   000016   7406         MOV       A,#0x6
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   F0           MOVX      @DPTR,A
   3670            uint16 transmissionFailures = 0;
   \   00001F   F5..         MOV       ?V4,A
   \   000021   F5..         MOV       ?V5,A
   3671            uint8 listCount = 0;
   \   000023   7402         MOV       A,#0x2
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   E4           CLR       A
   \   000029   12....       LCALL     ?Subroutine32 & 0xFFFF
   3672            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_51:
   \   00002C   F8           MOV       R0,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   12....       LCALL     ?Subroutine13 & 0xFFFF
   3673            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3674          
   3675            status = *msg++;
   \                     ??CrossCallReturnLabel_444:
   \   000032   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000035   C0E0         PUSH      A
   \   000037   7405         MOV       A,#0x5
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   D0E0         POP       A
   \   00003E   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000041   2401         ADD       A,#0x1
   \   000043   12....       LCALL     ?Subroutine31 & 0xFFFF
   3676            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_426:
   \   000046   7405         MOV       A,#0x5
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   7054         JNZ       ??CrossCallReturnLabel_427
   3677            {
   3678              scannedChannels = osal_build_uint32( msg, 4 );
   \   00004E                ; Setup parameters for call to function osal_build_uint32
   \   00004E   7904         MOV       R1,#0x4
   \   000050   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   000053   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000056   8A..         MOV       ?V0,R2
   \   000058   8B..         MOV       ?V1,R3
   \   00005A   8C..         MOV       ?V2,R4
   \   00005C   8D..         MOV       ?V3,R5
   3679              msg += 4;
   \   00005E   85..82       MOV       DPL,?XSP + 0
   \   000061   85..83       MOV       DPH,?XSP + 1
   \   000064   E0           MOVX      A,@DPTR
   \   000065   2404         ADD       A,#0x4
   \   000067   12....       LCALL     ?Subroutine8 & 0xFFFF
   3680              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_0:
   \   00006A   F9           MOV       R1,A
   \   00006B   EA           MOV       A,R2
   \   00006C   F8           MOV       R0,A
   \   00006D   7406         MOV       A,#0x6
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   3681              msg += 2;
   \                     ??CrossCallReturnLabel_445:
   \   000075   2402         ADD       A,#0x2
   \   000077   12....       LCALL     ?Subroutine8 & 0xFFFF
   3682              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_1:
   \   00007A   F8           MOV       R0,A
   \   00007B   E4           CLR       A
   \   00007C   C8           XCH       A,R0
   \   00007D   F9           MOV       R1,A
   \   00007E   EA           MOV       A,R2
   \   00007F   28           ADD       A,R0
   \   000080   F5..         MOV       ?V4,A
   \   000082   E4           CLR       A
   \   000083   39           ADDC      A,R1
   \   000084   F5..         MOV       ?V5,A
   3683              msg += 2;
   3684              listCount = *msg++;
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   12....       LCALL     ?Subroutine86 & 0xFFFF
   3685            }
   \                     ??CrossCallReturnLabel_655:
   \   00008F   A3           INC       DPTR
   \   000090   E0           MOVX      A,@DPTR
   \   000091   C0E0         PUSH      A
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   D0E0         POP       A
   \   00009A   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00009D   2403         ADD       A,#0x3
   \   00009F   12....       LCALL     ?Subroutine31 & 0xFFFF
   3686          
   3687            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??CrossCallReturnLabel_427:
   \   0000A2   7402         MOV       A,#0x2
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   FE           MOV       R6,A
   \   0000A9                ; Setup parameters for call to function osal_mem_alloc
   \   0000A9   240A         ADD       A,#0xa
   \   0000AB   FA           MOV       R2,A
   \   0000AC   E4           CLR       A
   \   0000AD   3400         ADDC      A,#0x0
   \   0000AF   FB           MOV       R3,A
   \   0000B0   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B3   7403         MOV       A,#0x3
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL     ?Subroutine18 & 0xFFFF
   3688          
   3689            if ( pRsp )
   \                     ??CrossCallReturnLabel_23:
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   0000C1   7003         JNZ       $+5
   \   0000C3   02....       LJMP      ??ZDO_ParseMgmtNwkUpdateNotify_0 & 0xFFFF
   3690            {
   3691              pRsp->status = status;
   \   0000C6   7405         MOV       A,#0x5
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   C0E0         PUSH      A
   \   0000CE   7403         MOV       A,#0x3
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL     ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_650:
   \   0000D6   D0E0         POP       A
   \   0000D8   F0           MOVX      @DPTR,A
   3692              pRsp->scannedChannels = scannedChannels;
   \   0000D9   7403         MOV       A,#0x3
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_656:
   \   0000E1   78..         MOV       R0,#?V0
   \   0000E3   12....       LCALL     ?L_MOV_TO_X
   3693              pRsp->totalTransmissions = totalTransmissions;
   \   0000E6   7406         MOV       A,#0x6
   \   0000E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EB   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   0000EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F1   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   0000F4   A3           INC       DPTR
   \   0000F5   A3           INC       DPTR
   \   0000F6   A3           INC       DPTR
   \   0000F7   A3           INC       DPTR
   \   0000F8   A3           INC       DPTR
   \   0000F9   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   3694              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_424:
   \   0000FC   7403         MOV       A,#0x3
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   12....       LCALL     ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_666:
   \   000104   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000107   E5..         MOV       A,?V4
   \   000109   F0           MOVX      @DPTR,A
   \   00010A   A3           INC       DPTR
   \   00010B   E5..         MOV       A,?V5
   \   00010D   F0           MOVX      @DPTR,A
   3695              pRsp->listCount = listCount;
   \   00010E   7402         MOV       A,#0x2
   \   000110   12....       LCALL     ?XSTACK_DISP0_8
   \   000113   E0           MOVX      A,@DPTR
   \   000114   C0E0         PUSH      A
   \   000116   7403         MOV       A,#0x3
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00011E   D0E0         POP       A
   \   000120   F0           MOVX      @DPTR,A
   3696          
   3697              // Allocate a buffer big enough to handle the list.
   3698              if ( listCount > 0 )
   \   000121   7402         MOV       A,#0x2
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   E0           MOVX      A,@DPTR
   \   000127   6026         JZ        ??ZDO_ParseMgmtNwkUpdateNotify_0
   3699              {
   3700                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   000129                ; Setup parameters for call to function osal_memcpy
   \   000129   85..82       MOV       DPL,?XSP + 0
   \   00012C   85..83       MOV       DPH,?XSP + 1
   \   00012F   12....       LCALL     ?Subroutine61 & 0xFFFF
   3701              }
   3702            }
   \                     ??CrossCallReturnLabel_105:
   \   000132   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000135   EE           MOV       A,R6
   \   000136   FC           MOV       R4,A
   \   000137   7D00         MOV       R5,#0x0
   \   000139   7406         MOV       A,#0x6
   \   00013B   12....       LCALL     ?XSTACK_DISP0_8
   \   00013E   E0           MOVX      A,@DPTR
   \   00013F   240A         ADD       A,#0xa
   \   000141   FA           MOV       R2,A
   \   000142   A3           INC       DPTR
   \   000143   E0           MOVX      A,@DPTR
   \   000144   3400         ADDC      A,#0x0
   \   000146   FB           MOV       R3,A
   \   000147   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00014A   7403         MOV       A,#0x3
   \   00014C   12....       LCALL     ?DEALLOC_XSTACK8
   3703          
   3704            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   00014F   7403         MOV       A,#0x3
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   000157   7408         MOV       A,#0x8
   \   000159   02....       LJMP      ?Subroutine5 & 0xFFFF
   3705          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   F9           MOV       R1,A
   \   000006   85..82       MOV       DPL,?XSP + 0
   \   000009   85..83       MOV       DPH,?XSP + 1
   \   00000C   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   00000F   12....       LCALL     ?Subroutine194 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000012   FA           MOV       R2,A
   \   000013   85..82       MOV       DPL,?XSP + 0
   \   000016   85..83       MOV       DPH,?XSP + 1
   \   000019   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_657:
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   22           RET
   3706          
   3707          /*********************************************************************
   3708           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3709           *
   3710           * @brief       This function handles parsing the incoming Management
   3711           *              Network Update request and starts the request (if needed).
   3712           *
   3713           * @param       inMsg - incoming message (request)
   3714           * @param       pReq - pointer to place to parse message to
   3715           *
   3716           * @return      none
   3717           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3718          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3719          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine123 & 0xFFFF
   3720            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_635:
   \   000008   12....       LCALL     ?Subroutine89 & 0xFFFF
   3721          
   3722            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_147:
   \   00000B   12....       LCALL     `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00000E   EA           MOV       A,R2
   \   00000F   F8           MOV       R0,A
   \   000010   EB           MOV       A,R3
   \   000011   F9           MOV       R1,A
   \   000012   EC           MOV       A,R4
   \   000013   FA           MOV       R2,A
   \   000014   ED           MOV       A,R5
   \   000015   FB           MOV       R3,A
   \   000016   85..82       MOV       DPL,?V0
   \   000019   85..83       MOV       DPH,?V1
   \   00001C   12....       LCALL     ?XSTORE_R0123
   3723            msg += 4;
   3724            pReq->scanDuration = *msg++;
   \   00001F   8E82         MOV       DPL,R6
   \   000021   8F83         MOV       DPH,R7
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   FA           MOV       R2,A
   \   000029   E5..         MOV       A,?V0
   \   00002B   2404         ADD       A,#0x4
   \   00002D   F8           MOV       R0,A
   \   00002E   E4           CLR       A
   \   00002F   35..         ADDC      A,?V1
   \   000031   F9           MOV       R1,A
   \   000032   EA           MOV       A,R2
   \   000033   8882         MOV       DPL,R0
   \   000035   8983         MOV       DPH,R1
   \   000037   F0           MOVX      @DPTR,A
   3725          
   3726            if ( pReq->scanDuration <= 0x05 )
   \   000038   C3           CLR       C
   \   000039   9406         SUBB      A,#0x6
   \   00003B   5009         JNC       ??ZDO_ParseMgmtNwkUpdateReq_0
   3727            {
   3728              // Request is to scan over channelMask
   3729              pReq->scanCount = *msg;
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   12....       LCALL     ?Subroutine191 & 0xFFFF
   3730            }
   \                     ??CrossCallReturnLabel_318:
   \   000044   8027         SJMP      ??ZDO_ParseMgmtNwkUpdateReq_1
   3731            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000046   74FE         MOV       A,#-0x2
   \   000048   6A           XRL       A,R2
   \   000049   6005         JZ        ??ZDO_ParseMgmtNwkUpdateReq_2
   \   00004B   74FF         MOV       A,#-0x1
   \   00004D   6A           XRL       A,R2
   \   00004E   701E         JNZ       ??ZDO_ParseMgmtNwkUpdateReq_3
   3732            {
   3733              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3734              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000050   8E82         MOV       DPL,R6
   \   000052   8F83         MOV       DPH,R7
   \   000054   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000057   F0           MOVX      @DPTR,A
   \   000058   EE           MOV       A,R6
   \   000059   2406         ADD       A,#0x6
   \   00005B   FE           MOV       R6,A
   \   00005C   5001         JNC       ??ZDO_ParseMgmtNwkUpdateReq_4
   \   00005E   0F           INC       R7
   3735          
   3736              if ( pReq->scanDuration == 0xFF )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   00005F   8882         MOV       DPL,R0
   \   000061   8983         MOV       DPH,R1
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F4           CPL       A
   \   000065   7007         JNZ       ??ZDO_ParseMgmtNwkUpdateReq_3
   3737              {
   3738                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000067   12....       LCALL     ?Subroutine63 & 0xFFFF
   3739              }
   3740            }
   \                     ??CrossCallReturnLabel_109:
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   E9           MOV       A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   00006D   F0           MOVX      @DPTR,A
   3741          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   00006E   02....       LJMP      ??Subroutine203_0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdpExternalStateTaskID>`:
   \   000000   FFFF         DW -1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdoSendStateChangeMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdoSendStateChangeMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CompareClusterLists::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessParentAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessParentAnnceRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessParentAnnceRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_MatchEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveMatchMemory::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CopyMatchInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDMatchSendState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceBindMatchTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseParentAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   3742          
   3743          /*********************************************************************
   3744          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   NLME_PermitJoiningTimeout
        2      0   -> ZDSecMgrPermitJoiningTimeout
      1     71   ZDMatchSendState
        0     37   -> APS_SetEndDeviceBindTimeout
        0     37   -> ZDO_RemoveMatchMemory
        0     45   -> ZDP_BindUnbindReq
        0     42   -> ZDP_SendData
        0     37   -> sAddrExtCpy
      0     48   ZDO_AnyClusterMatches
      1     14   ZDO_BuildSimpleDescBuf
      0     46   ZDO_CompareClusterLists
      0     44   ZDO_ConvertOTAClusters
      0     45   ZDO_CopyMatchInfo
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     19   -> osal_memcpy
      2      0   ZDO_EndDeviceBindMatchTimeoutCB
        2      0   -> ZDMatchSendState
      1     17   ZDO_EndDeviceTimeoutCB
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_CoordinatorInit
        2      0   -> sAddrExtCpy
      1     31   ZDO_MatchEndDeviceBind
        0     26   -> APS_SetEndDeviceBindTimeout
        0     26   -> ZDMatchSendState
        0     30   -> ZDO_CompareClusterLists
        0     26   -> ZDO_CopyMatchInfo
        0     26   -> ZDO_RemoveMatchMemory
        0     31   -> ZDP_SendData
        0     26   -> osal_mem_alloc
        0     29   -> osal_memcpy
        0     26   -> osal_memset
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     61   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     19   ZDO_ParseEPListRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      1     16   ZDO_ParseEndDeviceBindReq
        0     16   -> ZDO_ConvertOTAClusters
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtBindRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     25   ZDO_ParseMgmtNwkUpdateNotify
        0     22   -> osal_build_uint32
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      1     10   ZDO_ParseNodeDescRsp
      1     51   ZDO_ParseParentAnnce
        0     14   -> osal_build_uint32
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     25   ZDO_ParseSimpleDescBuf
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     19   ZDO_ParseUserDescRsp
        0     16   -> osal_mem_alloc
        0     19   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      0     33   ZDO_ProcessBindUnbindReq
        0     29   -> APSME_BindRequest
        0     28   -> APSME_LookupNwkAddr
        0     29   -> APSME_UnBindRequest
        0     28   -> NLME_GetExtAddr
        0     28   -> ZDApp_NVUpdate
        0     28   -> ZDP_NwkAddrReq
        0     33   -> ZDP_SendData
        0     28   -> sAddrExtCmp
        0     28   -> sAddrExtCpy
      0     54   ZDO_ProcessDeviceAnnce
        0     51   -> AddrMgrEntryLookupExt
        0     51   -> AddrMgrEntryLookupNwk
        0     51   -> AddrMgrEntryUpdate
        0     51   -> AddrMgrExtAddrSet
        0     51   -> AssocGetWithExt
        0     51   -> AssocRemove
        0     51   -> NLME_CheckNewAddrSet
        0     51   -> NLME_GetCoordExtAddr
        0     51   -> NLME_GetCoordShortAddr
        0     51   -> NLME_GetShortAddr
        0     51   -> RTG_RemoveRtgEntry
        0     51   -> ZDO_ParseDeviceAnnce
        0     51   -> ZMacSetReq
        0     51   -> nwkNeighborRemove
        0     51   -> nwkNeighborRemoveAllStranded
        0     51   -> osal_get_timeoutEx
        0     54   -> osal_memcmp
        0     51   -> osal_memset
        0     51   -> osal_stop_timerEx
        0     51   -> sAddrExtCmp
      1     41   ZDO_ProcessMatchDescReq
        0     34   -> NLME_IsAddressBroadcast
        0     36   -> ZDO_AnyClusterMatches
        0     34   -> ZDO_ConvertOTAClusters
        0     41   -> ZDP_EPRsp
        0     34   -> osal_mem_alloc
        0     34   -> osal_mem_free
        0     37   -> osal_memcpy
        0     34   -> osal_msg_allocate
        0     34   -> osal_msg_send
      0     24   ZDO_ProcessMgmtBindReq
        0     19   -> APSME_GetRequest
        0     24   -> ZDP_MgmtBindRsp
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      0     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     23   -> ZDP_SendData
        0     18   -> bdb_setFN
        0     18   -> sAddrExtCmp
      1     63   ZDO_ProcessMgmtLqiReq
        0     58   -> AddrMgrEntryLookupNwk
        0     58   -> AssocCount
        0     58   -> AssocFindDevice
        0     58   -> NLME_GetRequest
        0     63   -> ZDP_MgmtLqiRsp
        0     58   -> osal_mem_alloc
        0     58   -> osal_mem_free
        0     58   -> osal_memset
        0     58   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     18   ZDO_ProcessMgmtPermitJoinReq
        0     13   -> APSME_IsDistributedSecurity
        0     13   -> NLME_PermitJoiningRequest
        0     18   -> ZDP_SendData
        0     13   -> ZDSecMgrPermitJoining
      0     22   ZDO_ProcessMgmtRtgReq
        0     17   -> NLME_GetRequest
        0     22   -> ZDP_MgmtRtgRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0      0   ZDO_ProcessNodeDescRsp
      0     42   ZDO_ProcessParentAnnce
        0     37   -> AssocGetWithExt
        0     37   -> AssocRemove
        0     37   -> ZDO_ParseParentAnnce
        0     42   -> ZDP_ParentAnnce
        0     37   -> osal_mem_alloc
        0     37   -> osal_mem_free
        0     37   -> sAddrExtCpy
      0     20   ZDO_ProcessParentAnnceRsp
        0     20   -> AssocGetWithExt
        0     20   -> AssocRemove
        0     20   -> ZDO_ParseParentAnnce
        0     20   -> osal_mem_free
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> AssocIsChild
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0      0   ZDO_ProcessSimpleDescRsp
      0     37   ZDO_ProcessUserDescReq
        0     37   -> ZDP_GenericRsp
        0     36   -> ZDP_UserDescRsp
        0     37   -> osal_nv_read
      1     40   ZDO_ProcessUserDescSet
        0     40   -> ZDP_SendData
        0     38   -> osal_memcpy
        0     39   -> osal_nv_write
      2     37   ZDO_RemoveMatchMemory
        2      0   -> osal_mem_free
      0     22   ZDO_StartDevice
        0     22   -> NLME_NetworkFormationRequest
        0     12   -> NLME_StartRouterRequest
        0     12   -> ZDApp_ChangeState
        0     16   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      0      9   ZDO_UpdateNwkStatus
        0      9   -> NLME_GetExtAddr
        0      9   -> NLME_GetShortAddr
        0      9   -> zdoSendStateChangeMsg
      1     19   zdoSendStateChangeMsg
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_find
        0     10   -> osal_msg_send
        0     10   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       2  ?<Initializer for zdpExternalStateTaskID>
       5  ??Subroutine197_0
       1  ??Subroutine198_0
       9  ??Subroutine199_0
       3  ??Subroutine200_0
       5  ??Subroutine201_0
       3  ??Subroutine202_0
       5  ??Subroutine203_0
       4  ??Subroutine204_0
       7  ??Subroutine205_0
       2  ??Subroutine206_0
       6  ??Subroutine207_0
       8  ??Subroutine208_0
       5  ??Subroutine209_0
       5  ??Subroutine210_0
       1  ??Subroutine211_0
       4  ??Subroutine212_0
       6  ??Subroutine213_0
       7  ??Subroutine214_0
       1  ??Subroutine215_0
       5  ??Subroutine216_0
       6  ??Subroutine217_0
       4  ??Subroutine218_0
       4  ??Subroutine219_0
       5  ??Subroutine220_0
       6  ??Subroutine221_0
       5  ??Subroutine222_0
       7  ??Subroutine223_0
       4  ??Subroutine224_0
       6  ??Subroutine225_0
       6  ??Subroutine226_0
       4  ??Subroutine227_0
       9  ??Subroutine228_0
      10  ??Subroutine229_0
       5  ??Subroutine230_0
       9  ??Subroutine231_0
       6  ??Subroutine232_0
       6  ??Subroutine233_0
      10  ??Subroutine234_0
       5  ??Subroutine235_0
       4  ??Subroutine236_0
       7  ??Subroutine237_0
       6  ??Subroutine238_0
       6  ??Subroutine239_0
       7  ??Subroutine240_0
       8  ??Subroutine241_0
       5  ??Subroutine242_0
       7  ??Subroutine243_0
       4  ??Subroutine244_0
       6  ??Subroutine245_0
       6  ??Subroutine246_0
       6  ??Subroutine247_0
       6  ??Subroutine248_0
       9  ??Subroutine249_0
       6  ??Subroutine250_0
       5  ??Subroutine251_0
       1  ??Subroutine252_0
       6  ??Subroutine253_0
       4  ??Subroutine254_0
       3  ??Subroutine255_0
       4  ??Subroutine256_0
       7  ?Subroutine0
       3  ?Subroutine1
      25  ?Subroutine10
       2  ?Subroutine100
       7  ?Subroutine101
      10  ?Subroutine102
       6  ?Subroutine103
      13  ?Subroutine104
       2  ?Subroutine105
      12  ?Subroutine106
      10  ?Subroutine107
      10  ?Subroutine108
      16  ?Subroutine109
      17  ?Subroutine11
      13  ?Subroutine110
       1  ?Subroutine111
       9  ?Subroutine112
      14  ?Subroutine113
       4  ?Subroutine114
       9  ?Subroutine115
      14  ?Subroutine116
       7  ?Subroutine117
      16  ?Subroutine118
       8  ?Subroutine119
      14  ?Subroutine12
       7  ?Subroutine120
      10  ?Subroutine121
       6  ?Subroutine122
       4  ?Subroutine123
      11  ?Subroutine124
       8  ?Subroutine125
       1  ?Subroutine126
      21  ?Subroutine127
       2  ?Subroutine128
      14  ?Subroutine129
       7  ?Subroutine13
       5  ?Subroutine130
       4  ?Subroutine131
       2  ?Subroutine132
       4  ?Subroutine133
       3  ?Subroutine134
       4  ?Subroutine135
      13  ?Subroutine136
       7  ?Subroutine137
       9  ?Subroutine138
       4  ?Subroutine139
       4  ?Subroutine14
      15  ?Subroutine140
      10  ?Subroutine141
       8  ?Subroutine142
      12  ?Subroutine143
      12  ?Subroutine144
       9  ?Subroutine145
      10  ?Subroutine146
      13  ?Subroutine147
       9  ?Subroutine148
       4  ?Subroutine149
       1  ?Subroutine15
       1  ?Subroutine150
       3  ?Subroutine151
      13  ?Subroutine152
       8  ?Subroutine153
       6  ?Subroutine154
       6  ?Subroutine155
       7  ?Subroutine156
       7  ?Subroutine157
       5  ?Subroutine158
       4  ?Subroutine159
      10  ?Subroutine16
       4  ?Subroutine160
       5  ?Subroutine161
      24  ?Subroutine162
      13  ?Subroutine163
      12  ?Subroutine164
      12  ?Subroutine165
       7  ?Subroutine166
       3  ?Subroutine167
       5  ?Subroutine168
       4  ?Subroutine169
       8  ?Subroutine17
       8  ?Subroutine170
       4  ?Subroutine171
       6  ?Subroutine172
      11  ?Subroutine173
       2  ?Subroutine174
       2  ?Subroutine175
       8  ?Subroutine176
       7  ?Subroutine177
      12  ?Subroutine178
       8  ?Subroutine179
       8  ?Subroutine18
       6  ?Subroutine180
       3  ?Subroutine181
      10  ?Subroutine182
       1  ?Subroutine183
       3  ?Subroutine184
      11  ?Subroutine185
       5  ?Subroutine186
       6  ?Subroutine187
       8  ?Subroutine188
       6  ?Subroutine189
      20  ?Subroutine19
       9  ?Subroutine190
      18  ?Subroutine191
      13  ?Subroutine192
       6  ?Subroutine193
       9  ?Subroutine194
       9  ?Subroutine195
       7  ?Subroutine196
       2  ?Subroutine2
       5  ?Subroutine20
       6  ?Subroutine21
       8  ?Subroutine22
      14  ?Subroutine23
       6  ?Subroutine24
       8  ?Subroutine25
       5  ?Subroutine26
       8  ?Subroutine27
      11  ?Subroutine28
      10  ?Subroutine29
       5  ?Subroutine3
       4  ?Subroutine30
       5  ?Subroutine31
       6  ?Subroutine32
       4  ?Subroutine33
       5  ?Subroutine34
       7  ?Subroutine35
      11  ?Subroutine36
       6  ?Subroutine37
       4  ?Subroutine38
       8  ?Subroutine39
       2  ?Subroutine4
       1  ?Subroutine40
      12  ?Subroutine41
       5  ?Subroutine42
       5  ?Subroutine43
       7  ?Subroutine44
       4  ?Subroutine45
      10  ?Subroutine46
       6  ?Subroutine47
       4  ?Subroutine48
       6  ?Subroutine49
       3  ?Subroutine5
       4  ?Subroutine50
       8  ?Subroutine51
      22  ?Subroutine52
       3  ?Subroutine53
      29  ?Subroutine54
       9  ?Subroutine55
       9  ?Subroutine56
       3  ?Subroutine57
       8  ?Subroutine58
      13  ?Subroutine59
       8  ?Subroutine6
      21  ?Subroutine60
       9  ?Subroutine61
       9  ?Subroutine62
       4  ?Subroutine63
      14  ?Subroutine64
       3  ?Subroutine65
      11  ?Subroutine66
      10  ?Subroutine67
       6  ?Subroutine68
      11  ?Subroutine69
       7  ?Subroutine7
       6  ?Subroutine70
       7  ?Subroutine71
      11  ?Subroutine72
       9  ?Subroutine73
      15  ?Subroutine74
      11  ?Subroutine75
      11  ?Subroutine76
       7  ?Subroutine77
       8  ?Subroutine78
       2  ?Subroutine79
      30  ?Subroutine8
       4  ?Subroutine80
       4  ?Subroutine81
       4  ?Subroutine82
      12  ?Subroutine83
       4  ?Subroutine84
       2  ?Subroutine85
       2  ?Subroutine86
       7  ?Subroutine87
       1  ?Subroutine88
      10  ?Subroutine89
      42  ?Subroutine9
       8  ?Subroutine90
       6  ?Subroutine91
       6  ?Subroutine92
       2  ?Subroutine93
       1  ?Subroutine94
       2  ?Subroutine95
      12  ?Subroutine96
      15  ?Subroutine97
       8  ?Subroutine98
       6  ?Subroutine99
       7  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
     662  ZDMatchSendState
       6  ZDMatchSendState::?relay
      52  ZDOBuildBuf
      92  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     214  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
     125  ZDO_CompareClusterLists
       6  ZDO_CompareClusterLists::?relay
      64  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
     203  ZDO_CopyMatchInfo
       6  ZDO_CopyMatchInfo::?relay
       2  ZDO_EDBind
      16  ZDO_EndDeviceBindMatchTimeoutCB
       6  ZDO_EndDeviceBindMatchTimeoutCB::?relay
     189  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
      31  ZDO_Init
       6  ZDO_Init::?relay
     573  ZDO_MatchEndDeviceBind
       6  ZDO_MatchEndDeviceBind::?relay
     226  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
      81  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
      54  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
     127  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     302  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
     240  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     172  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     266  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     348  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     113  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     180  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     284  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     185  ZDO_ParseParentAnnce
       6  ZDO_ParseParentAnnce::?relay
     198  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
      46  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     310  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
      30  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
     126  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     121  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     384  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     600  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
    1177  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     274  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
     105  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     172  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
     844  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     125  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
     150  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     253  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
      71  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
       3  ZDO_ProcessNodeDescRsp
       6  ZDO_ProcessNodeDescRsp::?relay
     640  ZDO_ProcessParentAnnce
       6  ZDO_ProcessParentAnnce::?relay
     169  ZDO_ProcessParentAnnceRsp
       6  ZDO_ProcessParentAnnceRsp::?relay
      71  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
      80  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     138  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
       3  ZDO_ProcessSimpleDescRsp
       6  ZDO_ProcessSimpleDescRsp::?relay
     192  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     277  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     108  ZDO_RemoveMatchMemory
       6  ZDO_RemoveMatchMemory::?relay
     138  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      49  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
      75  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  __Constant_3e8
       4  apsChannelMask
       2  matchED
      73  zdoSendStateChangeMsg
       6  zdoSendStateChangeMsg::?relay
       2  zdpExternalStateTaskID

 
 13 685 bytes in segment BANKED_CODE
    330 bytes in segment BANK_RELAYS
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
     12 bytes in segment XDATA_ROM_C
     60 bytes in segment XDATA_Z
 
    332 bytes of CODE     memory
      8 bytes of CONST    memory (+ 4 bytes shared)
 13 685 bytes of HUGECODE memory
     62 bytes of XDATA    memory

Errors: none
Warnings: none
