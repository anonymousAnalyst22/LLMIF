###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               22/Nov/2023  15:42:46
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\fuzzing-coordinator-response-collection\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWAFDB.tmp
#        (D:\fuzzing-coordinator-response-collection\Components\stack\zdo\ZDProfile.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
#        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
#        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
#        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
#        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\ZDProfile.lst
#    Object file        =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\ZDProfile.r51
#
###############################################################################

D:\fuzzing-coordinator-response-collection\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2015-10-14 11:48:06 -0700 (Wed, 14 Oct 2015) $
      4            Revision:       $Revision: 44530 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 childIndex = 0;
   \                     childIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          
    136          /*********************************************************************
    137           * EXTERNAL VARIABLES
    138           */
    139          
    140          extern endPointDesc_t ZDApp_epDesc;
    141          
    142          /*********************************************************************
    143           * EXTERNAL FUNCTIONS
    144           */
    145          extern void ZDApp_SetParentAnnceTimer( void );
    146          
    147          /*********************************************************************
    148           * LOCAL FUNCTIONS
    149           */
    150          
    151          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    152          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    153          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    154          
    155          /*********************************************************************
    156           * LOCAL VARIABLES
    157           */
    158          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    160          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    161          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    164          
    165          /*********************************************************************
    166           * ZDO Message Processing table
    167           */
    168          
    169          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    170          
    171          typedef struct
    172          {
    173            uint16                clusterID;
    174            pfnZDPMsgProcessor    pFn;
    175          } zdpMsgProcItem_t;
    176          

   \                                 In  segment CODE_C, align 1
    177          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   1300         DW 19
   \   000002   ....         DW `??ZDO_ProcessDeviceAnnce::?relay`
   \   000004   1F00         DW 31
   \   000006   ....         DW `??ZDO_ProcessParentAnnce::?relay`
   \   000008   1F80         DW 32799
   \   00000A   ....         DW `??ZDO_ProcessParentAnnceRsp::?relay`
   \   00000C   0000         DW 0
   \   00000E   ....         DW `??zdpProcessAddrReq::?relay`
   \   000010   0100         DW 1
   \   000012   ....         DW `??zdpProcessAddrReq::?relay`
   \   000014   0200         DW 2
   \   000016   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   000018   0280         DW 32770
   \   00001A   ....         DW `??ZDO_ProcessNodeDescRsp::?relay`
   \   00001C   0300         DW 3
   \   00001E   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   000020   0400         DW 4
   \   000022   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000024   0480         DW 32772
   \   000026   ....         DW `??ZDO_ProcessSimpleDescRsp::?relay`
   \   000028   0500         DW 5
   \   00002A   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   00002C   0600         DW 6
   \   00002E   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000030   3100         DW 49
   \   000032   ....         DW `??ZDO_ProcessMgmtLqiReq::?relay`
   \   000034   3300         DW 51
   \   000036   ....         DW `??ZDO_ProcessMgmtBindReq::?relay`
   \   000038   3400         DW 52
   \   00003A   ....         DW `??ZDO_ProcessMgmtLeaveReq::?relay`
   \   00003C   3600         DW 54
   \   00003E   ....         DW `??ZDO_ProcessMgmtPermitJoinReq::?relay`
   \   000040   FFFF         DW 65535
   \   000042   0000         DW 0H
    178          {
    179          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    180            // These aren't processed by sleeping end devices.
    181            { Device_annce,           ZDO_ProcessDeviceAnnce },
    182          #endif
    183          #if ( ZG_BUILD_RTR_TYPE )
    184            // These aren't processed by end devices.
    185            { Parent_annce,           ZDO_ProcessParentAnnce },
    186            { Parent_annce_rsp,       ZDO_ProcessParentAnnceRsp },
    187          #endif
    188            { NWK_addr_req,           zdpProcessAddrReq },
    189            { IEEE_addr_req,          zdpProcessAddrReq },
    190            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    191            { Node_Desc_rsp,          ZDO_ProcessNodeDescRsp },
    192            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    193            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    194            { Simple_Desc_rsp,        ZDO_ProcessSimpleDescRsp },
    195            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    196            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    197          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    198            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE || ZG_BUILD_ENDDEVICE_TYPE )
    201            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    202          #endif
    203          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    204            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    205          #endif
    206          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    207            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    208          #endif
    209          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    210            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    211          #endif
    212          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    213            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    214          #endif
    215          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    216            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    217          #endif
    218          #if defined ( ZDO_USERDESC_RESPONSE )
    219            { User_Desc_req,          ZDO_ProcessUserDescReq },
    220          #endif
    221          #if defined ( ZDO_USERDESCSET_RESPONSE )
    222            { User_Desc_set,          ZDO_ProcessUserDescSet },
    223          #endif
    224          #if defined ( ZDO_SERVERDISC_RESPONSE )
    225            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    226          #endif
    227            {0xFFFF, NULL} // Last
    228          };
    229          
    230          /*********************************************************************
    231           * @fn          fillAndSend
    232           *
    233           * @brief       Combined to reduce space
    234           *
    235           * @param
    236           * @param
    237           *
    238           * @return      afStatus_t
    239           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    240          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    241          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV       A,#-0xd
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V2,R2
   \   00000C   8B..         MOV       ?V3,R3
   \   00000E   8C..         MOV       ?V0,R4
   \   000010   8D..         MOV       ?V1,R5
   \   000012   E9           MOV       A,R1
   \   000013   FE           MOV       R6,A
    242            afAddrType_t afAddr;
    243          
    244            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV       R4,#0xc
   \   000016   7D00         MOV       R5,#0x0
   \   000018   7900         MOV       R1,#0x0
   \   00001A   AA..         MOV       R2,?XSP + 0
   \   00001C   AB..         MOV       R3,?XSP + 1
   \   00001E   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    245            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   7409         MOV       A,#0x9
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E4           CLR       A
   \   000027   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   C0E0         PUSH      A
   \   000030   7408         MOV       A,#0x8
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   D0E0         POP       A
   \   000037   F0           MOVX      @DPTR,A
   \   000038   85..82       MOV       DPL,?V0
   \   00003B   85..83       MOV       DPH,?V1
   \   00003E   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000041   12....       LCALL     ??Subroutine124_0 & 0xFFFF
    246          
    247            *(ZDP_TmpBuf-1) = *transSeq;
   \                     ??CrossCallReturnLabel_248:
   \   000044   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000047   E0           MOVX      A,@DPTR
   \   000048   24FF         ADD       A,#-0x1
   \   00004A   F5..         MOV       ?V0,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   34FF         ADDC      A,#-0x1
   \   000050   F5..         MOV       ?V1,A
   \   000052   85..82       MOV       DPL,?V2
   \   000055   85..83       MOV       DPH,?V3
   \   000058   12....       LCALL     ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00005B   F0           MOVX      @DPTR,A
    248          
    249            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    250                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    251                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   00005C                ; Setup parameters for call to function AF_DataRequest
   \   00005C   75..1E       MOV       ?V4,#0x1e
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000064   78..         MOV       R0,#?V2
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000069   78..         MOV       R0,#?V0
   \   00006B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006E   EE           MOV       A,R6
   \   00006F   2401         ADD       A,#0x1
   \   000071   F5..         MOV       ?V0,A
   \   000073   E4           CLR       A
   \   000074   3400         ADDC      A,#0x0
   \   000076   F5..         MOV       ?V1,A
   \   000078   78..         MOV       R0,#?V0
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007D   7420         MOV       A,#0x20
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000085   90....       MOV       DPTR,#ZDP_TxOptions
   \   000088   E0           MOVX      A,@DPTR
   \   000089   F9           MOV       R1,A
   \   00008A   7C..         MOV       R4,#ZDApp_epDesc & 0xff
   \   00008C   7D..         MOV       R5,#(ZDApp_epDesc >> 8) & 0xff
   \   00008E   7409         MOV       A,#0x9
   \   000090   12....       LCALL     ?XSTACK_DISP101_8
   \   000093   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000096   7409         MOV       A,#0x9
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009B   740C         MOV       A,#0xc
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   7F05         MOV       R7,#0x5
   \   0000A2   02....       LJMP      ?BANKED_LEAVE_XDATA
    252          
    253          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000003   F9           MOV       R1,A
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    254          
    255          /*********************************************************************
    256           * @fn          ZDP_SendData
    257           *
    258           * @brief       This builds and send a request message that has
    259           *              NWKAddrOfInterest as its only parameter.
    260           *
    261           * @param       dstAddr - destination address
    262           * @param       cmd - clusterID
    263           * @param       dataLen - number of bytes of data
    264           * @param       data - pointer to the data
    265           * @param       SecurityEnable - Security Options
    266           *
    267           * @return      afStatus_t
    268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    270                                  byte len, uint8 *buf, byte SecurityEnable )
    271          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
    272            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   12....       LCALL     ?Subroutine45 & 0xFFFF
    273            byte cnt = len;
   \                     ??CrossCallReturnLabel_166:
   \   00000A   AE..         MOV       R6,?V0
   \   00000C   740E         MOV       A,#0xe
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000014   8014         SJMP      ??ZDP_SendData_0
    274          
    275            while ( cnt-- )
    276            {
    277              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000016   12....       LCALL     ?Subroutine35 & 0xFFFF
    278            }
   \                     ??CrossCallReturnLabel_164:
   \   000019   A882         MOV       R0,DPL
   \   00001B   A983         MOV       R1,DPH
   \   00001D   85..82       MOV       DPL,?V2
   \   000020   85..83       MOV       DPH,?V3
   \   000023   A3           INC       DPTR
   \   000024   8582..       MOV       ?V2,DPL
   \   000027   8583..       MOV       ?V3,DPH
   \                     ??ZDP_SendData_0:
   \   00002A   EE           MOV       A,R6
   \   00002B   FF           MOV       R7,A
   \   00002C   74FF         MOV       A,#-0x1
   \   00002E   2F           ADD       A,R7
   \   00002F   FE           MOV       R6,A
   \   000030   04           INC       A
   \   000031   70E3         JNZ       ??ZDP_SendData_1
    279          
    280            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   000033   7410         MOV       A,#0x10
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   E0           MOVX      A,@DPTR
   \   000039   90....       MOV       DPTR,#ZDP_TxOptions
   \   00003C   6004         JZ        ??ZDP_SendData_2
   \   00003E   7440         MOV       A,#0x40
   \   000040   8001         SJMP      ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   000042   E4           CLR       A
   \                     ??ZDP_SendData_3:
   \   000043   F0           MOVX      @DPTR,A
   \   000044                ; Setup parameters for call to function fillAndSend
   \   000044   740C         MOV       A,#0xc
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00004C   A9..         MOV       R1,?V0
   \   00004E   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   E9           MOV       A,R1
   \   000057   F9           MOV       R1,A
   \   000058   90....       MOV       DPTR,#ZDP_TxOptions
   \   00005B   E4           CLR       A
   \   00005C   F0           MOVX      @DPTR,A
   \   00005D   02....       LJMP      ??Subroutine104_0 & 0xFFFF
    281          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   85..82       MOV       DPL,?V2
   \   000008   85..83       MOV       DPH,?V3
   \   00000B                REQUIRE ??Subroutine100_0
   \   00000B                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine101_0
   \   000003                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   F9           MOV       R1,A
   \   000004   22           RET
    282          
    283          /*********************************************************************
    284           * @fn          ZDP_NWKAddrOfInterestReq
    285           *
    286           * @brief       This builds and send a request message that has
    287           *              NWKAddrOfInterest as its only parameter.
    288           *
    289           * @param       dstAddr - destination address
    290           * @param       nwkAddr - 16 bit address
    291           * @param       SecurityEnable - Security Options
    292           *
    293           * @return      afStatus_t
    294           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    295          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    296                                               byte cmd, byte SecurityEnable )
    297          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    298            (void)SecurityEnable;  // Intentionally unreferenced parameter
    299          
    300            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   12....       LCALL     ?Subroutine18 & 0xFFFF
    301            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_18:
   \   00000A   F0           MOVX      @DPTR,A
    302          
    303            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   EE           MOV       A,R6
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7902         MOV       R1,#0x2
   \   000018   02....       LJMP      ?Subroutine5 & 0xFFFF
    304          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000006   EC           MOV       A,R4
   \   000007   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00000A   ED           MOV       A,R5
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EA           MOV       A,R2
   \   000001   FC           MOV       R4,A
   \   000002   EB           MOV       A,R3
   \   000003   FD           MOV       R5,A
   \   000004   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine110_0
   \   000008                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000003   7402         MOV       A,#0x2
   \   000005   02....       LJMP      ??Subroutine107_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000004   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000007   A3           INC       DPTR
   \   000008   22           RET
    305          
    306          /*********************************************************************
    307           * Address Requests
    308           */
    309          
    310          /*********************************************************************
    311           * @fn          ZDP_NwkAddrReq
    312           *
    313           * @brief       This builds and send a NWK_addr_req message.  This
    314           *              function sends a broadcast message looking for a 16
    315           *              bit address with a 64 bit address as bait.
    316           *
    317           * @param       IEEEAddress - looking for this device
    318           * @param       SecurityEnable - Security Options
    319           *
    320           * @return      afStatus_t
    321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    323                                     byte StartIndex, byte SecurityEnable )
    324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   \   00000E   89..         MOV       ?V1,R1
   \   000010   8C..         MOV       ?V0,R4
    325            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   12....       LCALL     ?Subroutine45 & 0xFFFF
    326            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    327            zAddrType_t dstAddr;
    328          
    329            (void)SecurityEnable;  // Intentionally unreferenced parameter
    330          
    331            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_167:
   \   000015                ; Setup parameters for call to function sAddrExtCmp
   \   000015   EE           MOV       A,R6
   \   000016   FC           MOV       R4,A
   \   000017   EF           MOV       A,R7
   \   000018   FD           MOV       R5,A
   \   000019   7A..         MOV       R2,#saveExtAddr & 0xff
   \   00001B   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   00001D   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000020   E9           MOV       A,R1
   \   000021   700A         JNZ       ??ZDP_NwkAddrReq_0
    332            {
    333              dstAddr.addrMode = AddrBroadcast;
   \   000023   7408         MOV       A,#0x8
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   12....       LCALL     ?Subroutine87 & 0xFFFF
    334              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    335            }
   \                     ??CrossCallReturnLabel_137:
   \   00002B   8012         SJMP      ??ZDP_NwkAddrReq_1
    336            else
    337            {
    338              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   00002D   7408         MOV       A,#0x8
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   7402         MOV       A,#0x2
   \   000034   F0           MOVX      @DPTR,A
    339              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000035   90....       MOV       DPTR,#ZDAppNwkAddr
   \   000038   12....       LCALL     ?Subroutine50 & 0xFFFF
    340            }
   \                     ??CrossCallReturnLabel_72:
   \   00003B   E8           MOV       A,R0
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   E9           MOV       A,R1
   \                     ??ZDP_NwkAddrReq_1:
   \   00003F   F0           MOVX      @DPTR,A
    341          
    342            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   EE           MOV       A,R6
   \   000041   FC           MOV       R4,A
   \   000042   EF           MOV       A,R7
   \   000043   FD           MOV       R5,A
   \   000044   AA..         MOV       R2,?V2
   \   000046   AB..         MOV       R3,?V3
   \   000048   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
    343          
    344            *pBuf++ = ReqType;
   \   00004F   E5..         MOV       A,?V1
   \   000051   F0           MOVX      @DPTR,A
    345            *pBuf++ = StartIndex;
   \   000052   A3           INC       DPTR
   \   000053   E5..         MOV       A,?V0
   \   000055   F0           MOVX      @DPTR,A
    346          
    347            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000056                ; Setup parameters for call to function fillAndSend
   \   000056   E4           CLR       A
   \   000057   F5..         MOV       ?V2,A
   \   000059   F5..         MOV       ?V3,A
   \   00005B   78..         MOV       R0,#?V2
   \   00005D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000060   790A         MOV       R1,#0xa
   \   000062   7402         MOV       A,#0x2
   \   000064   12....       LCALL     ?XSTACK_DISP102_8
   \   000067                REQUIRE ?Subroutine6
   \   000067                ; // Fall through to label ?Subroutine6
    348          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000004   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000007   7402         MOV       A,#0x2
   \   000009   12....       LCALL     ?DEALLOC_XSTACK8
   \   00000C   7409         MOV       A,#0x9
   \   00000E   80..         SJMP      ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine104_0
   \   000003                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   740F         MOV       A,#0xf
   \   000002   F0           MOVX      @DPTR,A
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   74FD         MOV       A,#-0x3
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   74FF         MOV       A,#-0x1
   \   00000F   22           RET
    349          
    350          /*********************************************************************
    351           * @fn          ZDP_IEEEAddrReq
    352           *
    353           * @brief       This builds and send a IEEE_addr_req message.  This
    354           *              function sends a unicast message looking for a 64
    355           *              bit IEEE address with a 16 bit address as bait.
    356           *
    357           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    358           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    359           * @param       SecurityEnable - Security Options
    360           *
    361           * @return      afStatus_t
    362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    363          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    364                                      byte StartIndex, byte SecurityEnable )
    365          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FF           MOV       R7,A
   \   00000C   EC           MOV       A,R4
   \   00000D   12....       LCALL     ??Subroutine128_0 & 0xFFFF
    366            uint8 *pBuf = ZDP_TmpBuf;
    367            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    368            zAddrType_t dstAddr;
    369          
    370            (void)SecurityEnable;  // Intentionally unreferenced parameter
    371          
    372            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_288:
   \   000010   7408         MOV       A,#0x8
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   7402         MOV       A,#0x2
   \   000017   F0           MOVX      @DPTR,A
    373            dstAddr.addr.shortAddr = shortAddr;
   \   000018   12....       LCALL     ?Subroutine24 & 0xFFFF
    374          
    375            *pBuf++ = LO_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_282:
   \   00001B   EA           MOV       A,R2
   \   00001C   8882         MOV       DPL,R0
   \   00001E   8983         MOV       DPH,R1
   \   000020   F0           MOVX      @DPTR,A
    376            *pBuf++ = HI_UINT16( shortAddr );
   \   000021   EB           MOV       A,R3
   \   000022   A3           INC       DPTR
   \   000023   F0           MOVX      @DPTR,A
    377          
    378            *pBuf++ = ReqType;
   \   000024   EF           MOV       A,R7
   \   000025   8882         MOV       DPL,R0
   \   000027   8983         MOV       DPH,R1
   \   000029   12....       LCALL     ?Subroutine30 & 0xFFFF
    379            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_37:
   \   00002C   F0           MOVX      @DPTR,A
    380          
    381            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   00002D                ; Setup parameters for call to function fillAndSend
   \   00002D   75..01       MOV       ?V0,#0x1
   \   000030   75..00       MOV       ?V1,#0x0
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7904         MOV       R1,#0x4
   \   00003A   02....       LJMP      ?Subroutine1 & 0xFFFF
    382          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   EE           MOV       A,R6
   \   000004   8882         MOV       DPL,R0
   \   000006   8983         MOV       DPH,R1
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7402         MOV       A,#0x2
   \   000002   12....       LCALL     ?XSTACK_DISP102_8
   \   000005   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000007   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000009   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000C   7402         MOV       A,#0x2
   \   00000E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000011                REQUIRE ??Subroutine106_0
   \   000011                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   7409         MOV       A,#0x9
   \   000002                REQUIRE ??Subroutine107_0
   \   000002                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine127_0
   \   000006                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   FE           MOV       R6,A
   \   000001   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000004                REQUIRE ??Subroutine129_0
   \   000004                ; // Fall through to label ??Subroutine129_0
    383          
    384          /*********************************************************************
    385           * @fn          ZDP_MatchDescReq
    386           *
    387           * @brief       This builds and send a Match_Desc_req message.  This
    388           *              function sends a broadcast or unicast message
    389           *              requesting the list of endpoint/interfaces that
    390           *              match profile ID and cluster IDs.
    391           *
    392           * @param       dstAddr - destination address
    393           * @param       nwkAddr - network address of interest
    394           * @param       ProfileID - Profile ID
    395           * @param       NumInClusters - number of input clusters
    396           * @param       InClusterList - input cluster ID list
    397           * @param       NumOutClusters - number of output clusters
    398           * @param       OutClusterList - output cluster ID list
    399           * @param       SecurityEnable - Security Options
    400           *
    401           * @return      afStatus_t
    402           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    403          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    404                                          uint16 ProfileID,
    405                                          byte NumInClusters, cId_t *InClusterList,
    406                                          byte NumOutClusters, cId_t *OutClusterList,
    407                                          byte SecurityEnable )
    408          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV       ?V0,R4
   \   000007   8D..         MOV       ?V1,R5
   \   000009   12....       LCALL     ?Subroutine59 & 0xFFFF
    409            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_286:
   \   00000C   7412         MOV       A,#0x12
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FD           MOV       R5,A
    410            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    411            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    412          
    413            (void)SecurityEnable;  // Intentionally unreferenced parameter
    414          
    415            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000013   EE           MOV       A,R6
   \   000014   2D           ADD       A,R5
   \   000015   C3           CLR       C
   \   000016   33           RLC       A
   \   000017   2406         ADD       A,#0x6
   \   000019   FF           MOV       R7,A
    416          
    417            if ( len >= ZDP_BUF_SZ-1 )
   \   00001A   C3           CLR       C
   \   00001B   944F         SUBB      A,#0x4f
   \   00001D   4005         JC        ??ZDP_MatchDescReq_0
    418            {
    419              return afStatus_MEM_FAIL;
   \   00001F   7910         MOV       R1,#0x10
   \   000021   02....       LJMP      ??ZDP_MatchDescReq_1 & 0xFFFF
    420            }
    421          
    422            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    423            // this command to 0xFFFF.  So, here we will filter this and replace
    424            // with 0xFFFD to only send to devices with RX ON.  This includes the
    425            // network address of interest.
    426            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    427                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   FC           MOV       R4,A
   \   000032   740F         MOV       A,#0xf
   \   000034   6C           XRL       A,R4
   \   000035   6005         JZ        ??ZDP_MatchDescReq_2
   \   000037   7402         MOV       A,#0x2
   \   000039   6C           XRL       A,R4
   \   00003A   7018         JNZ       ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   00003C   8A82         MOV       DPL,R2
   \   00003E   8B83         MOV       DPH,R3
   \   000040   E0           MOVX      A,@DPTR
   \   000041   F4           CPL       A
   \   000042   7003         JNZ       ??ZDP_MatchDescReq_4
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F4           CPL       A
   \                     ??ZDP_MatchDescReq_4:
   \   000047   700B         JNZ       ??ZDP_MatchDescReq_3
    428            {
    429              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   74FD         MOV       A,#-0x3
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   74FF         MOV       A,#-0x1
   \   000053   F0           MOVX      @DPTR,A
    430            }
    431            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   000054   74FF         MOV       A,#-0x1
   \   000056   65..         XRL       A,?V0
   \   000058   7004         JNZ       ??ZDP_MatchDescReq_5
   \   00005A   74FF         MOV       A,#-0x1
   \   00005C   65..         XRL       A,?V1
   \                     ??ZDP_MatchDescReq_5:
   \   00005E   7006         JNZ       ??ZDP_MatchDescReq_6
    432            {
    433              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000060   75..FD       MOV       ?V0,#-0x3
   \   000063   75..FF       MOV       ?V1,#-0x1
    434            }
    435          
    436            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   000066   8882         MOV       DPL,R0
   \   000068   8983         MOV       DPH,R1
   \   00006A   E5..         MOV       A,?V0
   \   00006C   F0           MOVX      @DPTR,A
    437            *pBuf++ = HI_UINT16( nwkAddr );
   \   00006D   E5..         MOV       A,?V1
   \   00006F   A3           INC       DPTR
   \   000070   F0           MOVX      @DPTR,A
   \   000071   740E         MOV       A,#0xe
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   12....       LCALL     ??Subroutine117_0 & 0xFFFF
    438          
    439            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_221:
   \   000079   8882         MOV       DPL,R0
   \   00007B   8983         MOV       DPH,R1
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   E5..         MOV       A,?V0
   \   000081   F0           MOVX      @DPTR,A
    440            *pBuf++ = HI_UINT16( ProfileID );
   \   000082   E5..         MOV       A,?V1
   \   000084   8882         MOV       DPL,R0
   \   000086   8983         MOV       DPH,R1
   \   000088   A3           INC       DPTR
   \   000089   12....       LCALL     ?Subroutine30 & 0xFFFF
    441          
    442            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_38:
   \   00008C   A3           INC       DPTR
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   E8           MOV       A,R0
   \   00008F   2405         ADD       A,#0x5
   \   000091   F8           MOV       R0,A
   \   000092   5001         JNC       ??ZDP_MatchDescReq_7
   \   000094   09           INC       R1
    443            if ( NumInClusters )
   \                     ??ZDP_MatchDescReq_7:
   \   000095   EE           MOV       A,R6
   \   000096   6016         JZ        ??ZDP_MatchDescReq_8
    444            {
    445              for (i=0; i<NumInClusters; ++i)  {
   \   000098   7C00         MOV       R4,#0x0
   \   00009A   7410         MOV       A,#0x10
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   12....       LCALL     ??Subroutine117_0 & 0xFFFF
    446                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_222:
   \   0000A2   12....       LCALL     ?Subroutine10 & 0xFFFF
    447                *pBuf++ = HI_UINT16( InClusterList[i] );
    448              }
   \                     ??CrossCallReturnLabel_3:
   \   0000A5   5001         JNC       ??ZDP_MatchDescReq_9
   \   0000A7   09           INC       R1
   \                     ??ZDP_MatchDescReq_9:
   \   0000A8   0C           INC       R4
   \   0000A9   EC           MOV       A,R4
   \   0000AA   C3           CLR       C
   \   0000AB   9E           SUBB      A,R6
   \   0000AC   40F4         JC        ??CrossCallReturnLabel_222
    449            }
    450          
    451            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_8:
   \   0000AE   ED           MOV       A,R5
   \   0000AF   8882         MOV       DPL,R0
   \   0000B1   8983         MOV       DPH,R1
   \   0000B3   F0           MOVX      @DPTR,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   A882         MOV       R0,DPL
   \   0000B7   A983         MOV       R1,DPH
    452            if ( NumOutClusters )
   \   0000B9   6016         JZ        ??ZDP_MatchDescReq_10
    453            {
    454              for (i=0; i<NumOutClusters; ++i)  {
   \   0000BB   7C00         MOV       R4,#0x0
   \   0000BD   7413         MOV       A,#0x13
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   12....       LCALL     ??Subroutine117_0 & 0xFFFF
    455                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_223:
   \   0000C5   12....       LCALL     ?Subroutine10 & 0xFFFF
    456                *pBuf++ = HI_UINT16( OutClusterList[i] );
    457              }
   \                     ??CrossCallReturnLabel_4:
   \   0000C8   5001         JNC       ??ZDP_MatchDescReq_11
   \   0000CA   09           INC       R1
   \                     ??ZDP_MatchDescReq_11:
   \   0000CB   0C           INC       R4
   \   0000CC   EC           MOV       A,R4
   \   0000CD   C3           CLR       C
   \   0000CE   9D           SUBB      A,R5
   \   0000CF   40F4         JC        ??CrossCallReturnLabel_223
    458            }
    459          
    460            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_10:
   \   0000D1                ; Setup parameters for call to function fillAndSend
   \   0000D1   75..06       MOV       ?V0,#0x6
   \   0000D4   75..00       MOV       ?V1,#0x0
   \   0000D7   78..         MOV       R0,#?V0
   \   0000D9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DC   EF           MOV       A,R7
   \   0000DD   F9           MOV       R1,A
   \   0000DE   EA           MOV       A,R2
   \   0000DF   FC           MOV       R4,A
   \   0000E0   EB           MOV       A,R3
   \   0000E1   FD           MOV       R5,A
   \   0000E2   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   0000E4   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   0000E6   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000E9   7402         MOV       A,#0x2
   \   0000EB   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000EE   80..         SJMP      ??Subroutine105_0
    461          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EC           MOV       A,R4
   \   000001   25E0         ADD       A,0xE0 /* A   */
   \   000003   F5..         MOV       ?V2,A
   \   000005   E4           CLR       A
   \   000006   33           RLC       A
   \   000007   F5..         MOV       ?V3,A
   \   000009   E5..         MOV       A,?V0
   \   00000B   25..         ADD       A,?V2
   \   00000D   F5..         MOV       ?V4,A
   \   00000F   E5..         MOV       A,?V1
   \   000011   35..         ADDC      A,?V3
   \   000013   F5..         MOV       ?V5,A
   \   000015   85..82       MOV       DPL,?V4
   \   000018   F583         MOV       DPH,A
   \   00001A   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   00001D   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   000020   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000023   A3           INC       DPTR
   \   000024   F0           MOVX      @DPTR,A
   \   000025   E8           MOV       A,R0
   \   000026   2402         ADD       A,#0x2
   \   000028   F8           MOV       R0,A
   \   000029   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine120_0
   \   000001                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E9           MOV       A,R1
   \   000001                REQUIRE ??Subroutine128_0
   \   000001                ; // Fall through to label ??Subroutine128_0
    462          
    463          /*********************************************************************
    464           * @fn          ZDP_SimpleDescReq
    465           *
    466           * @brief       This builds and send a NWK_Simple_Desc_req
    467           *              message.  This function sends unicast message to the
    468           *              destination device.
    469           *
    470           * @param       dstAddr - destination address
    471           * @param       nwkAddr - 16 bit address
    472           * @param       epIntf - endpoint/interface
    473           * @param       SecurityEnable - Security Options
    474           *
    475           * @return      afStatus_t
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    478                                              byte endPoint, byte SecurityEnable )
    479          
    480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    481            (void)SecurityEnable;  // Intentionally unreferenced parameter
    482          
    483            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL     ?Subroutine18 & 0xFFFF
    484            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_19:
   \   000008   12....       LCALL     ?Subroutine12 & 0xFFFF
    485            ZDP_TmpBuf[2] = endPoint;
    486          
    487            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_7:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV       ?V0,#0x4
   \   00000E   75..00       MOV       ?V1,#0x0
   \   000011   78..         MOV       R0,#?V0
   \   000013   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV       R1,#0x3
   \   000018   02....       LJMP      ?Subroutine5 & 0xFFFF
    488          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   A3           INC       DPTR
   \   000004   E9           MOV       A,R1
   \   000005   F0           MOVX      @DPTR,A
   \   000006   22           RET
    489          
    490          /*********************************************************************
    491           * @fn          ZDP_UserDescSet
    492           *
    493           * @brief       This builds and send a User_Desc_set message to set
    494           *              the user descriptor.  This function sends unicast
    495           *              message to the destination device.
    496           *
    497           * @param       dstAddr - destination address
    498           * @param       nwkAddr - 16 bit address
    499           * @param       UserDescriptor - user descriptor
    500           * @param       SecurityEnable - Security Options
    501           *
    502           * @return      afStatus_t
    503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   AC..         MOV       R4,?V4
   \   000002   AD..         MOV       R5,?V5
   \   000004   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000008   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00000B   7402         MOV       A,#0x2
   \   00000D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000010                REQUIRE ??Subroutine105_0
   \   000010                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    505                                    UserDescriptorFormat_t *UserDescriptor,
    506                                    byte SecurityEnable )
    507          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
    508            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   00000C   740E         MOV       A,#0xe
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine41 & 0xFFFF
    509            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    510                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_51:
   \   000014   FE           MOV       R6,A
   \   000015   C3           CLR       C
   \   000016   9410         SUBB      A,#0x10
   \   000018   5004         JNC       ??ZDP_UserDescSet_0
   \   00001A   EE           MOV       A,R6
   \   00001B   FF           MOV       R7,A
   \   00001C   8002         SJMP      ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   00001E   7F10         MOV       R7,#0x10
    511            byte addrLen = 2;
    512          
    513            (void)SecurityEnable;  // Intentionally unreferenced parameter
    514          
    515            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000020   EC           MOV       A,R4
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   F0           MOVX      @DPTR,A
    516            *pBuf++ = HI_UINT16( nwkAddr );
   \   000026   ED           MOV       A,R5
   \   000027   A3           INC       DPTR
   \   000028   F0           MOVX      @DPTR,A
    517          
    518            *pBuf++ = len;
   \   000029   EF           MOV       A,R7
   \   00002A   8A82         MOV       DPL,R2
   \   00002C   8B83         MOV       DPH,R3
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   12....       LCALL     ??Subroutine100_0 & 0xFFFF
    519            addrLen = 3;
    520          
    521            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \                     ??CrossCallReturnLabel_162:
   \   000033   AC82         MOV       R4,DPL
   \   000035   AD83         MOV       R5,DPH
   \   000037   8C..         MOV       ?V0,R4
   \   000039   8D..         MOV       ?V1,R5
   \   00003B   75..00       MOV       ?V2,#0x0
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000043   EF           MOV       A,R7
   \   000044   FC           MOV       R4,A
   \   000045   7D00         MOV       R5,#0x0
   \   000047   EA           MOV       A,R2
   \   000048   2403         ADD       A,#0x3
   \   00004A   FA           MOV       R2,A
   \   00004B   5001         JNC       ??ZDP_UserDescSet_2
   \   00004D   0B           INC       R3
   \                     ??ZDP_UserDescSet_2:
   \   00004E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000051   7403         MOV       A,#0x3
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
    522            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   000056                ; Setup parameters for call to function osal_memset
   \   000056   EF           MOV       A,R7
   \   000057   F8           MOV       R0,A
   \   000058   7410         MOV       A,#0x10
   \   00005A   C3           CLR       C
   \   00005B   98           SUBB      A,R0
   \   00005C   FC           MOV       R4,A
   \   00005D   95E0         SUBB      A,0xE0 /* A   */
   \   00005F   FD           MOV       R5,A
   \   000060   7920         MOV       R1,#0x20
   \   000062   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    523          
    524            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   000065                ; Setup parameters for call to function fillAndSend
   \   000065   75..14       MOV       ?V0,#0x14
   \   000068   75..00       MOV       ?V1,#0x0
   \   00006B   78..         MOV       R0,#?V0
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7913         MOV       R1,#0x13
   \   000072   02....       LJMP      ?Subroutine2 & 0xFFFF
    525          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   8983         MOV       DPH,R1
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine116_0
   \   000003                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    526          
    527          /*********************************************************************
    528           * @fn          ZDP_ServerDiscReq
    529           *
    530           * @brief       Build and send a Server_Discovery_req request message.
    531           *
    532           * @param       serverMask - 16-bit bit-mask of server services being sought.
    533           * @param       SecurityEnable - Security Options
    534           *
    535           * @return      afStatus_t
    536           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    538          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine59 & 0xFFFF
    539            uint8 *pBuf = ZDP_TmpBuf;
    540            zAddrType_t dstAddr;
    541          
    542            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_287:
   \   00000D   7408         MOV       A,#0x8
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?Subroutine19 & 0xFFFF
    543            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    544          
    545            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_20:
   \   000015   EA           MOV       A,R2
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   F0           MOVX      @DPTR,A
    546            *pBuf = HI_UINT16( serverMask );
   \   00001B   EB           MOV       A,R3
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
    547          
    548            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    549                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001E   EE           MOV       A,R6
   \   00001F   90....       MOV       DPTR,#ZDP_TxOptions
   \   000022   6004         JZ        ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV       A,#0x40
   \   000026   8001         SJMP      ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR       A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX      @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV       ?V0,#0x15
   \   00002D   75..00       MOV       ?V1,#0x0
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV       R1,#0x2
   \   000037   E9           MOV       A,R1
   \   000038   12....       LCALL     ?XSTACK_DISP102_8
   \   00003B   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   00003D   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00003F   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?DEALLOC_XSTACK8
   \   000047   E9           MOV       A,R1
   \   000048   F9           MOV       R1,A
   \   000049   90....       MOV       DPTR,#ZDP_TxOptions
   \   00004C   E4           CLR       A
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   02....       LJMP      ??Subroutine106_0 & 0xFFFF
    550          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    551          
    552          /*********************************************************************
    553           * @fn          ZDP_DeviceAnnce
    554           *
    555           * @brief       This builds and send a Device_Annce message.  This
    556           *              function sends a broadcast message.
    557           *
    558           * @param       nwkAddr - 16 bit address of the device
    559           * @param       IEEEAddr - 64 bit address of the device
    560           * @param       capabilities - device capabilities.  This field is only
    561           *                 sent for v1.1 networks.
    562           * @param       SecurityEnable - Security Options
    563           *
    564           * @return      afStatus_t
    565           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    566          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    567                                        byte capabilities, byte SecurityEnable )
    568          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    569            zAddrType_t dstAddr;
    570            uint8 len;
    571          
    572            (void)SecurityEnable;  // Intentionally unreferenced parameter
    573          
    574            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV       A,#0x8
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine19 & 0xFFFF
    575            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    576          
    577            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_21:
   \   000014   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000017   EA           MOV       A,R2
   \   000018   12....       LCALL     ?Subroutine21 & 0xFFFF
    578            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_24:
   \   00001B   EB           MOV       A,R3
   \   00001C   F0           MOVX      @DPTR,A
    579            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX      A,@DPTR
   \   000021   2402         ADD       A,#0x2
   \   000023   FA           MOV       R2,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   3400         ADDC      A,#0x0
   \   000028   FB           MOV       R3,A
   \   000029   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    580            len = 2 + Z_EXTADDR_LEN;
    581          
    582            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   00002F   C8           XCH       A,R0
   \   000030   240A         ADD       A,#0xa
   \   000032   F582         MOV       DPL,A
   \   000034   E4           CLR       A
   \   000035   38           ADDC      A,R0
   \   000036   F583         MOV       DPH,A
   \   000038   EE           MOV       A,R6
   \   000039   F0           MOVX      @DPTR,A
    583            len++;
    584          
    585            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV       ?V0,#0x13
   \   00003D   75..00       MOV       ?V1,#0x0
   \   000040   78..         MOV       R0,#?V0
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV       R1,#0xb
   \   000047   02....       LJMP      ?Subroutine1 & 0xFFFF
    586          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine108_0
   \   000003                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine130_0
   \   000003                ; // Fall through to label ??Subroutine130_0
    587          
    588          /*********************************************************************
    589           * @fn          ZDP_ParentAnnce
    590           *
    591           * @brief       This builds and send a Parent_Annce and Parent_Annce_Rsp
    592           *              messages, it will depend on the clusterID parameter.
    593           *
    594           * @param       TransSeq - ZDP Transaction Sequence Number
    595           * @param       dstAddr - destination address
    596           * @param       numberOfChildren - 8 bit number of children
    597           * @param       childInfo - list of children information (ExtAddr and Age)
    598           * @param       clusterID - Parent_annce or Parent_annce_rsp
    599           * @param       SecurityEnable - Security Options
    600           *
    601           * @return      afStatus_t
    602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    603          afStatus_t ZDP_ParentAnnce( uint8 *TransSeq,
   \                     ZDP_ParentAnnce:
    604                                      zAddrType_t *dstAddr,
    605                                      uint8 numberOfChildren,
    606                                      uint8 *childInfo,
    607                                      cId_t clusterID,
    608                                      uint8 SecurityEnable )
    609          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000012   8C..         MOV       ?V6,R4
   \   000014   8D..         MOV       ?V7,R5
   \   000016   89..         MOV       ?V4,R1
    610            uint8 *pBuf = ZDP_TmpBuf;
   \   000018   12....       LCALL     ??Subroutine115_0 & 0xFFFF
    611            ZDO_ChildInfo_t *pChildInfo;
    612            uint8 i, len;
    613            uint8 *numOfChild;
    614          
    615            (void)SecurityEnable;  // Intentionally unreferenced parameter
    616          
    617            pChildInfo = (ZDO_ChildInfo_t *)childInfo;
    618          
    619            if ( dstAddr->addrMode == AddrBroadcast )
   \                     ??CrossCallReturnLabel_214:
   \   00001B   8C82         MOV       DPL,R4
   \   00001D   8D83         MOV       DPH,R5
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   640F         XRL       A,#0xf
   \   00002A   700B         JNZ       ??ZDP_ParentAnnce_0
    620            {
    621              // Make sure is sent to 0xFFFC
    622              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVZCZR;
   \   00002C   8C82         MOV       DPL,R4
   \   00002E   8D83         MOV       DPH,R5
   \   000030   74FC         MOV       A,#-0x4
   \   000032   F0           MOVX      @DPTR,A
   \   000033   A3           INC       DPTR
   \   000034   74FF         MOV       A,#-0x1
   \   000036   F0           MOVX      @DPTR,A
    623            }
    624            len = 1;
   \                     ??ZDP_ParentAnnce_0:
   \   000037   75..01       MOV       ?V0,#0x1
   \   00003A   7416         MOV       A,#0x16
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine47 & 0xFFFF
    625            if ( clusterID == Parent_annce_rsp )
   \                     ??CrossCallReturnLabel_63:
   \   000042   741F         MOV       A,#0x1f
   \   000044   6E           XRL       A,R6
   \   000045   7003         JNZ       ??ZDP_ParentAnnce_1
   \   000047   7480         MOV       A,#-0x80
   \   000049   6F           XRL       A,R7
   \                     ??ZDP_ParentAnnce_1:
   \   00004A   700B         JNZ       ??CrossCallReturnLabel_201
    626            {
    627              // + Status Byte
    628              len += 1;
   \   00004C   75..02       MOV       ?V0,#0x2
    629              // Set the status bit to success
    630              *pBuf++ = 0;
   \   00004F   8A82         MOV       DPL,R2
   \   000051   8B83         MOV       DPH,R3
   \   000053   E4           CLR       A
   \   000054   12....       LCALL     ??Subroutine112_0 & 0xFFFF
    631            }
    632            
    633            numOfChild = pBuf;
   \                     ??CrossCallReturnLabel_201:
   \   000057   12....       LCALL     ?Subroutine24 & 0xFFFF
    634            *pBuf++ = numberOfChildren;
   \                     ??CrossCallReturnLabel_283:
   \   00005A   8A82         MOV       DPL,R2
   \   00005C   8B83         MOV       DPH,R3
   \   00005E   E9           MOV       A,R1
   \   00005F   12....       LCALL     ??Subroutine112_0 & 0xFFFF
    635          
    636            for ( i = 0; i < MAX_PARENT_ANNCE_CHILD; i++ )
   \                     ??CrossCallReturnLabel_202:
   \   000062   75..00       MOV       ?V1,#0x0
    637            {
    638              pBuf = osal_cpyExtAddr( pBuf, pChildInfo[childIndex].extAddr );
   \                     ??ZDP_ParentAnnce_2:
   \   000065                ; Setup parameters for call to function sAddrExtCpy
   \   000065   90....       MOV       DPTR,#childIndex
   \   000068   E0           MOVX      A,@DPTR
   \   000069   75F00C       MOV       B,#0xc
   \   00006C   A4           MUL       AB
   \   00006D   F8           MOV       R0,A
   \   00006E   A9F0         MOV       R1,B
   \   000070   7414         MOV       A,#0x14
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   E0           MOVX      A,@DPTR
   \   000076   28           ADD       A,R0
   \   000077   FC           MOV       R4,A
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   39           ADDC      A,R1
   \   00007B   FD           MOV       R5,A
   \   00007C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    639              childIndex++;
   \   00007F   90....       MOV       DPTR,#childIndex
   \   000082   E0           MOVX      A,@DPTR
   \   000083   04           INC       A
   \   000084   F0           MOVX      @DPTR,A
    640              
    641              len += Z_EXTADDR_LEN;
   \   000085   7408         MOV       A,#0x8
   \   000087   25..         ADD       A,?V0
   \   000089   F5..         MOV       ?V0,A
    642              
    643              if ( childIndex == numberOfChildren )
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   65..         XRL       A,?V4
   \   00008E   7019         JNZ       ??ZDP_ParentAnnce_3
    644              {
    645                pBuf = numOfChild;
    646                *pBuf = i + 1;
   \   000090   7401         MOV       A,#0x1
   \   000092   25..         ADD       A,?V1
   \   000094   C0E0         PUSH      A
   \   000096   85..82       MOV       DPL,?XSP + 0
   \   000099   85..83       MOV       DPH,?XSP + 1
   \   00009C   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00009F   D0E0         POP       A
   \   0000A1   F0           MOVX      @DPTR,A
    647                // All childs are taken, restart index and go out
    648                childIndex = 0;
   \   0000A2   90....       MOV       DPTR,#childIndex
   \   0000A5   E4           CLR       A
   \   0000A6   F0           MOVX      @DPTR,A
    649                return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \   0000A7                ; Setup parameters for call to function fillAndSend
   \   0000A7   804A         SJMP      ??ZDP_ParentAnnce_4
    650              }
    651            }
   \                     ??ZDP_ParentAnnce_3:
   \   0000A9   05..         INC       ?V1
   \   0000AB   E5..         MOV       A,?V1
   \   0000AD   C3           CLR       C
   \   0000AE   940A         SUBB      A,#0xa
   \   0000B0   40B3         JC        ??ZDP_ParentAnnce_2
    652            
    653            pBuf = numOfChild;
    654            *pBuf = MAX_PARENT_ANNCE_CHILD;
   \   0000B2   85..82       MOV       DPL,?XSP + 0
   \   0000B5   85..83       MOV       DPH,?XSP + 1
   \   0000B8   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   0000BB   740A         MOV       A,#0xa
   \   0000BD   F0           MOVX      @DPTR,A
    655            if ( childIndex < numberOfChildren )
   \   0000BE   90....       MOV       DPTR,#childIndex
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   C3           CLR       C
   \   0000C3   95..         SUBB      A,?V4
   \   0000C5   502C         JNC       ??ZDP_ParentAnnce_4
    656            {
    657              if ( clusterID == Parent_annce )
   \   0000C7   741F         MOV       A,#0x1f
   \   0000C9   6E           XRL       A,R6
   \   0000CA   4F           ORL       A,R7
   \   0000CB   7005         JNZ       ??ZDP_ParentAnnce_5
    658              {
    659                ZDApp_SetParentAnnceTimer();
   \   0000CD                ; Setup parameters for call to function ZDApp_SetParentAnnceTimer
   \   0000CD   12....       LCALL     `??ZDApp_SetParentAnnceTimer::?relay`; Banked call to: ZDApp_SetParentAnnceTimer
   \   0000D0   8021         SJMP      ??ZDP_ParentAnnce_4
    660              }
    661              if ( clusterID == Parent_annce_rsp )
   \                     ??ZDP_ParentAnnce_5:
   \   0000D2   741F         MOV       A,#0x1f
   \   0000D4   6E           XRL       A,R6
   \   0000D5   7003         JNZ       ??ZDP_ParentAnnce_6
   \   0000D7   7480         MOV       A,#-0x80
   \   0000D9   6F           XRL       A,R7
   \                     ??ZDP_ParentAnnce_6:
   \   0000DA   7017         JNZ       ??ZDP_ParentAnnce_4
    662              {
    663                osal_start_timerEx( ZDAppTaskID, ZDO_PARENT_ANNCE_EVT, 10 );
   \   0000DC                ; Setup parameters for call to function osal_start_timerEx
   \   0000DC   90....       MOV       DPTR,#__Constant_a
   \   0000DF   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   0000E2   7A00         MOV       R2,#0x0
   \   0000E4   7B40         MOV       R3,#0x40
   \   0000E6   90....       MOV       DPTR,#ZDAppTaskID
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   F9           MOV       R1,A
   \   0000EB   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000EE   7404         MOV       A,#0x4
   \   0000F0   12....       LCALL     ?DEALLOC_XSTACK8
    664              }
    665            }
    666          
    667            return fillAndSend( TransSeq, dstAddr, clusterID, len );
   \                     ??ZDP_ParentAnnce_4:
   \   0000F3                ; Setup parameters for call to function fillAndSend
   \   0000F3   8E..         MOV       ?V2,R6
   \   0000F5   8F..         MOV       ?V3,R7
   \   0000F7   78..         MOV       R0,#?V2
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FC   A9..         MOV       R1,?V0
   \   0000FE   AC..         MOV       R4,?V6
   \   000100   AD..         MOV       R5,?V7
   \   000102   7404         MOV       A,#0x4
   \   000104   12....       LCALL     ?XSTACK_DISP0_8
   \   000107   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   00010A   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00010D   7402         MOV       A,#0x2
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000112   02....       LJMP      ?Subroutine3 & 0xFFFF
    668          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   AA82         MOV       R2,DPL
   \   000004   AB83         MOV       R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7404         MOV       A,#0x4
   \   000002                REQUIRE ??Subroutine113_0
   \   000002                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine114_0
   \   000003                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET
    669          
    670          /*********************************************************************
    671           * Address Responses
    672           */
    673          
    674          /*********************************************************************
    675           * @fn      zdpProcessAddrReq
    676           *
    677           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    678           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    679           *
    680           * @param   inMsg - incoming message
    681           *
    682           * @return  none
    683           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    684          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    685          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ??Subroutine127_0 & 0xFFFF
    686            associated_devices_t *pAssoc;
    687            uint8 reqType;
    688            uint16 aoi = INVALID_NODE_ADDR;
   \                     ??CrossCallReturnLabel_277:
   \   000012   7EFE         MOV       R6,#-0x2
   \   000014   7FFF         MOV       R7,#-0x1
    689            uint8 *ieee = NULL;
   \   000016   75..00       MOV       ?V0,#0x0
   \   000019   75..00       MOV       ?V1,#0x0
    690          
    691            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   00001C   7402         MOV       A,#0x2
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E0           MOVX      A,@DPTR
   \   000022   240C         ADD       A,#0xc
   \   000024   F8           MOV       R0,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   3400         ADDC      A,#0x0
   \   000029   F9           MOV       R1,A
   \   00002A   7404         MOV       A,#0x4
   \   00002C   12....       LCALL     ?XSTACK_DISP0_8
   \   00002F   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000032   7404         MOV       A,#0x4
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   00003A   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   00003D   EA           MOV       A,R2
   \   00003E   4B           ORL       A,R3
   \   00003F   7004         JNZ       ??zdpProcessAddrReq_0
   \   000041   7C08         MOV       R4,#0x8
   \   000043   8002         SJMP      ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000045   7C02         MOV       R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000047   7402         MOV       A,#0x2
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   2413         ADD       A,#0x13
   \   00004F   F8           MOV       R0,A
   \   000050   A3           INC       DPTR
   \   000051   E0           MOVX      A,@DPTR
   \   000052   3400         ADDC      A,#0x0
   \   000054   F9           MOV       R1,A
   \   000055   7406         MOV       A,#0x6
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   00005D   7406         MOV       A,#0x6
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000065   F8           MOV       R0,A
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   F9           MOV       R1,A
   \   000069   E8           MOV       A,R0
   \   00006A   2C           ADD       A,R4
   \   00006B   F582         MOV       DPL,A
   \   00006D   E4           CLR       A
   \   00006E   39           ADDC      A,R1
   \   00006F   F583         MOV       DPH,A
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F5..         MOV       ?V7,A
    692          
    693            if ( inMsg->clusterID == NWK_addr_req )
   \   000074   7402         MOV       A,#0x2
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   240B         ADD       A,#0xb
   \   00007C   F5..         MOV       ?V4,A
   \   00007E   A3           INC       DPTR
   \   00007F   E0           MOVX      A,@DPTR
   \   000080   3400         ADDC      A,#0x0
   \   000082   F5..         MOV       ?V5,A
   \   000084   EA           MOV       A,R2
   \   000085   4B           ORL       A,R3
   \   000086   704D         JNZ       ??zdpProcessAddrReq_2
    694          
    695            {
    696              ieee = inMsg->asdu;
   \   000088   88..         MOV       ?V0,R0
   \   00008A   89..         MOV       ?V1,R1
    697          
    698              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00008C                ; Setup parameters for call to function sAddrExtCmp
   \   00008C   AC..         MOV       R4,?V0
   \   00008E   AD..         MOV       R5,?V1
   \   000090   7A..         MOV       R2,#saveExtAddr & 0xff
   \   000092   7B..         MOV       R3,#(saveExtAddr >> 8) & 0xff
   \   000094   12....       LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000097   E9           MOV       A,R1
   \   000098   6009         JZ        ??zdpProcessAddrReq_3
    699              {
    700                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00009A   90....       MOV       DPTR,#ZDAppNwkAddr
   \   00009D   12....       LCALL     ?Subroutine47 & 0xFFFF
    701              }
   \                     ??CrossCallReturnLabel_64:
   \   0000A0   02....       LJMP      ??zdpProcessAddrReq_4 & 0xFFFF
    702              // Handle response for sleeping end devices
    703              else if ( (ZSTACK_ROUTER_BUILD)
    704                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    705                       && ((pAssoc->nodeRelation == CHILD_RFD) || (pAssoc->nodeRelation == CHILD_RFD_RX_IDLE)) ) )
   \                     ??zdpProcessAddrReq_3:
   \   0000A3                ; Setup parameters for call to function AssocGetWithExt
   \   0000A3   AA..         MOV       R2,?V0
   \   0000A5   AB..         MOV       R3,?V1
   \   0000A7   12....       LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   0000AA   EA           MOV       A,R2
   \   0000AB   4B           ORL       A,R3
   \   0000AC   7003         JNZ       $+5
   \   0000AE   02....       LJMP      ??zdpProcessAddrReq_5 & 0xFFFF
   \   0000B1   8A82         MOV       DPL,R2
   \   0000B3   8B83         MOV       DPH,R3
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   F8           MOV       R0,A
   \   0000BB   7401         MOV       A,#0x1
   \   0000BD   68           XRL       A,R0
   \   0000BE   6008         JZ        ??zdpProcessAddrReq_6
   \   0000C0   7402         MOV       A,#0x2
   \   0000C2   68           XRL       A,R0
   \   0000C3   6003         JZ        $+5
   \   0000C5   02....       LJMP      ??zdpProcessAddrReq_5 & 0xFFFF
    706              {
    707                aoi = pAssoc->shortAddr;
   \                     ??zdpProcessAddrReq_6:
   \   0000C8   8A82         MOV       DPL,R2
   \   0000CA   8B83         MOV       DPH,R3
   \   0000CC   12....       LCALL     ?Subroutine47 & 0xFFFF
    708                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??CrossCallReturnLabel_65:
   \   0000CF   E5..         MOV       A,?V7
   \   0000D1   7075         JNZ       ??zdpProcessAddrReq_7
   \   0000D3   8076         SJMP      ??zdpProcessAddrReq_4
    709                  reqType = 0xFF; // Force Invalid
    710              }
    711            }
    712            else  // if ( inMsg->clusterID == IEEE_addr_req )
    713            {
    714              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   0000D5   8882         MOV       DPL,R0
   \   0000D7   8983         MOV       DPH,R1
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   FA           MOV       R2,A
   \   0000DB   A3           INC       DPTR
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   F8           MOV       R0,A
   \   0000DE   E4           CLR       A
   \   0000DF   C8           XCH       A,R0
   \   0000E0   F9           MOV       R1,A
   \   0000E1   EA           MOV       A,R2
   \   0000E2   28           ADD       A,R0
   \   0000E3   FE           MOV       R6,A
   \   0000E4   E4           CLR       A
   \   0000E5   39           ADDC      A,R1
   \   0000E6   FF           MOV       R7,A
    715          
    716              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000E7   90....       MOV       DPTR,#ZDAppNwkAddr
   \   0000EA   E0           MOVX      A,@DPTR
   \   0000EB   6E           XRL       A,R6
   \   0000EC   7003         JNZ       ??zdpProcessAddrReq_8
   \   0000EE   A3           INC       DPTR
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_8:
   \   0000F1   7008         JNZ       ??zdpProcessAddrReq_9
    717              {
    718                ieee = saveExtAddr;
   \   0000F3   75....       MOV       ?V0,#saveExtAddr & 0xff
   \   0000F6   75....       MOV       ?V1,#(saveExtAddr >> 8) & 0xff
   \   0000F9   8050         SJMP      ??zdpProcessAddrReq_4
    719              }
    720              else if ( (ZSTACK_ROUTER_BUILD)
    721                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    722                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_9:
   \   0000FB                ; Setup parameters for call to function AssocGetWithShort
   \   0000FB   EF           MOV       A,R7
   \   0000FC   FB           MOV       R3,A
   \   0000FD   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000100   8A..         MOV       ?V2,R2
   \   000102   8B..         MOV       ?V3,R3
   \   000104   A8..         MOV       R0,?V2
   \   000106   A9..         MOV       R1,?V3
   \   000108   E8           MOV       A,R0
   \   000109   49           ORL       A,R1
   \   00010A   604F         JZ        ??zdpProcessAddrReq_5
   \   00010C   8882         MOV       DPL,R0
   \   00010E   8983         MOV       DPH,R1
   \   000110   A3           INC       DPTR
   \   000111   A3           INC       DPTR
   \   000112   A3           INC       DPTR
   \   000113   A3           INC       DPTR
   \   000114   E0           MOVX      A,@DPTR
   \   000115   6401         XRL       A,#0x1
   \   000117   7042         JNZ       ??zdpProcessAddrReq_5
    723              {
    724                AddrMgrEntry_t addrEntry;
    725                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000119   7410         MOV       A,#0x10
   \   00011B   12....       LCALL     ?XSTACK_DISP0_8
   \   00011E   E4           CLR       A
   \   00011F   12....       LCALL     ?Subroutine34 & 0xFFFF
    726                addrEntry.index = pAssoc->addrIdx;
   \                     ??CrossCallReturnLabel_43:
   \   000122   F8           MOV       R0,A
   \   000123   A3           INC       DPTR
   \   000124   E0           MOVX      A,@DPTR
   \   000125   F9           MOV       R1,A
   \   000126   741B         MOV       A,#0x1b
   \   000128   12....       LCALL     ?XSTACK_DISP0_8
   \   00012B   12....       LCALL     ??Subroutine124_0 & 0xFFFF
    727                if ( AddrMgrEntryGet( &addrEntry ) )
   \                     ??CrossCallReturnLabel_251:
   \   00012E                ; Setup parameters for call to function AddrMgrEntryGet
   \   00012E   7410         MOV       A,#0x10
   \   000130   12....       LCALL     ?XSTACK_DISP101_8
   \   000133   12....       LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000136   E9           MOV       A,R1
   \   000137   600B         JZ        ??zdpProcessAddrReq_10
    728                {
    729                  ieee = addrEntry.extAddr;
   \   000139   7413         MOV       A,#0x13
   \   00013B   12....       LCALL     ?XSTACK_DISP0_8
   \   00013E   8582..       MOV       ?V0,DPL
   \   000141   8583..       MOV       ?V1,DPH
    730                }
    731          
    732                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_10:
   \   000144   E5..         MOV       A,?V7
   \   000146   6003         JZ        ??zdpProcessAddrReq_4
    733                  reqType = 0xFF; // Force Invalid
   \                     ??zdpProcessAddrReq_7:
   \   000148   75..FF       MOV       ?V7,#-0x1
    734              }
    735            }
    736          
    737            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   00014B   74FE         MOV       A,#-0x2
   \   00014D   6E           XRL       A,R6
   \   00014E   7003         JNZ       ??zdpProcessAddrReq_11
   \   000150   74FF         MOV       A,#-0x1
   \   000152   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_11:
   \   000153   6006         JZ        ??zdpProcessAddrReq_5
   \   000155   E5..         MOV       A,?V0
   \   000157   45..         ORL       A,?V1
   \   000159   700C         JNZ       ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_5:
   \   00015B   85..82       MOV       DPL,?V4
   \   00015E   85..83       MOV       DPH,?V5
   \   000161   E0           MOVX      A,@DPTR
   \   000162   6003         JZ        $+5
   \   000164   02....       LJMP      ??zdpProcessAddrReq_13 & 0xFFFF
    738            {
    739              uint8 stat;
    740              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_12:
   \   000167   12....       LCALL     ?Subroutine45 & 0xFFFF
    741              // Status + IEEE-Addr + Nwk-Addr.
    742              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \                     ??CrossCallReturnLabel_168:
   \   00016A   7401         MOV       A,#0x1
   \   00016C   12....       LCALL     ?XSTACK_DISP0_8
   \   00016F   740B         MOV       A,#0xb
   \   000171   F0           MOVX      @DPTR,A
    743          
    744              // If aoi and iee are both setup, we found results
    745              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   000172   74FE         MOV       A,#-0x2
   \   000174   6E           XRL       A,R6
   \   000175   7003         JNZ       ??zdpProcessAddrReq_14
   \   000177   74FF         MOV       A,#-0x1
   \   000179   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_14:
   \   00017A   6026         JZ        ??zdpProcessAddrReq_15
   \   00017C   E5..         MOV       A,?V0
   \   00017E   45..         ORL       A,?V1
   \   000180   6020         JZ        ??zdpProcessAddrReq_15
    746              {
    747                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    748                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   000182   E5..         MOV       A,?V7
   \   000184   6006         JZ        ??zdpProcessAddrReq_16
   \   000186   7401         MOV       A,#0x1
   \   000188   65..         XRL       A,?V7
   \   00018A   7005         JNZ       ??zdpProcessAddrReq_17
   \                     ??zdpProcessAddrReq_16:
   \   00018C   75..00       MOV       ?V6,#0x0
   \   00018F   803A         SJMP      ??zdpProcessAddrReq_18
   \                     ??zdpProcessAddrReq_17:
   \   000191   75..80       MOV       ?V6,#-0x80
    749                        
    750                if(stat == ZDP_INVALID_REQTYPE)
    751                {
    752                  //R21 Errata update CCB 2111 
    753                  if(inMsg->wasBroadcast == TRUE)
   \   000194   85..82       MOV       DPL,?V4
   \   000197   85..83       MOV       DPH,?V5
   \   00019A   E0           MOVX      A,@DPTR
   \   00019B   6401         XRL       A,#0x1
   \   00019D   702C         JNZ       ??zdpProcessAddrReq_18
    754                  {
    755                    return;
   \   00019F   02....       LJMP      ??zdpProcessAddrReq_13 & 0xFFFF
    756                  }
    757                  
    758                  stat = ZDP_INVALID_REQTYPE;
    759                }
    760              }
    761              else
    762              {
    763                // not found and the req was unicast to this device
    764                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_15:
   \   0001A2   75..81       MOV       ?V6,#-0x7f
    765          
    766                // Fill in the missing field with this device's address
    767                if ( inMsg->clusterID == NWK_addr_req )
   \   0001A5   7404         MOV       A,#0x4
   \   0001A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AA   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0001AD   7006         JNZ       ??zdpProcessAddrReq_19
    768                {
    769                  //CCB 2112 Zigbee Core spec
    770                  aoi = 0xFFFF;
   \   0001AF   7EFF         MOV       R6,#-0x1
   \   0001B1   7FFF         MOV       R7,#-0x1
   \   0001B3   8016         SJMP      ??zdpProcessAddrReq_18
    771                }
    772                else
    773                {
    774                  //CCB 2113 Zigbee Core spec
    775                  uint8 invalidIEEEAddr[Z_EXTADDR_LEN];
    776                  osal_memset(invalidIEEEAddr,0xFF,Z_EXTADDR_LEN);
   \                     ??zdpProcessAddrReq_19:
   \   0001B5                ; Setup parameters for call to function osal_memset
   \   0001B5   7C08         MOV       R4,#0x8
   \   0001B7   7D00         MOV       R5,#0x0
   \   0001B9   79FF         MOV       R1,#-0x1
   \   0001BB   EC           MOV       A,R4
   \   0001BC   12....       LCALL     ?XSTACK_DISP101_8
   \   0001BF   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    777                  ieee = invalidIEEEAddr;
   \   0001C2   7408         MOV       A,#0x8
   \   0001C4   12....       LCALL     ?XSTACK_DISP100_8
   \   0001C7   88..         MOV       ?V0,R0
   \   0001C9   89..         MOV       ?V1,R1
    778                }
    779              }
    780          
    781              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_18:
   \   0001CB   85..82       MOV       DPL,?V2
   \   0001CE   85..83       MOV       DPH,?V3
   \   0001D1   E5..         MOV       A,?V6
   \   0001D3   F0           MOVX      @DPTR,A
   \   0001D4   A3           INC       DPTR
   \   0001D5   8582..       MOV       ?V2,DPL
   \   0001D8   8583..       MOV       ?V3,DPH
    782          
    783              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   0001DB                ; Setup parameters for call to function sAddrExtCpy
   \   0001DB   AC..         MOV       R4,?V0
   \   0001DD   AD..         MOV       R5,?V1
   \   0001DF   AA..         MOV       R2,?V2
   \   0001E1   AB..         MOV       R3,?V3
   \   0001E3   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001E6   8A..         MOV       ?V2,R2
   \   0001E8   8B..         MOV       ?V3,R3
    784          
    785              *pBuf++ = LO_UINT16( aoi );
   \   0001EA   EE           MOV       A,R6
   \   0001EB   8A82         MOV       DPL,R2
   \   0001ED   8B83         MOV       DPH,R3
   \   0001EF   F0           MOVX      @DPTR,A
    786              *pBuf++ = HI_UINT16( aoi );
   \   0001F0   EF           MOV       A,R7
   \   0001F1   A3           INC       DPTR
   \   0001F2   F0           MOVX      @DPTR,A
    787          
    788              if ( ZSTACK_ROUTER_BUILD )
    789              {
    790                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    791                     && (stat == ZDP_SUCCESS) )
   \   0001F3   7401         MOV       A,#0x1
   \   0001F5   65..         XRL       A,?V7
   \   0001F7   6003         JZ        $+5
   \   0001F9   02....       LJMP      ??zdpProcessAddrReq_20 & 0xFFFF
   \   0001FC   90....       MOV       DPTR,#ZDAppNwkAddr
   \   0001FF   E0           MOVX      A,@DPTR
   \   000200   6E           XRL       A,R6
   \   000201   7003         JNZ       ??zdpProcessAddrReq_21
   \   000203   A3           INC       DPTR
   \   000204   E0           MOVX      A,@DPTR
   \   000205   6F           XRL       A,R7
   \                     ??zdpProcessAddrReq_21:
   \   000206   6003         JZ        $+5
   \   000208   02....       LJMP      ??zdpProcessAddrReq_20 & 0xFFFF
   \   00020B   E5..         MOV       A,?V6
   \   00020D   6003         JZ        $+5
   \   00020F   02....       LJMP      ??zdpProcessAddrReq_20 & 0xFFFF
    792                {
    793                  uint8  cnt = 0;
   \   000212   85..82       MOV       DPL,?XSP + 0
   \   000215   85..83       MOV       DPH,?XSP + 1
   \   000218   E4           CLR       A
   \   000219   F0           MOVX      @DPTR,A
    794                  
    795                  //Updated to only search for ZED devices as per R21 spec (2.4.3.1.1.2)
    796                  uint16 *list = AssocMakeList( &cnt );
   \   00021A                ; Setup parameters for call to function AssocMakeList
   \   00021A   AA..         MOV       R2,?XSP + 0
   \   00021C   AB..         MOV       R3,?XSP + 1
   \   00021E   12....       LCALL     `??AssocMakeList::?relay`; Banked call to: AssocMakeList
    797          
    798                  if ( list != NULL )
   \   000221   E5..         MOV       A,?V2
   \   000223   2402         ADD       A,#0x2
   \   000225   F8           MOV       R0,A
   \   000226   E4           CLR       A
   \   000227   35..         ADDC      A,?V3
   \   000229   F9           MOV       R1,A
   \   00022A   E8           MOV       A,R0
   \   00022B   FC           MOV       R4,A
   \   00022C   E9           MOV       A,R1
   \   00022D   FD           MOV       R5,A
   \   00022E   EA           MOV       A,R2
   \   00022F   4B           ORL       A,R3
   \   000230   7003         JNZ       $+5
   \   000232   02....       LJMP      ??zdpProcessAddrReq_22 & 0xFFFF
    799                  {
    800                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   000235   7404         MOV       A,#0x4
   \   000237   12....       LCALL     ?XSTACK_DISP0_8
   \   00023A   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00023D   7004         JNZ       ??zdpProcessAddrReq_23
   \   00023F   7E09         MOV       R6,#0x9
   \   000241   8002         SJMP      ??zdpProcessAddrReq_24
   \                     ??zdpProcessAddrReq_23:
   \   000243   7E03         MOV       R6,#0x3
   \                     ??zdpProcessAddrReq_24:
   \   000245   7406         MOV       A,#0x6
   \   000247   12....       LCALL     ?XSTACK_DISP0_8
   \   00024A   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00024D   2E           ADD       A,R6
   \   00024E   F8           MOV       R0,A
   \   00024F   A3           INC       DPTR
   \   000250   E0           MOVX      A,@DPTR
   \   000251   3400         ADDC      A,#0x0
   \   000253   8882         MOV       DPL,R0
   \   000255   F583         MOV       DPH,A
   \   000257   E0           MOVX      A,@DPTR
   \   000258   FE           MOV       R6,A
    801                    uint16 *pList = list + idx;
   \   000259   25E0         ADD       A,0xE0 /* A   */
   \   00025B   F8           MOV       R0,A
   \   00025C   E4           CLR       A
   \   00025D   33           RLC       A
   \   00025E   F9           MOV       R1,A
   \   00025F   EA           MOV       A,R2
   \   000260   28           ADD       A,R0
   \   000261   F8           MOV       R0,A
   \   000262   EB           MOV       A,R3
   \   000263   39           ADDC      A,R1
   \   000264   F9           MOV       R1,A
    802          
    803                    // NumAssocDev field is only present on success.
    804                    if ( cnt > idx )
   \   000265   85..82       MOV       DPL,?XSP + 0
   \   000268   85..83       MOV       DPH,?XSP + 1
   \   00026B   E0           MOVX      A,@DPTR
   \   00026C   FF           MOV       R7,A
   \   00026D   EE           MOV       A,R6
   \   00026E   C3           CLR       C
   \   00026F   9F           SUBB      A,R7
   \   000270   5013         JNC       ??zdpProcessAddrReq_25
    805                    {
    806                      cnt -= idx;
   \   000272   E0           MOVX      A,@DPTR
   \   000273   C3           CLR       C
   \   000274   9E           SUBB      A,R6
   \   000275   F0           MOVX      @DPTR,A
    807                      len += (cnt * sizeof( uint16 ));
   \   000276   C3           CLR       C
   \   000277   33           RLC       A
   \   000278   240B         ADD       A,#0xb
   \   00027A   C0E0         PUSH      A
   \   00027C   7401         MOV       A,#0x1
   \   00027E   12....       LCALL     ?XSTACK_DISP0_8
   \   000281   D0E0         POP       A
   \   000283   8001         SJMP      ??zdpProcessAddrReq_26
    808                    }
    809                    else
    810                    {
    811                      cnt = 0;
   \                     ??zdpProcessAddrReq_25:
   \   000285   E4           CLR       A
    812                    }
   \                     ??zdpProcessAddrReq_26:
   \   000286   12....       LCALL     ?Subroutine36 & 0xFFFF
    813                    *pBuf++ = cnt;
   \                     ??CrossCallReturnLabel_45:
   \   000289   8C82         MOV       DPL,R4
   \   00028B   8D83         MOV       DPH,R5
   \   00028D   F0           MOVX      @DPTR,A
    814                    len++;
    815          
    816                    // StartIndex field is only present if NumAssocDev field is non-zero.
    817                    *pBuf++ = idx;
   \   00028E   EE           MOV       A,R6
   \   00028F   85..82       MOV       DPL,?V2
   \   000292   85..83       MOV       DPH,?V3
   \   000295   A3           INC       DPTR
   \   000296   A3           INC       DPTR
   \   000297   A3           INC       DPTR
   \   000298   F0           MOVX      @DPTR,A
   \   000299   E5..         MOV       A,?V2
   \   00029B   2404         ADD       A,#0x4
   \   00029D   F5..         MOV       ?V2,A
   \   00029F   5002         JNC       ??zdpProcessAddrReq_27
   \   0002A1   05..         INC       ?V3
    818                    len++;
   \                     ??zdpProcessAddrReq_27:
   \   0002A3   7401         MOV       A,#0x1
   \   0002A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A8   E0           MOVX      A,@DPTR
   \   0002A9   2402         ADD       A,#0x2
   \   0002AB   8025         SJMP      ??zdpProcessAddrReq_28
    819          
    820                    while ( cnt != 0 )
    821                    {
    822                      *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_29:
   \   0002AD   12....       LCALL     ?Subroutine35 & 0xFFFF
    823                      *pBuf++ = HI_UINT16( *pList );
   \                     ??CrossCallReturnLabel_161:
   \   0002B0   E0           MOVX      A,@DPTR
   \   0002B1   85..82       MOV       DPL,?V2
   \   0002B4   85..83       MOV       DPH,?V3
   \   0002B7   A3           INC       DPTR
   \   0002B8   F0           MOVX      @DPTR,A
   \   0002B9   E5..         MOV       A,?V2
   \   0002BB   2402         ADD       A,#0x2
   \   0002BD   F5..         MOV       ?V2,A
   \   0002BF   5002         JNC       ??zdpProcessAddrReq_30
   \   0002C1   05..         INC       ?V3
    824                      pList++;
   \                     ??zdpProcessAddrReq_30:
   \   0002C3   E8           MOV       A,R0
   \   0002C4   2402         ADD       A,#0x2
   \   0002C6   F8           MOV       R0,A
   \   0002C7   5001         JNC       ??zdpProcessAddrReq_31
   \   0002C9   09           INC       R1
    825                      cnt--;
   \                     ??zdpProcessAddrReq_31:
   \   0002CA   85..82       MOV       DPL,?XSP + 0
   \   0002CD   85..83       MOV       DPH,?XSP + 1
   \   0002D0   E0           MOVX      A,@DPTR
   \   0002D1   14           DEC       A
    826                    }
   \                     ??zdpProcessAddrReq_28:
   \   0002D2   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0002D5   70D6         JNZ       ??zdpProcessAddrReq_29
    827          
    828                    osal_mem_free( (uint8 *)list );
   \   0002D7                ; Setup parameters for call to function osal_mem_free
   \   0002D7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0002DA   800D         SJMP      ??zdpProcessAddrReq_20
    829                  }
    830                  else
    831                  {
    832                    // NumAssocDev field is only present on success.
    833                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_22:
   \   0002DC   8C82         MOV       DPL,R4
   \   0002DE   8D83         MOV       DPH,R5
   \   0002E0   E4           CLR       A
   \   0002E1   F0           MOVX      @DPTR,A
    834                    len++;
   \   0002E2   04           INC       A
   \   0002E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E6   740C         MOV       A,#0xc
   \   0002E8   F0           MOVX      @DPTR,A
    835                  }
    836                }
    837              }
    838          
    839              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_20:
   \   0002E9   90....       MOV       DPTR,#ZDP_TxOptions
   \   0002EC   7410         MOV       A,#0x10
   \   0002EE   F0           MOVX      @DPTR,A
    840              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0002EF                ; Setup parameters for call to function fillAndSend
   \   0002EF   7404         MOV       A,#0x4
   \   0002F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F4   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0002F7   F5..         MOV       ?V0,A
   \   0002F9   A3           INC       DPTR
   \   0002FA   E0           MOVX      A,@DPTR
   \   0002FB   4480         ORL       A,#0x80
   \   0002FD   F5..         MOV       ?V1,A
   \   0002FF   78..         MOV       R0,#?V0
   \   000301   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000304   7403         MOV       A,#0x3
   \   000306   12....       LCALL     ?XSTACK_DISP0_8
   \   000309   E0           MOVX      A,@DPTR
   \   00030A   F9           MOV       R1,A
   \   00030B   7404         MOV       A,#0x4
   \   00030D   12....       LCALL     ?XSTACK_DISP0_8
   \   000310   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000313   7404         MOV       A,#0x4
   \   000315   12....       LCALL     ?XSTACK_DISP0_8
   \   000318   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00031B   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00031E   7402         MOV       A,#0x2
   \   000320   12....       LCALL     ?DEALLOC_XSTACK8
    841              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000323   90....       MOV       DPTR,#ZDP_TxOptions
   \   000326   E4           CLR       A
   \   000327   F0           MOVX      @DPTR,A
    842            }
    843          }
   \                     ??zdpProcessAddrReq_13:
   \   000328   741D         MOV       A,#0x1d
   \   00032A   02....       LJMP      ??Subroutine113_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000006   49           ORL       A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   240F         ADD       A,#0xf
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FD           MOV       R5,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    844          
    845          /*********************************************************************
    846           * @fn          ZDP_NodeDescMsg
    847           *
    848           * @brief       Builds and sends a Node Descriptor message, unicast to the
    849           *              specified device.
    850           *
    851           * @param       inMsg - incoming message
    852           * @param       nwkAddr - 16 bit network address for device
    853           * @param       pNodeDesc - pointer to the node descriptor
    854           *
    855           * @return      afStatus_t
    856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    857          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    858                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    859          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    860            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FE           MOV       R6,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   12....       LCALL     ?Subroutine20 & 0xFFFF
    861            byte len;
    862          
    863            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    864          
    865            *pBuf++ = ZDP_SUCCESS;
    866          
    867            *pBuf++ = LO_UINT16( nwkAddr );
    868            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_22:
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?Subroutine41 & 0xFFFF
    869          
    870            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    871                               (pNodeDesc->UserDescAvail << 4) |
    872                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_52:
   \   000015   541F         ANL       A,#0x1f
   \   000017   8E82         MOV       DPL,R6
   \   000019   8F83         MOV       DPH,R7
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   12....       LCALL     ??Subroutine100_0 & 0xFFFF
    873          
    874            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_163:
   \   000021   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000024   12....       LCALL     ?Subroutine34 & 0xFFFF
    875            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_44:
   \   000027   8E82         MOV       DPL,R6
   \   000029   8F83         MOV       DPH,R7
   \   00002B   12....       LCALL     ?Subroutine28 & 0xFFFF
    876            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_184:
   \   00002E   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000031   12....       LCALL     ?Subroutine28 & 0xFFFF
    877            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_185:
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000038   12....       LCALL     ?Subroutine27 & 0xFFFF
    878            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_33:
   \   00003B   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00003E   12....       LCALL     ?Subroutine27 & 0xFFFF
    879            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_34:
   \   000041   A3           INC       DPTR
   \   000042   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000045   12....       LCALL     ?Subroutine23 & 0xFFFF
    880            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_28:
   \   000048   12....       LCALL     ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
    881          
    882            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   00004D   E8           MOV       A,R0
   \   00004E   2408         ADD       A,#0x8
   \   000050   FC           MOV       R4,A
   \   000051   E4           CLR       A
   \   000052   39           ADDC      A,R1
   \   000053   FD           MOV       R5,A
   \   000054   8C82         MOV       DPL,R4
   \   000056   8D83         MOV       DPH,R5
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F5..         MOV       ?V0,A
   \   00005B   EE           MOV       A,R6
   \   00005C   240B         ADD       A,#0xb
   \   00005E   F582         MOV       DPL,A
   \   000060   E4           CLR       A
   \   000061   3F           ADDC      A,R7
   \   000062   F583         MOV       DPH,A
   \   000064   E5..         MOV       A,?V0
   \   000066   12....       LCALL     ?Subroutine16 & 0xFFFF
    883            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_11:
   \   000069   C0E0         PUSH      A
   \   00006B   EE           MOV       A,R6
   \   00006C   240C         ADD       A,#0xc
   \   00006E   F582         MOV       DPL,A
   \   000070   E4           CLR       A
   \   000071   3F           ADDC      A,R7
   \   000072   F583         MOV       DPH,A
   \   000074   D0E0         POP       A
   \   000076   12....       LCALL     ?Subroutine23 & 0xFFFF
    884            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_29:
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   C0E0         PUSH      A
   \   00007F   EE           MOV       A,R6
   \   000080   240D         ADD       A,#0xd
   \   000082   F582         MOV       DPL,A
   \   000084   E4           CLR       A
   \   000085   3F           ADDC      A,R7
   \   000086   F583         MOV       DPH,A
   \   000088   D0E0         POP       A
   \   00008A   F0           MOVX      @DPTR,A
    885            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   00008B   E8           MOV       A,R0
   \   00008C   240B         ADD       A,#0xb
   \   00008E   F582         MOV       DPL,A
   \   000090   E4           CLR       A
   \   000091   39           ADDC      A,R1
   \   000092   F583         MOV       DPH,A
   \   000094   E0           MOVX      A,@DPTR
   \   000095   C0E0         PUSH      A
   \   000097   EE           MOV       A,R6
   \   000098   240E         ADD       A,#0xe
   \   00009A   F582         MOV       DPL,A
   \   00009C   E4           CLR       A
   \   00009D   3F           ADDC      A,R7
   \   00009E   F583         MOV       DPH,A
   \   0000A0   D0E0         POP       A
   \   0000A2   F0           MOVX      @DPTR,A
    886            *pBuf = pNodeDesc->DescriptorCapability;
   \   0000A3   E8           MOV       A,R0
   \   0000A4   240C         ADD       A,#0xc
   \   0000A6   F582         MOV       DPL,A
   \   0000A8   E4           CLR       A
   \   0000A9   39           ADDC      A,R1
   \   0000AA   F583         MOV       DPH,A
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   C0E0         PUSH      A
   \   0000AF   EE           MOV       A,R6
   \   0000B0   240F         ADD       A,#0xf
   \   0000B2   F582         MOV       DPL,A
   \   0000B4   E4           CLR       A
   \   0000B5   3F           ADDC      A,R7
   \   0000B6   F583         MOV       DPH,A
   \   0000B8   D0E0         POP       A
   \   0000BA   F0           MOVX      @DPTR,A
    887          
    888            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   0000BB                ; Setup parameters for call to function fillAndSend
   \   0000BB   75..02       MOV       ?V0,#0x2
   \   0000BE   75..80       MOV       ?V1,#-0x80
   \   0000C1   78..         MOV       R0,#?V0
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C6   7910         MOV       R1,#0x10
   \   0000C8   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000CB   5001         JNC       ??ZDP_NodeDescMsg_0
   \   0000CD   0B           INC       R3
   \                     ??ZDP_NodeDescMsg_0:
   \   0000CE   80..         SJMP      ??Subroutine110_0
    889          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005                REQUIRE ??Subroutine109_0
   \   000005                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   12....       LCALL     ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   FC           MOV       R4,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   FD           MOV       R5,A
   \   000007   EA           MOV       A,R2
   \   000008   240F         ADD       A,#0xf
   \   00000A   FA           MOV       R2,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   FF           MOV       R7,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   E4           CLR       A
   \   000006   F0           MOVX      @DPTR,A
   \   000007   EC           MOV       A,R4
   \   000008   A3           INC       DPTR
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   ED           MOV       A,R5
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   F0           MOVX      @DPTR,A
   \   000012   740A         MOV       A,#0xa
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   A3           INC       DPTR
   \   000006   22           RET
    890          
    891          /*********************************************************************
    892           * @fn          ZDP_PowerDescMsg
    893           *
    894           * @brief       Builds and sends a Power Descriptor message, unicast to the
    895           *              specified device.
    896           *
    897           * @param       inMsg - incoming message (request)
    898           * @param       nwkAddr - 16 bit network address for device
    899           * @param       pPowerDesc - pointer to the node descriptor
    900           *
    901           * @return      afStatus_t
    902           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    903          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    904                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    905          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    906            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000008   FE           MOV       R6,A
   \   000009   E9           MOV       A,R1
   \   00000A   12....       LCALL     ?Subroutine20 & 0xFFFF
    907            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    908          
    909            *pBuf++ = ZDP_SUCCESS;
    910          
    911            *pBuf++ = LO_UINT16( nwkAddr );
    912            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_23:
   \   00000D   12....       LCALL     ?XSTACK_DISP0_8
   \   000010   12....       LCALL     ?Subroutine41 & 0xFFFF
    913          
    914            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    915                              | (pPowerDesc->PowerMode & 0x0F));
   \                     ??CrossCallReturnLabel_53:
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   12....       LCALL     ?Subroutine98 & 0xFFFF
    916            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    917                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_192:
   \   00001D   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000020   540F         ANL       A,#0xf
   \   000022   F9           MOV       R1,A
   \   000023   740C         MOV       A,#0xc
   \   000025   78..         MOV       R0,#?V0
   \   000027   12....       LCALL     ?US_SHR
   \   00002A   E5..         MOV       A,?V0
   \   00002C   C4           SWAP      A
   \   00002D   49           ORL       A,R1
   \   00002E   8E82         MOV       DPL,R6
   \   000030   8F83         MOV       DPH,R7
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
    918          
    919            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..03       MOV       ?V0,#0x3
   \   00003A   75..80       MOV       ?V1,#-0x80
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   7905         MOV       R1,#0x5
   \   000044   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000047   5001         JNC       ??ZDP_PowerDescMsg_0
   \   000049   0B           INC       R3
   \                     ??ZDP_PowerDescMsg_0:
   \   00004A   80..         SJMP      ??Subroutine110_0
    920          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine111_0
   \   000003                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000003   22           RET
    921          
    922          /*********************************************************************
    923           * @fn          ZDP_SimpleDescMsg
    924           *
    925           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    926           *              specified device.
    927           *
    928           * @param       inMsg - incoming message (request)
    929           * @param       Status - message status (ZDP_SUCCESS or other)
    930           * @param       pSimpleDesc - pointer to the node descriptor
    931           *
    932           * @return      afStatus_t
    933           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    934          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    935                                        SimpleDescriptionFormat_t *pSimpleDesc )
    936          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000012   E9           MOV       A,R1
   \   000013   85..82       MOV       DPL,?XSP + 0
   \   000016   85..83       MOV       DPH,?XSP + 1
   \   000019   F0           MOVX      @DPTR,A
    937            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   12....       LCALL     ??Subroutine115_0 & 0xFFFF
    938            uint8 i, len;
    939          
    940            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_215:
   \   00001D   EC           MOV       A,R4
   \   00001E   2409         ADD       A,#0x9
   \   000020   F5..         MOV       ?V0,A
   \   000022   E4           CLR       A
   \   000023   3D           ADDC      A,R5
   \   000024   F5..         MOV       ?V1,A
   \   000026   EC           MOV       A,R4
   \   000027   2406         ADD       A,#0x6
   \   000029   F5..         MOV       ?V2,A
   \   00002B   E4           CLR       A
   \   00002C   3D           ADDC      A,R5
   \   00002D   F5..         MOV       ?V3,A
   \   00002F   85..82       MOV       DPL,?XSP + 0
   \   000032   85..83       MOV       DPH,?XSP + 1
   \   000035   E0           MOVX      A,@DPTR
   \   000036   7023         JNZ       ??ZDP_SimpleDescMsg_0
   \   000038   EC           MOV       A,R4
   \   000039   4D           ORL       A,R5
   \   00003A   601F         JZ        ??ZDP_SimpleDescMsg_0
    941            {
    942              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    943              len = 1 + 2 + 1 + 8;
    944              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   00003C   85..82       MOV       DPL,?V0
   \   00003F   85..83       MOV       DPH,?V1
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F8           MOV       R0,A
   \   000044   85..82       MOV       DPL,?V2
   \   000047   85..83       MOV       DPH,?V3
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   28           ADD       A,R0
   \   00004C   C3           CLR       C
   \   00004D   33           RLC       A
   \   00004E   240C         ADD       A,#0xc
   \   000050   F9           MOV       R1,A
    945            }
    946            else
    947            {
    948              len = 1 + 2 + 1; // Status + desc length
    949            }
    950            if ( len >= ZDP_BUF_SZ-1 )
   \   000051   C3           CLR       C
   \   000052   944F         SUBB      A,#0x4f
   \   000054   4007         JC        ??ZDP_SimpleDescMsg_1
    951            {
    952              return afStatus_MEM_FAIL;
   \   000056   7910         MOV       R1,#0x10
   \   000058   02....       LJMP      ??ZDP_SimpleDescMsg_2 & 0xFFFF
    953            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   00005B   7904         MOV       R1,#0x4
    954          
    955            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   00005D   85..82       MOV       DPL,?XSP + 0
   \   000060   85..83       MOV       DPH,?XSP + 1
   \   000063   12....       LCALL     ??Subroutine118_0 & 0xFFFF
    956            
    957            //From spec 2.4.3.1.5 The NWKAddrOfInterest field shall match 
    958            //that specified in the original Simple_Desc_req command
    959            *pBuf++ = inMsg->asdu[0];  
   \                     ??CrossCallReturnLabel_229:
   \   000066   7401         MOV       A,#0x1
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   2413         ADD       A,#0x13
   \   00006E   FE           MOV       R6,A
   \   00006F   A3           INC       DPTR
   \   000070   E0           MOVX      A,@DPTR
   \   000071   3400         ADDC      A,#0x0
   \   000073   FF           MOV       R7,A
   \   000074   8E82         MOV       DPL,R6
   \   000076   8F83         MOV       DPH,R7
   \   000078   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00007B   8A82         MOV       DPL,R2
   \   00007D   8B83         MOV       DPH,R3
   \   00007F   A3           INC       DPTR
   \   000080   F0           MOVX      @DPTR,A
    960            *pBuf++ = inMsg->asdu[1];
   \   000081   8E82         MOV       DPL,R6
   \   000083   8F83         MOV       DPH,R7
   \   000085   12....       LCALL     ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000088   12....       LCALL     ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   00008B   A3           INC       DPTR
   \   00008C   F0           MOVX      @DPTR,A
    961          
    962            if ( len > 4 )
   \   00008D   EA           MOV       A,R2
   \   00008E   2403         ADD       A,#0x3
   \   000090   F582         MOV       DPL,A
   \   000092   E4           CLR       A
   \   000093   3B           ADDC      A,R3
   \   000094   F583         MOV       DPH,A
   \   000096   E9           MOV       A,R1
   \   000097   C3           CLR       C
   \   000098   9405         SUBB      A,#0x5
   \   00009A   5003         JNC       $+5
   \   00009C   02....       LJMP      ??ZDP_SimpleDescMsg_3 & 0xFFFF
    963            {
    964              *pBuf++ = len - 4;   // Simple descriptor length
   \   00009F   74FC         MOV       A,#-0x4
   \   0000A1   29           ADD       A,R1
   \   0000A2   F0           MOVX      @DPTR,A
    965          
    966              *pBuf++ = pSimpleDesc->EndPoint;
   \   0000A3   8C82         MOV       DPL,R4
   \   0000A5   8D83         MOV       DPH,R5
   \   0000A7   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000AA   12....       LCALL     ?Subroutine91 & 0xFFFF
    967              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_143:
   \   0000AD   AE82         MOV       R6,DPL
   \   0000AF   AF83         MOV       R7,DPH
   \   0000B1   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   0000B4   12....       LCALL     ?Subroutine11 & 0xFFFF
    968              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_5:
   \   0000B7   F0           MOVX      @DPTR,A
    969              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   0000B8   EC           MOV       A,R4
   \   0000B9   2403         ADD       A,#0x3
   \   0000BB   FE           MOV       R6,A
   \   0000BC   E4           CLR       A
   \   0000BD   3D           ADDC      A,R5
   \   0000BE   FF           MOV       R7,A
   \   0000BF   8E82         MOV       DPL,R6
   \   0000C1   8F83         MOV       DPH,R7
   \   0000C3   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   0000C6   A3           INC       DPTR
   \   0000C7   12....       LCALL     ?Subroutine11 & 0xFFFF
    970              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_6:
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   12....       LCALL     ?Subroutine91 & 0xFFFF
    971          
    972              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \                     ??CrossCallReturnLabel_144:
   \   0000CF   A3           INC       DPTR
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   540F         ANL       A,#0xf
   \   0000D6   8A82         MOV       DPL,R2
   \   0000D8   8B83         MOV       DPH,R3
   \   0000DA   A3           INC       DPTR
   \   0000DB   A3           INC       DPTR
   \   0000DC   A3           INC       DPTR
   \   0000DD   A3           INC       DPTR
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   A3           INC       DPTR
   \   0000E1   A3           INC       DPTR
   \   0000E2   A3           INC       DPTR
   \   0000E3   F0           MOVX      @DPTR,A
    973          
    974              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   0000E4   85..82       MOV       DPL,?V2
   \   0000E7   85..83       MOV       DPH,?V3
   \   0000EA   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000ED   A3           INC       DPTR
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   F0           MOVX      @DPTR,A
   \   0000F4   EA           MOV       A,R2
   \   0000F5   240B         ADD       A,#0xb
   \   0000F7   FA           MOV       R2,A
   \   0000F8   5001         JNC       ??ZDP_SimpleDescMsg_4
   \   0000FA   0B           INC       R3
    975              if ( pSimpleDesc->AppNumInClusters )
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000FB   85..82       MOV       DPL,?V2
   \   0000FE   85..83       MOV       DPH,?V3
   \   000101   E0           MOVX      A,@DPTR
   \   000102   6031         JZ        ??ZDP_SimpleDescMsg_5
    976              {
    977                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   000104   7800         MOV       R0,#0x0
   \   000106   EC           MOV       A,R4
   \   000107   2407         ADD       A,#0x7
   \   000109   F5..         MOV       ?V6,A
   \   00010B   E4           CLR       A
   \   00010C   3D           ADDC      A,R5
   \   00010D   F5..         MOV       ?V7,A
   \   00010F   8017         SJMP      ??ZDP_SimpleDescMsg_6
    978                {
    979                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_7:
   \   000111   E8           MOV       A,R0
   \   000112   25E0         ADD       A,0xE0 /* A   */
   \   000114   FE           MOV       R6,A
   \   000115   E4           CLR       A
   \   000116   33           RLC       A
   \   000117   FF           MOV       R7,A
   \   000118   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00011B   12....       LCALL     ?Subroutine40 & 0xFFFF
    980                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??CrossCallReturnLabel_233:
   \   00011E   12....       LCALL     ?Subroutine56 & 0xFFFF
    981                }
   \                     ??CrossCallReturnLabel_86:
   \   000121   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000124   5001         JNC       ??ZDP_SimpleDescMsg_8
   \   000126   0B           INC       R3
   \                     ??ZDP_SimpleDescMsg_8:
   \   000127   08           INC       R0
   \                     ??ZDP_SimpleDescMsg_6:
   \   000128   85..82       MOV       DPL,?V2
   \   00012B   85..83       MOV       DPH,?V3
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   FE           MOV       R6,A
   \   000130   E8           MOV       A,R0
   \   000131   C3           CLR       C
   \   000132   9E           SUBB      A,R6
   \   000133   40DC         JC        ??ZDP_SimpleDescMsg_7
    982              }
    983          
    984              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   000135   85..82       MOV       DPL,?V0
   \   000138   85..83       MOV       DPH,?V1
   \   00013B   12....       LCALL     ?Subroutine15 & 0xFFFF
    985              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_204:
   \   00013E   85..82       MOV       DPL,?V0
   \   000141   85..83       MOV       DPH,?V1
   \   000144   E0           MOVX      A,@DPTR
   \   000145   6033         JZ        ??ZDP_SimpleDescMsg_9
    986              {
    987                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   000147   7800         MOV       R0,#0x0
   \   000149   EC           MOV       A,R4
   \   00014A   240A         ADD       A,#0xa
   \   00014C   5001         JNC       ??ZDP_SimpleDescMsg_10
   \   00014E   0D           INC       R5
   \                     ??ZDP_SimpleDescMsg_10:
   \   00014F   FE           MOV       R6,A
   \   000150   ED           MOV       A,R5
   \   000151   FF           MOV       R7,A
   \                     ??ZDP_SimpleDescMsg_11:
   \   000152   85..82       MOV       DPL,?V0
   \   000155   85..83       MOV       DPH,?V1
   \   000158   E0           MOVX      A,@DPTR
   \   000159   FC           MOV       R4,A
   \   00015A   E8           MOV       A,R0
   \   00015B   C3           CLR       C
   \   00015C   9C           SUBB      A,R4
   \   00015D   501B         JNC       ??ZDP_SimpleDescMsg_9
    988                {
    989                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   00015F   E8           MOV       A,R0
   \   000160   25E0         ADD       A,0xE0 /* A   */
   \   000162   FC           MOV       R4,A
   \   000163   E4           CLR       A
   \   000164   33           RLC       A
   \   000165   FD           MOV       R5,A
   \   000166   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000169   12....       LCALL     ?Subroutine40 & 0xFFFF
    990                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??CrossCallReturnLabel_234:
   \   00016C   12....       LCALL     ?Subroutine57 & 0xFFFF
    991                }
   \                     ??CrossCallReturnLabel_88:
   \   00016F   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000172   5001         JNC       ??ZDP_SimpleDescMsg_12
   \   000174   0B           INC       R3
   \                     ??ZDP_SimpleDescMsg_12:
   \   000175   08           INC       R0
   \   000176   80DA         SJMP      ??ZDP_SimpleDescMsg_11
    992              }
    993            }
    994          
    995            else
    996            {
    997              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   000178   E4           CLR       A
   \   000179   F0           MOVX      @DPTR,A
    998            }
    999          
   1000            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_9:
   \   00017A                ; Setup parameters for call to function fillAndSend
   \   00017A   75..04       MOV       ?V0,#0x4
   \   00017D   75..80       MOV       ?V1,#-0x80
   \   000180   78..         MOV       R0,#?V0
   \   000182   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000185   7403         MOV       A,#0x3
   \   000187   12....       LCALL     ?XSTACK_DISP0_8
   \   00018A   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00018D   7403         MOV       A,#0x3
   \   00018F   12....       LCALL     ?XSTACK_DISP0_8
   \   000192   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000195   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000198   7402         MOV       A,#0x2
   \   00019A   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   00019D                REQUIRE ?Subroutine7
   \   00019D                ; // Fall through to label ?Subroutine7
   1001          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7403         MOV       A,#0x3
   \   000002   80..         SJMP      ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   2C           ADD       A,R4
   \   000006   F5..         MOV       ?V2,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   3D           ADDC      A,R5
   \   00000B   85..82       MOV       DPL,?V2
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2E           ADD       A,R6
   \   000008   F5..         MOV       ?V4,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3F           ADDC      A,R7
   \   00000D   85..82       MOV       DPL,?V4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F583         MOV       DPH,A
   \   000002   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000005   FA           MOV       R2,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003                REQUIRE ??Subroutine112_0
   \   000003                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   F0           MOVX      @DPTR,A
   \   000006   8E82         MOV       DPL,R6
   \   000008   8F83         MOV       DPH,R7
   \   00000A   A3           INC       DPTR
   \   00000B   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine118_0
   \   000002                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine125_0
   \   000001                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   EA           MOV       A,R2
   \   000009   2402         ADD       A,#0x2
   \   00000B   22           RET
   1002          
   1003          /*********************************************************************
   1004           * @fn          ZDP_EPRsp
   1005           *
   1006           * @brief       This builds and send an endpoint list. Used in
   1007           *              Active_EP_rsp and Match_Desc_Rsp
   1008           *              message.  This function sends unicast message to the
   1009           *              requesting device.
   1010           *
   1011           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
   1012           * @param       dstAddr - destination address
   1013           * @param       Status - message status (ZDP_SUCCESS or other)
   1014           * @param       nwkAddr - Device's short address that this response describes
   1015           * @param       Count - number of endpoint/interfaces in list
   1016           * @param       pEPIntfList - Array of Endpoint/Interfaces
   1017           * @param       SecurityEnable - Security Options
   1018           *
   1019           * @return      afStatus_t
   1020           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1021          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
   1022                                  byte Status, uint16 nwkAddr, byte Count,
   1023                                  uint8 *pEPList,
   1024                                  byte SecurityEnable )
   1025          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EA           MOV       A,R2
   \   000013   FE           MOV       R6,A
   \   000014   EB           MOV       A,R3
   \   000015   FF           MOV       R7,A
   \   000016   8C..         MOV       ?V6,R4
   \   000018   8D..         MOV       ?V7,R5
   1026            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   1027            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_216:
   \   00001D   75..04       MOV       ?V4,#0x4
   1028            byte txOptions;
   1029          
   1030            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1031          
   1032            if ( MsgType == Match_Desc_rsp )
   \   000020   7406         MOV       A,#0x6
   \   000022   6E           XRL       A,R6
   \   000023   7003         JNZ       ??ZDP_EPRsp_0
   \   000025   7480         MOV       A,#-0x80
   \   000027   6F           XRL       A,R7
   \                     ??ZDP_EPRsp_0:
   \   000028   7005         JNZ       ??ZDP_EPRsp_1
   1033              txOptions = AF_MSG_ACK_REQUEST;
   \   00002A   75..10       MOV       ?V3,#0x10
   \   00002D   8003         SJMP      ??ZDP_EPRsp_2
   1034            else
   1035              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   00002F   75..00       MOV       ?V3,#0x0
   1036          
   1037              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000032   7411         MOV       A,#0x11
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00003A   7412         MOV       A,#0x12
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine17 & 0xFFFF
   1038            *pBuf++ = LO_UINT16( nwkAddr );
   1039            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_15:
   \   000042   7414         MOV       A,#0x14
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F9           MOV       R1,A
   1040          
   1041            *pBuf++ = Count;   // Endpoint/Interface count
   \   000049   8A82         MOV       DPL,R2
   \   00004B   8B83         MOV       DPH,R3
   \   00004D   A3           INC       DPTR
   \   00004E   A3           INC       DPTR
   \   00004F   A3           INC       DPTR
   \   000050   F0           MOVX      @DPTR,A
   1042          
   1043            if ( Count )
   \   000051   6023         JZ        ??ZDP_EPRsp_3
   1044            {
   1045              len += Count;
   \   000053   7404         MOV       A,#0x4
   \   000055   29           ADD       A,R1
   \   000056   F5..         MOV       ?V4,A
   1046              osal_memcpy( pBuf, pEPList, Count );
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   7415         MOV       A,#0x15
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ?Subroutine48 & 0xFFFF
   1047            }
   \                     ??CrossCallReturnLabel_69:
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000063   E9           MOV       A,R1
   \   000064   FC           MOV       R4,A
   \   000065   7D00         MOV       R5,#0x0
   \   000067   EA           MOV       A,R2
   \   000068   2404         ADD       A,#0x4
   \   00006A   FA           MOV       R2,A
   \   00006B   5001         JNC       ??ZDP_EPRsp_4
   \   00006D   0B           INC       R3
   \                     ??ZDP_EPRsp_4:
   \   00006E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000071   7403         MOV       A,#0x3
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   1048          
   1049            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000076   E5..         MOV       A,?V3
   \   000078   90....       MOV       DPTR,#ZDP_TxOptions
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C                ; Setup parameters for call to function fillAndSend
   \   00007C   8E..         MOV       ?V0,R6
   \   00007E   8F..         MOV       ?V1,R7
   \   000080   78..         MOV       R0,#?V0
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000085   A9..         MOV       R1,?V4
   \   000087   AC..         MOV       R4,?V6
   \   000089   AD..         MOV       R5,?V7
   \   00008B   7402         MOV       A,#0x2
   \   00008D   12....       LCALL     ?XSTACK_DISP101_8
   \   000090   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
   \   000098   E9           MOV       A,R1
   \   000099   F9           MOV       R1,A
   \   00009A   90....       MOV       DPTR,#ZDP_TxOptions
   \   00009D   E4           CLR       A
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   04           INC       A
   \   0000A0   02....       LJMP      ??Subroutine113_0 & 0xFFFF
   1050          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   75..00       MOV       ?V2,#0x0
   \   00000A   78..         MOV       R0,#?V0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   E9           MOV       A,R1
   \   000002   8A82         MOV       DPL,R2
   \   000004   8B83         MOV       DPH,R3
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET
   1051          
   1052          /*********************************************************************
   1053           * @fn          ZDP_UserDescRsp
   1054           *
   1055           * @brief       Build and send the User Decriptor Response.
   1056           *
   1057           *
   1058           * @param       dstAddr - destination address
   1059           * @param       nwkAddrOfInterest -
   1060           * @param       userDesc -
   1061           * @param       SecurityEnable - Security Options
   1062           *
   1063           * @return      ZStatus_t
   1064           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1065          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
   1066                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
   1067                          byte SecurityEnable )
   1068          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   8A..         MOV       ?V6,R2
   \   000014   8B..         MOV       ?V7,R3
   1069            uint8 *pBuf = ZDP_TmpBuf;
   \   000016   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000019   7411         MOV       A,#0x11
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V4,A
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F5..         MOV       ?V5,A
   1070            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
   1071          
   1072            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1073          
   1074            len += userDesc->len;
   \   000025   85..82       MOV       DPL,?V4
   \   000028   F583         MOV       DPH,A
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   2404         ADD       A,#0x4
   \   00002D   FF           MOV       R7,A
   1075          
   1076            *pBuf++ = ZSUCCESS;
   \   00002E   8A82         MOV       DPL,R2
   \   000030   8B83         MOV       DPH,R3
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
   1077          
   1078            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000034   EC           MOV       A,R4
   \   000035   A3           INC       DPTR
   \   000036   F0           MOVX      @DPTR,A
   1079            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   000037   ED           MOV       A,R5
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   12....       LCALL     ?Subroutine99 & 0xFFFF
   1080          
   1081            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_159:
   \   000041   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000044   12....       LCALL     ?Subroutine92 & 0xFFFF
   1082            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_146:
   \   000047   AC82         MOV       R4,DPL
   \   000049   AD83         MOV       R5,DPH
   \   00004B   8C..         MOV       ?V0,R4
   \   00004D   8D..         MOV       ?V1,R5
   \   00004F   75..00       MOV       ?V2,#0x0
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000057   85..82       MOV       DPL,?V4
   \   00005A   85..83       MOV       DPH,?V5
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   FC           MOV       R4,A
   \   00005F   7D00         MOV       R5,#0x0
   \   000061   EA           MOV       A,R2
   \   000062   2404         ADD       A,#0x4
   \   000064   FA           MOV       R2,A
   \   000065   5001         JNC       ??ZDP_UserDescRsp_0
   \   000067   0B           INC       R3
   \                     ??ZDP_UserDescRsp_0:
   \   000068   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006B   7403         MOV       A,#0x3
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
   1083          
   1084            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   000070                ; Setup parameters for call to function fillAndSend
   \   000070   75..11       MOV       ?V0,#0x11
   \   000073   75..80       MOV       ?V1,#-0x80
   \   000076   78..         MOV       R0,#?V0
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007B   EF           MOV       A,R7
   \   00007C   F9           MOV       R1,A
   \   00007D   AC..         MOV       R4,?V6
   \   00007F   AD..         MOV       R5,?V7
   \   000081   7402         MOV       A,#0x2
   \   000083   12....       LCALL     ?XSTACK_DISP101_8
   \   000086   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000089   7402         MOV       A,#0x2
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008E   7401         MOV       A,#0x1
   \   000090   02....       LJMP      ??Subroutine113_0 & 0xFFFF
   1085          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
   1086          
   1087          /*********************************************************************
   1088           * @fn          ZDP_ServerDiscRsp
   1089           *
   1090           * @brief       Build and send the Server_Discovery_rsp response.
   1091           *
   1092           * @param       transID - Transaction sequence number of request.
   1093           * @param       dstAddr - Network Destination Address.
   1094           * @param       status - Status of response to request.
   1095           * @param       aoi - Network Address of Interest of request.
   1096           * @param       serverMask - Bit map of service(s) being sought.
   1097           * @param       SecurityEnable - Security Options
   1098           *
   1099           * @return      ZStatus_t
   1100           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1101          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1102                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1103          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EC           MOV       A,R4
   \   000013   FE           MOV       R6,A
   1104            const byte len = 1  + 2;  // status + aoi + mask.
   1105            uint8 *pBuf = ZDP_TmpBuf;
   \   000014   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000017   FC           MOV       R4,A
   \   000018   E9           MOV       A,R1
   \   000019   FD           MOV       R5,A
   1106            ZStatus_t stat;
   1107          
   1108            // Intentionally unreferenced parameters
   1109            (void)aoi;
   1110            (void)SecurityEnable;
   1111          
   1112            *pBuf++ = status;
   \   00001A   EE           MOV       A,R6
   \   00001B   8C82         MOV       DPL,R4
   \   00001D   8D83         MOV       DPH,R5
   \   00001F   F0           MOVX      @DPTR,A
   \   000020   740D         MOV       A,#0xd
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine54 & 0xFFFF
   1113          
   1114            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_81:
   \   000028   A3           INC       DPTR
   \   000029   F0           MOVX      @DPTR,A
   1115            *pBuf++ = HI_UINT16( serverMask );
   \   00002A   E9           MOV       A,R1
   \   00002B   8C82         MOV       DPL,R4
   \   00002D   8D83         MOV       DPH,R5
   \   00002F   A3           INC       DPTR
   \   000030   A3           INC       DPTR
   \   000031   F0           MOVX      @DPTR,A
   1116          
   1117            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000032   90....       MOV       DPTR,#ZDP_TxOptions
   \   000035   7410         MOV       A,#0x10
   \   000037   F0           MOVX      @DPTR,A
   1118            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000038                ; Setup parameters for call to function fillAndSend
   \   000038   75..15       MOV       ?V0,#0x15
   \   00003B   75..80       MOV       ?V1,#-0x80
   \   00003E   78..         MOV       R0,#?V0
   \   000040   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000043   7903         MOV       R1,#0x3
   \   000045   EA           MOV       A,R2
   \   000046   FC           MOV       R4,A
   \   000047   EB           MOV       A,R3
   \   000048   FD           MOV       R5,A
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?XSTACK_DISP101_8
   \   00004E   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   E9           MOV       A,R1
   \   000057   F9           MOV       R1,A
   1119            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000058   90....       MOV       DPTR,#ZDP_TxOptions
   \   00005B   E4           CLR       A
   \   00005C   F0           MOVX      @DPTR,A
   1120          
   1121            return ( stat );
   \   00005D   04           INC       A
   \   00005E   02....       LJMP      ??Subroutine107_0 & 0xFFFF
   1122          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000003   8C82         MOV       DPL,R4
   \   000005   8D83         MOV       DPH,R5
   \   000007   22           RET
   1123          
   1124          /*********************************************************************
   1125           * @fn          ZDP_GenericRsp
   1126           *
   1127           * @brief       Sends a response message with only the parameter status
   1128           *              byte and the addr of interest for data.
   1129           *              This function sends unicast message to the
   1130           *              requesting device.
   1131           *
   1132           * @param       dstAddr - destination address
   1133           * @param       status  - generic status for response
   1134           * @param       aoi     - address of interest
   1135           * @param       dstAddr - destination address
   1136           * @param       rspId   - response cluster ID
   1137           * @param       SecurityEnable - Security Options
   1138           *
   1139           * @return      afStatus_t
   1140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1141          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1142                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1143          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   1144            uint8 len;
   1145          
   1146            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1147          
   1148            ZDP_TmpBuf[0] = status;
   \   000012   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   \   000017   740A         MOV       A,#0xa
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   1149            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_290:
   \   00001F   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FC           MOV       R4,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F583         MOV       DPH,A
   \   000028   8C82         MOV       DPL,R4
   \   00002A   A3           INC       DPTR
   \   00002B   E8           MOV       A,R0
   \   00002C   12....       LCALL     ?Subroutine12 & 0xFFFF
   1150            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   1151          
   1152            // Length byte
   1153            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_8:
   \   00002F   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E4           CLR       A
   \   000036   F0           MOVX      @DPTR,A
   1154            len = 4;
   1155          
   1156            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   740C         MOV       A,#0xc
   \   000039   12....       LCALL     ?XSTACK_DISP0_8
   \   00003C   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003F   7904         MOV       R1,#0x4
   \   000041   EA           MOV       A,R2
   \   000042   FC           MOV       R4,A
   \   000043   EB           MOV       A,R3
   \   000044   FD           MOV       R5,A
   \   000045   7402         MOV       A,#0x2
   \   000047   12....       LCALL     ?XSTACK_DISP101_8
   \   00004A   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00004D   7402         MOV       A,#0x2
   \   00004F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000052   7401         MOV       A,#0x1
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   \   000057                REQUIRE ?Subroutine4
   \   000057                ; // Fall through to label ?Subroutine4
   1157          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1158          
   1159          /*********************************************************************
   1160           * Binding
   1161           */
   1162          /*********************************************************************
   1163           * @fn          ZDP_EndDeviceBindReq
   1164           *
   1165           * @brief       This builds and sends a End_Device_Bind_req message.
   1166           *              This function sends a unicast message.
   1167           *
   1168           * @param       dstAddr - destination address
   1169           * @param       LocalCoordinator - short address of local coordinator
   1170           * @param       epIntf - Endpoint/Interface of Simple Desc
   1171           * @param       ProfileID - Profile ID
   1172           *
   1173           *   The Input cluster list is the opposite of what you would think.
   1174           *   This is the output cluster list of this device
   1175           * @param       NumInClusters - number of input clusters
   1176           * @param       InClusterList - input cluster ID list
   1177           *
   1178           *   The Output cluster list is the opposite of what you would think.
   1179           *   This is the input cluster list of this device
   1180           * @param       NumOutClusters - number of output clusters
   1181           * @param       OutClusterList - output cluster ID list
   1182           *
   1183           * @param       SecurityEnable - Security Options
   1184           *
   1185           * @return      afStatus_t
   1186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1187          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1188                                           uint16 LocalCoordinator,
   1189                                           byte endPoint,
   1190                                           uint16 ProfileID,
   1191                                           byte NumInClusters, cId_t *InClusterList,
   1192                                           byte NumOutClusters, cId_t *OutClusterList,
   1193                                           byte SecurityEnable )
   1194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   00000D   EC           MOV       A,R4
   \   00000E   FE           MOV       R6,A
   \   00000F   ED           MOV       A,R5
   \   000010   FF           MOV       R7,A
   \   000011   89..         MOV       ?V7,R1
   1195            uint8 *pBuf = ZDP_TmpBuf;
   \   000013   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000016   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000019   7414         MOV       A,#0x14
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F5..         MOV       ?V2,A
   \   000021   7417         MOV       A,#0x17
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   E0           MOVX      A,@DPTR
   \   000027   F5..         MOV       ?V3,A
   1196            uint8 i, len;
   1197            uint8 *ieeeAddr;
   1198          
   1199            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1200          
   1201            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1202            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1203            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000029   E5..         MOV       A,?V2
   \   00002B   25..         ADD       A,?V3
   \   00002D   C3           CLR       C
   \   00002E   33           RLC       A
   \   00002F   240F         ADD       A,#0xf
   \   000031   F5..         MOV       ?V6,A
   1204          
   1205            if ( len >= ZDP_BUF_SZ-1 )
   \   000033   C3           CLR       C
   \   000034   944F         SUBB      A,#0x4f
   \   000036   4005         JC        ??ZDP_EndDeviceBindReq_0
   1206            {
   1207              return afStatus_MEM_FAIL;
   \   000038   7910         MOV       R1,#0x10
   \   00003A   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1208            }
   1209          
   1210            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   00003D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003D   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000040   EA           MOV       A,R2
   \   000041   6E           XRL       A,R6
   \   000042   7002         JNZ       ??ZDP_EndDeviceBindReq_2
   \   000044   EB           MOV       A,R3
   \   000045   6F           XRL       A,R7
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000046   6005         JZ        ??ZDP_EndDeviceBindReq_3
   1211            {
   1212              return afStatus_INVALID_PARAMETER;
   \   000048   7902         MOV       R1,#0x2
   \   00004A   02....       LJMP      ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1213            }
   1214          
   1215            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   00004D   EE           MOV       A,R6
   \   00004E   85..82       MOV       DPL,?V0
   \   000051   85..83       MOV       DPH,?V1
   \   000054   F0           MOVX      @DPTR,A
   1216            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000055   EF           MOV       A,R7
   \   000056   A3           INC       DPTR
   \   000057   F0           MOVX      @DPTR,A
   1217          
   1218            ieeeAddr = NLME_GetExtAddr();
   \   000058                ; Setup parameters for call to function NLME_GetExtAddr
   \   000058   12....       LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00005B   8A..         MOV       ?V4,R2
   \   00005D   8B..         MOV       ?V5,R3
   \   00005F   AC..         MOV       R4,?V4
   \   000061   AD..         MOV       R5,?V5
   1219            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   000063                ; Setup parameters for call to function sAddrExtCpy
   \   000063   E5..         MOV       A,?V0
   \   000065   2402         ADD       A,#0x2
   \   000067   FA           MOV       R2,A
   \   000068   E4           CLR       A
   \   000069   35..         ADDC      A,?V1
   \   00006B   FB           MOV       R3,A
   \   00006C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1220          
   1221            *pBuf++ = endPoint;
   \   00006F   8A82         MOV       DPL,R2
   \   000071   8B83         MOV       DPH,R3
   \   000073   E5..         MOV       A,?V7
   \   000075   F0           MOVX      @DPTR,A
   \   000076   7412         MOV       A,#0x12
   \   000078   12....       LCALL     ?XSTACK_DISP0_8
   \   00007B   12....       LCALL     ?Subroutine17 & 0xFFFF
   1222          
   1223            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   1224            *pBuf++ = HI_UINT16( ProfileID );
   1225          
   1226            *pBuf++ = NumInClusters; // Input cluster list
   \                     ??CrossCallReturnLabel_16:
   \   00007E   8A82         MOV       DPL,R2
   \   000080   8B83         MOV       DPH,R3
   \   000082   A3           INC       DPTR
   \   000083   A3           INC       DPTR
   \   000084   A3           INC       DPTR
   \   000085   E5..         MOV       A,?V2
   \   000087   F0           MOVX      @DPTR,A
   \   000088   EA           MOV       A,R2
   \   000089   2404         ADD       A,#0x4
   \   00008B   F5..         MOV       ?V0,A
   \   00008D   E4           CLR       A
   \   00008E   3B           ADDC      A,R3
   \   00008F   F5..         MOV       ?V1,A
   1227            for ( i = 0; i < NumInClusters; ++i )
   \   000091   7A00         MOV       R2,#0x0
   \   000093   7415         MOV       A,#0x15
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00009B   802A         SJMP      ??ZDP_EndDeviceBindReq_4
   1228            {
   1229              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   00009D   EA           MOV       A,R2
   \   00009E   25E0         ADD       A,0xE0 /* A   */
   \   0000A0   FE           MOV       R6,A
   \   0000A1   E4           CLR       A
   \   0000A2   33           RLC       A
   \   0000A3   FF           MOV       R7,A
   \   0000A4   EC           MOV       A,R4
   \   0000A5   2E           ADD       A,R6
   \   0000A6   F5..         MOV       ?V4,A
   \   0000A8   ED           MOV       A,R5
   \   0000A9   3F           ADDC      A,R7
   \   0000AA   F5..         MOV       ?V5,A
   \   0000AC   85..82       MOV       DPL,?V4
   \   0000AF   F583         MOV       DPH,A
   \   0000B1   12....       LCALL     ?Subroutine68 & 0xFFFF
   1230              *pBuf++ = HI_UINT16(InClusterList[i]);
   1231            }
   \                     ??CrossCallReturnLabel_107:
   \   0000B4   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0000B7   8882         MOV       DPL,R0
   \   0000B9   8983         MOV       DPH,R1
   \   0000BB   F0           MOVX      @DPTR,A
   \   0000BC   E5..         MOV       A,?V0
   \   0000BE   2402         ADD       A,#0x2
   \   0000C0   F5..         MOV       ?V0,A
   \   0000C2   5002         JNC       ??ZDP_EndDeviceBindReq_6
   \   0000C4   05..         INC       ?V1
   \                     ??ZDP_EndDeviceBindReq_6:
   \   0000C6   0A           INC       R2
   \                     ??ZDP_EndDeviceBindReq_4:
   \   0000C7   85..82       MOV       DPL,?V0
   \   0000CA   85..83       MOV       DPH,?V1
   \   0000CD   A3           INC       DPTR
   \   0000CE   A882         MOV       R0,DPL
   \   0000D0   A983         MOV       R1,DPH
   \   0000D2   EA           MOV       A,R2
   \   0000D3   C3           CLR       C
   \   0000D4   95..         SUBB      A,?V2
   \   0000D6   40C5         JC        ??ZDP_EndDeviceBindReq_5
   1232          
   1233            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000D8   85..82       MOV       DPL,?V0
   \   0000DB   85..83       MOV       DPH,?V1
   \   0000DE   E5..         MOV       A,?V3
   \   0000E0   F0           MOVX      @DPTR,A
   \   0000E1   88..         MOV       ?V0,R0
   \   0000E3   89..         MOV       ?V1,R1
   1234            for ( i = 0; i < NumOutClusters; ++i )
   \   0000E5   7A00         MOV       R2,#0x0
   \   0000E7   7418         MOV       A,#0x18
   \   0000E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   0000EF   802A         SJMP      ??ZDP_EndDeviceBindReq_7
   1235            {
   1236              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_8:
   \   0000F1   EA           MOV       A,R2
   \   0000F2   25E0         ADD       A,0xE0 /* A   */
   \   0000F4   FC           MOV       R4,A
   \   0000F5   E4           CLR       A
   \   0000F6   33           RLC       A
   \   0000F7   FD           MOV       R5,A
   \   0000F8   E8           MOV       A,R0
   \   0000F9   2C           ADD       A,R4
   \   0000FA   FC           MOV       R4,A
   \   0000FB   E9           MOV       A,R1
   \   0000FC   3D           ADDC      A,R5
   \   0000FD   FD           MOV       R5,A
   \   0000FE   8C82         MOV       DPL,R4
   \   000100   8D83         MOV       DPH,R5
   \   000102   12....       LCALL     ?Subroutine68 & 0xFFFF
   1237              *pBuf++ = HI_UINT16(OutClusterList[i]);
   1238            }
   \                     ??CrossCallReturnLabel_108:
   \   000105   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000108   85..82       MOV       DPL,?V0
   \   00010B   85..83       MOV       DPH,?V1
   \   00010E   A3           INC       DPTR
   \   00010F   F0           MOVX      @DPTR,A
   \   000110   E5..         MOV       A,?V0
   \   000112   2402         ADD       A,#0x2
   \   000114   F5..         MOV       ?V0,A
   \   000116   5002         JNC       ??ZDP_EndDeviceBindReq_9
   \   000118   05..         INC       ?V1
   \                     ??ZDP_EndDeviceBindReq_9:
   \   00011A   0A           INC       R2
   \                     ??ZDP_EndDeviceBindReq_7:
   \   00011B   EA           MOV       A,R2
   \   00011C   C3           CLR       C
   \   00011D   95..         SUBB      A,?V3
   \   00011F   40D0         JC        ??ZDP_EndDeviceBindReq_8
   1239          
   1240            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   000121                ; Setup parameters for call to function fillAndSend
   \   000121   75..20       MOV       ?V0,#0x20
   \   000124   75..00       MOV       ?V1,#0x0
   \   000127   78..         MOV       R0,#?V0
   \   000129   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012C   A9..         MOV       R1,?V6
   \   00012E   7402         MOV       A,#0x2
   \   000130   12....       LCALL     ?XSTACK_DISP0_8
   \   000133   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000136   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000139   7402         MOV       A,#0x2
   \   00013B   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   00013E                REQUIRE ?Subroutine8
   \   00013E                ; // Fall through to label ?Subroutine8
   1241          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV       A,#0x2
   \   000002   02....       LJMP      ??Subroutine113_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000005   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   1242          
   1243          /*********************************************************************
   1244           * @fn          ZDP_BindUnbindReq
   1245           *
   1246           * @brief       This builds and send a Bind_req or Unbind_req message
   1247           *              Depending on the ClusterID. This function
   1248           *              sends a unicast message to the local coordinator.
   1249           *
   1250           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1251           * @param       dstAddr - destination address of the message
   1252           * @param       SourceAddr - source 64 bit address of the binding
   1253           * @param       SrcEPIntf - Source endpoint/interface
   1254           * @param       ClusterID - Binding cluster ID
   1255           * @param       DestinationAddr - destination 64 bit addr of binding
   1256           * @param       DstEPIntf - destination endpoint/interface
   1257           * @param       SecurityEnable - Security Options
   1258           *
   1259           * @return      afStatus_t
   1260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1261          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1262                                        uint8 *SourceAddr, byte SrcEndPoint,
   1263                                        cId_t ClusterID,
   1264                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1265                                        byte SecurityEnable )
   1266          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   EA           MOV       A,R2
   \   000016   FE           MOV       R6,A
   \   000017   EB           MOV       A,R3
   \   000018   FF           MOV       R7,A
   \   000019   89..         MOV       ?V1,R1
   1267            uint8 *pBuf = ZDP_TmpBuf;
   \   00001B   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   1268            byte len;
   1269          
   1270            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1271          
   1272            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1273            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_218:
   \   00001E   75..0C       MOV       ?V0,#0xc
   \   000021   7416         MOV       A,#0x16
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ??Subroutine101_0 & 0xFFFF
   1274            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_165:
   \   000029   E5..         MOV       A,?V2
   \   00002B   2408         ADD       A,#0x8
   \   00002D   F5..         MOV       ?V6,A
   \   00002F   E4           CLR       A
   \   000030   35..         ADDC      A,?V3
   \   000032   F5..         MOV       ?V7,A
   \   000034   85..82       MOV       DPL,?V6
   \   000037   F583         MOV       DPH,A
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F8           MOV       R0,A
   \   00003B   7403         MOV       A,#0x3
   \   00003D   68           XRL       A,R0
   \   00003E   7005         JNZ       ??ZDP_BindUnbindReq_0
   1275              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000040   75..15       MOV       ?V0,#0x15
   \   000043   8008         SJMP      ??ZDP_BindUnbindReq_1
   1276            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000045   7401         MOV       A,#0x1
   \   000047   68           XRL       A,R0
   \   000048   7003         JNZ       ??ZDP_BindUnbindReq_1
   1277              len += sizeof ( uint16 );
   \   00004A   75..0E       MOV       ?V0,#0xe
   1278          
   1279            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   00004D                ; Setup parameters for call to function sAddrExtCpy
   \   00004D   7412         MOV       A,#0x12
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000055   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1280            *pBuf++ = SrcEndPoint;
   \   000058   8A82         MOV       DPL,R2
   \   00005A   8B83         MOV       DPH,R3
   \   00005C   E5..         MOV       A,?V1
   \   00005E   F0           MOVX      @DPTR,A
   \   00005F   7414         MOV       A,#0x14
   \   000061   12....       LCALL     ?XSTACK_DISP0_8
   \   000064   12....       LCALL     ?Subroutine17 & 0xFFFF
   1281          
   1282            *pBuf++ = LO_UINT16( ClusterID );
   1283          
   1284            *pBuf++ = HI_UINT16( ClusterID );
   1285            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_17:
   \   000067   85..82       MOV       DPL,?V6
   \   00006A   85..83       MOV       DPH,?V7
   \   00006D   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000070   5001         JNC       ??ZDP_BindUnbindReq_2
   \   000072   0B           INC       R3
   1286            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??ZDP_BindUnbindReq_2:
   \   000073   85..82       MOV       DPL,?V6
   \   000076   85..83       MOV       DPH,?V7
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F8           MOV       R0,A
   \   00007B   7403         MOV       A,#0x3
   \   00007D   68           XRL       A,R0
   \   00007E   7017         JNZ       ??ZDP_BindUnbindReq_3
   1287            {
   1288              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1289              *pBuf = DstEndPoint;
   \   000080   7418         MOV       A,#0x18
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   E0           MOVX      A,@DPTR
   \   000086   C0E0         PUSH      A
   \   000088                ; Setup parameters for call to function sAddrExtCpy
   \   000088   AC..         MOV       R4,?V2
   \   00008A   AD..         MOV       R5,?V3
   \   00008C   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00008F   8A82         MOV       DPL,R2
   \   000091   8B83         MOV       DPH,R3
   \   000093   D0E0         POP       A
   \   000095   8017         SJMP      ??CrossCallReturnLabel_264
   1290            }
   1291            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_3:
   \   000097   7401         MOV       A,#0x1
   \   000099   68           XRL       A,R0
   \   00009A   7013         JNZ       ??ZDP_BindUnbindReq_4
   1292            {
   1293              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   00009C   85..82       MOV       DPL,?V2
   \   00009F   85..83       MOV       DPH,?V3
   \   0000A2   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   1294              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_231:
   \   0000A5   85..82       MOV       DPL,?V2
   \   0000A8   85..83       MOV       DPH,?V3
   \   0000AB   12....       LCALL     ?Subroutine70 & 0xFFFF
   1295            }
   \                     ??CrossCallReturnLabel_264:
   \   0000AE   F0           MOVX      @DPTR,A
   1296          
   1297            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_4:
   \   0000AF   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000B2   7410         MOV       A,#0x10
   \   0000B4   F0           MOVX      @DPTR,A
   \   0000B5                ; Setup parameters for call to function fillAndSend
   \   0000B5   8E..         MOV       ?V2,R6
   \   0000B7   8F..         MOV       ?V3,R7
   \   0000B9   78..         MOV       R0,#?V2
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   A9..         MOV       R1,?V0
   \   0000C0   7402         MOV       A,#0x2
   \   0000C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C5   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0000C8   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000CB   7402         MOV       A,#0x2
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D0   E9           MOV       A,R1
   \   0000D1   F9           MOV       R1,A
   \   0000D2   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000D5   E4           CLR       A
   \   0000D6   F0           MOVX      @DPTR,A
   \   0000D7   02....       LJMP      ?Subroutine8 & 0xFFFF
   1298          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000003                REQUIRE ??Subroutine126_0
   \   000003                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   EA           MOV       A,R2
   \   000002   2404         ADD       A,#0x4
   \   000004   FA           MOV       R2,A
   \   000005   22           RET
   1299          
   1300          /*********************************************************************
   1301           * Network Management
   1302           */
   1303          
   1304          /*********************************************************************
   1305           * @fn          ZDP_MgmtNwkDiscReq
   1306           *
   1307           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1308           *              function sends a unicast message.
   1309           *
   1310           * @param       dstAddr - destination address of the message
   1311           * @param       ScanChannels - 32 bit address bit map
   1312           * @param       StartIndex - Starting index within the reporting network
   1313           *                           list
   1314           * @param       SecurityEnable - Security Options
   1315           *
   1316           * @return      afStatus_t
   1317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   000004   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000007   7402         MOV       A,#0x2
   \   000009                REQUIRE ??Subroutine103_0
   \   000009                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1318          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1319                                         uint32 ScanChannels,
   1320                                         byte ScanDuration,
   1321                                         byte StartIndex,
   1322                                         byte SecurityEnable )
   1323          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FE           MOV       R6,A
   \   00000B   EC           MOV       A,R4
   \   00000C   FF           MOV       R7,A
   1324            uint8 *pBuf = ZDP_TmpBuf;
   1325            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1326          
   1327            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1328          
   1329            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   00000D                ; Setup parameters for call to function osal_buffer_uint32
   \   00000D   740C         MOV       A,#0xc
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000015   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000018   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00001B   7404         MOV       A,#0x4
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000020   8A82         MOV       DPL,R2
   \   000022   8B83         MOV       DPH,R3
   1330          
   1331            *pBuf++ = ScanDuration;
   \   000024   EE           MOV       A,R6
   \   000025   F0           MOVX      @DPTR,A
   1332            *pBuf = StartIndex;
   \   000026   EF           MOV       A,R7
   \   000027   A3           INC       DPTR
   \   000028   F0           MOVX      @DPTR,A
   1333          
   1334            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   000029                ; Setup parameters for call to function fillAndSend
   \   000029   75..30       MOV       ?V2,#0x30
   \   00002C   75..00       MOV       ?V3,#0x0
   \   00002F   78..         MOV       R0,#?V2
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   7906         MOV       R1,#0x6
   \   000036   AC..         MOV       R4,?V0
   \   000038   AD..         MOV       R5,?V1
   \   00003A   02....       LJMP      ??Subroutine102_0 & 0xFFFF
   1335          }
   1336          
   1337          /*********************************************************************
   1338           * @fn          ZDP_MgmtDirectJoinReq
   1339           *
   1340           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1341           *              function sends a unicast message.
   1342           *
   1343           * @param       dstAddr - destination address of the message
   1344           * @param       deviceAddr - 64 bit IEEE Address
   1345           * @param       SecurityEnable - Security Options
   1346           *
   1347           * @return      afStatus_t
   1348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   75..00       MOV       ?V3,#0x0
   \   000003   78..         MOV       R0,#?V2
   \   000005   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV       R1,#0x9
   \   00000A   EE           MOV       A,R6
   \   00000B   FC           MOV       R4,A
   \   00000C   EF           MOV       A,R7
   \   00000D   FD           MOV       R5,A
   \   00000E                REQUIRE ??Subroutine102_0
   \   00000E                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   89..         MOV       ?V0,R1
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                REQUIRE ??Subroutine115_0
   \   000006                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1349          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1350                                         uint8 *deviceAddr,
   1351                                         byte capInfo,
   1352                                         byte SecurityEnable )
   1353          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine39 & 0xFFFF
   1354            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1355          
   1356            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \                     ??CrossCallReturnLabel_206:
   \   000008   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1357            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   00000B   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   00000E   C8           XCH       A,R0
   \   00000F   2408         ADD       A,#0x8
   \   000011   F582         MOV       DPL,A
   \   000013   E4           CLR       A
   \   000014   38           ADDC      A,R0
   \   000015   F583         MOV       DPH,A
   \   000017   E5..         MOV       A,?V0
   \   000019   F0           MOVX      @DPTR,A
   1358          
   1359            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   00001A                ; Setup parameters for call to function fillAndSend
   \   00001A   75..35       MOV       ?V2,#0x35
   \   00001D   02....       LJMP      ?Subroutine0 & 0xFFFF
   1360          }
   1361          
   1362          /*********************************************************************
   1363           * @fn          ZDP_MgmtPermitJoinReq
   1364           *
   1365           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1366           *
   1367           * @param       dstAddr - destination address of the message
   1368           * @param       duration - Permit duration
   1369           * @param       TcSignificance - Trust Center Significance
   1370           *
   1371           * @return      afStatus_t
   1372           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1373          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1374                                            byte TcSignificance, byte SecurityEnable )
   1375          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   1376            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1377          
   1378            // Build buffer
   1379            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   00000E   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000011   E9           MOV       A,R1
   \   000012   12....       LCALL     ?Subroutine21 & 0xFFFF
   1380            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_25:
   \   000015   EC           MOV       A,R4
   \   000016   F0           MOVX      @DPTR,A
   1381          
   1382            // Check of this is a broadcast message
   1383            if ( (dstAddr) && ((dstAddr->addrMode == Addr16Bit) || (dstAddr->addrMode == AddrBroadcast))
   1384                && ((dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL)
   1385                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR)
   1386                    || (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVRXON)) )
   \   000017   EE           MOV       A,R6
   \   000018   4F           ORL       A,R7
   \   000019   6068         JZ        ??ZDP_MgmtPermitJoinReq_0
   \   00001B   8E82         MOV       DPL,R6
   \   00001D   8F83         MOV       DPH,R7
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   E0           MOVX      A,@DPTR
   \   000028   F8           MOV       R0,A
   \   000029   7402         MOV       A,#0x2
   \   00002B   68           XRL       A,R0
   \   00002C   6005         JZ        ??ZDP_MgmtPermitJoinReq_1
   \   00002E   740F         MOV       A,#0xf
   \   000030   68           XRL       A,R0
   \   000031   7050         JNZ       ??ZDP_MgmtPermitJoinReq_0
   \                     ??ZDP_MgmtPermitJoinReq_1:
   \   000033   8E82         MOV       DPL,R6
   \   000035   8F83         MOV       DPH,R7
   \   000037   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   00003A   74FF         MOV       A,#-0x1
   \   00003C   68           XRL       A,R0
   \   00003D   7003         JNZ       ??ZDP_MgmtPermitJoinReq_2
   \   00003F   74FF         MOV       A,#-0x1
   \   000041   69           XRL       A,R1
   \                     ??ZDP_MgmtPermitJoinReq_2:
   \   000042   6014         JZ        ??ZDP_MgmtPermitJoinReq_3
   \   000044   74FC         MOV       A,#-0x4
   \   000046   68           XRL       A,R0
   \   000047   7003         JNZ       ??ZDP_MgmtPermitJoinReq_4
   \   000049   74FF         MOV       A,#-0x1
   \   00004B   69           XRL       A,R1
   \                     ??ZDP_MgmtPermitJoinReq_4:
   \   00004C   600A         JZ        ??ZDP_MgmtPermitJoinReq_3
   \   00004E   74FD         MOV       A,#-0x3
   \   000050   68           XRL       A,R0
   \   000051   7003         JNZ       ??ZDP_MgmtPermitJoinReq_5
   \   000053   74FF         MOV       A,#-0x1
   \   000055   69           XRL       A,R1
   \                     ??ZDP_MgmtPermitJoinReq_5:
   \   000056   702B         JNZ       ??ZDP_MgmtPermitJoinReq_0
   1387            {
   1388              // Send this to our self as well as broadcast to network
   1389              zAddrType_t tmpAddr;
   1390          
   1391              tmpAddr.addrMode = Addr16Bit;
   \                     ??ZDP_MgmtPermitJoinReq_3:
   \   000058   7408         MOV       A,#0x8
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   7402         MOV       A,#0x2
   \   00005F   F0           MOVX      @DPTR,A
   1392              tmpAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000060                ; Setup parameters for call to function NLME_GetShortAddr
   \   000060   12....       LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000063   12....       LCALL     ?Subroutine24 & 0xFFFF
   1393          
   1394              fillAndSend( &ZDP_TransID, &tmpAddr, Mgmt_Permit_Join_req,
   1395                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \                     ??CrossCallReturnLabel_285:
   \   000066                ; Setup parameters for call to function fillAndSend
   \   000066   75..36       MOV       ?V2,#0x36
   \   000069   75..00       MOV       ?V3,#0x0
   \   00006C   78..         MOV       R0,#?V2
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000071   7902         MOV       R1,#0x2
   \   000073   E9           MOV       A,R1
   \   000074   12....       LCALL     ?XSTACK_DISP102_8
   \   000077   7A..         MOV       R2,#ZDP_TransID & 0xff
   \   000079   7B..         MOV       R3,#(ZDP_TransID >> 8) & 0xff
   \   00007B   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00007E   7402         MOV       A,#0x2
   \   000080   12....       LCALL     ?DEALLOC_XSTACK8
   1396            }
   1397          
   1398            // Send the message
   1399            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1400                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \                     ??ZDP_MgmtPermitJoinReq_0:
   \   000083                ; Setup parameters for call to function fillAndSend
   \   000083   75..36       MOV       ?V2,#0x36
   \   000086   75..00       MOV       ?V3,#0x0
   \   000089   78..         MOV       R0,#?V2
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008E   7902         MOV       R1,#0x2
   \   000090   EE           MOV       A,R6
   \   000091   FC           MOV       R4,A
   \   000092   EF           MOV       A,R7
   \   000093   FD           MOV       R5,A
   \   000094   02....       LJMP      ?Subroutine6 & 0xFFFF
   1401          }
   1402          
   1403          /*********************************************************************
   1404           * @fn          ZDP_MgmtLeaveReq
   1405           *
   1406           * @brief       This builds and send a Mgmt_Leave_req message.
   1407           *
   1408           * @param       dstAddr - destination address of the message
   1409           *              IEEEAddr - IEEE adddress of device that is removed
   1410           *              RemoveChildren - set to 1 to remove the children of the
   1411           *                                device as well. 0 otherwise.
   1412           *              Rejoin - set to 1 if the removed device should rejoin
   1413                                   afterwards. 0 otherwise.
   1414           *
   1415           * @return      afStatus_t
   1416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1417          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1418                           uint8 Rejoin, uint8 SecurityEnable )
   1419          
   1420          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine39 & 0xFFFF
   1421            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1422          
   1423            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \                     ??CrossCallReturnLabel_207:
   \   000008   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1424            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   00000B   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   2408         ADD       A,#0x8
   \   000011   F8           MOV       R0,A
   \   000012   A3           INC       DPTR
   \   000013   E0           MOVX      A,@DPTR
   \   000014   3400         ADDC      A,#0x0
   \   000016   F9           MOV       R1,A
   \   000017   8882         MOV       DPL,R0
   \   000019   8983         MOV       DPH,R1
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
   1425          
   1426            if ( RemoveChildren == TRUE )
   \   00001D   04           INC       A
   \   00001E   65..         XRL       A,?V0
   \   000020   7003         JNZ       ??ZDP_MgmtLeaveReq_0
   1427            {
   1428              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000022   7440         MOV       A,#0x40
   \   000024   F0           MOVX      @DPTR,A
   1429            }
   1430            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000025   740C         MOV       A,#0xc
   \   000027   12....       LCALL     ?XSTACK_DISP0_8
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   6401         XRL       A,#0x1
   \   00002D   7008         JNZ       ??ZDP_MgmtLeaveReq_1
   1431            {
   1432              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   00002F   8882         MOV       DPL,R0
   \   000031   8983         MOV       DPH,R1
   \   000033   E0           MOVX      A,@DPTR
   \   000034   D2E7         SETB      0xE0 /* A   */.7
   \   000036   F0           MOVX      @DPTR,A
   1433            }
   1434          
   1435            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..34       MOV       ?V2,#0x34
   \   00003A   02....       LJMP      ?Subroutine0 & 0xFFFF
   1436          }
   1437          
   1438          /*********************************************************************
   1439           * @fn          ZDP_MgmtNwkUpdateReq
   1440           *
   1441           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1442           *              function sends a unicast or broadcast message.
   1443           *
   1444           * @param       dstAddr - destination address of the message
   1445           * @param       ChannelMask - 32 bit address bit map
   1446           * @param       ScanDuration - length of time to spend scanning each channel
   1447           * @param       ScanCount - number of energy scans to be conducted
   1448           * @param       NwkUpdateId - NWk Update Id value
   1449           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1450           *                               bit set in its Node Descriptor
   1451           *
   1452           * @return      afStatus_t
   1453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1454          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1455                                           uint32 ChannelMask,
   1456                                           uint8 ScanDuration,
   1457                                           uint8 ScanCount,
   1458                                           uint8 NwkUpdateId,
   1459                                           uint16 NwkManagerAddr )
   1460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   E9           MOV       A,R1
   \   00000A   FE           MOV       R6,A
   \   00000B   8C..         MOV       ?V1,R4
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   1461            uint8 *pBuf = ZDP_TmpBuf;
   1462            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   00000F   75..05       MOV       ?V0,#0x5
   1463          
   1464            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   000012                ; Setup parameters for call to function osal_buffer_uint32
   \   000012   740E         MOV       A,#0xe
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00001A   12....       LCALL     ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   00001D   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000020   7404         MOV       A,#0x4
   \   000022   12....       LCALL     ?DEALLOC_XSTACK8
   1465          
   1466            *pBuf++ = ScanDuration;
   \   000025   EE           MOV       A,R6
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   F0           MOVX      @DPTR,A
   1467          
   1468            if ( ScanDuration <= 0x05 )
   \   00002B   EA           MOV       A,R2
   \   00002C   2402         ADD       A,#0x2
   \   00002E   FC           MOV       R4,A
   \   00002F   E4           CLR       A
   \   000030   3B           ADDC      A,R3
   \   000031   FD           MOV       R5,A
   \   000032   A3           INC       DPTR
   \   000033   EE           MOV       A,R6
   \   000034   C3           CLR       C
   \   000035   9406         SUBB      A,#0x6
   \   000037   5008         JNC       ??ZDP_MgmtNwkUpdateReq_0
   1469            {
   1470              // Request is to scan over channelMask
   1471              len += sizeof( uint8 );
   \   000039   75..06       MOV       ?V0,#0x6
   1472          
   1473              *pBuf++ = ScanCount;
   \   00003C   E5..         MOV       A,?V1
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   8025         SJMP      ??ZDP_MgmtNwkUpdateReq_1
   1474            }
   1475            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   000041   74FE         MOV       A,#-0x2
   \   000043   6E           XRL       A,R6
   \   000044   6005         JZ        ??ZDP_MgmtNwkUpdateReq_2
   \   000046   74FF         MOV       A,#-0x1
   \   000048   6E           XRL       A,R6
   \   000049   701B         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1476            {
   1477              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1478              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   00004B   75..06       MOV       ?V0,#0x6
   1479          
   1480              *pBuf++ = NwkUpdateId;
   \   00004E   EF           MOV       A,R7
   \   00004F   F0           MOVX      @DPTR,A
   1481          
   1482              if ( ScanDuration == 0xFF )
   \   000050   74FF         MOV       A,#-0x1
   \   000052   6E           XRL       A,R6
   \   000053   7011         JNZ       ??ZDP_MgmtNwkUpdateReq_1
   1483              {
   1484                len += sizeof( uint16 );
   \   000055   75..08       MOV       ?V0,#0x8
   \   000058   7412         MOV       A,#0x12
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ?Subroutine54 & 0xFFFF
   1485          
   1486                *pBuf++  = LO_UINT16( NwkManagerAddr );
   1487                *pBuf++  = HI_UINT16( NwkManagerAddr );
   1488              }
   1489            }
   \                     ??CrossCallReturnLabel_82:
   \   000060   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000063   EA           MOV       A,R2
   \   000064   2404         ADD       A,#0x4
   1490          
   1491            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   000066                ; Setup parameters for call to function fillAndSend
   \   000066   75..38       MOV       ?V2,#0x38
   \   000069   75..00       MOV       ?V3,#0x0
   \   00006C   78..         MOV       R0,#?V2
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000071   A9..         MOV       R1,?V0
   \   000073   02....       LJMP      ?Subroutine2 & 0xFFFF
   1492          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
   1493          
   1494          
   1495          /*********************************************************************
   1496           * Network Management Responses
   1497           */
   1498          
   1499          /*********************************************************************
   1500           * @fn          ZDP_MgmtNwkDiscRsp
   1501           *
   1502           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1503           *              function sends a unicast message.
   1504           *
   1505           * @param       dstAddr - destination address of the message
   1506           * @param       Status - message status (ZDP_SUCCESS or other)
   1507           * @param       NetworkCount - Total number of networks found
   1508           * @param       StartIndex - Starting index within the reporting network
   1509           *                           list
   1510           * @param       NetworkListCount - number of network lists included
   1511           *                                 in this message
   1512           * @param       NetworkList - List of network descriptors
   1513           * @param       SecurityEnable - Security Options
   1514           *
   1515           * @return      afStatus_t
   1516           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine117_0
   \   000002                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1517          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1518                                      byte Status,
   1519                                      byte NetworkCount,
   1520                                      byte StartIndex,
   1521                                      byte NetworkListCount,
   1522                                      networkDesc_t *NetworkList,
   1523                                      byte SecurityEnable )
   1524          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V3,A
   1525            uint8 *buf;
   1526            uint8 *pBuf;
   1527            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1528            byte idx;
   1529          
   1530            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1531          
   1532            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   00001F   75F00C       MOV       B,#0xc
   \   000022   12....       LCALL     ?Subroutine71 & 0xFFFF
   1533          
   1534            buf = osal_mem_alloc( len+1 );
   \                     ??CrossCallReturnLabel_236:
   \   000025   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000028   8A..         MOV       ?V4,R2
   \   00002A   8B..         MOV       ?V5,R3
   1535            if ( buf == NULL )
   \   00002C   EA           MOV       A,R2
   \   00002D   45..         ORL       A,?V5
   \   00002F   7005         JNZ       ??ZDP_MgmtNwkDiscRsp_0
   1536            {
   1537              return afStatus_MEM_FAIL;
   \   000031   7910         MOV       R1,#0x10
   \   000033   02....       LJMP      ??CrossCallReturnLabel_30 & 0xFFFF
   1538            }
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   A3           INC       DPTR
   \   00003B   AE82         MOV       R6,DPL
   \   00003D   AF83         MOV       R7,DPH
   1539          
   1540            pBuf = buf+1;
   1541          
   1542            *pBuf++ = Status;
   \   00003F   85..82       MOV       DPL,?XSP + 0
   \   000042   85..83       MOV       DPH,?XSP + 1
   \   000045   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000048   12....       LCALL     ??Subroutine121_0 & 0xFFFF
   1543            *pBuf++ = NetworkCount;
   1544            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_247:
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000051   A3           INC       DPTR
   \   000052   12....       LCALL     ?Subroutine37 & 0xFFFF
   1545            *pBuf++ = NetworkListCount;
   \                     ??CrossCallReturnLabel_47:
   \   000055   E5..         MOV       A,?V3
   \   000057   F0           MOVX      @DPTR,A
   \   000058   EE           MOV       A,R6
   \   000059   2404         ADD       A,#0x4
   \   00005B   FE           MOV       R6,A
   \   00005C   5001         JNC       ??ZDP_MgmtNwkDiscRsp_1
   \   00005E   0F           INC       R7
   1546          
   1547            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   00005F   75..00       MOV       ?V2,#0x0
   \   000062   7416         MOV       A,#0x16
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00006A   8014         SJMP      ??ZDP_MgmtNwkDiscRsp_2
   1548            {
   1549              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1550              pBuf += Z_EXTADDR_LEN;
   1551          
   1552              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1553              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1554              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1555              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1556              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1557          
   1558              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1559              {
   1560                *pBuf++ = TRUE;                         // Permit Joining
   1561              }
   1562              else
   1563              {
   1564                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   00006C   E4           CLR       A
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   E8           MOV       A,R0
   \   00006F   FE           MOV       R6,A
   \   000070   E9           MOV       A,R1
   \   000071   FF           MOV       R7,A
   1565              }
   1566          
   1567              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   000072   E5..         MOV       A,?V0
   \   000074   2414         ADD       A,#0x14
   \   000076   F582         MOV       DPL,A
   \   000078   E4           CLR       A
   \   000079   35..         ADDC      A,?V1
   \   00007B   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00007E   05..         INC       ?V2
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000080   E5..         MOV       A,?V2
   \   000082   C3           CLR       C
   \   000083   95..         SUBB      A,?V3
   \   000085   4003         JC        $+5
   \   000087   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_5 & 0xFFFF
   \   00008A                ; Setup parameters for call to function sAddrExtCpy
   \   00008A   E5..         MOV       A,?V0
   \   00008C   240B         ADD       A,#0xb
   \   00008E   FC           MOV       R4,A
   \   00008F   E4           CLR       A
   \   000090   35..         ADDC      A,?V1
   \   000092   FD           MOV       R5,A
   \   000093   EE           MOV       A,R6
   \   000094   FA           MOV       R2,A
   \   000095   EF           MOV       A,R7
   \   000096   FB           MOV       R3,A
   \   000097   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00009A   85..82       MOV       DPL,?V0
   \   00009D   85..83       MOV       DPH,?V1
   \   0000A0   A3           INC       DPTR
   \   0000A1   A3           INC       DPTR
   \   0000A2   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000A5   A3           INC       DPTR
   \   0000A6   A3           INC       DPTR
   \   0000A7   A3           INC       DPTR
   \   0000A8   A3           INC       DPTR
   \   0000A9   F0           MOVX      @DPTR,A
   \   0000AA   EE           MOV       A,R6
   \   0000AB   2409         ADD       A,#0x9
   \   0000AD   F8           MOV       R0,A
   \   0000AE   E4           CLR       A
   \   0000AF   3F           ADDC      A,R7
   \   0000B0   F9           MOV       R1,A
   \   0000B1   85..82       MOV       DPL,?V0
   \   0000B4   85..83       MOV       DPH,?V1
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   A3           INC       DPTR
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   0000BF   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000C2   E0           MOVX      A,@DPTR
   \   0000C3   C4           SWAP      A
   \   0000C4   54F0         ANL       A,#0xf0
   \   0000C6   FA           MOV       R2,A
   \   0000C7   8882         MOV       DPL,R0
   \   0000C9   8983         MOV       DPH,R1
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   4A           ORL       A,R2
   \   0000CD   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   A3           INC       DPTR
   \   0000D5   A3           INC       DPTR
   \   0000D6   A3           INC       DPTR
   \   0000D7   74FF         MOV       A,#-0x1
   \   0000D9   F0           MOVX      @DPTR,A
   \   0000DA   EE           MOV       A,R6
   \   0000DB   240C         ADD       A,#0xc
   \   0000DD   F8           MOV       R0,A
   \   0000DE   E4           CLR       A
   \   0000DF   3F           ADDC      A,R7
   \   0000E0   F9           MOV       R1,A
   \   0000E1   EE           MOV       A,R6
   \   0000E2   240B         ADD       A,#0xb
   \   0000E4   FA           MOV       R2,A
   \   0000E5   E4           CLR       A
   \   0000E6   3F           ADDC      A,R7
   \   0000E7   FB           MOV       R3,A
   \   0000E8   85..82       MOV       DPL,?V0
   \   0000EB   85..83       MOV       DPH,?V1
   \   0000EE   A3           INC       DPTR
   \   0000EF   A3           INC       DPTR
   \   0000F0   A3           INC       DPTR
   \   0000F1   A3           INC       DPTR
   \   0000F2   A3           INC       DPTR
   \   0000F3   A3           INC       DPTR
   \   0000F4   A3           INC       DPTR
   \   0000F5   E0           MOVX      A,@DPTR
   \   0000F6   64FE         XRL       A,#0xfe
   \   0000F8   7003         JNZ       ??ZDP_MgmtNwkDiscRsp_6
   \   0000FA   A3           INC       DPTR
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   F4           CPL       A
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   0000FD   8A82         MOV       DPL,R2
   \   0000FF   8B83         MOV       DPH,R3
   \   000101   7003         JNZ       $+5
   \   000103   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   \   000106   7401         MOV       A,#0x1
   \   000108   02....       LJMP      ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   1568            }
   1569          
   1570            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   00010B   85..82       MOV       DPL,?V4
   \   00010E   85..83       MOV       DPH,?V5
   \   000111   12....       LCALL     ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000114                ; Setup parameters for call to function fillAndSend
   \   000114   75..30       MOV       ?V0,#0x30
   \   000117   75..80       MOV       ?V1,#-0x80
   \   00011A   78..         MOV       R0,#?V0
   \   00011C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00011F   A9..         MOV       R1,?V6
   \   000121   7404         MOV       A,#0x4
   \   000123   12....       LCALL     ?XSTACK_DISP0_8
   \   000126   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000129   12....       LCALL     ?XSTACK_DISP101_8
   \   00012C   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00012F   7402         MOV       A,#0x2
   \   000131   12....       LCALL     ?DEALLOC_XSTACK8
   \   000134   E9           MOV       A,R1
   \   000135   FE           MOV       R6,A
   \   000136                ; Setup parameters for call to function osal_mem_free
   \   000136   AA..         MOV       R2,?V4
   \   000138   AB..         MOV       R3,?V5
   \   00013A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00013D   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000140   02....       LJMP      ?Subroutine3 & 0xFFFF
   1571          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   A4           MUL       AB
   \   000001   2404         ADD       A,#0x4
   \   000003   F5..         MOV       ?V6,A
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005                REQUIRE ??Subroutine119_0
   \   000005                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   2401         ADD       A,#0x1
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   3400         ADDC      A,#0x0
   \   000006   FB           MOV       R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   EE           MOV       A,R6
   \   00000B   F9           MOV       R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E5..         MOV       A,?V7
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7414         MOV       A,#0x14
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   A3           INC       DPTR
   \   000001   A882         MOV       R0,DPL
   \   000003   A983         MOV       R1,DPH
   \   000005                REQUIRE ??Subroutine123_0
   \   000005                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   90....       MOV       DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine124_0
   \   000003                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   EC           MOV       A,R4
   \   000006   85..82       MOV       DPL,?XSP + 0
   \   000009   85..83       MOV       DPH,?XSP + 1
   \   00000C   F0           MOVX      @DPTR,A
   \   00000D   8D..         MOV       ?V7,R5
   \   00000F   7415         MOV       A,#0x15
   \   000011   22           RET
   1572          
   1573          /*********************************************************************
   1574           * @fn          ZDP_MgmtLqiRsp
   1575           *
   1576           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1577           *              function sends a unicast message.
   1578           *
   1579           * @param       dstAddr - destination address of the message
   1580           * @param       Status - message status (ZDP_SUCCESS or other)
   1581           * @param       NeighborLqiEntries - Total number of entries found
   1582           * @param       StartIndex - Starting index within the reporting list
   1583           * @param       NeighborLqiCount - number of lists included
   1584           *                                 in this message
   1585           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1586           *                is the list to be sent, not the entire list
   1587           * @param       SecurityEnable - true if secure
   1588           *
   1589           * @return      ZStatus_t
   1590           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1591          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1592                                    byte Status,
   1593                                    byte NeighborLqiEntries,
   1594                                    byte StartIndex,
   1595                                    byte NeighborLqiCount,
   1596                                    ZDP_MgmtLqiItem_t* NeighborList,
   1597                                    byte SecurityEnable )
   1598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7402         MOV       A,#0x2
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   00001A   7401         MOV       A,#0x1
   \   00001C   12....       LCALL     ?XSTACK_DISP0_8
   \   00001F   ED           MOV       A,R5
   \   000020   F0           MOVX      @DPTR,A
   1599            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   000021   7416         MOV       A,#0x16
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ?Subroutine47 & 0xFFFF
   1600            uint8 *buf, *pBuf;
   1601            byte len, x;
   1602          
   1603            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1604          
   1605            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_66:
   \   000029   EC           MOV       A,R4
   \   00002A   6028         JZ        ??ZDP_MgmtLqiRsp_0
   1606            {
   1607              ZDP_TmpBuf[0] = Status;
   \   00002C   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00002F   EC           MOV       A,R4
   \   000030   F0           MOVX      @DPTR,A
   1608              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000031                ; Setup parameters for call to function fillAndSend
   \   000031   75..31       MOV       ?V0,#0x31
   \   000034   75..80       MOV       ?V1,#-0x80
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7901         MOV       R1,#0x1
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?XSTACK_DISP0_8
   \   000043   12....       LCALL     ?Subroutine52 & 0xFFFF
   1609            }
   \                     ??CrossCallReturnLabel_76:
   \   000046   12....       LCALL     ?XSTACK_DISP101_8
   \   000049   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00004C   7402         MOV       A,#0x2
   \   00004E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000051   02....       LJMP      ??CrossCallReturnLabel_31 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000054   7415         MOV       A,#0x15
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F5..         MOV       ?V5,A
   1610          
   1611            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1612            //  neighbor LQI data.
   1613            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   00005C   75F016       MOV       B,#0x16
   \   00005F   12....       LCALL     ?Subroutine71 & 0xFFFF
   1614          
   1615            buf = osal_mem_alloc( len+1 );
   \                     ??CrossCallReturnLabel_237:
   \   000062   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000065   8A..         MOV       ?V2,R2
   \   000067   8B..         MOV       ?V3,R3
   1616            if ( buf == NULL )
   \   000069   EA           MOV       A,R2
   \   00006A   45..         ORL       A,?V3
   \   00006C   7005         JNZ       ??ZDP_MgmtLqiRsp_1
   1617            {
   1618              return afStatus_MEM_FAIL;
   \   00006E   7910         MOV       R1,#0x10
   \   000070   02....       LJMP      ??CrossCallReturnLabel_31 & 0xFFFF
   1619            }
   \                     ??ZDP_MgmtLqiRsp_1:
   \   000073   8A82         MOV       DPL,R2
   \   000075   8B83         MOV       DPH,R3
   \   000077   A3           INC       DPTR
   \   000078   8582..       MOV       ?V0,DPL
   \   00007B   8583..       MOV       ?V1,DPH
   1620          
   1621            pBuf = buf+1;
   1622          
   1623            *pBuf++ = Status;
   \   00007E   E4           CLR       A
   \   00007F   F0           MOVX      @DPTR,A
   1624            *pBuf++ = NeighborLqiEntries;
   \   000080   04           INC       A
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000087   F0           MOVX      @DPTR,A
   1625            *pBuf++ = StartIndex;
   \   000088   7414         MOV       A,#0x14
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000090   A3           INC       DPTR
   \   000091   12....       LCALL     ?Subroutine88 & 0xFFFF
   1626            *pBuf++ = NeighborLqiCount;
   \                     ??CrossCallReturnLabel_140:
   \   000094   E5..         MOV       A,?V5
   \   000096   F0           MOVX      @DPTR,A
   \   000097   E5..         MOV       A,?V0
   \   000099   2404         ADD       A,#0x4
   \   00009B   F5..         MOV       ?V0,A
   \   00009D   5002         JNC       ??ZDP_MgmtLqiRsp_2
   \   00009F   05..         INC       ?V1
   1627          
   1628            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??ZDP_MgmtLqiRsp_2:
   \   0000A1   75..00       MOV       ?V4,#0x0
   \   0000A4   02....       LJMP      ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1629            {
   1630              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   0000A7                ; Setup parameters for call to function sAddrExtCpy
   \   0000A7   EE           MOV       A,R6
   \   0000A8   2402         ADD       A,#0x2
   \   0000AA   FC           MOV       R4,A
   \   0000AB   E4           CLR       A
   \   0000AC   3F           ADDC      A,R7
   \   0000AD   FD           MOV       R5,A
   \   0000AE   AA..         MOV       R2,?V0
   \   0000B0   AB..         MOV       R3,?V1
   \   0000B2   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1631              pBuf += Z_EXTADDR_LEN;
   1632          
   1633              // EXTADDR
   1634              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   0000B5                ; Setup parameters for call to function sAddrExtCpy
   \   0000B5   EE           MOV       A,R6
   \   0000B6   240A         ADD       A,#0xa
   \   0000B8   FC           MOV       R4,A
   \   0000B9   E4           CLR       A
   \   0000BA   3F           ADDC      A,R7
   \   0000BB   FD           MOV       R5,A
   \   0000BC   E5..         MOV       A,?V0
   \   0000BE   2408         ADD       A,#0x8
   \   0000C0   FA           MOV       R2,A
   \   0000C1   E4           CLR       A
   \   0000C2   35..         ADDC      A,?V1
   \   0000C4   FB           MOV       R3,A
   \   0000C5   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000C8   8A..         MOV       ?V0,R2
   \   0000CA   8B..         MOV       ?V1,R3
   \   0000CC   A8..         MOV       R0,?V0
   \   0000CE   A9..         MOV       R1,?V1
   1635          
   1636              // NWKADDR
   1637              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000D0   EE           MOV       A,R6
   \   0000D1   2412         ADD       A,#0x12
   \   0000D3   FC           MOV       R4,A
   \   0000D4   E4           CLR       A
   \   0000D5   3F           ADDC      A,R7
   \   0000D6   FD           MOV       R5,A
   \   0000D7   8C82         MOV       DPL,R4
   \   0000D9   8D83         MOV       DPH,R5
   \   0000DB   12....       LCALL     ??Subroutine120_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   0000DE   12....       LCALL     ?Subroutine16 & 0xFFFF
   1638              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_13:
   \   0000E1   8882         MOV       DPL,R0
   \   0000E3   8983         MOV       DPH,R1
   \   0000E5   A3           INC       DPTR
   \   0000E6   F0           MOVX      @DPTR,A
   1639          
   1640              // DEVICETYPE
   1641              *pBuf = list->devType;
   \   0000E7   E8           MOV       A,R0
   \   0000E8   2402         ADD       A,#0x2
   \   0000EA   FA           MOV       R2,A
   \   0000EB   E4           CLR       A
   \   0000EC   39           ADDC      A,R1
   \   0000ED   FB           MOV       R3,A
   \   0000EE   EE           MOV       A,R6
   \   0000EF   2414         ADD       A,#0x14
   \   0000F1   F582         MOV       DPL,A
   \   0000F3   E4           CLR       A
   \   0000F4   3F           ADDC      A,R7
   \   0000F5   12....       LCALL     ?Subroutine40 & 0xFFFF
   1642          
   1643              // RXONIDLE
   1644              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_235:
   \   0000F8   EE           MOV       A,R6
   \   0000F9   2415         ADD       A,#0x15
   \   0000FB   F582         MOV       DPL,A
   \   0000FD   E4           CLR       A
   \   0000FE   3F           ADDC      A,R7
   \   0000FF   F583         MOV       DPH,A
   \   000101   E0           MOVX      A,@DPTR
   \   000102   33           RLC       A
   \   000103   33           RLC       A
   \   000104   54FC         ANL       A,#0xfc
   \   000106   FC           MOV       R4,A
   \   000107   8A82         MOV       DPL,R2
   \   000109   8B83         MOV       DPH,R3
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   4C           ORL       A,R4
   \   00010D   F0           MOVX      @DPTR,A
   1645          
   1646              // RELATIONSHIP
   1647              *pBuf++ |= (uint8)(list->relation << 4);
   \   00010E   EE           MOV       A,R6
   \   00010F   2416         ADD       A,#0x16
   \   000111   F582         MOV       DPL,A
   \   000113   E4           CLR       A
   \   000114   3F           ADDC      A,R7
   \   000115   F583         MOV       DPH,A
   \   000117   E0           MOVX      A,@DPTR
   \   000118   C4           SWAP      A
   \   000119   54F0         ANL       A,#0xf0
   \   00011B   FC           MOV       R4,A
   \   00011C   8A82         MOV       DPL,R2
   \   00011E   8B83         MOV       DPH,R3
   \   000120   E0           MOVX      A,@DPTR
   \   000121   4C           ORL       A,R4
   \   000122   F0           MOVX      @DPTR,A
   1648          
   1649              // PERMITJOINING
   1650              *pBuf++ = (uint8)(list->permit);
   \   000123   EE           MOV       A,R6
   \   000124   2417         ADD       A,#0x17
   \   000126   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000129   F0           MOVX      @DPTR,A
   1651          
   1652              // DEPTH
   1653              *pBuf++ = list->depth;
   \   00012A   EE           MOV       A,R6
   \   00012B   2418         ADD       A,#0x18
   \   00012D   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000130   F0           MOVX      @DPTR,A
   1654          
   1655              // LQI
   1656              *pBuf++ = list->lqi;
   \   000131   EE           MOV       A,R6
   \   000132   2419         ADD       A,#0x19
   \   000134   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000137   A3           INC       DPTR
   \   000138   F0           MOVX      @DPTR,A
   \   000139   E8           MOV       A,R0
   \   00013A   2406         ADD       A,#0x6
   \   00013C   F5..         MOV       ?V0,A
   \   00013E   E4           CLR       A
   \   00013F   39           ADDC      A,R1
   \   000140   F5..         MOV       ?V1,A
   1657          
   1658              list++; // next list entry
   \   000142   EE           MOV       A,R6
   \   000143   241A         ADD       A,#0x1a
   \   000145   FE           MOV       R6,A
   \   000146   5001         JNC       ??ZDP_MgmtLqiRsp_5
   \   000148   0F           INC       R7
   1659            }
   \                     ??ZDP_MgmtLqiRsp_5:
   \   000149   05..         INC       ?V4
   \                     ??ZDP_MgmtLqiRsp_3:
   \   00014B   E5..         MOV       A,?V4
   \   00014D   C3           CLR       C
   \   00014E   95..         SUBB      A,?V5
   \   000150   5003         JNC       $+5
   \   000152   02....       LJMP      ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1660          
   1661            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000155   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000158                ; Setup parameters for call to function fillAndSend
   \   000158   75..31       MOV       ?V0,#0x31
   \   00015B   75..80       MOV       ?V1,#-0x80
   \   00015E   78..         MOV       R0,#?V0
   \   000160   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000163   A9..         MOV       R1,?V6
   \   000165   7404         MOV       A,#0x4
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00016D   12....       LCALL     ?XSTACK_DISP101_8
   \   000170   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000173   7402         MOV       A,#0x2
   \   000175   12....       LCALL     ?DEALLOC_XSTACK8
   \   000178   E9           MOV       A,R1
   \   000179   FE           MOV       R6,A
   \   00017A                ; Setup parameters for call to function osal_mem_free
   \   00017A   AA..         MOV       R2,?V2
   \   00017C   AB..         MOV       R3,?V3
   \   00017E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000181   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000184   02....       LJMP      ?Subroutine3 & 0xFFFF
   1662          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   8882         MOV       DPL,R0
   \   000009   8983         MOV       DPH,R1
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006                REQUIRE ??Subroutine122_0
   \   000006                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
   1663          
   1664          /*********************************************************************
   1665           * @fn          ZDP_MgmtRtgRsp
   1666           *
   1667           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1668           *              function sends a unicast message.
   1669           *
   1670           * @param       dstAddr - destination address of the message
   1671           * @param       Status - message status (ZDP_SUCCESS or other)
   1672           * @param       RoutingTableEntries - Total number of entries
   1673           * @param       StartIndex - Starting index within the reporting list
   1674           * @param       RoutingTableListCount - number of entries included
   1675           *                                      in this message
   1676           * @param       RoutingTableList - List of Routing Table entries
   1677           * @param       SecurityEnable - true to enable security for this message
   1678           *
   1679           * @return      ZStatus_t
   1680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1681          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1682                                      byte Status,
   1683                                      byte RoutingTableEntries,
   1684                                      byte StartIndex,
   1685                                      byte RoutingListCount,
   1686                                      rtgItem_t *RoutingTableList,
   1687                                      byte SecurityEnable )
   1688          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V0,A
   1689            uint8 *buf;
   1690            uint8 *pBuf;
   1691            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1692            byte len = 1 + 1 + 1 + 1;
   1693            byte x;
   1694          
   1695            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1696          
   1697            // Add an array for Routing List data
   1698            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   00001F   75F005       MOV       B,#0x5
   \   000022   12....       LCALL     ?Subroutine71 & 0xFFFF
   1699          
   1700            buf = osal_mem_alloc( (short)(len+1) );
   \                     ??CrossCallReturnLabel_238:
   \   000025   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000028   8A..         MOV       ?V2,R2
   \   00002A   8B..         MOV       ?V3,R3
   \   00002C   AE..         MOV       R6,?V2
   \   00002E   AF..         MOV       R7,?V3
   1701            if ( buf == NULL )
   \   000030   EE           MOV       A,R6
   \   000031   4F           ORL       A,R7
   \   000032   7005         JNZ       ??ZDP_MgmtRtgRsp_0
   1702            {
   1703              return afStatus_MEM_FAIL;
   \   000034   7910         MOV       R1,#0x10
   \   000036   02....       LJMP      ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1704            }
   1705          
   1706            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   A3           INC       DPTR
   \   00003E   A882         MOV       R0,DPL
   \   000040   A983         MOV       R1,DPH
   \   000042   E8           MOV       A,R0
   \   000043   FA           MOV       R2,A
   \   000044   E9           MOV       A,R1
   \   000045   FB           MOV       R3,A
   1707          
   1708            *pBuf++ = Status;
   \   000046   12....       LCALL     ?Subroutine25 & 0xFFFF
   1709            *pBuf++ = RoutingTableEntries;
   1710            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_245:
   \   000049   12....       LCALL     ?XSTACK_DISP0_8
   \   00004C   12....       LCALL     ?Subroutine38 & 0xFFFF
   1711            *pBuf++ = RoutingListCount;
   \                     ??CrossCallReturnLabel_49:
   \   00004F   E5..         MOV       A,?V0
   \   000051   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000054   5001         JNC       ??ZDP_MgmtRtgRsp_2
   \   000056   0B           INC       R3
   1712          
   1713            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??ZDP_MgmtRtgRsp_2:
   \   000057   75..00       MOV       ?V1,#0x0
   \   00005A   7416         MOV       A,#0x16
   \   00005C   12....       LCALL     ?XSTACK_DISP0_8
   \   00005F   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000062   02....       LJMP      ??ZDP_MgmtRtgRsp_3 & 0xFFFF
   1714            {
   1715              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_4:
   \   000065   12....       LCALL     ?Subroutine13 & 0xFFFF
   1716              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   1717          
   1718              *pBuf = (RoutingTableList->status & 0x07);
   \                     ??CrossCallReturnLabel_9:
   \   000068   F5..         MOV       ?V2,A
   \   00006A   E4           CLR       A
   \   00006B   3B           ADDC      A,R3
   \   00006C   F5..         MOV       ?V3,A
   \   00006E   8C82         MOV       DPL,R4
   \   000070   8D83         MOV       DPH,R5
   \   000072   A3           INC       DPTR
   \   000073   A3           INC       DPTR
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   E0           MOVX      A,@DPTR
   \   000078   5407         ANL       A,#0x7
   \   00007A   85..82       MOV       DPL,?V2
   \   00007D   85..83       MOV       DPH,?V3
   \   000080   F0           MOVX      @DPTR,A
   1719              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \   000081   EC           MOV       A,R4
   \   000082   2406         ADD       A,#0x6
   \   000084   F582         MOV       DPL,A
   \   000086   E4           CLR       A
   \   000087   3D           ADDC      A,R5
   \   000088   F583         MOV       DPH,A
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   5418         ANL       A,#0x18
   \   00008D   6029         JZ        ??ZDP_MgmtRtgRsp_5
   1720              {
   1721                uint8 options = 0;
   1722                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   00008F   75..02       MOV       ?V4,#0x2
   1723          
   1724                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   000092   E0           MOVX      A,@DPTR
   \   000093   A2E2         MOV       C,0xE0 /* A   */.2
   \   000095   5003         JNC       ??ZDP_MgmtRtgRsp_6
   1725                {
   1726                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   000097   75..06       MOV       ?V4,#0x6
   1727                }
   1728          
   1729                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_6:
   \   00009A   A2E4         MOV       C,0xE0 /* A   */.4
   \   00009C   5007         JNC       ??ZDP_MgmtRtgRsp_7
   1730                {
   1731                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   00009E   D3           SETB      C
   \   00009F   E5..         MOV       A,?V4
   \   0000A1   D2E0         SETB      0xE0 /* A   */.0
   \   0000A3   F5..         MOV       ?V4,A
   1732                }
   1733          
   1734                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0000A5   E5..         MOV       A,?V4
   \   0000A7   33           RLC       A
   \   0000A8   33           RLC       A
   \   0000A9   33           RLC       A
   \   0000AA   54F8         ANL       A,#0xf8
   \   0000AC   F5..         MOV       ?V4,A
   \   0000AE   85..82       MOV       DPL,?V2
   \   0000B1   85..83       MOV       DPH,?V3
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   45..         ORL       A,?V4
   \   0000B7   F0           MOVX      @DPTR,A
   1735              }
   1736              pBuf++;
   1737          
   1738              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \                     ??ZDP_MgmtRtgRsp_5:
   \   0000B8   EC           MOV       A,R4
   \   0000B9   2402         ADD       A,#0x2
   \   0000BB   F5..         MOV       ?V4,A
   \   0000BD   E4           CLR       A
   \   0000BE   3D           ADDC      A,R5
   \   0000BF   F5..         MOV       ?V5,A
   \   0000C1   85..82       MOV       DPL,?V4
   \   0000C4   F583         MOV       DPH,A
   \   0000C6   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0000C9   12....       LCALL     ?Subroutine32 & 0xFFFF
   1739              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \                     ??CrossCallReturnLabel_40:
   \   0000CC   8A82         MOV       DPL,R2
   \   0000CE   8B83         MOV       DPH,R3
   \   0000D0   A3           INC       DPTR
   \   0000D1   A3           INC       DPTR
   \   0000D2   A3           INC       DPTR
   \   0000D3   A3           INC       DPTR
   \   0000D4   F0           MOVX      @DPTR,A
   \   0000D5   EA           MOV       A,R2
   \   0000D6   2405         ADD       A,#0x5
   \   0000D8   FA           MOV       R2,A
   \   0000D9   5001         JNC       ??ZDP_MgmtRtgRsp_8
   \   0000DB   0B           INC       R3
   1740              RoutingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtRtgRsp_8:
   \   0000DC   EC           MOV       A,R4
   \   0000DD   2407         ADD       A,#0x7
   \   0000DF   FC           MOV       R4,A
   \   0000E0   5001         JNC       ??ZDP_MgmtRtgRsp_9
   \   0000E2   0D           INC       R5
   1741            }
   \                     ??ZDP_MgmtRtgRsp_9:
   \   0000E3   05..         INC       ?V1
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0000E5   E5..         MOV       A,?V1
   \   0000E7   C3           CLR       C
   \   0000E8   95..         SUBB      A,?V0
   \   0000EA   5003         JNC       $+5
   \   0000EC   02....       LJMP      ??ZDP_MgmtRtgRsp_4 & 0xFFFF
   1742          
   1743            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000EF   12....       LCALL     ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   0000F2                ; Setup parameters for call to function fillAndSend
   \   0000F2   75..32       MOV       ?V0,#0x32
   \   0000F5   75..80       MOV       ?V1,#-0x80
   \   0000F8   78..         MOV       R0,#?V0
   \   0000FA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000FD   A9..         MOV       R1,?V6
   \   0000FF   7404         MOV       A,#0x4
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000107   12....       LCALL     ?XSTACK_DISP101_8
   \   00010A   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00010D   7402         MOV       A,#0x2
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000112   E9           MOV       A,R1
   \   000113   F5..         MOV       ?V0,A
   \   000115                ; Setup parameters for call to function osal_mem_free
   \   000115   EE           MOV       A,R6
   \   000116   FA           MOV       R2,A
   \   000117   EF           MOV       A,R7
   \   000118   FB           MOV       R3,A
   \   000119   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00011C   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00011F   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   000121   F0           MOVX      @DPTR,A
   \   000122   A3           INC       DPTR
   \   000123   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000125   F0           MOVX      @DPTR,A
   \   000126   A9..         MOV       R1,?V0
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000128   02....       LJMP      ?Subroutine3 & 0xFFFF
   1744          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000009                REQUIRE ??Subroutine121_0
   \   000009                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8C82         MOV       DPL,R4
   \   000002   8D83         MOV       DPH,R5
   \   000004   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000007   F0           MOVX      @DPTR,A
   \   000008   8C82         MOV       DPL,R4
   \   00000A   8D83         MOV       DPH,R5
   \   00000C   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00000F   22           RET
   1745          
   1746          /*********************************************************************
   1747           * @fn          ZDP_MgmtBindRsp
   1748           *
   1749           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1750           *              function sends a unicast message.
   1751           *
   1752           * @param       dstAddr - destination address of the message
   1753           * @param       Status - message status (ZDP_SUCCESS or other)
   1754           * @param       BindingTableEntries - Total number of entries
   1755           * @param       StartIndex - Starting index within the reporting list
   1756           * @param       BindingTableListCount - number of entries included
   1757           *                                 in this message
   1758           * @param       BindingTableList - List of Binding Table entries
   1759           * @param       SecurityEnable - Security Options
   1760           *
   1761           * @return      ZStatus_t
   1762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1763          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1764                                      byte Status,
   1765                                      byte BindingTableEntries,
   1766                                      byte StartIndex,
   1767                                      byte BindingTableListCount,
   1768                                      apsBindingItem_t *BindingTableList,
   1769                                      byte SecurityEnable )
   1770          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7401         MOV       A,#0x1
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000019   12....       LCALL     ?XSTACK_DISP0_8
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   F5..         MOV       ?V6,A
   1771            uint8 *buf;
   1772            uint8 *pBuf;
   1773            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1774            uint8 len;    // Actual length varies due to different addrMode
   1775            uint8 x;
   1776            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1777            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1778          
   1779            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1780          
   1781            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1782            maxLen = 1 + 1 + 1 + 1;
   1783            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1784            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   75F015       MOV       B,#0x15
   \   000022   A4           MUL       AB
   \   000023   2404         ADD       A,#0x4
   \   000025   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000028   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002B   8A..         MOV       ?V2,R2
   \   00002D   8B..         MOV       ?V3,R3
   1785          
   1786            if ( buf == NULL )
   \   00002F   EA           MOV       A,R2
   \   000030   45..         ORL       A,?V3
   \   000032   7005         JNZ       ??ZDP_MgmtBindRsp_0
   1787            {
   1788              return afStatus_MEM_FAIL;
   \   000034   7910         MOV       R1,#0x10
   \   000036   02....       LJMP      ??CrossCallReturnLabel_32 & 0xFFFF
   1789            }
   \                     ??ZDP_MgmtBindRsp_0:
   \   000039   8A82         MOV       DPL,R2
   \   00003B   8B83         MOV       DPH,R3
   \   00003D   A3           INC       DPTR
   \   00003E   AA82         MOV       R2,DPL
   \   000040   AB83         MOV       R3,DPH
   1790          
   1791            pBuf = buf+1;
   1792          
   1793            *pBuf++ = Status;
   \   000042   12....       LCALL     ?Subroutine25 & 0xFFFF
   1794            *pBuf++ = BindingTableEntries;
   1795            *pBuf++ = StartIndex;
   \                     ??CrossCallReturnLabel_246:
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   12....       LCALL     ?Subroutine38 & 0xFFFF
   1796            *pBuf++ = BindingTableListCount;
   \                     ??CrossCallReturnLabel_50:
   \   00004B   E5..         MOV       A,?V6
   \   00004D   12....       LCALL     ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000050   5001         JNC       ??ZDP_MgmtBindRsp_1
   \   000052   0B           INC       R3
   1797          
   1798            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1799            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1800            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1801            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1802          
   1803            len = 1 + 1 + 1 + 1;
   \                     ??ZDP_MgmtBindRsp_1:
   \   000053   75..04       MOV       ?V0,#0x4
   1804            for ( x = 0; x < BindingTableListCount; x++ )
   \   000056   75..00       MOV       ?V1,#0x0
   \   000059   7416         MOV       A,#0x16
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000061   8016         SJMP      ??ZDP_MgmtBindRsp_2
   1805            {
   1806              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1807              *pBuf++ = BindingTableList->srcEP;
   1808          
   1809              // Cluster ID
   1810              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1811              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1812          
   1813              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1814              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1815              {
   1816                len += extZdpBindEntrySize;
   1817                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1818                *pBuf++ = BindingTableList->dstEP;
   1819              }
   1820              else
   1821              {
   1822                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_3:
   \   000063   740E         MOV       A,#0xe
   \   000065   25..         ADD       A,?V0
   \   000067   F5..         MOV       ?V0,A
   1823                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   000069   12....       LCALL     ?Subroutine13 & 0xFFFF
   1824                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   1825              }
   \                     ??CrossCallReturnLabel_10:
   \   00006C   FA           MOV       R2,A
   \   00006D   5001         JNC       ??ZDP_MgmtBindRsp_4
   \   00006F   0B           INC       R3
   1826              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_4:
   \   000070   EE           MOV       A,R6
   \   000071   2415         ADD       A,#0x15
   \   000073   FE           MOV       R6,A
   \   000074   5001         JNC       ??ZDP_MgmtBindRsp_5
   \   000076   0F           INC       R7
   \                     ??ZDP_MgmtBindRsp_5:
   \   000077   05..         INC       ?V1
   \                     ??ZDP_MgmtBindRsp_2:
   \   000079   E5..         MOV       A,?V1
   \   00007B   C3           CLR       C
   \   00007C   95..         SUBB      A,?V6
   \   00007E   5066         JNC       ??ZDP_MgmtBindRsp_6
   \   000080                ; Setup parameters for call to function sAddrExtCpy
   \   000080   EE           MOV       A,R6
   \   000081   FC           MOV       R4,A
   \   000082   EF           MOV       A,R7
   \   000083   FD           MOV       R5,A
   \   000084   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000087   8E82         MOV       DPL,R6
   \   000089   8F83         MOV       DPH,R7
   \   00008B   A3           INC       DPTR
   \   00008C   A3           INC       DPTR
   \   00008D   A3           INC       DPTR
   \   00008E   A3           INC       DPTR
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   A3           INC       DPTR
   \   000093   12....       LCALL     ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000096   EE           MOV       A,R6
   \   000097   2409         ADD       A,#0x9
   \   000099   FC           MOV       R4,A
   \   00009A   E4           CLR       A
   \   00009B   3F           ADDC      A,R7
   \   00009C   FD           MOV       R5,A
   \   00009D   8C82         MOV       DPL,R4
   \   00009F   8D83         MOV       DPH,R5
   \   0000A1   12....       LCALL     ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   0000A4   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000A7   8A82         MOV       DPL,R2
   \   0000A9   8B83         MOV       DPH,R3
   \   0000AB   A3           INC       DPTR
   \   0000AC   A3           INC       DPTR
   \   0000AD   F0           MOVX      @DPTR,A
   \   0000AE   EE           MOV       A,R6
   \   0000AF   2413         ADD       A,#0x13
   \   0000B1   F8           MOV       R0,A
   \   0000B2   E4           CLR       A
   \   0000B3   3F           ADDC      A,R7
   \   0000B4   F9           MOV       R1,A
   \   0000B5   8882         MOV       DPL,R0
   \   0000B7   8983         MOV       DPH,R1
   \   0000B9   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   0000BC   5001         JNC       ??ZDP_MgmtBindRsp_7
   \   0000BE   0B           INC       R3
   \                     ??ZDP_MgmtBindRsp_7:
   \   0000BF   EE           MOV       A,R6
   \   0000C0   240B         ADD       A,#0xb
   \   0000C2   FC           MOV       R4,A
   \   0000C3   E4           CLR       A
   \   0000C4   3F           ADDC      A,R7
   \   0000C5   FD           MOV       R5,A
   \   0000C6   8882         MOV       DPL,R0
   \   0000C8   8983         MOV       DPH,R1
   \   0000CA   E0           MOVX      A,@DPTR
   \   0000CB   6403         XRL       A,#0x3
   \   0000CD   7094         JNZ       ??ZDP_MgmtBindRsp_3
   \   0000CF   7415         MOV       A,#0x15
   \   0000D1   25..         ADD       A,?V0
   \   0000D3   F5..         MOV       ?V0,A
   \   0000D5                ; Setup parameters for call to function sAddrExtCpy
   \   0000D5   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000D8   EE           MOV       A,R6
   \   0000D9   2414         ADD       A,#0x14
   \   0000DB   F582         MOV       DPL,A
   \   0000DD   E4           CLR       A
   \   0000DE   3F           ADDC      A,R7
   \   0000DF   F583         MOV       DPH,A
   \   0000E1   12....       LCALL     ?Subroutine15 & 0xFFFF
   1827            }
   \                     ??CrossCallReturnLabel_205:
   \   0000E4   808A         SJMP      ??ZDP_MgmtBindRsp_4
   1828          
   1829            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_6:
   \   0000E6   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   0000E9                ; Setup parameters for call to function fillAndSend
   \   0000E9   75..33       MOV       ?V4,#0x33
   \   0000EC   75..80       MOV       ?V5,#-0x80
   \   0000EF   78..         MOV       R0,#?V4
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F4   A9..         MOV       R1,?V0
   \   0000F6   7404         MOV       A,#0x4
   \   0000F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FB   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0000FE   12....       LCALL     ?XSTACK_DISP101_8
   \   000101   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000104   7402         MOV       A,#0x2
   \   000106   12....       LCALL     ?DEALLOC_XSTACK8
   \   000109   E9           MOV       A,R1
   \   00010A   FE           MOV       R6,A
   \   00010B                ; Setup parameters for call to function osal_mem_free
   \   00010B   AA..         MOV       R2,?V2
   \   00010D   AB..         MOV       R3,?V3
   \   00010F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000112   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000115   02....       LJMP      ?Subroutine3 & 0xFFFF
   1830          }
   1831          
   1832          /*********************************************************************
   1833           * @fn          ZDP_MgmtNwkUpdateNotify
   1834           *
   1835           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1836           *              function sends a unicast message.
   1837           *
   1838           * @param       dstAddr - destination address of the message
   1839           * @param       status - message status (ZDP_SUCCESS or other)
   1840           * @param       scannedChannels - List of channels scanned by the request
   1841           * @param       totalTransmissions - Total transmissions
   1842           * @param       transmissionFailures - Sum of transmission failures
   1843           * @param       listCount - Number of records contained in the energyValues list
   1844           * @param       energyValues - List of descriptors, one for each of ListCount,
   1845           *                             of the enegry detect descriptors
   1846           * @param       txOptions - Transmit options
   1847           * @param       securityEnable - Security options
   1848           *
   1849           * @return      afStatus_t
   1850           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1851          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1852                                              uint8 status, uint32 scannedChannels,
   1853                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1854                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1855                                              uint8 securityEnable )
   1856          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   00001A   8C..         MOV       ?V3,R4
   \   00001C   ED           MOV       A,R5
   \   00001D   FE           MOV       R6,A
   1857            uint8 *buf;
   1858            uint8 *pBuf;
   1859            uint8 len;
   1860          
   1861            (void)securityEnable;  // Intentionally unreferenced parameter
   1862          
   1863            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1864            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001E   740A         MOV       A,#0xa
   \   000020   2D           ADD       A,R5
   \   000021   FF           MOV       R7,A
   1865          
   1866            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   12....       LCALL     ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000025   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000028   8A..         MOV       ?V4,R2
   \   00002A   8B..         MOV       ?V5,R3
   1867            if ( buf == NULL )
   \   00002C   EA           MOV       A,R2
   \   00002D   45..         ORL       A,?V5
   \   00002F   7005         JNZ       ??ZDP_MgmtNwkUpdateNotify_0
   1868            {
   1869              return afStatus_MEM_FAIL;
   \   000031   7910         MOV       R1,#0x10
   \   000033   02....       LJMP      ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1870            }
   1871          
   1872            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   A3           INC       DPTR
   \   00003B   8582..       MOV       ?V6,DPL
   \   00003E   8583..       MOV       ?V7,DPH
   1873          
   1874            *pBuf++ = status;
   \   000041   E5..         MOV       A,?V3
   \   000043   12....       LCALL     ??Subroutine112_0 & 0xFFFF
   1875          
   1876            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_203:
   \   000046                ; Setup parameters for call to function osal_buffer_uint32
   \   000046   7413         MOV       A,#0x13
   \   000048   12....       LCALL     ?XSTACK_DISP0_8
   \   00004B   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00004E   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   7417         MOV       A,#0x17
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine55 & 0xFFFF
   1877          
   1878            *pBuf++ = LO_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_83:
   \   00005E   F0           MOVX      @DPTR,A
   1879            *pBuf++ = HI_UINT16( totalTransmissions );
   \   00005F   E9           MOV       A,R1
   \   000060   A3           INC       DPTR
   \   000061   F0           MOVX      @DPTR,A
   \   000062   7419         MOV       A,#0x19
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine55 & 0xFFFF
   1880          
   1881            *pBuf++ = LO_UINT16( transmissionFailures );
   \                     ??CrossCallReturnLabel_84:
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   12....       LCALL     ?Subroutine29 & 0xFFFF
   1882            *pBuf++ = HI_UINT16( transmissionFailures );
   1883          
   1884            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_36:
   \   00006F   EE           MOV       A,R6
   \   000070   8A82         MOV       DPL,R2
   \   000072   8B83         MOV       DPH,R3
   \   000074   A3           INC       DPTR
   \   000075   A3           INC       DPTR
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   F0           MOVX      @DPTR,A
   1885          
   1886            if ( listCount > 0 )
   \   000079   601E         JZ        ??ZDP_MgmtNwkUpdateNotify_2
   1887              osal_memcpy( pBuf, energyValues, listCount );
   \   00007B                ; Setup parameters for call to function osal_memcpy
   \   00007B   741B         MOV       A,#0x1b
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000086   EE           MOV       A,R6
   \   000087   FC           MOV       R4,A
   \   000088   7D00         MOV       R5,#0x0
   \   00008A   EA           MOV       A,R2
   \   00008B   2405         ADD       A,#0x5
   \   00008D   FA           MOV       R2,A
   \   00008E   5001         JNC       ??ZDP_MgmtNwkUpdateNotify_3
   \   000090   0B           INC       R3
   \                     ??ZDP_MgmtNwkUpdateNotify_3:
   \   000091   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000094   7403         MOV       A,#0x3
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
   1888          
   1889            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000099   90....       MOV       DPTR,#ZDP_TmpBuf
   \   00009C   E5..         MOV       A,?V6
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   A3           INC       DPTR
   \   0000A0   E5..         MOV       A,?V7
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   741D         MOV       A,#0x1d
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000AC   F0           MOVX      @DPTR,A
   \   0000AD                ; Setup parameters for call to function fillAndSend
   \   0000AD   75..38       MOV       ?V0,#0x38
   \   0000B0   75..80       MOV       ?V1,#-0x80
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B8   EF           MOV       A,R7
   \   0000B9   F9           MOV       R1,A
   \   0000BA   7403         MOV       A,#0x3
   \   0000BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000C2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C5   12....       LCALL     `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000C8   7402         MOV       A,#0x2
   \   0000CA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CD   E9           MOV       A,R1
   \   0000CE   FF           MOV       R7,A
   \   0000CF                ; Setup parameters for call to function osal_mem_free
   \   0000CF   AA..         MOV       R2,?V4
   \   0000D1   AB..         MOV       R3,?V5
   \   0000D3   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D6   90....       MOV       DPTR,#ZDP_TmpBuf
   \   0000D9   74..         MOV       A,#(ZDP_Buf + 1) & 0xff
   \   0000DB   F0           MOVX      @DPTR,A
   \   0000DC   A3           INC       DPTR
   \   0000DD   74..         MOV       A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0000DF   F0           MOVX      @DPTR,A
   \   0000E0   90....       MOV       DPTR,#ZDP_TxOptions
   \   0000E3   E4           CLR       A
   \   0000E4   F0           MOVX      @DPTR,A
   \   0000E5   EF           MOV       A,R7
   \   0000E6   F9           MOV       R1,A
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000E7   02....       LJMP      ?Subroutine7 & 0xFFFF
   1890          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000003   22           RET
   1891          
   1892          /*********************************************************************
   1893           * Functions to register for ZDO Over-the-air messages
   1894           */
   1895          
   1896          /*********************************************************************
   1897           * @fn          ZDO_RegisterForZDOMsg
   1898           *
   1899           * @brief       Call this function to register of an incoming over
   1900           *              the air ZDO message - probably a response message
   1901           *              but requests can also be received.
   1902           *              Messages are delivered to the task with ZDO_CB_MSG
   1903           *              as the message ID.
   1904           *
   1905           * @param       taskID - Where you would like the message delivered
   1906           * @param       clusterID - What message?
   1907           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1908           *                          and device announce
   1909           *
   1910           * @return      ZSuccess - successful, ZMemError if not
   1911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1912          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1913          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V0,R2
   \   000009   8B..         MOV       ?V1,R3
   1914            ZDO_MsgCB_t *pList;
   1915            ZDO_MsgCB_t *pLast;
   1916            ZDO_MsgCB_t *pNew;
   1917          
   1918            // Look for duplicate
   1919            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL     ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000011   EE           MOV       A,R6
   \   000012   F8           MOV       R0,A
   \   000013   EF           MOV       A,R7
   \   000014   8028         SJMP      ??CrossCallReturnLabel_298
   1920            while ( pList )
   1921            {
   1922              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV       DPL,R0
   \   000018   8983         MOV       DPH,R1
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   65..         XRL       A,?V2
   \   00001F   7012         JNZ       ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV       DPL,R0
   \   000023   8983         MOV       DPH,R1
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   65..         XRL       A,?V0
   \   00002B   7004         JNZ       ??ZDO_RegisterForZDOMsg_2
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   65..         XRL       A,?V1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000031   6051         JZ        ??CrossCallReturnLabel_252
   1923                return ( ZSuccess );
   1924              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000033   E8           MOV       A,R0
   \   000034   FE           MOV       R6,A
   \   000035   E9           MOV       A,R1
   \   000036   FF           MOV       R7,A
   1925              pList = (ZDO_MsgCB_t *)pList->next;
   \   000037   8882         MOV       DPL,R0
   \   000039   8983         MOV       DPH,R1
   \   00003B   12....       LCALL     ??Subroutine130_0 & 0xFFFF
   1926            }
   \                     ??CrossCallReturnLabel_298:
   \   00003E   F9           MOV       R1,A
   \   00003F   E8           MOV       A,R0
   \   000040   49           ORL       A,R1
   \   000041   70D3         JNZ       ??ZDO_RegisterForZDOMsg_0
   1927          
   1928            // Add to the list
   1929            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   7A05         MOV       R2,#0x5
   \   000045   7B00         MOV       R3,#0x0
   \   000047   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00004A   8A..         MOV       ?V4,R2
   \   00004C   8B..         MOV       ?V5,R3
   \   00004E   A8..         MOV       R0,?V4
   \   000050   A9..         MOV       R1,?V5
   1930            if ( pNew )
   \   000052   E8           MOV       A,R0
   \   000053   49           ORL       A,R1
   \   000054   6032         JZ        ??ZDO_RegisterForZDOMsg_3
   1931            {
   1932              pNew->taskID = taskID;
   \   000056   8882         MOV       DPL,R0
   \   000058   8983         MOV       DPH,R1
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E5..         MOV       A,?V2
   \   00005E   12....       LCALL     ??Subroutine109_0 & 0xFFFF
   1933              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_186:
   \   000061   E5..         MOV       A,?V0
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   E5..         MOV       A,?V1
   \   000067   12....       LCALL     ?Subroutine98 & 0xFFFF
   1934              pNew->next = NULL;
   \                     ??CrossCallReturnLabel_193:
   \   00006A   E4           CLR       A
   \   00006B   F0           MOVX      @DPTR,A
   \   00006C   A3           INC       DPTR
   \   00006D   F0           MOVX      @DPTR,A
   1935              if ( zdoMsgCBs )
   \   00006E   90....       MOV       DPTR,#zdoMsgCBs
   \   000071   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000074   EA           MOV       A,R2
   \   000075   4B           ORL       A,R3
   \   000076   6006         JZ        ??ZDO_RegisterForZDOMsg_4
   1936              {
   1937                pLast->next = pNew;
   \   000078   8E82         MOV       DPL,R6
   \   00007A   8F83         MOV       DPH,R7
   \   00007C   8003         SJMP      ??ZDO_RegisterForZDOMsg_5
   1938              }
   1939              else
   1940                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   00007E   90....       MOV       DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000081   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   1941              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_252:
   \   000084   7900         MOV       R1,#0x0
   \   000086   8002         SJMP      ??ZDO_RegisterForZDOMsg_6
   1942            }
   1943            else
   1944              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000088   7910         MOV       R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00008A   02....       LJMP      ??Subroutine105_0 & 0xFFFF
   1945          }
   1946          
   1947          /*********************************************************************
   1948           * @fn          ZDO_RemoveRegisteredCB
   1949           *
   1950           * @brief       Call this function if you don't want to receive the
   1951           *              incoming message.
   1952           *
   1953           * @param       taskID - Where the messages are being delivered.
   1954           * @param       clusterID - What message?
   1955           *
   1956           * @return      ZSuccess - successful, ZFailure if not found
   1957           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1958          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1959          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   1960            ZDO_MsgCB_t *pList;
   1961            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV       R4,#0x0
   \   000009   7D00         MOV       R5,#0x0
   1962          
   1963            pList = zdoMsgCBs;
   \   00000B   90....       MOV       DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP      ??ZDO_RemoveRegisteredCB_0
   1964            while ( pList )
   1965            {
   1966              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1967              {
   1968                if ( pLast )
   1969                {
   1970                  // remove this one from the linked list
   1971                  pLast->next = pList->next;
   1972                }
   1973                else if ( pList->next )
   1974                {
   1975                  // remove the first one from the linked list
   1976                  zdoMsgCBs = pList->next;
   1977                }
   1978                else
   1979                {
   1980                  // remove the only item from the list
   1981                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1982                }
   1983                osal_mem_free( pList );
   1984                return ( ZSuccess );
   1985              }
   1986              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV       A,R0
   \   000011   FC           MOV       R4,A
   \   000012   E9           MOV       A,R1
   \   000013   FD           MOV       R5,A
   1987              pList = pList->next;
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL     ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   00001B   49           ORL       A,R1
   \   00001C   6047         JZ        ??ZDO_RemoveRegisteredCB_2
   \   00001E   8882         MOV       DPL,R0
   \   000020   8983         MOV       DPH,R1
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   6E           XRL       A,R6
   \   000026   70E8         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   6A           XRL       A,R2
   \   000031   7003         JNZ       ??ZDO_RemoveRegisteredCB_3
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   6B           XRL       A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000036   70D8         JNZ       ??ZDO_RemoveRegisteredCB_1
   \   000038   8882         MOV       DPL,R0
   \   00003A   8983         MOV       DPH,R1
   \   00003C   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   00003F   EC           MOV       A,R4
   \   000040   4D           ORL       A,R5
   \   000041   6006         JZ        ??ZDO_RemoveRegisteredCB_4
   \   000043   8C82         MOV       DPL,R4
   \   000045   8D83         MOV       DPH,R5
   \   000047   8007         SJMP      ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000049   EA           MOV       A,R2
   \   00004A   4B           ORL       A,R3
   \   00004B   90....       MOV       DPTR,#zdoMsgCBs
   \   00004E   6006         JZ        ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000050   EA           MOV       A,R2
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   EB           MOV       A,R3
   \   000054   8003         SJMP      ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000056   E4           CLR       A
   \   000057   F0           MOVX      @DPTR,A
   \   000058   A3           INC       DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   000059   F0           MOVX      @DPTR,A
   \   00005A                ; Setup parameters for call to function osal_mem_free
   \   00005A   E8           MOV       A,R0
   \   00005B   FA           MOV       R2,A
   \   00005C   E9           MOV       A,R1
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000061   7900         MOV       R1,#0x0
   \   000063   8002         SJMP      ??ZDO_RemoveRegisteredCB_8
   1988            }
   1989          
   1990            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000065   7901         MOV       R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   000067   02....       LJMP      ?Subroutine4 & 0xFFFF
   1991          }
   1992          
   1993          /*********************************************************************
   1994           * @fn          ZDO_SendMsgCBs
   1995           *
   1996           * @brief       This function sends messages to registered tasks.
   1997           *              Local to ZDO and shouldn't be called outside of ZDO.
   1998           *
   1999           * @param       inMsg - incoming message
   2000           *
   2001           * @return      TRUE if sent to at least 1 task, FALSE if not
   2002           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2003          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   2004          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   2005            uint8 ret = FALSE;
   \   000009   75..00       MOV       ?V0,#0x0
   2006            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV       DPTR,#zdoMsgCBs
   \   00000F   02....       LJMP      ??ZDO_SendMsgCBs_0 & 0xFFFF
   2007            while ( pList )
   2008            {
   2009              if ( (pList->clusterID == inMsg->clusterID)
   2010                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   2011                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_1:
   \   000012   E5..         MOV       A,?V6
   \   000014   240C         ADD       A,#0xc
   \   000016   F582         MOV       DPL,A
   \   000018   E4           CLR       A
   \   000019   35..         ADDC      A,?V7
   \   00001B   F583         MOV       DPH,A
   \   00001D   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000020   85..82       MOV       DPL,?V4
   \   000023   85..83       MOV       DPH,?V5
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   12....       LCALL     ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   00002C   E8           MOV       A,R0
   \   00002D   6A           XRL       A,R2
   \   00002E   7002         JNZ       ??ZDO_SendMsgCBs_2
   \   000030   E9           MOV       A,R1
   \   000031   6B           XRL       A,R3
   \                     ??ZDO_SendMsgCBs_2:
   \   000032   601B         JZ        ??ZDO_SendMsgCBs_3
   \   000034   74FF         MOV       A,#-0x1
   \   000036   6A           XRL       A,R2
   \   000037   7003         JNZ       ??ZDO_SendMsgCBs_4
   \   000039   74FF         MOV       A,#-0x1
   \   00003B   6B           XRL       A,R3
   \                     ??ZDO_SendMsgCBs_4:
   \   00003C   6003         JZ        $+5
   \   00003E   02....       LJMP      ??ZDO_SendMsgCBs_5 & 0xFFFF
   \   000041   E9           MOV       A,R1
   \   000042   5480         ANL       A,#0x80
   \   000044   7009         JNZ       ??ZDO_SendMsgCBs_3
   \   000046   7413         MOV       A,#0x13
   \   000048   68           XRL       A,R0
   \   000049   49           ORL       A,R1
   \   00004A   6003         JZ        $+5
   \   00004C   02....       LJMP      ??ZDO_SendMsgCBs_5 & 0xFFFF
   2012              {
   2013                zdoIncomingMsg_t *msgPtr;
   2014          
   2015                // Send the address to the task
   2016                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_3:
   \   00004F                ; Setup parameters for call to function osal_msg_allocate
   \   00004F   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000052   2417         ADD       A,#0x17
   \   000054   FA           MOV       R2,A
   \   000055   E4           CLR       A
   \   000056   3400         ADDC      A,#0x0
   \   000058   FB           MOV       R3,A
   \   000059   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00005C   8A..         MOV       ?V2,R2
   \   00005E   8B..         MOV       ?V3,R3
   \   000060   AE..         MOV       R6,?V2
   \   000062   AF..         MOV       R7,?V3
   2017                if ( msgPtr )
   \   000064   EE           MOV       A,R6
   \   000065   4F           ORL       A,R7
   \   000066   606C         JZ        ??ZDO_SendMsgCBs_5
   2018                {
   2019                  // copy struct
   2020                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   000068                ; Setup parameters for call to function osal_memcpy
   \   000068   85....       MOV       ?V0,?V6
   \   00006B   85....       MOV       ?V1,?V7
   \   00006E   75..00       MOV       ?V2,#0x0
   \   000071   78..         MOV       R0,#?V0
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000076   7C17         MOV       R4,#0x17
   \   000078   7D00         MOV       R5,#0x0
   \   00007A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007D   7403         MOV       A,#0x3
   \   00007F   12....       LCALL     ?DEALLOC_XSTACK8
   2021          
   2022                  if ( inMsg->asduLen )
   \   000082   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000085   6032         JZ        ??ZDO_SendMsgCBs_6
   2023                  {
   2024                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   000087   EE           MOV       A,R6
   \   000088   2417         ADD       A,#0x17
   \   00008A   FA           MOV       R2,A
   \   00008B   E4           CLR       A
   \   00008C   3F           ADDC      A,R7
   \   00008D   FB           MOV       R3,A
   \   00008E   EE           MOV       A,R6
   \   00008F   2413         ADD       A,#0x13
   \   000091   F582         MOV       DPL,A
   \   000093   E4           CLR       A
   \   000094   3F           ADDC      A,R7
   \   000095   F583         MOV       DPH,A
   \   000097   12....       LCALL     ??Subroutine127_0 & 0xFFFF
   2025                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \                     ??CrossCallReturnLabel_281:
   \   00009A                ; Setup parameters for call to function osal_memcpy
   \   00009A   E5..         MOV       A,?V6
   \   00009C   2413         ADD       A,#0x13
   \   00009E   F582         MOV       DPL,A
   \   0000A0   E4           CLR       A
   \   0000A1   35..         ADDC      A,?V7
   \   0000A3   12....       LCALL     ?Subroutine49 & 0xFFFF
   2026                  }
   \                     ??CrossCallReturnLabel_228:
   \   0000A6   78..         MOV       R0,#?V0
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000AB   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   0000AE   FC           MOV       R4,A
   \   0000AF   7D00         MOV       R5,#0x0
   \   0000B1   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000B4   7403         MOV       A,#0x3
   \   0000B6   12....       LCALL     ?DEALLOC_XSTACK8
   2027          
   2028                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_6:
   \   0000B9   8E82         MOV       DPL,R6
   \   0000BB   8F83         MOV       DPH,R7
   \   0000BD   74D3         MOV       A,#-0x2d
   \   0000BF   F0           MOVX      @DPTR,A
   2029                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000C0                ; Setup parameters for call to function osal_msg_send
   \   0000C0   EE           MOV       A,R6
   \   0000C1   FA           MOV       R2,A
   \   0000C2   EF           MOV       A,R7
   \   0000C3   FB           MOV       R3,A
   \   0000C4   85..82       MOV       DPL,?V4
   \   0000C7   85..83       MOV       DPH,?V5
   \   0000CA   A3           INC       DPTR
   \   0000CB   A3           INC       DPTR
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F9           MOV       R1,A
   \   0000CE   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2030                  ret = TRUE;
   \   0000D1   75..01       MOV       ?V0,#0x1
   2031                }
   2032              }
   2033              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_5:
   \   0000D4   85..82       MOV       DPL,?V4
   \   0000D7   85..83       MOV       DPH,?V5
   \                     ??ZDO_SendMsgCBs_0:
   \   0000DA   E0           MOVX      A,@DPTR
   \   0000DB   F5..         MOV       ?V4,A
   \   0000DD   A3           INC       DPTR
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   F5..         MOV       ?V5,A
   2034            }
   \   0000E1   E5..         MOV       A,?V4
   \   0000E3   45..         ORL       A,?V5
   \   0000E5   6003         JZ        $+5
   \   0000E7   02....       LJMP      ??ZDO_SendMsgCBs_1 & 0xFFFF
   2035            return ( ret );
   \   0000EA   A9..         MOV       R1,?V0
   \   0000EC   02....       LJMP      ??Subroutine114_0 & 0xFFFF
   2036          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E5..         MOV       A,?V6
   \   000002   2410         ADD       A,#0x10
   \   000004   F582         MOV       DPL,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V7
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET
   2037          
   2038          /*********************************************************************
   2039           * Incoming message processor
   2040           */
   2041          
   2042          /*********************************************************************
   2043           * @fn          ZDP_IncomingData
   2044           *
   2045           * @brief       This function indicates the transfer of a data PDU (ASDU)
   2046           *              from the APS sub-layer to the ZDO.
   2047           *
   2048           * @param       pData - Incoming Message
   2049           *
   2050           * @return      none
   2051           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2052          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   2053          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV       A,#-0x17
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   2054            uint8 x = 0;
   \   00000A   7E00         MOV       R6,#0x0
   2055            uint8 handled;
   2056            zdoIncomingMsg_t inMsg;
   2057          
   2058            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV       A,#0xa
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   7402         MOV       A,#0x2
   \   000013   12....       LCALL     ?Subroutine33 & 0xFFFF
   2059            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_41:
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   00001B   7402         MOV       A,#0x2
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   2060            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_253:
   \   000023   EA           MOV       A,R2
   \   000024   2415         ADD       A,#0x15
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   3B           ADDC      A,R3
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   C0E0         PUSH      A
   \   00002F   740B         MOV       A,#0xb
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   D0E0         POP       A
   \   000036   12....       LCALL     ?Subroutine33 & 0xFFFF
   2061            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_42:
   \   000039   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   00003C   740C         MOV       A,#0xc
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   2062            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_254:
   \   000044   EA           MOV       A,R2
   \   000045   2419         ADD       A,#0x19
   \   000047   F582         MOV       DPL,A
   \   000049   E4           CLR       A
   \   00004A   3B           ADDC      A,R3
   \   00004B   F583         MOV       DPH,A
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   C0E0         PUSH      A
   \   000050   740E         MOV       A,#0xe
   \   000052   12....       LCALL     ?XSTACK_DISP0_8
   \   000055   D0E0         POP       A
   \   000057   F0           MOVX      @DPTR,A
   2063          
   2064            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000058   EA           MOV       A,R2
   \   000059   2420         ADD       A,#0x20
   \   00005B   F582         MOV       DPL,A
   \   00005D   E4           CLR       A
   \   00005E   3B           ADDC      A,R3
   \   00005F   F583         MOV       DPH,A
   \   000061   E0           MOVX      A,@DPTR
   \   000062   14           DEC       A
   \   000063   C0E0         PUSH      A
   \   000065   7410         MOV       A,#0x10
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   D0E0         POP       A
   \   00006C   F0           MOVX      @DPTR,A
   2065            inMsg.asdu = pData->cmd.Data+1;
   \   00006D   EA           MOV       A,R2
   \   00006E   2422         ADD       A,#0x22
   \   000070   F8           MOV       R0,A
   \   000071   E4           CLR       A
   \   000072   3B           ADDC      A,R3
   \   000073   F9           MOV       R1,A
   \   000074   8882         MOV       DPL,R0
   \   000076   8983         MOV       DPH,R1
   \   000078   E0           MOVX      A,@DPTR
   \   000079   2401         ADD       A,#0x1
   \   00007B   FC           MOV       R4,A
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   3400         ADDC      A,#0x0
   \   000080   FD           MOV       R5,A
   \   000081   7413         MOV       A,#0x13
   \   000083   12....       LCALL     ?XSTACK_DISP0_8
   \   000086   EC           MOV       A,R4
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A3           INC       DPTR
   \   000089   ED           MOV       A,R5
   \   00008A   12....       LCALL     ?Subroutine98 & 0xFFFF
   2066            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_194:
   \   00008D   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000090   C0E0         PUSH      A
   \   000092   740F         MOV       A,#0xf
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   D0E0         POP       A
   \   000099   F0           MOVX      @DPTR,A
   2067            inMsg.macDestAddr = pData->macDestAddr;
   \   00009A   EA           MOV       A,R2
   \   00009B   2412         ADD       A,#0x12
   \   00009D   F582         MOV       DPL,A
   \   00009F   E4           CLR       A
   \   0000A0   3B           ADDC      A,R3
   \   0000A1   F583         MOV       DPH,A
   \   0000A3   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   0000A6   7411         MOV       A,#0x11
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   2068            inMsg.macSrcAddr = pData->macSrcAddr;
   \                     ??CrossCallReturnLabel_255:
   \   0000AE   EA           MOV       A,R2
   \   0000AF   2424         ADD       A,#0x24
   \   0000B1   F582         MOV       DPL,A
   \   0000B3   E4           CLR       A
   \   0000B4   3B           ADDC      A,R3
   \   0000B5   F583         MOV       DPH,A
   \   0000B7   12....       LCALL     ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   0000BA   7415         MOV       A,#0x15
   \   0000BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL     ??Subroutine124_0 & 0xFFFF
   2069          
   2070            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_256:
   \   0000C2                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000C2   AA..         MOV       R2,?XSP + 0
   \   0000C4   AB..         MOV       R3,?XSP + 1
   \   0000C6   12....       LCALL     `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000C9   E9           MOV       A,R1
   \   0000CA   FC           MOV       R4,A
   \   0000CB   8001         SJMP      ??ZDP_IncomingData_0
   2071          
   2072          #if (defined MT_ZDO_CB_FUNC)
   2073          #if !defined MT_TASK
   2074            if (zgZdoDirectCB)
   2075          #endif
   2076            {
   2077              MT_ZdoDirectCB( pData, &inMsg );
   2078            }
   2079          #endif
   2080          
   2081            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   2082            {
   2083              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   2084              {
   2085                zdpMsgProcs[x].pFn( &inMsg );
   2086                return;
   2087              }
   2088              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000CD   0E           INC       R6
   \                     ??ZDP_IncomingData_0:
   \   0000CE   EE           MOV       A,R6
   \   0000CF   F5..         MOV       ?V0,A
   \   0000D1   75..00       MOV       ?V1,#0x0
   \   0000D4   7402         MOV       A,#0x2
   \   0000D6   78..         MOV       R0,#?V0
   \   0000D8   12....       LCALL     ?S_SHL
   \   0000DB   74..         MOV       A,#zdpMsgProcs & 0xff
   \   0000DD   25..         ADD       A,?V0
   \   0000DF   F8           MOV       R0,A
   \   0000E0   74..         MOV       A,#(zdpMsgProcs >> 8) & 0xff
   \   0000E2   35..         ADDC      A,?V1
   \   0000E4   F9           MOV       R1,A
   \   0000E5   8882         MOV       DPL,R0
   \   0000E7   8983         MOV       DPH,R1
   \   0000E9   E4           CLR       A
   \   0000EA   93           MOVC      A,@A+DPTR
   \   0000EB   C0E0         PUSH      A
   \   0000ED   7401         MOV       A,#0x1
   \   0000EF   93           MOVC      A,@A+DPTR
   \   0000F0   F583         MOV       DPH,A
   \   0000F2   D082         POP       DPL
   \   0000F4   AA82         MOV       R2,DPL
   \   0000F6   AB83         MOV       R3,DPH
   \   0000F8   74FF         MOV       A,#-0x1
   \   0000FA   6A           XRL       A,R2
   \   0000FB   7003         JNZ       ??ZDP_IncomingData_2
   \   0000FD   74FF         MOV       A,#-0x1
   \   0000FF   6B           XRL       A,R3
   \                     ??ZDP_IncomingData_2:
   \   000100   6028         JZ        ??ZDP_IncomingData_3
   \   000102   740C         MOV       A,#0xc
   \   000104   12....       LCALL     ?XSTACK_DISP0_8
   \   000107   E0           MOVX      A,@DPTR
   \   000108   6A           XRL       A,R2
   \   000109   7003         JNZ       ??ZDP_IncomingData_4
   \   00010B   A3           INC       DPTR
   \   00010C   E0           MOVX      A,@DPTR
   \   00010D   6B           XRL       A,R3
   \                     ??ZDP_IncomingData_4:
   \   00010E   70BD         JNZ       ??ZDP_IncomingData_1
   \   000110                ; Setup parameters for indirect call
   \   000110   AA..         MOV       R2,?XSP + 0
   \   000112   AB..         MOV       R3,?XSP + 1
   \   000114   8882         MOV       DPL,R0
   \   000116   8983         MOV       DPH,R1
   \   000118   A3           INC       DPTR
   \   000119   A3           INC       DPTR
   \   00011A   E4           CLR       A
   \   00011B   93           MOVC      A,@A+DPTR
   \   00011C   C0E0         PUSH      A
   \   00011E   7401         MOV       A,#0x1
   \   000120   93           MOVC      A,@A+DPTR
   \   000121   F583         MOV       DPH,A
   \   000123   D082         POP       DPL
   \   000125   12....       LCALL     ?CALL_IND
   \   000128   800A         SJMP      ??ZDP_IncomingData_5
   2089            }
   2090          
   2091            // Handle unhandled messages
   2092            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   00012A   EC           MOV       A,R4
   \   00012B   7007         JNZ       ??ZDP_IncomingData_5
   2093              ZDApp_InMsgCB( &inMsg );
   \   00012D                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00012D   AA..         MOV       R2,?XSP + 0
   \   00012F   AB..         MOV       R3,?XSP + 1
   \   000131   12....       LCALL     `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   2094          }
   \                     ??ZDP_IncomingData_5:
   \   000134   7417         MOV       A,#0x17
   \   000136   02....       LJMP      ??Subroutine107_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??fillAndSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NWKAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NwkAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IEEEAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_DeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ParentAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ParentAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdpProcessAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NodeDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_PowerDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EPRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_GenericRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_BindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   2095          
   2096          /*********************************************************************
   2097          *********************************************************************/
   2098          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     52   ZDO_SendMsgCBs
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      1     28   ZDP_BindUnbindReq
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
        1     18   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     27   ZDP_EPRsp
        0     19   -> fillAndSend
        0     20   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     21   ZDP_IEEEAddrReq
        0     21   -> fillAndSend
      1     33   ZDP_IncomingData
        0     33   -> ZDApp_InMsgCB
        0     33   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     27   ZDP_MgmtBindRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     27   ZDP_MgmtLqiRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     20   ZDP_MgmtNwkDiscReq
        0     14   -> fillAndSend
        0     16   -> osal_buffer_uint32
      1     27   ZDP_MgmtNwkDiscRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     20   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     23   ZDP_MgmtPermitJoinReq
        0     21   -> NLME_GetShortAddr
        0     23   -> fillAndSend
      1     27   ZDP_MgmtRtgRsp
        0     22   -> fillAndSend
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     23   ZDP_NwkAddrReq
        0     23   -> fillAndSend
        0     21   -> sAddrExtCmp
        0     21   -> sAddrExtCpy
      1     29   ZDP_ParentAnnce
        0     20   -> ZDApp_SetParentAnnceTimer
        0     22   -> fillAndSend
        0     24   -> osal_start_timerEx
        0     20   -> sAddrExtCpy
      1     14   ZDP_PowerDescMsg
        0     12   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     17   ZDP_ServerDiscRsp
        0     13   -> fillAndSend
      1     21   ZDP_SimpleDescMsg
        0     21   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     23   ZDP_UserDescRsp
        0     19   -> fillAndSend
        0     20   -> osal_memcpy
      1     19   ZDP_UserDescSet
        0     16   -> fillAndSend
        0     17   -> osal_memcpy
        0     14   -> osal_memset
      1     81   fillAndSend
        0     34   -> AF_DataRequest
        0     25   -> osal_memset
      1     47   zdpProcessAddrReq
        0     45   -> AddrMgrEntryGet
        0     45   -> AssocGetWithExt
        0     45   -> AssocGetWithShort
        0     45   -> AssocMakeList
        0     47   -> fillAndSend
        0     45   -> osal_mem_free
        0     45   -> osal_memset
        0     45   -> sAddrExtCmp
        0     45   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       4  ??Subroutine100_0
       8  ??Subroutine101_0
       9  ??Subroutine102_0
       3  ??Subroutine103_0
       5  ??Subroutine104_0
       5  ??Subroutine105_0
       2  ??Subroutine106_0
       8  ??Subroutine107_0
       4  ??Subroutine108_0
       6  ??Subroutine109_0
       8  ??Subroutine110_0
       4  ??Subroutine111_0
       7  ??Subroutine112_0
       3  ??Subroutine113_0
       5  ??Subroutine114_0
       3  ??Subroutine115_0
       6  ??Subroutine116_0
       8  ??Subroutine117_0
       5  ??Subroutine118_0
       8  ??Subroutine119_0
       6  ??Subroutine120_0
       8  ??Subroutine121_0
       5  ??Subroutine122_0
       3  ??Subroutine123_0
       6  ??Subroutine124_0
       5  ??Subroutine125_0
       6  ??Subroutine126_0
       6  ??Subroutine127_0
       4  ??Subroutine128_0
       5  ??Subroutine129_0
       5  ??Subroutine130_0
      14  ?Subroutine0
      17  ?Subroutine1
      42  ?Subroutine10
      17  ?Subroutine11
       7  ?Subroutine12
      16  ?Subroutine13
       6  ?Subroutine14
       3  ?Subroutine15
       5  ?Subroutine16
       9  ?Subroutine17
      12  ?Subroutine18
       5  ?Subroutine19
      16  ?Subroutine2
      21  ?Subroutine20
       4  ?Subroutine21
       6  ?Subroutine22
       6  ?Subroutine23
       6  ?Subroutine24
       9  ?Subroutine25
      13  ?Subroutine26
      11  ?Subroutine27
       5  ?Subroutine28
       6  ?Subroutine29
       2  ?Subroutine3
      12  ?Subroutine30
       3  ?Subroutine31
       5  ?Subroutine32
       5  ?Subroutine33
       6  ?Subroutine34
      11  ?Subroutine35
       9  ?Subroutine36
       9  ?Subroutine37
       9  ?Subroutine38
       6  ?Subroutine39
       5  ?Subroutine4
       2  ?Subroutine40
      10  ?Subroutine41
       8  ?Subroutine42
       5  ?Subroutine43
       3  ?Subroutine44
       3  ?Subroutine45
       9  ?Subroutine46
       6  ?Subroutine47
      13  ?Subroutine48
       2  ?Subroutine49
       8  ?Subroutine5
      11  ?Subroutine50
       6  ?Subroutine51
       6  ?Subroutine52
       7  ?Subroutine53
       8  ?Subroutine54
       4  ?Subroutine55
      17  ?Subroutine56
      15  ?Subroutine57
       3  ?Subroutine58
       1  ?Subroutine59
      16  ?Subroutine6
       8  ?Subroutine60
      10  ?Subroutine61
      10  ?Subroutine62
       4  ?Subroutine63
       5  ?Subroutine64
       4  ?Subroutine65
       5  ?Subroutine66
       9  ?Subroutine67
       8  ?Subroutine68
       4  ?Subroutine69
       4  ?Subroutine7
       1  ?Subroutine70
       5  ?Subroutine71
      12  ?Subroutine72
      13  ?Subroutine73
       9  ?Subroutine74
       6  ?Subroutine75
      11  ?Subroutine76
      12  ?Subroutine77
       7  ?Subroutine78
       4  ?Subroutine79
       5  ?Subroutine8
       8  ?Subroutine80
       5  ?Subroutine81
       3  ?Subroutine82
      15  ?Subroutine83
       1  ?Subroutine84
       4  ?Subroutine85
       6  ?Subroutine86
      16  ?Subroutine87
      11  ?Subroutine88
       9  ?Subroutine89
      18  ?Subroutine9
       5  ?Subroutine90
       7  ?Subroutine91
       5  ?Subroutine92
       9  ?Subroutine93
       9  ?Subroutine94
       6  ?Subroutine95
       9  ?Subroutine96
       9  ?Subroutine97
       6  ?Subroutine98
       8  ?Subroutine99
     141  ZDO_RegisterForZDOMsg
       6  ZDO_RegisterForZDOMsg::?relay
     106  ZDO_RemoveRegisteredCB
       6  ZDO_RemoveRegisteredCB::?relay
     239  ZDO_SendMsgCBs
       6  ZDO_SendMsgCBs::?relay
       1  ZDP_AF_ENDPOINT
     218  ZDP_BindUnbindReq
       6  ZDP_BindUnbindReq::?relay
      80  ZDP_Buf
      74  ZDP_DeviceAnnce
       6  ZDP_DeviceAnnce::?relay
     163  ZDP_EPRsp
       6  ZDP_EPRsp::?relay
     318  ZDP_EndDeviceBindReq
       6  ZDP_EndDeviceBindReq::?relay
      87  ZDP_GenericRsp
       6  ZDP_GenericRsp::?relay
      61  ZDP_IEEEAddrReq
       6  ZDP_IEEEAddrReq::?relay
     313  ZDP_IncomingData
       6  ZDP_IncomingData::?relay
     240  ZDP_MatchDescReq
       6  ZDP_MatchDescReq::?relay
     280  ZDP_MgmtBindRsp
       6  ZDP_MgmtBindRsp::?relay
      32  ZDP_MgmtDirectJoinReq
       6  ZDP_MgmtDirectJoinReq::?relay
      61  ZDP_MgmtLeaveReq
       6  ZDP_MgmtLeaveReq::?relay
     391  ZDP_MgmtLqiRsp
       6  ZDP_MgmtLqiRsp::?relay
      61  ZDP_MgmtNwkDiscReq
       6  ZDP_MgmtNwkDiscReq::?relay
     323  ZDP_MgmtNwkDiscRsp
       6  ZDP_MgmtNwkDiscRsp::?relay
     234  ZDP_MgmtNwkUpdateNotify
       6  ZDP_MgmtNwkUpdateNotify::?relay
     118  ZDP_MgmtNwkUpdateReq
       6  ZDP_MgmtNwkUpdateReq::?relay
     151  ZDP_MgmtPermitJoinReq
       6  ZDP_MgmtPermitJoinReq::?relay
     299  ZDP_MgmtRtgRsp
       6  ZDP_MgmtRtgRsp::?relay
      27  ZDP_NWKAddrOfInterestReq
       6  ZDP_NWKAddrOfInterestReq::?relay
     208  ZDP_NodeDescMsg
       6  ZDP_NodeDescMsg::?relay
     103  ZDP_NwkAddrReq
       6  ZDP_NwkAddrReq::?relay
     277  ZDP_ParentAnnce
       6  ZDP_ParentAnnce::?relay
      76  ZDP_PowerDescMsg
       6  ZDP_PowerDescMsg::?relay
      96  ZDP_SendData
       6  ZDP_SendData::?relay
      81  ZDP_ServerDiscReq
       6  ZDP_ServerDiscReq::?relay
      97  ZDP_ServerDiscRsp
       6  ZDP_ServerDiscRsp::?relay
     413  ZDP_SimpleDescMsg
       6  ZDP_SimpleDescMsg::?relay
      27  ZDP_SimpleDescReq
       6  ZDP_SimpleDescReq::?relay
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     147  ZDP_UserDescRsp
       6  ZDP_UserDescRsp::?relay
     117  ZDP_UserDescSet
       6  ZDP_UserDescSet::?relay
       4  __Constant_a
       1  childIndex
     165  fillAndSend
       6  fillAndSend::?relay
       2  zdoMsgCBs
      68  zdpMsgProcs
     813  zdpProcessAddrReq
       6  zdpProcessAddrReq::?relay

 
 7 553 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    69 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
    85 bytes in segment XDATA_Z
 
   281 bytes of CODE     memory
     0 bytes of CONST    memory (+ 4 bytes shared)
 7 553 bytes of HUGECODE memory
    87 bytes of XDATA    memory

Errors: none
Warnings: none
