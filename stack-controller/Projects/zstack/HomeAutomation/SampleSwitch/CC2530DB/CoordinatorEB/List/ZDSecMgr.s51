///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              22/Nov/2023  15:42:46
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\fuzzing-coordinator-response-collection\Components\stack\zdo\ZDSecMgr.c
//    Command line       =  
//        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWB0A7.tmp
//        (D:\fuzzing-coordinator-response-collection\Components\stack\zdo\ZDSecMgr.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
//        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
//        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
//        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        -lA
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
//        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
//        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\ZDSecMgr.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDSecMgr

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD_TO_X
        EXTERN ?L_ADD_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_GE_X
        EXTERN ?VB
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??APSME_IsDefaultTCLK::?relay`
        FUNCTION `??APSME_IsDefaultTCLK::?relay`,0203H
        PUBLIC `??APSME_IsLinkKeyValid::?relay`
        FUNCTION `??APSME_IsLinkKeyValid::?relay`,0203H
        PUBLIC `??APSME_KeyFwdToChild::?relay`
        FUNCTION `??APSME_KeyFwdToChild::?relay`,0203H
        PUBLIC `??APSME_LinkKeyNVIdGet::?relay`
        FUNCTION `??APSME_LinkKeyNVIdGet::?relay`,0203H
        PUBLIC `??APSME_LinkKeySet::?relay`
        FUNCTION `??APSME_LinkKeySet::?relay`,0203H
        PUBLIC `??APSME_TCLinkKeyInit::?relay`
        FUNCTION `??APSME_TCLinkKeyInit::?relay`,0203H
        PUBLIC `??APSME_TCLinkKeyLoad::?relay`
        FUNCTION `??APSME_TCLinkKeyLoad::?relay`,0203H
        PUBLIC `??APSME_TCLinkKeySync::?relay`
        FUNCTION `??APSME_TCLinkKeySync::?relay`,0203H
        PUBLIC `??ZDSecMgrAPSRemove::?relay`
        FUNCTION `??ZDSecMgrAPSRemove::?relay`,0203H
        PUBLIC `??ZDSecMgrAddLinkKey::?relay`
        FUNCTION `??ZDSecMgrAddLinkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrAddrClear::?relay`
        FUNCTION `??ZDSecMgrAddrClear::?relay`,0203H
        PUBLIC `??ZDSecMgrAddrStore::?relay`
        FUNCTION `??ZDSecMgrAddrStore::?relay`,0203H
        PUBLIC `??ZDSecMgrAppConfKeyReq::?relay`
        FUNCTION `??ZDSecMgrAppConfKeyReq::?relay`,0203H
        PUBLIC `??ZDSecMgrAppKeyGet::?relay`
        FUNCTION `??ZDSecMgrAppKeyGet::?relay`,0203H
        PUBLIC `??ZDSecMgrAppKeyReq::?relay`
        FUNCTION `??ZDSecMgrAppKeyReq::?relay`,0203H
        PUBLIC `??ZDSecMgrAppKeyTypeSet::?relay`
        FUNCTION `??ZDSecMgrAppKeyTypeSet::?relay`,0203H
        PUBLIC `??ZDSecMgrApsLinkKeyInit::?relay`
        FUNCTION `??ZDSecMgrApsLinkKeyInit::?relay`,0203H
        PUBLIC `??ZDSecMgrAssocDeviceAuth::?relay`
        FUNCTION `??ZDSecMgrAssocDeviceAuth::?relay`,0203H
        PUBLIC `??ZDSecMgrAuthNwkKey::?relay`
        FUNCTION `??ZDSecMgrAuthNwkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrAuthenticationCheck::?relay`
        FUNCTION `??ZDSecMgrAuthenticationCheck::?relay`,0203H
        PUBLIC `??ZDSecMgrAuthenticationSet::?relay`
        FUNCTION `??ZDSecMgrAuthenticationSet::?relay`,0203H
        PUBLIC `??ZDSecMgrClearNVKeyValues::?relay`
        FUNCTION `??ZDSecMgrClearNVKeyValues::?relay`,0203H
        PUBLIC `??ZDSecMgrConfig::?relay`
        FUNCTION `??ZDSecMgrConfig::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceJoin::?relay`
        FUNCTION `??ZDSecMgrDeviceJoin::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceJoinDirect::?relay`
        FUNCTION `??ZDSecMgrDeviceJoinDirect::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceJoinFwd::?relay`
        FUNCTION `??ZDSecMgrDeviceJoinFwd::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceNew::?relay`
        FUNCTION `??ZDSecMgrDeviceNew::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceRemove::?relay`
        FUNCTION `??ZDSecMgrDeviceRemove::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceRemoveByExtAddr::?relay`
        FUNCTION `??ZDSecMgrDeviceRemoveByExtAddr::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceValidate::?relay`
        FUNCTION `??ZDSecMgrDeviceValidate::?relay`,0203H
        PUBLIC `??ZDSecMgrDeviceValidateRM::?relay`
        FUNCTION `??ZDSecMgrDeviceValidateRM::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryFree::?relay`
        FUNCTION `??ZDSecMgrEntryFree::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryInit::?relay`
        FUNCTION `??ZDSecMgrEntryInit::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookup::?relay`
        FUNCTION `??ZDSecMgrEntryLookup::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookupAMI::?relay`
        FUNCTION `??ZDSecMgrEntryLookupAMI::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookupAMIGetIndex::?relay`
        FUNCTION `??ZDSecMgrEntryLookupAMIGetIndex::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookupExt::?relay`
        FUNCTION `??ZDSecMgrEntryLookupExt::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryLookupExtGetIndex::?relay`
        FUNCTION `??ZDSecMgrEntryLookupExtGetIndex::?relay`,0203H
        PUBLIC `??ZDSecMgrEntryNew::?relay`
        FUNCTION `??ZDSecMgrEntryNew::?relay`,0203H
        PUBLIC `??ZDSecMgrExtAddrLookup::?relay`
        FUNCTION `??ZDSecMgrExtAddrLookup::?relay`,0203H
        PUBLIC `??ZDSecMgrExtAddrStore::?relay`
        FUNCTION `??ZDSecMgrExtAddrStore::?relay`,0203H
        PUBLIC `??ZDSecMgrGenerateKeyFromSeed::?relay`
        FUNCTION `??ZDSecMgrGenerateKeyFromSeed::?relay`,0203H
        PUBLIC `??ZDSecMgrGenerateRndKey::?relay`
        FUNCTION `??ZDSecMgrGenerateRndKey::?relay`,0203H
        PUBLIC `??ZDSecMgrGenerateSeed::?relay`
        FUNCTION `??ZDSecMgrGenerateSeed::?relay`,0203H
        PUBLIC `??ZDSecMgrInit::?relay`
        FUNCTION `??ZDSecMgrInit::?relay`,0203H
        PUBLIC `??ZDSecMgrInitNV::?relay`
        FUNCTION `??ZDSecMgrInitNV::?relay`,0203H
        PUBLIC `??ZDSecMgrInitNVKeyTables::?relay`
        FUNCTION `??ZDSecMgrInitNVKeyTables::?relay`,0203H
        PUBLIC `??ZDSecMgrNewDeviceEvent::?relay`
        FUNCTION `??ZDSecMgrNewDeviceEvent::?relay`,0203H
        PUBLIC `??ZDSecMgrNwkKeyInit::?relay`
        FUNCTION `??ZDSecMgrNwkKeyInit::?relay`,0203H
        PUBLIC `??ZDSecMgrPermitJoining::?relay`
        FUNCTION `??ZDSecMgrPermitJoining::?relay`,0203H
        PUBLIC `??ZDSecMgrPermitJoiningTimeout::?relay`
        FUNCTION `??ZDSecMgrPermitJoiningTimeout::?relay`,0203H
        PUBLIC `??ZDSecMgrReadKeyFromNv::?relay`
        FUNCTION `??ZDSecMgrReadKeyFromNv::?relay`,0203H
        PUBLIC `??ZDSecMgrRemoveDeviceInd::?relay`
        FUNCTION `??ZDSecMgrRemoveDeviceInd::?relay`,0203H
        PUBLIC `??ZDSecMgrRequestAppKey::?relay`
        FUNCTION `??ZDSecMgrRequestAppKey::?relay`,0203H
        PUBLIC `??ZDSecMgrRequestKeyInd::?relay`
        FUNCTION `??ZDSecMgrRequestKeyInd::?relay`,0203H
        FUNCTION `??ZDSecMgrRestoreFromNV::?relay`,0203H
        PUBLIC `??ZDSecMgrSaveApsLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveApsLinkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrSaveTCLinkKey::?relay`
        FUNCTION `??ZDSecMgrSaveTCLinkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrSendNwkKey::?relay`
        FUNCTION `??ZDSecMgrSendNwkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrSetDefaultNV::?relay`
        FUNCTION `??ZDSecMgrSetDefaultNV::?relay`,0203H
        PUBLIC `??ZDSecMgrSwitchKeyInd::?relay`
        FUNCTION `??ZDSecMgrSwitchKeyInd::?relay`,0203H
        PUBLIC `??ZDSecMgrSwitchNwkKey::?relay`
        FUNCTION `??ZDSecMgrSwitchNwkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrTCDataLoad::?relay`
        FUNCTION `??ZDSecMgrTCDataLoad::?relay`,0203H
        PUBLIC `??ZDSecMgrTCExtAddrCheck::?relay`
        FUNCTION `??ZDSecMgrTCExtAddrCheck::?relay`,0203H
        PUBLIC `??ZDSecMgrTclkReq::?relay`
        FUNCTION `??ZDSecMgrTclkReq::?relay`,0203H
        PUBLIC `??ZDSecMgrTransportKeyInd::?relay`
        FUNCTION `??ZDSecMgrTransportKeyInd::?relay`,0203H
        PUBLIC `??ZDSecMgrUpdateDeviceInd::?relay`
        FUNCTION `??ZDSecMgrUpdateDeviceInd::?relay`,0203H
        PUBLIC `??ZDSecMgrUpdateNwkKey::?relay`
        FUNCTION `??ZDSecMgrUpdateNwkKey::?relay`,0203H
        PUBLIC `??ZDSecMgrUpdateTCAddress::?relay`
        FUNCTION `??ZDSecMgrUpdateTCAddress::?relay`,0203H
        PUBLIC `??ZDSecMgrVerifyKeyInd::?relay`
        FUNCTION `??ZDSecMgrVerifyKeyInd::?relay`,0203H
        FUNCTION `??ZDSecMgrWriteNV::?relay`,0203H
        PUBLIC APSME_IsDefaultTCLK
        FUNCTION APSME_IsDefaultTCLK,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC APSME_IsLinkKeyValid
        FUNCTION APSME_IsLinkKeyValid,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC APSME_KeyFwdToChild
        FUNCTION APSME_KeyFwdToChild,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC APSME_LinkKeyNVIdGet
        FUNCTION APSME_LinkKeyNVIdGet,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC APSME_LinkKeySet
        FUNCTION APSME_LinkKeySet,0a1203H
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC APSME_TCLinkKeyInit
        FUNCTION APSME_TCLinkKeyInit,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 40, STACK
        PUBLIC APSME_TCLinkKeyLoad
        FUNCTION APSME_TCLinkKeyLoad,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 55, STACK
        PUBLIC APSME_TCLinkKeySync
        FUNCTION APSME_TCLinkKeySync,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC ApsLinkKeyFrmCntr
        PUBLIC TCLinkKeyFrmCntr
        PUBLIC TrustCenterLinkKey
        PUBLIC ZDSecMgrAPSRemove
        FUNCTION ZDSecMgrAPSRemove,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC ZDSecMgrAddLinkKey
        FUNCTION ZDSecMgrAddLinkKey,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrAddrClear
        FUNCTION ZDSecMgrAddrClear,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrAddrStore
        FUNCTION ZDSecMgrAddrStore,021203H
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAppConfKeyReq
        FUNCTION ZDSecMgrAppConfKeyReq,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 6, STACK
        PUBLIC ZDSecMgrAppKeyGet
        FUNCTION ZDSecMgrAppKeyGet,021203H
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        PUBLIC ZDSecMgrAppKeyReq
        FUNCTION ZDSecMgrAppKeyReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 59, STACK
        PUBLIC ZDSecMgrAppKeyType
        PUBLIC ZDSecMgrAppKeyTypeSet
        FUNCTION ZDSecMgrAppKeyTypeSet,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrApsLinkKeyInit
        FUNCTION ZDSecMgrApsLinkKeyInit,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 40, STACK
        PUBLIC ZDSecMgrAssocDeviceAuth
        FUNCTION ZDSecMgrAssocDeviceAuth,0203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthNwkKey
        FUNCTION ZDSecMgrAuthNwkKey,021203H
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrAuthenticationCheck
        FUNCTION ZDSecMgrAuthenticationCheck,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrAuthenticationSet
        FUNCTION ZDSecMgrAuthenticationSet,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrClearNVKeyValues
        FUNCTION ZDSecMgrClearNVKeyValues,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        PUBLIC ZDSecMgrConfig
        FUNCTION ZDSecMgrConfig,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceJoin
        FUNCTION ZDSecMgrDeviceJoin,0a1203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDSecMgrDeviceJoinDirect
        FUNCTION ZDSecMgrDeviceJoinDirect,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 40, STACK
        PUBLIC ZDSecMgrDeviceJoinFwd
        FUNCTION ZDSecMgrDeviceJoinFwd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        PUBLIC ZDSecMgrDeviceNew
        FUNCTION ZDSecMgrDeviceNew,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceRemove
        FUNCTION ZDSecMgrDeviceRemove,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDSecMgrDeviceRemoveByExtAddr
        FUNCTION ZDSecMgrDeviceRemoveByExtAddr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrDeviceValidate
        FUNCTION ZDSecMgrDeviceValidate,021203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrDeviceValidateRM
        FUNCTION ZDSecMgrDeviceValidateRM,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrEntries
        PUBLIC ZDSecMgrEntryFree
        FUNCTION ZDSecMgrEntryFree,0a1203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC ZDSecMgrEntryInit
        FUNCTION ZDSecMgrEntryInit,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEntryLookup
        FUNCTION ZDSecMgrEntryLookup,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrEntryLookupAMI
        FUNCTION ZDSecMgrEntryLookupAMI,080203H
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEntryLookupAMIGetIndex
        FUNCTION ZDSecMgrEntryLookupAMIGetIndex,080203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrEntryLookupExt
        FUNCTION ZDSecMgrEntryLookupExt,0a1203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryLookupExtGetIndex
        FUNCTION ZDSecMgrEntryLookupExtGetIndex,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDSecMgrEntryNew
        FUNCTION ZDSecMgrEntryNew,080203H
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrExtAddrLookup
        FUNCTION ZDSecMgrExtAddrLookup,021203H
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrExtAddrStore
        FUNCTION ZDSecMgrExtAddrStore,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrGenerateKeyFromSeed
        FUNCTION ZDSecMgrGenerateKeyFromSeed,0a1203H
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 36, STACK
        PUBLIC ZDSecMgrGenerateRndKey
        FUNCTION ZDSecMgrGenerateRndKey,0a1203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDSecMgrGenerateSeed
        FUNCTION ZDSecMgrGenerateSeed,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 30, STACK
        PUBLIC ZDSecMgrInit
        FUNCTION ZDSecMgrInit,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDSecMgrInitNV
        FUNCTION ZDSecMgrInitNV,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDSecMgrInitNVKeyTables
        FUNCTION ZDSecMgrInitNVKeyTables,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDSecMgrNewDeviceEvent
        FUNCTION ZDSecMgrNewDeviceEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDSecMgrNwkKeyInit
        FUNCTION ZDSecMgrNwkKeyInit,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 66, STACK
        PUBLIC ZDSecMgrPermitJoining
        FUNCTION ZDSecMgrPermitJoining,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrPermitJoiningEnabled
        PUBLIC ZDSecMgrPermitJoiningTimed
        PUBLIC ZDSecMgrPermitJoiningTimeout
        FUNCTION ZDSecMgrPermitJoiningTimeout,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrReadKeyFromNv
        FUNCTION ZDSecMgrReadKeyFromNv,0a1203H
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC ZDSecMgrRemoveDeviceInd
        FUNCTION ZDSecMgrRemoveDeviceInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrRequestAppKey
        FUNCTION ZDSecMgrRequestAppKey,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        PUBLIC ZDSecMgrRequestKeyInd
        FUNCTION ZDSecMgrRequestKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ZDSecMgrRestoreFromNV,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDSecMgrSaveApsLinkKey
        FUNCTION ZDSecMgrSaveApsLinkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDSecMgrSaveTCLinkKey
        FUNCTION ZDSecMgrSaveTCLinkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC ZDSecMgrSendNwkKey
        FUNCTION ZDSecMgrSendNwkKey,0a1203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 50, STACK
        PUBLIC ZDSecMgrSetDefaultNV
        FUNCTION ZDSecMgrSetDefaultNV,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDSecMgrSwitchKeyInd
        FUNCTION ZDSecMgrSwitchKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDSecMgrSwitchNwkKey
        FUNCTION ZDSecMgrSwitchNwkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDSecMgrTCAuthenticated
        PUBLIC ZDSecMgrTCDataLoad
        FUNCTION ZDSecMgrTCDataLoad,0a1203H
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 27, STACK
        PUBLIC ZDSecMgrTCExtAddr
        PUBLIC ZDSecMgrTCExtAddrCheck
        FUNCTION ZDSecMgrTCExtAddrCheck,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDSecMgrTclkReq
        FUNCTION ZDSecMgrTclkReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 71, STACK
        PUBLIC ZDSecMgrTransportKeyInd
        FUNCTION ZDSecMgrTransportKeyInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        PUBLIC ZDSecMgrUpdateDeviceInd
        FUNCTION ZDSecMgrUpdateDeviceInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 42, STACK
        PUBLIC ZDSecMgrUpdateNwkKey
        FUNCTION ZDSecMgrUpdateNwkKey,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC ZDSecMgrUpdateTCAddress
        FUNCTION ZDSecMgrUpdateTCAddress,0a1203H
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDSecMgrVerifyKeyInd
        FUNCTION ZDSecMgrVerifyKeyInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ZDSecMgrWriteNV,0a1203H
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBWEAK __Constant_1
        PUBWEAK __Constant_3e9
        PUBWEAK __Constant_a
        PUBWEAK __Constant_b
        PUBLIC gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY
        PUBLIC gZDSECMGR_TC_DEVICE_IC_MAX
        PUBLIC gZDSECMGR_TC_DEVICE_MAX
        PUBLIC requestLinkKeyTimeout
        PUBLIC requestNewTrustCenterLinkKey
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSME_ConfirmKeyReq SYMBOL "APSME_ConfirmKeyReq"
`??APSME_ConfirmKeyReq::?relay` SYMBOL "?relay", APSME_ConfirmKeyReq
APSME_EraseICEntry  SYMBOL "APSME_EraseICEntry"
`??APSME_EraseICEntry::?relay` SYMBOL "?relay", APSME_EraseICEntry
APSME_GetRequest    SYMBOL "APSME_GetRequest"
`??APSME_GetRequest::?relay` SYMBOL "?relay", APSME_GetRequest
APSME_IsDistributedSecurity SYMBOL "APSME_IsDistributedSecurity"
`??APSME_IsDistributedSecurity::?relay` SYMBOL "?relay", APSME_IsDistributedSecurity
APSME_LookupExtAddr SYMBOL "APSME_LookupExtAddr"
`??APSME_LookupExtAddr::?relay` SYMBOL "?relay", APSME_LookupExtAddr
APSME_LookupNwkAddr SYMBOL "APSME_LookupNwkAddr"
`??APSME_LookupNwkAddr::?relay` SYMBOL "?relay", APSME_LookupNwkAddr
APSME_RemoveDeviceReq SYMBOL "APSME_RemoveDeviceReq"
`??APSME_RemoveDeviceReq::?relay` SYMBOL "?relay", APSME_RemoveDeviceReq
APSME_RequestKeyReq SYMBOL "APSME_RequestKeyReq"
`??APSME_RequestKeyReq::?relay` SYMBOL "?relay", APSME_RequestKeyReq
APSME_SearchTCLinkKeyEntry SYMBOL "APSME_SearchTCLinkKeyEntry"
`??APSME_SearchTCLinkKeyEntry::?relay` SYMBOL "?relay", APSME_SearchTCLinkKeyEntry
APSME_SecurityCM_CD SYMBOL "APSME_SecurityCM_CD"
`??APSME_SecurityCM_CD::?relay` SYMBOL "?relay", APSME_SecurityCM_CD
APSME_SetRequest    SYMBOL "APSME_SetRequest"
`??APSME_SetRequest::?relay` SYMBOL "?relay", APSME_SetRequest
APSME_SwitchKeyReq  SYMBOL "APSME_SwitchKeyReq"
`??APSME_SwitchKeyReq::?relay` SYMBOL "?relay", APSME_SwitchKeyReq
APSME_TransportKeyReq SYMBOL "APSME_TransportKeyReq"
`??APSME_TransportKeyReq::?relay` SYMBOL "?relay", APSME_TransportKeyReq
APSME_UpdateDeviceReq SYMBOL "APSME_UpdateDeviceReq"
`??APSME_UpdateDeviceReq::?relay` SYMBOL "?relay", APSME_UpdateDeviceReq
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
`??AddrMgrEntryGet::?relay` SYMBOL "?relay", AddrMgrEntryGet
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
`??AddrMgrEntryLookupNwk::?relay` SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
`??AddrMgrEntryRelease::?relay` SYMBOL "?relay", AddrMgrEntryRelease
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
`??AddrMgrEntryUpdate::?relay` SYMBOL "?relay", AddrMgrEntryUpdate
AddrMgrExtAddrLookup SYMBOL "AddrMgrExtAddrLookup"
`??AddrMgrExtAddrLookup::?relay` SYMBOL "?relay", AddrMgrExtAddrLookup
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
`??AddrMgrExtAddrValid::?relay` SYMBOL "?relay", AddrMgrExtAddrValid
AssocGetWithExt     SYMBOL "AssocGetWithExt"
`??AssocGetWithExt::?relay` SYMBOL "?relay", AssocGetWithExt
AssocGetWithShort   SYMBOL "AssocGetWithShort"
`??AssocGetWithShort::?relay` SYMBOL "?relay", AssocGetWithShort
AssocRemove         SYMBOL "AssocRemove"
`??AssocRemove::?relay` SYMBOL "?relay", AssocRemove
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_ReadNwkKeyInfo SYMBOL "NLME_ReadNwkKeyInfo"
`??NLME_ReadNwkKeyInfo::?relay` SYMBOL "?relay", NLME_ReadNwkKeyInfo
SSP_GetTrueRand     SYMBOL "SSP_GetTrueRand"
`??SSP_GetTrueRand::?relay` SYMBOL "?relay", SSP_GetTrueRand
SSP_Init            SYMBOL "SSP_Init"
`??SSP_Init::?relay` SYMBOL "?relay", SSP_Init
SSP_SwitchNwkKey    SYMBOL "SSP_SwitchNwkKey"
`??SSP_SwitchNwkKey::?relay` SYMBOL "?relay", SSP_SwitchNwkKey
SSP_UpdateNwkKey    SYMBOL "SSP_UpdateNwkKey"
`??SSP_UpdateNwkKey::?relay` SYMBOL "?relay", SSP_UpdateNwkKey
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
`??ZDApp_NVUpdate::?relay` SYMBOL "?relay", ZDApp_NVUpdate
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
`??ZDP_NwkAddrReq::?relay` SYMBOL "?relay", ZDP_NwkAddrReq
bdb_TCAddJoiningDevice SYMBOL "bdb_TCAddJoiningDevice"
`??bdb_TCAddJoiningDevice::?relay` SYMBOL "?relay", bdb_TCAddJoiningDevice
bdb_doTrustCenterRequireKeyExchange SYMBOL "bdb_doTrustCenterRequireKeyExchange"
`??bdb_doTrustCenterRequireKeyExchange::?relay` SYMBOL "?relay", bdb_doTrustCenterRequireKeyExchange
bdb_tcLinkKeyExchangeAttempt SYMBOL "bdb_tcLinkKeyExchangeAttempt"
`??bdb_tcLinkKeyExchangeAttempt::?relay` SYMBOL "?relay", bdb_tcLinkKeyExchangeAttempt
osal_isbufset       SYMBOL "osal_isbufset"
`??osal_isbufset::?relay` SYMBOL "?relay", osal_isbufset
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
`??zgReadStartupOptions::?relay` SYMBOL "?relay", zgReadStartupOptions
APSME_IsDefaultTCLK SYMBOL "APSME_IsDefaultTCLK"
`??APSME_IsDefaultTCLK::?relay` SYMBOL "?relay", APSME_IsDefaultTCLK
APSME_IsLinkKeyValid SYMBOL "APSME_IsLinkKeyValid"
`??APSME_IsLinkKeyValid::?relay` SYMBOL "?relay", APSME_IsLinkKeyValid
APSME_KeyFwdToChild SYMBOL "APSME_KeyFwdToChild"
`??APSME_KeyFwdToChild::?relay` SYMBOL "?relay", APSME_KeyFwdToChild
APSME_LinkKeyNVIdGet SYMBOL "APSME_LinkKeyNVIdGet"
`??APSME_LinkKeyNVIdGet::?relay` SYMBOL "?relay", APSME_LinkKeyNVIdGet
APSME_LinkKeySet    SYMBOL "APSME_LinkKeySet"
`??APSME_LinkKeySet::?relay` SYMBOL "?relay", APSME_LinkKeySet
APSME_TCLinkKeyInit SYMBOL "APSME_TCLinkKeyInit"
`??APSME_TCLinkKeyInit::?relay` SYMBOL "?relay", APSME_TCLinkKeyInit
APSME_TCLinkKeyLoad SYMBOL "APSME_TCLinkKeyLoad"
`??APSME_TCLinkKeyLoad::?relay` SYMBOL "?relay", APSME_TCLinkKeyLoad
APSME_TCLinkKeySync SYMBOL "APSME_TCLinkKeySync"
`??APSME_TCLinkKeySync::?relay` SYMBOL "?relay", APSME_TCLinkKeySync
ZDSecMgrAPSRemove   SYMBOL "ZDSecMgrAPSRemove"
`??ZDSecMgrAPSRemove::?relay` SYMBOL "?relay", ZDSecMgrAPSRemove
ZDSecMgrAddLinkKey  SYMBOL "ZDSecMgrAddLinkKey"
`??ZDSecMgrAddLinkKey::?relay` SYMBOL "?relay", ZDSecMgrAddLinkKey
ZDSecMgrAddrClear   SYMBOL "ZDSecMgrAddrClear"
`??ZDSecMgrAddrClear::?relay` SYMBOL "?relay", ZDSecMgrAddrClear
ZDSecMgrAddrStore   SYMBOL "ZDSecMgrAddrStore"
`??ZDSecMgrAddrStore::?relay` SYMBOL "?relay", ZDSecMgrAddrStore
ZDSecMgrAppConfKeyReq SYMBOL "ZDSecMgrAppConfKeyReq"
`??ZDSecMgrAppConfKeyReq::?relay` SYMBOL "?relay", ZDSecMgrAppConfKeyReq
ZDSecMgrAppKeyGet   SYMBOL "ZDSecMgrAppKeyGet"
`??ZDSecMgrAppKeyGet::?relay` SYMBOL "?relay", ZDSecMgrAppKeyGet
ZDSecMgrAppKeyReq   SYMBOL "ZDSecMgrAppKeyReq"
`??ZDSecMgrAppKeyReq::?relay` SYMBOL "?relay", ZDSecMgrAppKeyReq
ZDSecMgrAppKeyTypeSet SYMBOL "ZDSecMgrAppKeyTypeSet"
`??ZDSecMgrAppKeyTypeSet::?relay` SYMBOL "?relay", ZDSecMgrAppKeyTypeSet
ZDSecMgrApsLinkKeyInit SYMBOL "ZDSecMgrApsLinkKeyInit"
`??ZDSecMgrApsLinkKeyInit::?relay` SYMBOL "?relay", ZDSecMgrApsLinkKeyInit
ZDSecMgrAssocDeviceAuth SYMBOL "ZDSecMgrAssocDeviceAuth"
`??ZDSecMgrAssocDeviceAuth::?relay` SYMBOL "?relay", ZDSecMgrAssocDeviceAuth
ZDSecMgrAuthNwkKey  SYMBOL "ZDSecMgrAuthNwkKey"
`??ZDSecMgrAuthNwkKey::?relay` SYMBOL "?relay", ZDSecMgrAuthNwkKey
ZDSecMgrAuthenticationCheck SYMBOL "ZDSecMgrAuthenticationCheck"
`??ZDSecMgrAuthenticationCheck::?relay` SYMBOL "?relay", ZDSecMgrAuthenticationCheck
ZDSecMgrAuthenticationSet SYMBOL "ZDSecMgrAuthenticationSet"
`??ZDSecMgrAuthenticationSet::?relay` SYMBOL "?relay", ZDSecMgrAuthenticationSet
ZDSecMgrClearNVKeyValues SYMBOL "ZDSecMgrClearNVKeyValues"
`??ZDSecMgrClearNVKeyValues::?relay` SYMBOL "?relay", ZDSecMgrClearNVKeyValues
ZDSecMgrConfig      SYMBOL "ZDSecMgrConfig"
`??ZDSecMgrConfig::?relay` SYMBOL "?relay", ZDSecMgrConfig
ZDSecMgrDeviceJoin  SYMBOL "ZDSecMgrDeviceJoin"
`??ZDSecMgrDeviceJoin::?relay` SYMBOL "?relay", ZDSecMgrDeviceJoin
ZDSecMgrDeviceJoinDirect SYMBOL "ZDSecMgrDeviceJoinDirect"
`??ZDSecMgrDeviceJoinDirect::?relay` SYMBOL "?relay", ZDSecMgrDeviceJoinDirect
ZDSecMgrDeviceJoinFwd SYMBOL "ZDSecMgrDeviceJoinFwd"
`??ZDSecMgrDeviceJoinFwd::?relay` SYMBOL "?relay", ZDSecMgrDeviceJoinFwd
ZDSecMgrDeviceNew   SYMBOL "ZDSecMgrDeviceNew"
`??ZDSecMgrDeviceNew::?relay` SYMBOL "?relay", ZDSecMgrDeviceNew
ZDSecMgrDeviceRemove SYMBOL "ZDSecMgrDeviceRemove"
`??ZDSecMgrDeviceRemove::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemove
ZDSecMgrDeviceRemoveByExtAddr SYMBOL "ZDSecMgrDeviceRemoveByExtAddr"
`??ZDSecMgrDeviceRemoveByExtAddr::?relay` SYMBOL "?relay", ZDSecMgrDeviceRemoveByExtAddr
ZDSecMgrDeviceValidate SYMBOL "ZDSecMgrDeviceValidate"
`??ZDSecMgrDeviceValidate::?relay` SYMBOL "?relay", ZDSecMgrDeviceValidate
ZDSecMgrDeviceValidateRM SYMBOL "ZDSecMgrDeviceValidateRM"
`??ZDSecMgrDeviceValidateRM::?relay` SYMBOL "?relay", ZDSecMgrDeviceValidateRM
ZDSecMgrEntryFree   SYMBOL "ZDSecMgrEntryFree"
`??ZDSecMgrEntryFree::?relay` SYMBOL "?relay", ZDSecMgrEntryFree
ZDSecMgrEntryInit   SYMBOL "ZDSecMgrEntryInit"
`??ZDSecMgrEntryInit::?relay` SYMBOL "?relay", ZDSecMgrEntryInit
ZDSecMgrEntryLookup SYMBOL "ZDSecMgrEntryLookup"
`??ZDSecMgrEntryLookup::?relay` SYMBOL "?relay", ZDSecMgrEntryLookup
ZDSecMgrEntryLookupAMI SYMBOL "ZDSecMgrEntryLookupAMI"
`??ZDSecMgrEntryLookupAMI::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupAMI
ZDSecMgrEntryLookupAMIGetIndex SYMBOL "ZDSecMgrEntryLookupAMIGetIndex"
`??ZDSecMgrEntryLookupAMIGetIndex::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupAMIGetIndex
ZDSecMgrEntryLookupExt SYMBOL "ZDSecMgrEntryLookupExt"
`??ZDSecMgrEntryLookupExt::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupExt
ZDSecMgrEntryLookupExtGetIndex SYMBOL "ZDSecMgrEntryLookupExtGetIndex"
`??ZDSecMgrEntryLookupExtGetIndex::?relay` SYMBOL "?relay", ZDSecMgrEntryLookupExtGetIndex
ZDSecMgrEntryNew    SYMBOL "ZDSecMgrEntryNew"
`??ZDSecMgrEntryNew::?relay` SYMBOL "?relay", ZDSecMgrEntryNew
ZDSecMgrExtAddrLookup SYMBOL "ZDSecMgrExtAddrLookup"
`??ZDSecMgrExtAddrLookup::?relay` SYMBOL "?relay", ZDSecMgrExtAddrLookup
ZDSecMgrExtAddrStore SYMBOL "ZDSecMgrExtAddrStore"
`??ZDSecMgrExtAddrStore::?relay` SYMBOL "?relay", ZDSecMgrExtAddrStore
ZDSecMgrGenerateKeyFromSeed SYMBOL "ZDSecMgrGenerateKeyFromSeed"
`??ZDSecMgrGenerateKeyFromSeed::?relay` SYMBOL "?relay", ZDSecMgrGenerateKeyFromSeed
ZDSecMgrGenerateRndKey SYMBOL "ZDSecMgrGenerateRndKey"
`??ZDSecMgrGenerateRndKey::?relay` SYMBOL "?relay", ZDSecMgrGenerateRndKey
ZDSecMgrGenerateSeed SYMBOL "ZDSecMgrGenerateSeed"
`??ZDSecMgrGenerateSeed::?relay` SYMBOL "?relay", ZDSecMgrGenerateSeed
ZDSecMgrInit        SYMBOL "ZDSecMgrInit"
`??ZDSecMgrInit::?relay` SYMBOL "?relay", ZDSecMgrInit
ZDSecMgrInitNV      SYMBOL "ZDSecMgrInitNV"
`??ZDSecMgrInitNV::?relay` SYMBOL "?relay", ZDSecMgrInitNV
ZDSecMgrInitNVKeyTables SYMBOL "ZDSecMgrInitNVKeyTables"
`??ZDSecMgrInitNVKeyTables::?relay` SYMBOL "?relay", ZDSecMgrInitNVKeyTables
ZDSecMgrNewDeviceEvent SYMBOL "ZDSecMgrNewDeviceEvent"
`??ZDSecMgrNewDeviceEvent::?relay` SYMBOL "?relay", ZDSecMgrNewDeviceEvent
ZDSecMgrNwkKeyInit  SYMBOL "ZDSecMgrNwkKeyInit"
`??ZDSecMgrNwkKeyInit::?relay` SYMBOL "?relay", ZDSecMgrNwkKeyInit
ZDSecMgrPermitJoining SYMBOL "ZDSecMgrPermitJoining"
`??ZDSecMgrPermitJoining::?relay` SYMBOL "?relay", ZDSecMgrPermitJoining
ZDSecMgrPermitJoiningTimeout SYMBOL "ZDSecMgrPermitJoiningTimeout"
`??ZDSecMgrPermitJoiningTimeout::?relay` SYMBOL "?relay", ZDSecMgrPermitJoiningTimeout
ZDSecMgrReadKeyFromNv SYMBOL "ZDSecMgrReadKeyFromNv"
`??ZDSecMgrReadKeyFromNv::?relay` SYMBOL "?relay", ZDSecMgrReadKeyFromNv
ZDSecMgrRemoveDeviceInd SYMBOL "ZDSecMgrRemoveDeviceInd"
`??ZDSecMgrRemoveDeviceInd::?relay` SYMBOL "?relay", ZDSecMgrRemoveDeviceInd
ZDSecMgrRequestAppKey SYMBOL "ZDSecMgrRequestAppKey"
`??ZDSecMgrRequestAppKey::?relay` SYMBOL "?relay", ZDSecMgrRequestAppKey
ZDSecMgrRequestKeyInd SYMBOL "ZDSecMgrRequestKeyInd"
`??ZDSecMgrRequestKeyInd::?relay` SYMBOL "?relay", ZDSecMgrRequestKeyInd
ZDSecMgrSaveApsLinkKey SYMBOL "ZDSecMgrSaveApsLinkKey"
`??ZDSecMgrSaveApsLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveApsLinkKey
ZDSecMgrSaveTCLinkKey SYMBOL "ZDSecMgrSaveTCLinkKey"
`??ZDSecMgrSaveTCLinkKey::?relay` SYMBOL "?relay", ZDSecMgrSaveTCLinkKey
ZDSecMgrSendNwkKey  SYMBOL "ZDSecMgrSendNwkKey"
`??ZDSecMgrSendNwkKey::?relay` SYMBOL "?relay", ZDSecMgrSendNwkKey
ZDSecMgrSetDefaultNV SYMBOL "ZDSecMgrSetDefaultNV"
`??ZDSecMgrSetDefaultNV::?relay` SYMBOL "?relay", ZDSecMgrSetDefaultNV
ZDSecMgrSwitchKeyInd SYMBOL "ZDSecMgrSwitchKeyInd"
`??ZDSecMgrSwitchKeyInd::?relay` SYMBOL "?relay", ZDSecMgrSwitchKeyInd
ZDSecMgrSwitchNwkKey SYMBOL "ZDSecMgrSwitchNwkKey"
`??ZDSecMgrSwitchNwkKey::?relay` SYMBOL "?relay", ZDSecMgrSwitchNwkKey
ZDSecMgrTCDataLoad  SYMBOL "ZDSecMgrTCDataLoad"
`??ZDSecMgrTCDataLoad::?relay` SYMBOL "?relay", ZDSecMgrTCDataLoad
ZDSecMgrTCExtAddrCheck SYMBOL "ZDSecMgrTCExtAddrCheck"
`??ZDSecMgrTCExtAddrCheck::?relay` SYMBOL "?relay", ZDSecMgrTCExtAddrCheck
ZDSecMgrTclkReq     SYMBOL "ZDSecMgrTclkReq"
`??ZDSecMgrTclkReq::?relay` SYMBOL "?relay", ZDSecMgrTclkReq
ZDSecMgrTransportKeyInd SYMBOL "ZDSecMgrTransportKeyInd"
`??ZDSecMgrTransportKeyInd::?relay` SYMBOL "?relay", ZDSecMgrTransportKeyInd
ZDSecMgrUpdateDeviceInd SYMBOL "ZDSecMgrUpdateDeviceInd"
`??ZDSecMgrUpdateDeviceInd::?relay` SYMBOL "?relay", ZDSecMgrUpdateDeviceInd
ZDSecMgrUpdateNwkKey SYMBOL "ZDSecMgrUpdateNwkKey"
`??ZDSecMgrUpdateNwkKey::?relay` SYMBOL "?relay", ZDSecMgrUpdateNwkKey
ZDSecMgrUpdateTCAddress SYMBOL "ZDSecMgrUpdateTCAddress"
`??ZDSecMgrUpdateTCAddress::?relay` SYMBOL "?relay", ZDSecMgrUpdateTCAddress
ZDSecMgrVerifyKeyInd SYMBOL "ZDSecMgrVerifyKeyInd"
`??ZDSecMgrVerifyKeyInd::?relay` SYMBOL "?relay", ZDSecMgrVerifyKeyInd

        EXTERN `??APSME_ConfirmKeyReq::?relay`
        FUNCTION `??APSME_ConfirmKeyReq::?relay`,00H
        EXTERN `??APSME_EraseICEntry::?relay`
        FUNCTION `??APSME_EraseICEntry::?relay`,00H
        EXTERN `??APSME_GetRequest::?relay`
        FUNCTION `??APSME_GetRequest::?relay`,00H
        EXTERN `??APSME_IsDistributedSecurity::?relay`
        FUNCTION `??APSME_IsDistributedSecurity::?relay`,00H
        EXTERN `??APSME_LookupExtAddr::?relay`
        FUNCTION `??APSME_LookupExtAddr::?relay`,00H
        EXTERN `??APSME_LookupNwkAddr::?relay`
        FUNCTION `??APSME_LookupNwkAddr::?relay`,00H
        EXTERN `??APSME_RemoveDeviceReq::?relay`
        FUNCTION `??APSME_RemoveDeviceReq::?relay`,00H
        EXTERN `??APSME_RequestKeyReq::?relay`
        FUNCTION `??APSME_RequestKeyReq::?relay`,00H
        EXTERN `??APSME_SearchTCLinkKeyEntry::?relay`
        FUNCTION `??APSME_SearchTCLinkKeyEntry::?relay`,00H
        EXTERN `??APSME_SecurityCM_CD::?relay`
        FUNCTION `??APSME_SecurityCM_CD::?relay`,00H
        EXTERN `??APSME_SetRequest::?relay`
        FUNCTION `??APSME_SetRequest::?relay`,00H
        EXTERN `??APSME_SwitchKeyReq::?relay`
        FUNCTION `??APSME_SwitchKeyReq::?relay`,00H
        EXTERN `??APSME_TransportKeyReq::?relay`
        FUNCTION `??APSME_TransportKeyReq::?relay`,00H
        EXTERN `??APSME_UpdateDeviceReq::?relay`
        FUNCTION `??APSME_UpdateDeviceReq::?relay`,00H
        EXTERN `??AddrMgrEntryGet::?relay`
        FUNCTION `??AddrMgrEntryGet::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryLookupNwk::?relay`
        FUNCTION `??AddrMgrEntryLookupNwk::?relay`,00H
        EXTERN `??AddrMgrEntryRelease::?relay`
        FUNCTION `??AddrMgrEntryRelease::?relay`,00H
        EXTERN `??AddrMgrEntryUpdate::?relay`
        FUNCTION `??AddrMgrEntryUpdate::?relay`,00H
        EXTERN `??AddrMgrExtAddrLookup::?relay`
        FUNCTION `??AddrMgrExtAddrLookup::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??AddrMgrExtAddrValid::?relay`
        FUNCTION `??AddrMgrExtAddrValid::?relay`,00H
        EXTERN `??AssocGetWithExt::?relay`
        FUNCTION `??AssocGetWithExt::?relay`,00H
        EXTERN `??AssocGetWithShort::?relay`
        FUNCTION `??AssocGetWithShort::?relay`,00H
        EXTERN `??AssocRemove::?relay`
        FUNCTION `??AssocRemove::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_ReadNwkKeyInfo::?relay`
        FUNCTION `??NLME_ReadNwkKeyInfo::?relay`,00H
        EXTERN `??SSP_GetTrueRand::?relay`
        FUNCTION `??SSP_GetTrueRand::?relay`,00H
        EXTERN `??SSP_Init::?relay`
        FUNCTION `??SSP_Init::?relay`,00H
        EXTERN `??SSP_SwitchNwkKey::?relay`
        FUNCTION `??SSP_SwitchNwkKey::?relay`,00H
        EXTERN `??SSP_UpdateNwkKey::?relay`
        FUNCTION `??SSP_UpdateNwkKey::?relay`,00H
        EXTERN `??ZDApp_NVUpdate::?relay`
        FUNCTION `??ZDApp_NVUpdate::?relay`,00H
        EXTERN `??ZDP_NwkAddrReq::?relay`
        FUNCTION `??ZDP_NwkAddrReq::?relay`,00H
        EXTERN `??bdb_TCAddJoiningDevice::?relay`
        FUNCTION `??bdb_TCAddJoiningDevice::?relay`,00H
        EXTERN `??bdb_doTrustCenterRequireKeyExchange::?relay`
        FUNCTION `??bdb_doTrustCenterRequireKeyExchange::?relay`,00H
        EXTERN `??bdb_tcLinkKeyExchangeAttempt::?relay`
        FUNCTION `??bdb_tcLinkKeyExchangeAttempt::?relay`,00H
        EXTERN `??osal_isbufset::?relay`
        FUNCTION `??osal_isbufset::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN `??zgReadStartupOptions::?relay`
        FUNCTION `??zgReadStartupOptions::?relay`,00H
        EXTERN APSME_ConfirmKeyReq
        FUNCTION APSME_ConfirmKeyReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 6, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_EraseICEntry
        FUNCTION APSME_EraseICEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_GetRequest
        FUNCTION APSME_GetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_IsDistributedSecurity
        FUNCTION APSME_IsDistributedSecurity,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupExtAddr
        FUNCTION APSME_LookupExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupNwkAddr
        FUNCTION APSME_LookupNwkAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RemoveDeviceReq
        FUNCTION APSME_RemoveDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_RequestKeyReq
        FUNCTION APSME_RequestKeyReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SearchTCLinkKeyEntry
        FUNCTION APSME_SearchTCLinkKeyEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SecurityCM_CD
        FUNCTION APSME_SecurityCM_CD,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SetRequest
        FUNCTION APSME_SetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_SwitchKeyReq
        FUNCTION APSME_SwitchKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_TransportKeyReq
        FUNCTION APSME_TransportKeyReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UpdateDeviceReq
        FUNCTION APSME_UpdateDeviceReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrLookup
        FUNCTION AddrMgrExtAddrLookup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithExt
        FUNCTION AssocGetWithExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithShort
        FUNCTION AssocGetWithShort,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocRemove
        FUNCTION AssocRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_ReadNwkKeyInfo
        FUNCTION NLME_ReadNwkKeyInfo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_GetTrueRand
        FUNCTION SSP_GetTrueRand,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_Init
        FUNCTION SSP_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_SwitchNwkKey
        FUNCTION SSP_SwitchNwkKey,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SSP_UpdateNwkKey
        FUNCTION SSP_UpdateNwkKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDAppTaskID
        EXTERN ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN bdb_TCAddJoiningDevice
        FUNCTION bdb_TCAddJoiningDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_doTrustCenterRequireKeyExchange
        FUNCTION bdb_doTrustCenterRequireKeyExchange,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bdb_tcLinkKeyExchangeAttempt
        FUNCTION bdb_tcLinkKeyExchangeAttempt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN defaultTCLinkKey
        EXTERN devState
        EXTERN gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        EXTERN osal_isbufset
        FUNCTION osal_isbufset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zdoCBFunc
        EXTERN zgApsLinkKeyType
        EXTERN zgApsTrustCenterAddr
        EXTERN zgDeviceLogicalType
        EXTERN zgPreConfigKeys
        EXTERN zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgSecurePermitJoin
        EXTERN zgSwitchCoordKey
        EXTERN zgSwitchCoordKeyIndex

// D:\fuzzing-coordinator-response-collection\Components\stack\zdo\ZDSecMgr.c
//    1 /******************************************************************************
//    2   Filename:       ZDSecMgr.c
//    3   Revised:        $Date: 2014-06-05 11:25:00 -0700 (Thu, 05 Jun 2014) $
//    4   Revision:       $Revision: 38833 $
//    5 
//    6   Description:    The ZigBee Device Security Manager.
//    7 
//    8 
//    9   Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 ******************************************************************************/
//   39 
//   40 #ifdef __cplusplus
//   41 extern "C"
//   42 {
//   43 #endif
//   44 
//   45 /******************************************************************************
//   46  * INCLUDES
//   47  */
//   48 #include "ZComDef.h"
//   49 #include "OSAL.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "ZGlobals.h"
//   52 #include "ssp.h"
//   53 #include "nwk_globals.h"
//   54 #include "nwk.h"
//   55 #include "NLMEDE.h"
//   56 #include "AddrMgr.h"
//   57 #include "AssocList.h"
//   58 #include "APSMEDE.h"
//   59 #include "ZDConfig.h"
//   60 #include "ZDSecMgr.h"
//   61   
//   62 #include "bdb.h"
//   63 #include "bdb_interface.h"
//   64 
//   65 /******************************************************************************
//   66  * CONSTANTS
//   67  */
//   68 // maximum number of devices managed by this Security Manager
//   69 #if !defined ( ZDSECMGR_DEVICE_MAX )
//   70   #define ZDSECMGR_DEVICE_MAX 3
//   71 #endif
//   72 
//   73 // maximum number of LINK keys this device may store
//   74 #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
//   75 
//   76 // total number of stored devices
//   77 #if !defined ( ZDSECMGR_STORED_DEVICES )
//   78   #define ZDSECMGR_STORED_DEVICES 3
//   79 #endif
//   80 
//   81 // Joining Device Policies: r21 spec 4.9.1
//   82 // This boolean indicates whether the device will request a new Trust Center Link key after joining.
//   83 // TC link key cannot be requested if join is performed on distributed nwk

        RSEG XDATA_I:XDATA:NOROOT(0)
//   84 bool  requestNewTrustCenterLinkKey = TRUE;  
requestNewTrustCenterLinkKey:
        DATA8
        DS 1
        REQUIRE `?<Initializer for requestNewTrustCenterLinkKey`
        REQUIRE __INIT_XDATA_I
//   85 //This integer indicates the maximum time in seconds that a device will wait for a response to a 
//   86 //request for a Trust Center link key.

        RSEG XDATA_I:XDATA:NOROOT(0)
//   87 uint32  requestLinkKeyTimeout = BDBC_TC_LINK_KEY_EXANGE_TIMEOUT;
requestLinkKeyTimeout:
        DATA32
        DS 4
        REQUIRE `?<Initializer for requestLinkKeyTimeout>`
        REQUIRE __INIT_XDATA_I
//   88  //bool acceptNewUnsolicitedApplicationLinkKey;   
//   89 
//   90 // APSME Stub Implementations
//   91 #define ZDSecMgrLinkKeySet       APSME_LinkKeySet
//   92 #define ZDSecMgrLinkKeyNVIdGet   APSME_LinkKeyNVIdGet
//   93 #define ZDSecMgrKeyFwdToChild    APSME_KeyFwdToChild
//   94 #define ZDSecMgrIsLinkKeyValid   APSME_IsLinkKeyValid
//   95 
//   96 
//   97 
//   98 /******************************************************************************
//   99  * TYPEDEFS
//  100  */
//  101 typedef struct
//  102 {
//  103   uint16            ami;
//  104   uint16            keyNvId;   // index to the Link Key table in NV
//  105   ZDSecMgr_Authentication_Option authenticateOption;
//  106 } ZDSecMgrEntry_t;
//  107 
//  108 typedef struct
//  109 {
//  110   uint16          nwkAddr;
//  111   uint8*          extAddr;
//  112   uint16          parentAddr;
//  113   uint8           secure;
//  114   uint8           devStatus;
//  115 } ZDSecMgrDevice_t;
//  116 
//  117 /******************************************************************************
//  118  * EXTERNAL VARIABLES
//  119  */
//  120 extern CONST uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
//  121 extern pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
//  122 
//  123 
//  124 /******************************************************************************
//  125  * EXTERNAL FUNCTIONS
//  126  */
//  127 extern void   ZDApp_ResetTimerCancel( void );
//  128 /******************************************************************************
//  129  * LOCAL VARIABLES
//  130  */
//  131 #if 0 // Taken out because the following functionality is only used for test
//  132       // purpose. A more efficient (above) way is used. It can be put
//  133       // back in if customers request for a white/black list feature.
//  134 uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
//  135 {
//  136   { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  137   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
//  138   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
//  139 };
//  140 #endif
//  141 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  142 uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
ZDSecMgrTCExtAddr:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  143   { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
//  144 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 uint8 ZDSecMgrTCAuthenticated = FALSE;
ZDSecMgrTCAuthenticated:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  146 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  147 ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
ZDSecMgrEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  148 
//  149 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
//  150 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  151 uint8 ZDSecMgrPermitJoiningEnabled;
ZDSecMgrPermitJoiningEnabled:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  152 uint8 ZDSecMgrPermitJoiningTimed;
ZDSecMgrPermitJoiningTimed:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  153 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  154 APSME_TCLKDevEntry_t TrustCenterLinkKey;
TrustCenterLinkKey:
        DS 19
        REQUIRE __INIT_XDATA_Z
//  155 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  156 APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
ApsLinkKeyFrmCntr:
        DS 27
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  157 APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
TCLinkKeyFrmCntr:
        DS 27
        REQUIRE __INIT_XDATA_Z
//  158 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  159  CONST uint16 gZDSECMGR_TC_DEVICE_MAX = ZDSECMGR_TC_DEVICE_MAX;
gZDSECMGR_TC_DEVICE_MAX:
        DW 3

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  160  CONST uint16 gZDSECMGR_TC_DEVICE_IC_MAX = ZDSECMGR_TC_DEVICE_IC_MAX;
gZDSECMGR_TC_DEVICE_IC_MAX:
        DW 12

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  161  CONST uint8  gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY = ZDSECMGR_TC_ATTEMPT_DEFAULT_KEY;
gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY:
        DB 0
//  162 /******************************************************************************
//  163  * PRIVATE FUNCTIONS
//  164  *
//  165  *   ZDSecMgrAddrStore
//  166  *   ZDSecMgrExtAddrStore
//  167  *   ZDSecMgrExtAddrLookup
//  168  *   ZDSecMgrEntryInit
//  169  *   ZDSecMgrEntryLookup
//  170  *   ZDSecMgrEntryLookupAMI
//  171  *   ZDSecMgrEntryLookupExt
//  172  *   ZDSecMgrEntryLookupExtGetIndex
//  173  *   ZDSecMgrEntryFree
//  174  *   ZDSecMgrEntryNew
//  175  *   ZDSecMgrAppKeyGet
//  176  *   ZDSecMgrAppKeyReq
//  177  *   ZDSecMgrTclkReq
//  178  *   ZDSecMgrAppConfKeyReq 
//  179  *   ZDSecMgrSendNwkKey
//  180  *   ZDSecMgrDeviceRemove
//  181  *   ZDSecMgrDeviceValidateRM
//  182  *   ZDSecMgrDeviceValidate
//  183  *   ZDSecMgrDeviceJoin
//  184  *   ZDSecMgrDeviceJoinDirect
//  185  *   ZDSecMgrDeviceJoinFwd
//  186  *   ZDSecMgrDeviceNew
//  187  *   ZDSecMgrAssocDeviceAuth
//  188  *   ZDSecMgrAuthNwkKey
//  189  *   APSME_TCLinkKeyInit
//  190  *   APSME_IsDefaultTCLK
//  191  */
//  192 
//  193 //-----------------------------------------------------------------------------
//  194 // address management
//  195 //-----------------------------------------------------------------------------
//  196 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  197 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
//  198 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
//  199 
//  200 //-----------------------------------------------------------------------------
//  201 // Trust Center management
//  202 //-----------------------------------------------------------------------------
//  203 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
//  204 void ZDSecMgrTCDataLoad( uint8* extAddr );
//  205 
//  206 //-----------------------------------------------------------------------------
//  207 // entry data
//  208 //-----------------------------------------------------------------------------
//  209 void ZDSecMgrEntryInit(uint8 state);
//  210 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
//  211 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
//  212 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  213 ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
//  214 ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex );
//  215 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
//  216 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
//  217 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
//  218 void ZDSecMgrApsLinkKeyInit(uint8 setDefault);
//  219 #if defined ( NV_RESTORE )
//  220 static void ZDSecMgrWriteNV(void);
//  221 static void ZDSecMgrRestoreFromNV(void);
//  222 static void ZDSecMgrUpdateNV( uint16 index );
//  223 #endif
//  224 
//  225 //-----------------------------------------------------------------------------
//  226 // key support
//  227 //-----------------------------------------------------------------------------
//  228 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
//  229                              uint8*  initExtAddr,
//  230                              uint16  partNwkAddr,
//  231                              uint8*  partExtAddr,
//  232                              uint8** key,
//  233                              uint8*  keyType );
//  234 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
//  235 void ZDSecMgrTclkReq( ZDO_RequestKeyInd_t* ind );
//  236 void ZDSecMgrAppConfKeyReq( ZDO_VerifyKeyInd_t* ind );
//  237 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
//  238 void ZDSecMgrNwkKeyInit(uint8 setDefault);
//  239 
//  240 //-----------------------------------------------------------------------------
//  241 // device management
//  242 //-----------------------------------------------------------------------------
//  243 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
//  244 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
//  245 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
//  246 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
//  247 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
//  248 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
//  249 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
//  250 
//  251 //-----------------------------------------------------------------------------
//  252 // association management
//  253 //-----------------------------------------------------------------------------
//  254 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
//  255 
//  256 //-----------------------------------------------------------------------------
//  257 // authentication management
//  258 //-----------------------------------------------------------------------------
//  259 void ZDSecMgrAuthNwkKey( void );
//  260 
//  261 //-----------------------------------------------------------------------------
//  262 // APSME function
//  263 //-----------------------------------------------------------------------------
//  264 void APSME_TCLinkKeyInit( uint8 setDefault );
//  265 uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
//  266 void ZDSecMgrGenerateSeed(uint8 setDefault );
//  267 void ZDSecMgrGenerateKeyFromSeed(uint8 *extAddr, uint8 shift, uint8 *key);
//  268 /******************************************************************************
//  269  * @fn          ZDSecMgrAddrStore
//  270  *
//  271  * @brief       Store device addresses.
//  272  *
//  273  * @param       nwkAddr - [in] NWK address
//  274  * @param       extAddr - [in] EXT address
//  275  * @param       ami     - [out] Address Manager index
//  276  *
//  277  * @return      ZStatus_t
//  278  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  279 ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrAddrStore:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
        CODE
//  280 {
        FUNCALL ZDSecMgrAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  281   ZStatus_t      status;
//  282   AddrMgrEntry_t entry;
//  283 
//  284 
//  285   // add entry
//  286   entry.user    = ADDRMGR_USER_SECURITY;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x2
        MOVX      @DPTR,A
//  287   entry.nwkAddr = nwkAddr;
        DEC       A
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
//  288   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_10:
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
//  289 
//  290   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_38:
        LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDSecMgrAddrStore_0
//  291   {
//  292     // return successful results
//  293     *ami   = entry.index;
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
//  294     status = ZSuccess;
//  295   }
??CrossCallReturnLabel_73:
        SJMP      ??CrossCallReturnLabel_13
//  296   else
//  297   {
//  298     // return failed results
//  299     *ami   = entry.index;
??ZDSecMgrAddrStore_0:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
//  300     status = ZNwkUnknownDevice;
//  301   }
//  302 
//  303   return status;
??CrossCallReturnLabel_13:
        LJMP      ?Subroutine0 & 0xFFFF
//  304 }
          CFI EndBlock cfiBlock0
//  305 
//  306 /******************************************************************************
//  307  * @fn          ZDSecMgrExtAddrStore
//  308  *
//  309  * @brief       Store EXT address.
//  310  *
//  311  * @param       extAddr - [in] EXT address
//  312  * @param       ami     - [out] Address Manager index
//  313  *
//  314  * @return      ZStatus_t
//  315  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  316 ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrStore:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDSecMgrExtAddrStore
        CODE
//  317 {
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrStore, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  318   ZStatus_t      status;
//  319   AddrMgrEntry_t entry;
//  320 
//  321 
//  322   // add entry
//  323   entry.user    = ADDRMGR_USER_SECURITY;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x2
        MOVX      @DPTR,A
//  324   entry.nwkAddr = nwkAddr;
        DEC       A
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
//  325   AddrMgrExtAddrSet( entry.extAddr, extAddr );
??CrossCallReturnLabel_11:
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine36 & 0xFFFF
//  326 
//  327   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
??CrossCallReturnLabel_39:
        LCALL     `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDSecMgrExtAddrStore_0
//  328   {
//  329     // return successful results
//  330     *ami   = entry.index;
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
//  331     status = ZSuccess;
//  332   }
??CrossCallReturnLabel_74:
        SJMP      ??CrossCallReturnLabel_14
//  333   else
//  334   {
//  335     // return failed results
//  336     *ami   = entry.index;
??ZDSecMgrExtAddrStore_0:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
//  337     status = ZNwkUnknownDevice;
//  338   }
//  339 
//  340   return status;
??CrossCallReturnLabel_14:
        LJMP      ?Subroutine0 & 0xFFFF
//  341 }
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function ZDSecMgrExtAddrStore
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond3) CFA_SP SP+-2
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        ; Setup parameters for call to function AddrMgrEntryUpdate
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        RET
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function ZDSecMgrExtAddrStore
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_194:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_161:
        MOV       R1,#-0x38
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function ZDSecMgrExtAddrStore
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function ZDSecMgrDeviceRemove
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        ; Setup parameters for call to function AddrMgrExtAddrSet
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV       A,#0x3
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12
//  342 
//  343 /******************************************************************************
//  344  * @fn          ZDSecMgrExtAddrLookup
//  345  *
//  346  * @brief       Lookup index for specified EXT address.
//  347  *
//  348  * @param       extAddr - [in] EXT address
//  349  * @param       ami     - [out] Address Manager index
//  350  *
//  351  * @return      ZStatus_t
//  352  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  353 ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
ZDSecMgrExtAddrLookup:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function ZDSecMgrExtAddrLookup
        CODE
//  354 {
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrExtAddrLookup, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  355   ZStatus_t      status;
//  356   AddrMgrEntry_t entry;
//  357 
//  358 
//  359   // lookup entry
//  360   entry.user = ADDRMGR_USER_SECURITY;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x2
        MOVX      @DPTR,A
//  361   AddrMgrExtAddrSet( entry.extAddr, extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
//  362 
//  363   if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDSecMgrExtAddrLookup_0
//  364   {
//  365     // return successful results
//  366     *ami   = entry.index;
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
//  367     status = ZSuccess;
//  368   }
??CrossCallReturnLabel_75:
        SJMP      ??CrossCallReturnLabel_15
//  369   else
//  370   {
//  371     // return failed results
//  372     *ami   = entry.index;
??ZDSecMgrExtAddrLookup_0:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
//  373     status = ZNwkUnknownDevice;
//  374   }
//  375 
//  376   return status;
??CrossCallReturnLabel_15:
        LJMP      ?Subroutine0 & 0xFFFF
//  377 }
          CFI EndBlock cfiBlock13
//  378 
//  379 /******************************************************************************
//  380  * @fn          ZDSecMgrAddrClear
//  381  *
//  382  * @brief       Clear security bit from Address Manager for specific device.
//  383  *
//  384  * @param       extAddr - [in] EXT address
//  385  *
//  386  * @return      ZStatus_t
//  387  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  388 ZStatus_t ZDSecMgrAddrClear( uint8* extAddr )
ZDSecMgrAddrClear:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function ZDSecMgrAddrClear
        CODE
//  389 {
        FUNCALL ZDSecMgrAddrClear, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddrClear, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 15
        MOV       A,#-0xf
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  390   ZStatus_t status;
//  391   uint16 entryAmi;
//  392 
//  393   // get Address Manager Index
//  394   status = ZDSecMgrExtAddrLookup( extAddr, &entryAmi );
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV       A,R1
        MOV       R6,A
//  395 
//  396   if ( status == ZSuccess )
        JNZ       ??ZDSecMgrAddrClear_0
//  397   {
//  398     AddrMgrEntry_t addrEntry;
//  399 
//  400     // Clear SECURITY User bit from the address manager
//  401     addrEntry.user = ADDRMGR_USER_SECURITY;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        LCALL     ?Subroutine15 & 0xFFFF
//  402     addrEntry.index = entryAmi;
??CrossCallReturnLabel_6:
        MOV       R1,A
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
//  403 
//  404     if ( AddrMgrEntryRelease( &addrEntry ) != TRUE )
??CrossCallReturnLabel_16:
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
        MOV       A,R1
        XRL       A,#0x1
        JZ        ??ZDSecMgrAddrClear_0
//  405     {
//  406       // return failure results
//  407       status = ZFailure;
        MOV       R6,#0x1
//  408     }
//  409   }
//  410 
//  411   return status;
??ZDSecMgrAddrClear_0:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0xf
        LJMP      ??Subroutine68_0 & 0xFFFF
//  412 }
          CFI EndBlock cfiBlock14
//  413 
//  414 /******************************************************************************
//  415  * @fn          ZDSecMgrEntryInit
//  416  *
//  417  * @brief       Initialize entry sub module
//  418  *
//  419  * @param       state - device initialization state
//  420  *
//  421  * @return      none
//  422  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  423 void ZDSecMgrEntryInit(uint8 state)
ZDSecMgrEntryInit:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
        CODE
//  424 {
        FUNCALL ZDSecMgrEntryInit, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryInit, ZDSecMgrRestoreFromNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  425   if (ZDSecMgrEntries == NULL)
        MOV       DPTR,#ZDSecMgrEntries
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_129:
        JNZ       ??ZDSecMgrEntryInit_0
//  426   {
//  427     uint16 index;
//  428 
//  429     if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0xf
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       DPTR,#ZDSecMgrEntries
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ??Subroutine80_0 & 0xFFFF
??CrossCallReturnLabel_191:
        JZ        ??ZDSecMgrEntryInit_1
//  430     {
//  431       return;
//  432     }
//  433 
//  434     for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
        MOV       R0,#0x0
        MOV       R1,#0x0
//  435     {
//  436       ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
??ZDSecMgrEntryInit_2:
        LCALL     ?Subroutine31 & 0xFFFF
//  437 
//  438       ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
//  439     }
??CrossCallReturnLabel_71:
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        LCALL     ??Subroutine61_0 & 0xFFFF
??CrossCallReturnLabel_88:
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       R0
        MOV       A,R0
        JNZ       ??ZDSecMgrEntryInit_3
        INC       R1
??ZDSecMgrEntryInit_3:
        LCALL     ?Subroutine40 & 0xFFFF
//  440   }
??CrossCallReturnLabel_81:
        JC        ??ZDSecMgrEntryInit_2
//  441 
//  442 #if defined NV_RESTORE
//  443   if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
??ZDSecMgrEntryInit_0:
        MOV       A,R6
        JNZ       ??ZDSecMgrEntryInit_1
//  444   {
//  445     ZDSecMgrRestoreFromNV();
        ; Setup parameters for call to function ZDSecMgrRestoreFromNV
        LCALL     `??ZDSecMgrRestoreFromNV::?relay`; Banked call to: ZDSecMgrRestoreFromNV
//  446   }
//  447 #else
//  448   (void)state;
//  449 #endif
//  450 }
??ZDSecMgrEntryInit_1:
        LJMP      ??Subroutine69_0 & 0xFFFF
          CFI EndBlock cfiBlock15

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_71
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       A,R2
        MOV       B,#0x5
        MUL       AB
        MOV       R2,A
        MOV       R4,B
        MOV       B,#0x5
        MOV       A,R3
        MUL       AB
        ADD       A,R4
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
        REQUIRE ??Subroutine57_0
        ; // Fall through to label ??Subroutine57_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine57_0:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMI
          CFI Conditional ??CrossCallReturnLabel_70
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function ZDSecMgrEntryInit
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV       R3,A
        MOV       DPTR,#ZDSecMgrEntries
        MOVX      A,@DPTR
        ADD       A,R2
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R3
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,R3
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  451 
//  452 /******************************************************************************
//  453  * @fn          ZDSecMgrEntryLookup
//  454  *
//  455  * @brief       Lookup entry index using specified NWK address.
//  456  *
//  457  * @param       nwkAddr - [in] NWK address
//  458  * @param       entry   - [out] valid entry
//  459  *
//  460  * @return      ZStatus_t
//  461  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  462 ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookup:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
        CODE
//  463 {
        FUNCALL ZDSecMgrEntryLookup, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV       A,#-0xd
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        LCALL     ?Subroutine9 & 0xFFFF
//  464   uint16         index;
//  465   AddrMgrEntry_t addrMgrEntry;
//  466 
//  467   // initialize results
//  468   *entry = NULL;
//  469 
//  470   // verify data is available
//  471   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_187:
        JZ        ??ZDSecMgrEntryLookup_0
//  472   {
//  473     addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x2
        MOVX      @DPTR,A
//  474     addrMgrEntry.nwkAddr = nwkAddr;
        DEC       A
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
//  475 
//  476     if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
??CrossCallReturnLabel_166:
        LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDSecMgrEntryLookup_0
//  477     {
//  478       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV       R0,#0x0
        MOV       R1,#0x0
//  479       {
//  480         if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
??ZDSecMgrEntryLookup_1:
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       A,R2
        MOV       B,#0x5
        MUL       AB
        MOV       R2,A
        MOV       R4,B
        MOV       B,#0x5
        MOV       A,R3
        MUL       AB
        ADD       A,R4
        MOV       R3,A
        MOV       DPTR,#ZDSecMgrEntries
        MOVX      A,@DPTR
        ADD       A,R2
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R3
        MOV       R3,A
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??ZDSecMgrEntryLookup_2
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R5
??ZDSecMgrEntryLookup_2:
        JNZ       ??ZDSecMgrEntryLookup_3
//  481         {
//  482           // return successful results
//  483           *entry = &ZDSecMgrEntries[index];
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        LCALL     ??Subroutine58_0 & 0xFFFF
//  484 
//  485           // break from loop
//  486           return ZSuccess;
//  487         }
//  488       }
??CrossCallReturnLabel_76:
        SJMP      ??ZDSecMgrEntryLookup_4
??ZDSecMgrEntryLookup_3:
        INC       R0
        MOV       A,R0
        JNZ       ??ZDSecMgrEntryLookup_5
        INC       R1
??ZDSecMgrEntryLookup_5:
        LCALL     ?Subroutine40 & 0xFFFF
//  489     }
//  490   }
??CrossCallReturnLabel_82:
        JC        ??ZDSecMgrEntryLookup_1
//  491 
//  492   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookup_0:
        MOV       R1,#-0x38
??ZDSecMgrEntryLookup_4:
        LJMP      ?Subroutine0 & 0xFFFF
//  493 }
          CFI EndBlock cfiBlock23

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function ZDSecMgrExtAddrStore
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        LCALL     ??Subroutine85_0 & 0xFFFF
??CrossCallReturnLabel_224:
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27
        REQUIRE ??Subroutine58_0
        ; // Fall through to label ??Subroutine58_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine58_0:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function ZDSecMgrAddrStore
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function ZDSecMgrExtAddrStore
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOV       R1,A
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32
        REQUIRE ??Subroutine59_0
        ; // Fall through to label ??Subroutine59_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine59_0:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMI
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function ZDSecMgrEntryLookup
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function ZDSecMgrAddrStore
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function ZDSecMgrExtAddrStore
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_164:
        MOV       R1,#0x0
        RET
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40
//  494 
//  495 /******************************************************************************
//  496  * @fn          ZDSecMgrEntryLookupAMI
//  497  *
//  498  * @brief       Lookup entry using specified address index
//  499  *
//  500  * @param       ami   - [in] Address Manager index
//  501  * @param       entry - [out] valid entry
//  502  *
//  503  * @return      ZStatus_t
//  504  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  505 ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookupAMI:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMI
        CODE
//  506 {
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  507   uint16 index;
//  508 
//  509   // initialize results
//  510   *entry = NULL;
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine79_0 & 0xFFFF
//  511 
//  512   // verify data is available
//  513   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_189:
        JZ        ??ZDSecMgrEntryLookupAMI_0
//  514   {
//  515     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV       R0,#0x0
        MOV       R1,#0x0
//  516     {
//  517       if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupAMI_1:
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       A,R2
        MOV       B,#0x5
        MUL       AB
        MOV       R2,A
        MOV       ?V0,B
        MOV       B,#0x5
        MOV       A,R3
        MUL       AB
        ADD       A,?V0
        LCALL     ??Subroutine57_0 & 0xFFFF
??CrossCallReturnLabel_70:
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??ZDSecMgrEntryLookupAMI_2
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??ZDSecMgrEntryLookupAMI_2:
        JNZ       ??ZDSecMgrEntryLookupAMI_3
//  518       {
//  519         // return successful results
//  520         *entry = &ZDSecMgrEntries[index];
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine59_0 & 0xFFFF
//  521 
//  522         // break from loop
//  523         return ZSuccess;
//  524       }
//  525     }
??CrossCallReturnLabel_77:
        SJMP      ??ZDSecMgrEntryLookupAMI_4
??ZDSecMgrEntryLookupAMI_3:
        INC       R0
        MOV       A,R0
        JNZ       ??ZDSecMgrEntryLookupAMI_5
        INC       R1
??ZDSecMgrEntryLookupAMI_5:
        LCALL     ?Subroutine40 & 0xFFFF
//  526   }
??CrossCallReturnLabel_83:
        JC        ??ZDSecMgrEntryLookupAMI_1
//  527 
//  528   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookupAMI_0:
        MOV       R1,#-0x38
??ZDSecMgrEntryLookupAMI_4:
        LJMP      ??Subroutine69_0 & 0xFFFF
//  529 }
          CFI EndBlock cfiBlock41

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_81
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function ZDSecMgrEntryLookup
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        CLR       C
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47
        REQUIRE ??Subroutine60_0
        ; // Fall through to label ??Subroutine60_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine60_0:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function ZDSecMgrReadKeyFromNv
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function ZDSecMgrEntryInit
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function ZDSecMgrEntryLookup
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        SUBB      A,#0x3
        MOV       A,R1
        SUBB      A,#0x0
        RET
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54
//  530 
//  531 /******************************************************************************
//  532  * @fn          ZDSecMgrEntryLookupExt
//  533  *
//  534  * @brief       Lookup entry index using specified EXT address.
//  535  *
//  536  * @param       extAddr - [in] EXT address
//  537  * @param       entry   - [out] valid entry
//  538  *
//  539  * @return      ZStatus_t
//  540  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  541 ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
ZDSecMgrEntryLookupExt:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExt
        CODE
//  542 {
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryLookupExt, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  543   ZStatus_t status;
//  544   uint16    ami;
//  545 
//  546   // initialize results
//  547   *entry = NULL;
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  548   status = ZNwkUnknownDevice;
        MOV       ?V0,#-0x38
//  549 
//  550   // lookup address index
//  551   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV       A,R1
        JNZ       ??ZDSecMgrEntryLookupExt_0
//  552   {
//  553     status = ZDSecMgrEntryLookupAMI( ami, entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine65_0 & 0xFFFF
//  554   }
??CrossCallReturnLabel_89:
        LCALL     `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
        MOV       A,R1
        MOV       ?V0,A
//  555 
//  556   return status;
??ZDSecMgrEntryLookupExt_0:
        MOV       R1,?V0
        LJMP      ?Subroutine6 & 0xFFFF
//  557 }
          CFI EndBlock cfiBlock55
//  558 
//  559 /******************************************************************************
//  560  * @fn          ZDSecMgrEntryLookupExtGetIndex
//  561  *
//  562  * @brief       Lookup entry index using specified EXT address.
//  563  *
//  564  * @param       extAddr - [in] EXT address
//  565  * @param       entryIndex - [out] valid index to the entry table
//  566  *
//  567  * @return      ZStatus_t
//  568  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  569 ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
ZDSecMgrEntryLookupExtGetIndex:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExtGetIndex
        CODE
//  570 {
        FUNCALL ZDSecMgrEntryLookupExtGetIndex, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  571   uint16 ami;
//  572   uint16 index;
//  573 
//  574   // lookup address index
//  575   if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV       A,R1
        JNZ       ??ZDSecMgrEntryLookupExtGetIndex_0
//  576   {
//  577     // verify data is available
//  578     if ( ZDSecMgrEntries != NULL )
        MOV       DPTR,#ZDSecMgrEntries
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_130:
        JZ        ??ZDSecMgrEntryLookupExtGetIndex_0
//  579     {
//  580       for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV       R0,#0x0
        MOV       R1,#0x0
//  581       {
//  582         if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupExtGetIndex_1:
        LCALL     ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_72:
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??ZDSecMgrEntryLookupExtGetIndex_2
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R5
??ZDSecMgrEntryLookupExtGetIndex_2:
        JNZ       ??ZDSecMgrEntryLookupExtGetIndex_3
//  583         {
//  584           // return successful results
//  585           *entry = &ZDSecMgrEntries[index];
        LCALL     ?Subroutine19 & 0xFFFF
//  586           *entryIndex = index;
??CrossCallReturnLabel_205:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine77_0 & 0xFFFF
//  587 
//  588           // break from loop
//  589           return ZSuccess;
//  590         }
//  591       }
??CrossCallReturnLabel_183:
        LCALL     ??Subroutine59_0 & 0xFFFF
??CrossCallReturnLabel_78:
        SJMP      ??ZDSecMgrEntryLookupExtGetIndex_4
??ZDSecMgrEntryLookupExtGetIndex_3:
        INC       R0
        MOV       A,R0
        JNZ       ??ZDSecMgrEntryLookupExtGetIndex_5
        INC       R1
??ZDSecMgrEntryLookupExtGetIndex_5:
        LCALL     ?Subroutine40 & 0xFFFF
//  592     }
//  593   }
??CrossCallReturnLabel_84:
        JC        ??ZDSecMgrEntryLookupExtGetIndex_1
//  594 
//  595   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookupExtGetIndex_0:
        MOV       R1,#-0x38
??ZDSecMgrEntryLookupExtGetIndex_4:
        LJMP      ?Subroutine6 & 0xFFFF
//  596 }
          CFI EndBlock cfiBlock56
//  597 
//  598 /******************************************************************************
//  599  * @fn          ZDSecMgrEntryLookupAMIGetIndex
//  600  *
//  601  * @brief       Lookup entry using specified address index
//  602  *
//  603  * @param       ami   - [in] Address Manager index
//  604  * @param       entryIndex - [out] valid index to the entry table
//  605  *
//  606  * @return      ZStatus_t
//  607  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  608 ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex )
ZDSecMgrEntryLookupAMIGetIndex:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMIGetIndex
        CODE
//  609 {
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  610   uint16 index;
//  611 
//  612   // verify data is available
//  613   if ( ZDSecMgrEntries != NULL )
        MOV       DPTR,#ZDSecMgrEntries
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_131:
        JZ        ??ZDSecMgrEntryLookupAMIGetIndex_0
//  614   {
//  615     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV       R0,#0x0
        MOV       R1,#0x0
//  616     {
//  617       if ( ZDSecMgrEntries[index].ami == ami )
??ZDSecMgrEntryLookupAMIGetIndex_1:
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
        MOV       A,R6
        MOV       B,#0x5
        MUL       AB
        MOV       R6,A
        MOV       ?V0,B
        MOV       B,#0x5
        MOV       A,R7
        MUL       AB
        ADD       A,?V0
        MOV       R7,A
        MOV       DPTR,#ZDSecMgrEntries
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       DPL,?V0
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_2
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??ZDSecMgrEntryLookupAMIGetIndex_2:
        JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_3
//  618       {
//  619         // return successful results
//  620         *entryIndex = index;
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine59_0 & 0xFFFF
//  621 
//  622         // break from loop
//  623         return ZSuccess;
//  624       }
//  625     }
??CrossCallReturnLabel_79:
        SJMP      ??ZDSecMgrEntryLookupAMIGetIndex_4
??ZDSecMgrEntryLookupAMIGetIndex_3:
        INC       R0
        MOV       A,R0
        JNZ       ??ZDSecMgrEntryLookupAMIGetIndex_5
        INC       R1
??ZDSecMgrEntryLookupAMIGetIndex_5:
        LCALL     ?Subroutine40 & 0xFFFF
//  626   }
??CrossCallReturnLabel_85:
        JC        ??ZDSecMgrEntryLookupAMIGetIndex_1
//  627 
//  628   return ZNwkUnknownDevice;
??ZDSecMgrEntryLookupAMIGetIndex_0:
        MOV       R1,#-0x38
??ZDSecMgrEntryLookupAMIGetIndex_4:
        LJMP      ??Subroutine69_0 & 0xFFFF
//  629 }
          CFI EndBlock cfiBlock57
//  630 
//  631 /******************************************************************************
//  632  * @fn          ZDSecMgrEntryFree
//  633  *
//  634  * @brief       Free entry.
//  635  *
//  636  * @param       entry - [in] valid entry
//  637  *
//  638  * @return      ZStatus_t
//  639  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  640 void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
ZDSecMgrEntryFree:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
        CODE
//  641 {
        FUNCALL ZDSecMgrEntryFree, ZDSecMgrEntryLookupAMIGetIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrEntryFree, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  642   APSME_LinkKeyData_t   *pApsLinkKey = NULL;
//  643 
//  644 #if defined ( NV_RESTORE )
//  645   ZStatus_t status;
//  646   uint16 entryIndex;
//  647 
//  648   status = ZDSecMgrEntryLookupAMIGetIndex( entry->ami, &entryIndex );
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMIGetIndex
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_90:
        LCALL     `??ZDSecMgrEntryLookupAMIGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupAMIGetIndex
        MOV       A,R1
        MOV       ?V2,A
//  649 #endif
//  650 
//  651   pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x18
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
//  652 
//  653   if (pApsLinkKey != NULL)
        MOV       A,R2
        ORL       A,?V1
        JZ        ??ZDSecMgrEntryFree_0
//  654   {
//  655     osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x18
        MOV       R5,#0x0
        MOV       R1,#0x0
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  656 
//  657     // Clear the APS Link key in NV
//  658     osal_nv_write( entry->keyNvId, 0,
//  659                         sizeof(APSME_LinkKeyData_t), pApsLinkKey);
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V6,A
        CLR       A
        ADDC      A,R7
        MOV       ?V7,A
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V4,#0x18
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       DPL,?V6
        MOV       DPH,?V7
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_91:
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  660 
//  661     // set entry to invalid Key
//  662     entry->keyNvId = SEC_NO_KEY_NV_ID;
        MOV       DPL,?V6
        MOV       DPH,?V7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  663 
//  664     osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  665   }
//  666 
//  667   // marking the entry as INVALID_NODE_ADDR
//  668   entry->ami = INVALID_NODE_ADDR;
??ZDSecMgrEntryFree_0:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        LCALL     ?Subroutine49 & 0xFFFF
//  669 
//  670   // set to default value
//  671   entry->authenticateOption = ZDSecMgr_Not_Authenticated;
??CrossCallReturnLabel_60:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  672 
//  673 #if defined ( NV_RESTORE )
//  674   if ( status == ZSuccess )
        MOV       A,?V2
        JZ        $+5
        LJMP      ??ZDSecMgrEntryFree_1 & 0xFFFF
//  675   {
//  676     ZDSecMgrUpdateNV(entryIndex);
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine65_0 & 0xFFFF
//  677   }
??CrossCallReturnLabel_92:
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       A,R6
        MOV       B,#0x5
        MUL       AB
        MOV       R6,A
        MOV       R0,B
        MOV       B,#0x5
        MOV       A,R7
        MUL       AB
        ADD       A,R0
        MOV       R7,A
        MOV       DPTR,#ZDSecMgrEntries
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_132:
        JZ        ??ZDSecMgrEntryFree_2
        ; Setup parameters for call to function osal_nv_write
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x5
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R2
        MOV       B,#0x5
        MUL       AB
        MOV       R2,A
        MOV       R0,B
        MOV       B,#0x5
        MOV       A,R3
        MUL       AB
        ADD       A,R0
        MOV       R3,A
        MOV       A,R2
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,R3
        MOV       R5,A
        MOV       R2,#0x4c
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
??ZDSecMgrEntryFree_2:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x4c
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R1
        JNZ       ??ZDSecMgrEntryFree_1
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_32:
        JNZ       ??ZDSecMgrEntryFree_3
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDSecMgrEntryFree_3:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        JNZ       ??ZDSecMgrEntryFree_4
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_133:
        JZ        ??ZDSecMgrEntryFree_5
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        SJMP      ??CrossCallReturnLabel_40
??ZDSecMgrEntryFree_4:
        LCALL     ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_40:
        MOVX      @DPTR,A
??ZDSecMgrEntryFree_5:
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x4c
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  678 #endif
//  679 }
??ZDSecMgrEntryFree_1:
        MOV       A,#0x4
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock58
//  680 
//  681 /******************************************************************************
//  682  * @fn          ZDSecMgrEntryNew
//  683  *
//  684  * @brief       Get a new entry.
//  685  *
//  686  * @param       entry - [out] valid entry
//  687  *
//  688  * @return      ZStatus_t
//  689  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  690 ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
ZDSecMgrEntryNew:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI Function ZDSecMgrEntryNew
        CODE
//  691 {
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        LCALL     ?Subroutine9 & 0xFFFF
//  692   uint16 index;
//  693 
//  694   // initialize results
//  695   *entry = NULL;
//  696 
//  697   // verify data is available
//  698   if ( ZDSecMgrEntries != NULL )
??CrossCallReturnLabel_188:
        JZ        ??ZDSecMgrEntryNew_0
//  699   {
//  700     // find available entry
//  701     for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
        MOV       R2,#0x0
        MOV       R3,#0x0
//  702     {
//  703       if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
??ZDSecMgrEntryNew_1:
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
        MOV       A,R0
        MOV       B,#0x5
        MUL       AB
        MOV       R0,A
        MOV       R4,B
        MOV       B,#0x5
        MOV       A,R1
        MUL       AB
        ADD       A,R4
        MOV       R1,A
        MOV       DPTR,#ZDSecMgrEntries
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       R5,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??ZDSecMgrEntryNew_2
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDSecMgrEntryNew_2:
        JNZ       ??ZDSecMgrEntryNew_3
//  704       {
//  705         // return successful result
//  706         *entry = &ZDSecMgrEntries[index];
        MOV       A,R4
        MOV       R2,A
        MOV       A,R5
        MOV       R3,A
        LCALL     ?Subroutine19 & 0xFFFF
//  707 
//  708         // Set the authentication option to default
//  709         ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
??CrossCallReturnLabel_206:
        MOV       DPTR,#ZDSecMgrEntries
        MOVX      A,@DPTR
        ADD       A,R0
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R1
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  710 
//  711         // break from loop
//  712         return ZSuccess;
        MOV       R1,A
        SJMP      ??ZDSecMgrEntryNew_4
//  713       }
//  714     }
??ZDSecMgrEntryNew_3:
        INC       R2
        MOV       A,R2
        JNZ       ??ZDSecMgrEntryNew_5
        INC       R3
??ZDSecMgrEntryNew_5:
        CLR       C
        SUBB      A,#0x3
        MOV       A,R3
        SUBB      A,#0x0
        JC        ??ZDSecMgrEntryNew_1
//  715   }
//  716 
//  717   return ZNwkUnknownDevice;
??ZDSecMgrEntryNew_0:
        MOV       R1,#-0x38
??ZDSecMgrEntryNew_4:
        LJMP      ??Subroutine69_0 & 0xFFFF
//  718 }
          CFI EndBlock cfiBlock59
//  719 
//  720 /******************************************************************************
//  721  * @fn          ZDSecMgrAppKeyGet
//  722  *
//  723  * @brief       get an APP key - option APP(MASTER or LINK) key
//  724  *
//  725  * @param       initNwkAddr - [in] NWK address of initiator device
//  726  * @param       initExtAddr - [in] EXT address of initiator device
//  727  * @param       partNwkAddr - [in] NWK address of partner device
//  728  * @param       partExtAddr - [in] EXT address of partner device
//  729  * @param       key         - [out] APP(MASTER or LINK) key
//  730  * @param       keyType     - [out] APP(MASTER or LINK) key type
//  731  *
//  732  * @return      ZStatus_t
//  733  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  734 uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
ZDSecMgrAppKeyType:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
        REQUIRE __INIT_XDATA_I
//  735                                                  // to KEY_TYPE_APP_LINK since
//  736                                                  // only specific requirement
//  737                                                  // right now comes from SE profile

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  738 ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
ZDSecMgrAppKeyGet:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyGet
        CODE
//  739                              uint8*  initExtAddr,
//  740                              uint16  partNwkAddr,
//  741                              uint8*  partExtAddr,
//  742                              uint8** key,
//  743                              uint8*  keyType )
//  744 {
        FUNCALL ZDSecMgrAppKeyGet, SSP_GetTrueRand
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  745   // Intentionally unreferenced parameters
//  746   (void)initNwkAddr;
//  747   (void)initExtAddr;
//  748   (void)partNwkAddr;
//  749   (void)partExtAddr;
//  750 
//  751   //---------------------------------------------------------------------------
//  752   // note:
//  753   // should use a robust mechanism to generate keys, for example
//  754   // combine EXT addresses and call a hash function
//  755   //---------------------------------------------------------------------------
//  756   SSP_GetTrueRand( SEC_KEY_LEN, *key );
        ; Setup parameters for call to function SSP_GetTrueRand
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine76_0 & 0xFFFF
??CrossCallReturnLabel_174:
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV       R1,#0x10
        LCALL     `??SSP_GetTrueRand::?relay`; Banked call to: SSP_GetTrueRand
//  757 
//  758   *keyType = ZDSecMgrAppKeyType;
        MOV       DPTR,#ZDSecMgrAppKeyType
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-6
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine76_0 & 0xFFFF
??CrossCallReturnLabel_175:
        POP       A
          CFI CFA_SP SP+-5
        LJMP      ?Subroutine2 & 0xFFFF
//  759 
//  760   return ZSuccess;
//  761 }
          CFI EndBlock cfiBlock60
//  762 
//  763 
//  764 
//  765 
//  766 /******************************************************************************
//  767  * @fn          ZDSecMgrAppKeyReq
//  768  *
//  769  * @brief       Process request for APP key between two devices.
//  770  *
//  771  * @param       device - [in] ZDO_RequestKeyInd_t, request info
//  772  *
//  773  * @return      none
//  774  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  775 void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
ZDSecMgrAppKeyReq:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyReq
        CODE
//  776 {
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, ZDSecMgrAppKeyGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAppKeyReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 39
        MOV       A,#-0x27
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  777   APSME_TransportKeyReq_t req;
//  778   uint8                   initExtAddr[Z_EXTADDR_LEN];
//  779   uint16                  partNwkAddr;
//  780   uint8                   key[SEC_KEY_LEN];
//  781 
//  782 
//  783   // validate initiator and partner
//  784   if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
//  785        ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
        MOV       A,R6
        ADD       A,#0x5
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R2,?V0
        MOV       R3,A
        LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
        MOV       A,R1
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??ZDSecMgrAppKeyReq_0 & 0xFFFF
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??ZDSecMgrAppKeyReq_1
        INC       R7
??ZDSecMgrAppKeyReq_1:
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP102_8
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_94:
        LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
        MOV       A,R1
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??ZDSecMgrAppKeyReq_0 & 0xFFFF
//  786   {
//  787     // point the key to some memory
//  788     req.key = key;
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP100_8
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
//  789 
//  790     // get an APP key - option APP (MASTER or LINK) key
//  791     if ( ZDSecMgrAppKeyGet( ind->srcAddr,
//  792                             initExtAddr,
//  793                             partNwkAddr,
//  794                             ind->partExtAddr,
//  795                             &req.key,
//  796                             &req.keyType ) == ZSuccess )
??CrossCallReturnLabel_141:
        ; Setup parameters for call to function ZDSecMgrAppKeyGet
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 53)
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 55)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 57)
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 59)
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP102_8
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_95:
        LCALL     `??ZDSecMgrAppKeyGet::?relay`; Banked call to: ZDSecMgrAppKeyGet
        MOV       A,#0x8
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       A,R1
        JNZ       ??ZDSecMgrAppKeyReq_0
//  797     {
//  798       // always secure
//  799       req.nwkSecure = TRUE;
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  800       req.apsSecure = TRUE;
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  801       req.tunnel    = NULL;
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine13 & 0xFFFF
//  802 
//  803       // send key to initiator device
//  804       req.dstAddr   = ind->srcAddr;
??CrossCallReturnLabel_2:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
//  805       req.extAddr   = ind->partExtAddr;
??CrossCallReturnLabel_142:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
//  806       req.initiator = TRUE;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  807       APSME_TransportKeyReq( &req );
        ; Setup parameters for call to function APSME_TransportKeyReq
        INC       A
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
//  808 
//  809       // send key to partner device
//  810       req.dstAddr   = partNwkAddr;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_117:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
//  811       req.extAddr   = initExtAddr;
??CrossCallReturnLabel_143:
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP100_8
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
//  812       req.initiator = FALSE;
??CrossCallReturnLabel_144:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  813 
//  814       APSME_TransportKeyReq( &req );
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
//  815 
//  816       // clear copy of key in RAM
//  817       osal_memset( key, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  818 
//  819     }
//  820   }
//  821 }
??ZDSecMgrAppKeyReq_0:
        MOV       A,#0x27
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock61
//  822 
//  823 /******************************************************************************
//  824  * @fn          ZDSecMgrTclkReq
//  825  *
//  826  * @brief       Process request for TCLK.
//  827  *
//  828  * @param       device - [in] ZDO_RequestKeyInd_t, request info
//  829  *
//  830  * @return      none
//  831  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  832 void ZDSecMgrTclkReq( ZDO_RequestKeyInd_t* ind )
ZDSecMgrTclkReq:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI Function ZDSecMgrTclkReq
        CODE
//  833 {
        FUNCALL ZDSecMgrTclkReq, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 69, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTclkReq, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 69, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTclkReq, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 71, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 71, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTclkReq, ZDSecMgrGenerateKeyFromSeed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 69, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTclkReq, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 69, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTclkReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 69, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 59
        MOV       A,#-0x3b
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 69)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  834   APSME_TransportKeyReq_t req;
//  835   uint8                   initExtAddr[Z_EXTADDR_LEN];
//  836   uint16                  partNwkAddr;
//  837   uint8                   key[SEC_KEY_LEN];
//  838   APSME_TCLKDevEntry_t    TCLKDevEntry;
//  839   uint8                   found;
//  840     
//  841   // validate initiator and partner
//  842   if ( ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) || ( ind->keyType != KEY_TYPE_APP_MASTER ) ) &&
//  843        (   APSME_LookupExtAddr( ind->srcAddr, initExtAddr )      == TRUE ) )
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        ADD       A,#0x5
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
        MOV       A,R1
        XRL       A,#0x1
        JZ        ??ZDSecMgrTclkReq_0
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       $+5
        LJMP      ??ZDSecMgrTclkReq_1 & 0xFFFF
??ZDSecMgrTclkReq_0:
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??ZDSecMgrTclkReq_2
        INC       R7
??ZDSecMgrTclkReq_2:
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP102_8
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
        MOV       A,R1
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??ZDSecMgrTclkReq_1 & 0xFFFF
//  844   {
//  845     // point the key to some memory
//  846     req.key = key;
        MOV       A,#0x2b
        LCALL     ?XSTACK_DISP100_8
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
//  847 
//  848     //Search for the entry
//  849     APSME_SearchTCLinkKeyEntry(initExtAddr,&found, &TCLKDevEntry);
??CrossCallReturnLabel_145:
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 71)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 69)
//  850 
//  851     //If found, generate the key accordingly to the key attribute
//  852     if(found)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JZ        ??ZDSecMgrTclkReq_1
//  853     {
//  854       //Generate key from the seed, which would be the unique key
//  855       ZDSecMgrGenerateKeyFromSeed(TCLKDevEntry.extAddr,TCLKDevEntry.SeedShift_IcIndex,req.key);
        ; Setup parameters for call to function ZDSecMgrGenerateKeyFromSeed
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV       A,#0x2a
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x20
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??ZDSecMgrGenerateKeyFromSeed::?relay`; Banked call to: ZDSecMgrGenerateKeyFromSeed
//  856     
//  857       // always secure
//  858       req.nwkSecure = TRUE;
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  859       req.apsSecure = TRUE;
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  860       req.tunnel    = NULL;
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine13 & 0xFFFF
//  861 
//  862       // send key to initiator device
//  863       req.dstAddr   = ind->srcAddr;
??CrossCallReturnLabel_3:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
//  864       req.extAddr   = initExtAddr;
??CrossCallReturnLabel_146:
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP100_8
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
//  865       req.initiator = TRUE;
??CrossCallReturnLabel_21:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  866       req.keyType   = KEY_TYPE_TC_LINK;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
//  867         
//  868       APSME_TransportKeyReq( &req );
        ; Setup parameters for call to function APSME_TransportKeyReq
        DEC       A
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
//  869         
//  870       // clear copy of key in RAM
//  871       osal_memset( key, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x2b
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  872     
//  873     }
//  874   }
//  875 }
??ZDSecMgrTclkReq_1:
        MOV       A,#0x3b
        LJMP      ??Subroutine71_0 & 0xFFFF
          CFI EndBlock cfiBlock62

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyReq
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function ZDSecMgrTclkReq
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 69)
          CFI Block cfiPicker65 Using cfiCommon1
          CFI (cfiPicker65) NoFunction
          CFI (cfiPicker65) Picker
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        LCALL     ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_192:
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function ZDSecMgrAppKeyReq
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_2
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-4
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function ZDSecMgrTclkReq
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_3
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-4
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 69)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        RET
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71
//  876 
//  877 /******************************************************************************
//  878  * @fn          ZDSecMgrAppConfKeyReq
//  879  *
//  880  * @brief       Process request for APP key between two devices.
//  881  *
//  882  * @param       device - [in] ZDO_VerifyKeyInd_t, request info
//  883  *
//  884  * @return      none
//  885  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  886 void ZDSecMgrAppConfKeyReq( ZDO_VerifyKeyInd_t* ind )
ZDSecMgrAppConfKeyReq:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function ZDSecMgrAppConfKeyReq
        CODE
//  887 {
        FUNCALL ZDSecMgrAppConfKeyReq, APSME_ConfirmKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 6, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 6, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 6
        MOV       A,#-0x6
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 6)
//  888   APSME_ConfirmKeyReq_t   req;
//  889 
//  890   // send key to initiator device
//  891   req.dstAddr      = ind->srcAddr;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine25 & 0xFFFF
//  892   req.status       = ind->verifyKeyStatus;
??CrossCallReturnLabel_158:
        MOV       A,R2
        ADD       A,#0x1d
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-6
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+-5
        MOVX      @DPTR,A
//  893   req.dstExtAddr   = ind->extAddr;
        MOV       A,R2
        ADD       A,#0x5
        MOV       R0,A
        CLR       A
        ADDC      A,R3
        MOV       R1,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
//  894   req.keyType      = ind->keyType;
??CrossCallReturnLabel_86:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-6
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+-5
        LCALL     ??Subroutine74_0 & 0xFFFF
//  895 
//  896   if ( ( ZSTACK_DEVICE_BUILD & DEVICE_BUILD_COORDINATOR ) != 0 )
//  897   {
//  898     APSME_ConfirmKeyReq( &req );
??CrossCallReturnLabel_168:
        LCALL     `??APSME_ConfirmKeyReq::?relay`; Banked call to: APSME_ConfirmKeyReq
//  899   }
//  900   
//  901 }
        MOV       A,#0x6
          CFI EndBlock cfiBlock72
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiBlock73 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 6)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
          CFI Valid
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock73

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond74 Using cfiCommon0
          CFI Function ZDSecMgrAppConfKeyReq
          CFI Conditional ??CrossCallReturnLabel_86
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 6)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76
        REQUIRE ??Subroutine61_0
        ; // Fall through to label ??Subroutine61_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine61_0:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_88
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function ZDSecMgrAppConfKeyReq
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond78) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond78) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond78) CFA_SP SP+-7
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 6)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker80 Using cfiCommon1
          CFI (cfiPicker80) NoFunction
          CFI (cfiPicker80) Picker
        MOVX      @DPTR,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiPicker80
//  902 
//  903 
//  904 /******************************************************************************
//  905  * @fn          ZDSecMgrSendNwkKey
//  906  *
//  907  * @brief       Send NWK key to device joining network.
//  908  *
//  909  * @param       device - [in] ZDSecMgrDevice_t, device info
//  910  *
//  911  * @return      ZStatus_t
//  912  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  913 ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
ZDSecMgrSendNwkKey:
          CFI Block cfiBlock81 Using cfiCommon0
          CFI Function ZDSecMgrSendNwkKey
        CODE
//  914 {
        FUNCALL ZDSecMgrSendNwkKey, NLME_ReadNwkKeyInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 50, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 50, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSendNwkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 34
        MOV       A,#-0x22
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  915   ZStatus_t status;
//  916   APSME_TransportKeyReq_t req;
//  917   APSDE_FrameTunnel_t tunnel;
//  918   nwkKeyDesc tmpKey;
//  919 
//  920   req.dstAddr   = device->nwkAddr;
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_126:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
//  921   req.extAddr   = device->extAddr;
??CrossCallReturnLabel_147:
        MOV       A,R6
        ADD       A,#0x2
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_118:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
//  922 
//  923   req.keyType   = KEY_TYPE_NWK;
??CrossCallReturnLabel_148:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  924 
//  925   // get the Active Key into a local variable
//  926   if ( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
//  927                            ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
        ; Setup parameters for call to function NLME_ReadNwkKeyInfo
        MOV       ?V2,#0x3a
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??NLME_ReadNwkKeyInfo::?relay`; Banked call to: NLME_ReadNwkKeyInfo
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV       A,R1
        JZ        ??ZDSecMgrSendNwkKey_0
//  928   {
//  929     // set key data to all 0s if NV read fails
//  930     osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,R4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  931   }
//  932 
//  933   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
//  934   {
//  935     // set values
//  936     req.keySeqNum = tmpKey.keySeqNum;
??ZDSecMgrSendNwkKey_0:
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
//  937     req.key       = tmpKey.key;
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
//  938 
//  939     //devtag.pro.security.todo - make sure that if there is no link key the NWK
//  940     //key isn't used to secure the frame at the APS layer -- since the receiving
//  941     //device may not have a NWK key yet
//  942     req.apsSecure = TRUE;
??CrossCallReturnLabel_149:
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  943 
//  944     // check if using secure hop to parent
//  945     if ( device->parentAddr == NLME_GetShortAddr() )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       A,R6
        ADD       A,#0x4
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        XRL       A,R2
        JNZ       ??ZDSecMgrSendNwkKey_1
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R3
??ZDSecMgrSendNwkKey_1:
        JNZ       ??ZDSecMgrSendNwkKey_2
//  946     {
//  947       req.nwkSecure = FALSE;
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  948       req.tunnel    = NULL;
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        SJMP      ??ZDSecMgrSendNwkKey_3
//  949     }
//  950     else
//  951     {
//  952       req.nwkSecure   = TRUE;
??ZDSecMgrSendNwkKey_2:
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  953       req.tunnel      = &tunnel;
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?XSP + 0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?XSP + 1
        LCALL     ?Subroutine17 & 0xFFFF
//  954       req.tunnel->tna = device->parentAddr;
//  955       req.tunnel->dea = device->extAddr;
//  956     }
//  957   }
??CrossCallReturnLabel_8:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
??ZDSecMgrSendNwkKey_3:
        MOVX      @DPTR,A
//  958   else
//  959   {
//  960     // default values
//  961     //devtag.0604.verify
//  962     req.nwkSecure = TRUE;
//  963     req.apsSecure = FALSE;
//  964     req.tunnel    = NULL;
//  965 
//  966     if ( device->parentAddr != NLME_GetShortAddr() )
//  967     {
//  968       req.dstAddr = device->parentAddr;
//  969     }
//  970 
//  971     // send the real key
//  972     if ( zgPreConfigKeys == FALSE )
//  973     {
//  974       req.keySeqNum = tmpKey.keySeqNum;
//  975       req.key       = tmpKey.key;
//  976 
//  977       // check if using secure hop to to parent
//  978       if ( device->parentAddr == NLME_GetShortAddr() )
//  979       {
//  980         req.nwkSecure = FALSE;
//  981       }
//  982     }
//  983     else
//  984     {
//  985       // this is to send the all zero key when the NWK key has been preconfigured
//  986       req.key       = NULL;
//  987       req.keySeqNum = 0;
//  988     }
//  989   }
//  990 
//  991   status = APSME_TransportKeyReq( &req );
        ; Setup parameters for call to function APSME_TransportKeyReq
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
        MOV       A,R1
        MOV       R6,A
//  992 
//  993   // clear copy of key in RAM before return
//  994   osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,R4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  995 
//  996   return status;
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x22
        LJMP      ?Subroutine3 & 0xFFFF
//  997 }
          CFI EndBlock cfiBlock81
//  998 
//  999 /******************************************************************************
// 1000  * @fn          ZDSecMgrDeviceRemoveByExtAddr
// 1001  *
// 1002  * @brief       Remove device entry by its ext address.
// 1003  *
// 1004  * @param       pAddr - pointer to the extended address
// 1005  *
// 1006  * @return      ZStatus_t
// 1007  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1008 ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
ZDSecMgrDeviceRemoveByExtAddr:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemoveByExtAddr
        CODE
// 1009 {
        FUNCALL ZDSecMgrDeviceRemoveByExtAddr, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemoveByExtAddr, ZDSecMgrEntryFree
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1010   ZDSecMgrEntry_t *pEntry;
// 1011   uint8           retValue;
// 1012 
// 1013   retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
        MOV       A,R1
        MOV       R6,A
// 1014 
// 1015   if( retValue == ZSuccess )
        JNZ       ??ZDSecMgrDeviceRemoveByExtAddr_0
// 1016   {
// 1017     // remove device from entry data
// 1018     ZDSecMgrEntryFree( pEntry );
        ; Setup parameters for call to function ZDSecMgrEntryFree
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine65_0 & 0xFFFF
// 1019   }
??CrossCallReturnLabel_97:
        LCALL     `??ZDSecMgrEntryFree::?relay`; Banked call to: ZDSecMgrEntryFree
// 1020 
// 1021   return retValue;
??ZDSecMgrDeviceRemoveByExtAddr_0:
        MOV       A,R6
        MOV       R1,A
          CFI EndBlock cfiBlock82
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
// 1022 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock83 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x2
        LJMP      ??Subroutine68_0 & 0xFFFF
          CFI EndBlock cfiBlock83
// 1023 
// 1024 /******************************************************************************
// 1025  * @fn          ZDSecMgrDeviceRemove
// 1026  *
// 1027  * @brief       Remove device from network.
// 1028  *
// 1029  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1030  *
// 1031  * @return      none
// 1032  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1033 void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceRemove:
          CFI Block cfiBlock84 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemove
        CODE
// 1034 {
        FUNCALL ZDSecMgrDeviceRemove, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, APSME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, APSME_RemoveDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceRemove, APSME_RemoveDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 19
        MOV       A,#-0x13
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1035   APSME_RemoveDeviceReq_t remDevReq;
// 1036   NLME_LeaveReq_t         leaveReq;
// 1037   associated_devices_t*   assoc;
// 1038   uint8 TC_ExtAddr[Z_EXTADDR_LEN];
// 1039 
// 1040   // check if parent, remove the device
// 1041   if ( device->parentAddr == NLME_GetShortAddr() )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_111:
        MOV       A,R6
        ADD       A,#0x2
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       A,?V0
        XRL       A,R2
        JNZ       ??ZDSecMgrDeviceRemove_0
        MOV       A,?V1
        XRL       A,R3
??ZDSecMgrDeviceRemove_0:
        JZ        $+5
        LJMP      ??ZDSecMgrDeviceRemove_1 & 0xFFFF
// 1042   {
// 1043     // this is the parent of the device
// 1044     leaveReq.extAddr        = device->extAddr;
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
// 1045     leaveReq.removeChildren = FALSE;
??CrossCallReturnLabel_12:
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1046     leaveReq.rejoin         = FALSE;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1047 
// 1048     // find child association
// 1049     assoc = AssocGetWithExt( device->extAddr );
        ; Setup parameters for call to function AssocGetWithExt
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
// 1050 
// 1051     if ( ( assoc != NULL                            ) &&
// 1052          ( assoc->nodeRelation >= CHILD_RFD         ) &&
// 1053          ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
        MOV       A,R0
        ORL       A,R1
        JZ        ??ZDSecMgrDeviceRemove_2
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??ZDSecMgrDeviceRemove_2
        CLR       C
        SUBB      A,#0x5
        JNC       ??ZDSecMgrDeviceRemove_2
// 1054     {
// 1055       // check if associated device is authenticated
// 1056       if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.3
        MOV       A,#0x5
        JNC       ??ZDSecMgrDeviceRemove_3
// 1057       {
// 1058         leaveReq.silent = FALSE;
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        SJMP      ??ZDSecMgrDeviceRemove_4
// 1059       }
// 1060       else
// 1061       {
// 1062         leaveReq.silent = TRUE;
??ZDSecMgrDeviceRemove_3:
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
??ZDSecMgrDeviceRemove_4:
        MOVX      @DPTR,A
// 1063       }
// 1064 
// 1065       NLME_LeaveReq( &leaveReq );
        ; Setup parameters for call to function NLME_LeaveReq
        MOV       A,#0x1
        SJMP      ??ZDSecMgrDeviceRemove_5
// 1066     }
// 1067     else if ( device->nwkAddr == NLME_GetShortAddr() )
??ZDSecMgrDeviceRemove_2:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R0,?V0
        MOV       R1,?V1
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        XRL       A,R0
        JNZ       ??ZDSecMgrDeviceRemove_6
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R1
??ZDSecMgrDeviceRemove_6:
        JZ        $+5
        LJMP      ??ZDSecMgrDeviceRemove_7 & 0xFFFF
// 1068     {
// 1069       // this is when ZC wants that ZR removes itself from the network
// 1070       leaveReq.extAddr = NULL;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1071       leaveReq.silent = FALSE;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1072 
// 1073       NLME_LeaveReq( &leaveReq );
        ; Setup parameters for call to function NLME_LeaveReq
        INC       A
??ZDSecMgrDeviceRemove_5:
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        SJMP      ??ZDSecMgrDeviceRemove_7
// 1074     }
// 1075   }
// 1076   else
// 1077   {
// 1078     // this is not the parent of the device
// 1079     remDevReq.parentAddr   = device->parentAddr;
??ZDSecMgrDeviceRemove_1:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        LCALL     ?Subroutine17 & 0xFFFF
// 1080     remDevReq.childExtAddr = device->extAddr;
??CrossCallReturnLabel_9:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine24 & 0xFFFF
// 1081 
// 1082     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1083     {
// 1084       uint8 found;
// 1085       APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
??CrossCallReturnLabel_22:
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#-0x55
        LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
// 1086       
// 1087       APSME_SearchTCLinkKeyEntry(TC_ExtAddr,&found,NULL);
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
// 1088       
// 1089       // For ZG_GLOBAL_LINK_KEY the message has to be sent twice, one
// 1090       // APS un-encrypted and one APS encrypted, to make sure that it can interoperate
// 1091       // with legacy Coordinator devices which can only handle one or the other.
// 1092 #if defined ( APP_TP2_TEST_MODE )
// 1093       if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( found == FALSE ) && ( guTxApsSecON != TRUE ) )
// 1094 #else
// 1095       if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( found == FALSE ) )
        MOV       DPTR,#zgApsLinkKeyType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDSecMgrDeviceRemove_8
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       ??ZDSecMgrDeviceRemove_8
// 1096 #endif
// 1097       {
// 1098         remDevReq.apsSecure = FALSE;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1099 
// 1100         APSME_RemoveDeviceReq( &remDevReq );
        ; Setup parameters for call to function APSME_RemoveDeviceReq
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
// 1101       }
// 1102 
// 1103 #if defined ( APP_TP2_TEST_MODE )
// 1104       if ( guTxApsSecON != FALSE )
// 1105       {
// 1106         remDevReq.apsSecure = TRUE;
// 1107 
// 1108         APSME_RemoveDeviceReq( &remDevReq );
// 1109       }
// 1110 #else
// 1111       remDevReq.apsSecure = TRUE;
??ZDSecMgrDeviceRemove_8:
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1112 
// 1113       APSME_RemoveDeviceReq( &remDevReq );
        ; Setup parameters for call to function APSME_RemoveDeviceReq
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
// 1114 #endif
// 1115     }
// 1116     else
// 1117     {
// 1118       remDevReq.apsSecure = FALSE;
// 1119 
// 1120       APSME_RemoveDeviceReq( &remDevReq );
// 1121     }
// 1122   }
// 1123 }
??ZDSecMgrDeviceRemove_7:
        MOV       A,#0x13
        LJMP      ??Subroutine71_0 & 0xFFFF
          CFI EndBlock cfiBlock84

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function ZDSecMgrTclkReq
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 69)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function ZDSecMgrDeviceRemove
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker88 Using cfiCommon1
          CFI (cfiPicker88) NoFunction
          CFI (cfiPicker88) Picker
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_163:
        ; Setup parameters for call to function APSME_GetRequest
        MOV       A,#0xb
        RET
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiPicker88

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond89 Using cfiCommon0
          CFI Function ZDSecMgrSendNwkKey
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function ZDSecMgrDeviceRemove
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_193:
        RET
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine51:
          CFI Block cfiCond92 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function ZDSecMgrExtAddrStore
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_14
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-4
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_15
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-4
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function ZDSecMgrAppKeyReq
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_2
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-4
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function ZDSecMgrTclkReq
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_3
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-4
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 69)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function ZDSecMgrSendNwkKey
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_8
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-4
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function ZDSecMgrDeviceRemove
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_9
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-4
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function ZDSecMgrSendNwkKey
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_126
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-4
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function ZDSecMgrDeviceJoin
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_127
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-4
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_128
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-4
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function ZDSecMgrAppKeyReq
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_117
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-4
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function ZDSecMgrSendNwkKey
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_118
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-4
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function ZDSecMgrDeviceJoin
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_119
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-4
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_120
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-4
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_121
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-4
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_122
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-4
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_123
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-4
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function APSME_LinkKeySet
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_124
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-4
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function ZDSecMgrAPSRemove
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_125
          CFI (cfiCond110) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond110) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond110) CFA_SP SP+-9
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function APSME_IsLinkKeyValid
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_138
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-4
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function ZDSecMgrAddLinkKey
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_139
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+-4
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_140
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-4
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function ZDSecMgrEntryInit
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_129
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-4
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_130
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-4
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_131
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-4
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function ZDSecMgrEntryFree
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_132
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-4
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function ZDSecMgrEntryFree
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_133
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-4
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function ZDSecMgrDeviceJoin
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_134
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-4
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_135
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-4
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function ZDSecMgrRemoveDeviceInd
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_136
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-4
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function APSME_KeyFwdToChild
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_137
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-4
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function ZDSecMgrAppConfKeyReq
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_195, ??CrossCallReturnLabel_158
          CFI (cfiCond123) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond123) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond123) CFA_SP SP+-9
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 6)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_195, ??CrossCallReturnLabel_159
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-4
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function ZDSecMgrEntryLookup
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_198, ??CrossCallReturnLabel_187
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-4
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function ZDSecMgrEntryNew
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_198, ??CrossCallReturnLabel_188
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-4
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_198, ??CrossCallReturnLabel_189
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-4
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function ZDSecMgrWriteNV
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_198, ??CrossCallReturnLabel_190
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function ZDSecMgrEntryInit
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_198, ??CrossCallReturnLabel_191
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        LCALL     ??Subroutine85_0 & 0xFFFF
??CrossCallReturnLabel_228:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130
// 1124 
// 1125 /******************************************************************************
// 1126  * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
// 1127  *
// 1128  * @brief       Decide whether device is allowed.
// 1129  *
// 1130  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1131  *
// 1132  * @return      ZStatus_t
// 1133  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1134 ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidateRM:
          CFI Block cfiBlock131 Using cfiCommon0
          CFI Function ZDSecMgrDeviceValidateRM
        CODE
// 1135 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1136   ZStatus_t status;
// 1137 
// 1138   status = ZSuccess;
        MOV       R1,#0x0
// 1139 
// 1140   (void)device;  // Intentionally unreferenced parameter
// 1141 
// 1142   // For test purpose, turning off the zgSecurePermitJoin flag will force
// 1143   // the trust center to reject any newly joining devices by sending
// 1144   // Remove-device to the parents.
// 1145   if ( zgSecurePermitJoin == FALSE )
        MOV       DPTR,#zgSecurePermitJoin
        MOVX      A,@DPTR
        JNZ       ??ZDSecMgrDeviceValidateRM_0
// 1146   {
// 1147     status = ZNwkUnknownDevice;
        MOV       R1,#-0x38
// 1148   }
// 1149 
// 1150 
// 1151 
// 1152 #if 0  // Taken out because the following functionality is only used for test
// 1153        // purpose. A more efficient (above) way is used. It can be put
// 1154        // back in if customers request for a white/black list feature.
// 1155        // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
// 1156 
// 1157   // The following code processes the device black list (stored device list)
// 1158   // If the joining device is not part of the forbidden device list
// 1159   // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
// 1160   // will send Remove-device and ban the device from joining.
// 1161 
// 1162   uint8     index;
// 1163   uint8*    restricted;
// 1164 
// 1165   // Look through the stored device list - used for restricted devices
// 1166   for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
// 1167   {
// 1168     restricted = ZDSecMgrStoredDeviceList[index];
// 1169 
// 1170     if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
// 1171     {
// 1172       // return as unknown device in regards to validation
// 1173       status = ZNwkUnknownDevice;
// 1174 
// 1175       // break from loop
// 1176       index = ZDSECMGR_STORED_DEVICES;
// 1177     }
// 1178   }
// 1179 
// 1180 #endif
// 1181 
// 1182   return status;
??ZDSecMgrDeviceValidateRM_0:
        LJMP      ??Subroutine66_0 & 0xFFFF
// 1183 }
          CFI EndBlock cfiBlock131
// 1184 
// 1185 /******************************************************************************
// 1186  * @fn          ZDSecMgrDeviceValidate
// 1187  *
// 1188  * @brief       Decide whether device is allowed.
// 1189  *
// 1190  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1191  *
// 1192  * @return      ZStatus_t
// 1193  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1194 ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceValidate:
          CFI Block cfiBlock132 Using cfiCommon0
          CFI Function ZDSecMgrDeviceValidate
        CODE
// 1195 {
        FUNCALL ZDSecMgrDeviceValidate, ZDSecMgrDeviceValidateRM
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1196   ZStatus_t status;
// 1197 
// 1198   if ( ZDSecMgrPermitJoiningEnabled == TRUE )
        MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDSecMgrDeviceValidate_0
// 1199   {
// 1200     status = ZDSecMgrDeviceValidateRM( device );
        ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
        LCALL     `??ZDSecMgrDeviceValidateRM::?relay`; Banked call to: ZDSecMgrDeviceValidateRM
        MOV       A,R1
        MOV       R1,A
        SJMP      ??ZDSecMgrDeviceValidate_1
// 1201   }
// 1202   else
// 1203   {
// 1204     status = ZNwkUnknownDevice;
??ZDSecMgrDeviceValidate_0:
        MOV       R1,#-0x38
// 1205   }
// 1206 
// 1207   return status;
??ZDSecMgrDeviceValidate_1:
        LJMP      ??Subroutine66_0 & 0xFFFF
// 1208 }
          CFI EndBlock cfiBlock132
// 1209 
// 1210 /******************************************************************************
// 1211  * @fn          ZDSecMgrDeviceJoin
// 1212  *
// 1213  * @brief       Try to join this device.
// 1214  *
// 1215  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1216  *
// 1217  * @return      ZStatus_t
// 1218  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1219 ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoin:
          CFI Block cfiBlock133 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoin
        CODE
// 1220 {
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceValidate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrSendNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoin, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 14
        MOV       A,#-0xe
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1221   ZStatus_t status = ZSuccess;
        MOV       ?V3,#0x0
// 1222   uint16    ami;
// 1223 
// 1224   // attempt to validate device that joined/rejoined without security
// 1225   if ( device->secure == FALSE )
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        MOV       A,R6
        ADD       A,#0x6
        MOV       ?V6,A
        CLR       A
        ADDC      A,R7
        MOV       ?V7,A
        MOV       DPL,?V6
        MOV       DPH,A
        MOVX      A,@DPTR
        JNZ       ??ZDSecMgrDeviceJoin_0
// 1226   {
// 1227     status = ZDSecMgrDeviceValidate( device );
        ; Setup parameters for call to function ZDSecMgrDeviceValidate
        LCALL     `??ZDSecMgrDeviceValidate::?relay`; Banked call to: ZDSecMgrDeviceValidate
        MOV       A,R1
        MOV       ?V3,A
// 1228   }
// 1229 
// 1230   if ( status == ZSuccess )
        JNZ       ??ZDSecMgrDeviceJoin_1
// 1231   {
// 1232     // Add the device to the address manager
// 1233     ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
??ZDSecMgrDeviceJoin_0:
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_100:
        LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1234 
// 1235     // Only send the key to devices that have not been authenticated
// 1236     if ( ( device->devStatus & DEV_SEC_INIT_STATUS ) &&
// 1237          ( device->secure == FALSE ) )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.2
        JNC       ??ZDSecMgrDeviceJoin_1
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        JNZ       ??ZDSecMgrDeviceJoin_1
// 1238     {
// 1239       //send the nwk key data to the joining device
// 1240       status = ZDSecMgrSendNwkKey( device );
        ; Setup parameters for call to function ZDSecMgrSendNwkKey
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrSendNwkKey::?relay`; Banked call to: ZDSecMgrSendNwkKey
        MOV       A,R1
        MOV       ?V3,A
// 1241     }
// 1242 
// 1243     if ( status != ZSuccess )
        JZ        ??ZDSecMgrDeviceJoin_2
// 1244     {
// 1245       ZDSecMgrAddrClear( device->extAddr );
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ??Subroutine65_0 & 0xFFFF
// 1246     }
// 1247   }
??CrossCallReturnLabel_101:
        LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
        SJMP      ??ZDSecMgrDeviceJoin_3
// 1248 
// 1249   if ( status != ZSuccess )
??ZDSecMgrDeviceJoin_1:
        MOV       A,?V3
        JZ        ??ZDSecMgrDeviceJoin_2
// 1250   {
// 1251     // not allowed or transport key failed, remove the device
// 1252     ZDSecMgrDeviceRemove( device );
??ZDSecMgrDeviceJoin_3:
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
        SJMP      ??ZDSecMgrDeviceJoin_4
// 1253   }
// 1254   else
// 1255   {
// 1256     // Pass the Trust Center Device Indication to higher layer if callback registered
// 1257     if (zdoCBFunc[ZDO_TC_DEVICE_CBID] != NULL )
??ZDSecMgrDeviceJoin_2:
        MOV       DPTR,#zdoCBFunc + 16
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_134:
        JZ        ??ZDSecMgrDeviceJoin_4
// 1258     {
// 1259       ZDO_TC_Device_t dev;
// 1260 
// 1261       dev.nwkAddr = device->nwkAddr;
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_127:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
// 1262       osal_memcpy( dev.extAddr, device->extAddr, Z_EXTADDR_LEN );
??CrossCallReturnLabel_5:
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
// 1263       dev.parentAddr = device->parentAddr;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine67_0 & 0xFFFF
// 1264 
// 1265       zdoCBFunc[ZDO_TC_DEVICE_CBID]( (void*)&dev );
// 1266     }
// 1267   }
??CrossCallReturnLabel_119:
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL     ?XSTACK_DISP101_8
        MOV       DPTR,#zdoCBFunc + 16
        LCALL     ??Subroutine76_0 & 0xFFFF
??CrossCallReturnLabel_176:
        LCALL     ?CALL_IND
// 1268       
// 1269       
// 1270 
// 1271   return status;
??ZDSecMgrDeviceJoin_4:
        MOV       R1,?V3
        MOV       A,#0xe
        SJMP      ??Subroutine62_0
// 1272 }
          CFI EndBlock cfiBlock133

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond134 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function ZDSecMgrTclkReq
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 69)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function ZDSecMgrDeviceJoin
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-2
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-2
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-2
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function ZDSecMgrAddLinkKey
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker142 Using cfiCommon1
          CFI (cfiPicker142) NoFunction
          CFI (cfiPicker142) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        RET
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiPicker142

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond143 Using cfiCommon0
          CFI Function ZDSecMgrAddrClear
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function ZDSecMgrDeviceJoin
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-2
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function APSME_TCLinkKeyLoad
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiPicker146 Using cfiCommon1
          CFI (cfiPicker146) NoFunction
          CFI (cfiPicker146) Picker
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_162:
        ; Setup parameters for call to function AddrMgrEntryRelease
        ; Setup parameters for indirect call
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiPicker146

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond147 Using cfiCommon0
          CFI Function ZDSecMgrSendNwkKey
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function ZDSecMgrDeviceJoin
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-2
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiPicker149 Using cfiCommon1
          CFI (cfiPicker149) NoFunction
          CFI (cfiPicker149) Picker
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_160:
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiPicker149
// 1273 
// 1274 /******************************************************************************
// 1275  * @fn          ZDSecMgrDeviceJoinDirect
// 1276  *
// 1277  * @brief       Try to join this device as a direct child.
// 1278  *
// 1279  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1280  *
// 1281  * @return      ZStatus_t
// 1282  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock150 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 36)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x14
          CFI EndBlock cfiBlock150
        REQUIRE ??Subroutine62_0
        ; // Fall through to label ??Subroutine62_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine62_0:
          CFI Block cfiBlock151 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock151
        REQUIRE ??Subroutine63_0
        ; // Fall through to label ??Subroutine63_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine63_0:
          CFI Block cfiBlock152 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock152

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1283 ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoinDirect:
          CFI Block cfiBlock153 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoinDirect
        CODE
// 1284 {
        FUNCALL ZDSecMgrDeviceJoinDirect, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinDirect, bdb_TCAddJoiningDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1285   ZStatus_t status;
// 1286   
// 1287   if(device->secure == FALSE)
        MOV       A,R6
        ADD       A,#0x2
        MOV       ?V4,A
        CLR       A
        ADDC      A,R7
        MOV       ?V5,A
        MOV       A,R6
        ADD       A,#0x6
        LCALL     ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_49:
        MOVX      A,@DPTR
        JZ        $+5
        LJMP      ??ZDSecMgrDeviceJoinDirect_0 & 0xFFFF
// 1288   {  
// 1289     uint8  found;
// 1290     uint16 keyNvIndex;
// 1291     APSME_TCLKDevEntry_t TCLKDevEntry;
// 1292     
// 1293     keyNvIndex = APSME_SearchTCLinkKeyEntry(device->extAddr,&found, &TCLKDevEntry);
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 1294     
// 1295     //If found and it was verified, then allow it to join in a fresh state by erasing the key entry
// 1296     if((found == TRUE) && (TCLKDevEntry.keyAttributes == ZG_VERIFIED_KEY))
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDSecMgrDeviceJoinDirect_0
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDSecMgrDeviceJoinDirect_0
// 1297     {
// 1298       uint16 index;
// 1299       TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 1300       //Increase the shift by one. Validate the maximum shift of the seed which is 15
// 1301       TCLKDevEntry.SeedShift_IcIndex++;
// 1302       TCLKDevEntry.SeedShift_IcIndex &= 0x0F;
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        INC       A
        ANL       A,#0xf
        MOVX      @DPTR,A
// 1303       
// 1304       TCLKDevEntry.rxFrmCntr = 0;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine83_0 & 0xFFFF
// 1305       TCLKDevEntry.txFrmCntr = 0;
??CrossCallReturnLabel_208:
        INC       A
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine83_0 & 0xFFFF
// 1306       
// 1307       index = keyNvIndex - ZCD_NV_TCLK_TABLE_START;
??CrossCallReturnLabel_209:
        LCALL     ?Subroutine43 & 0xFFFF
// 1308       
// 1309       TCLinkKeyFrmCntr[index].rxFrmCntr = 0;
??CrossCallReturnLabel_50:
        MOV       R4,B
        MOV       B,#0x9
        MOV       A,R1
        MUL       AB
        ADD       A,R4
        MOV       R1,A
        MOV       A,#TCLinkKeyFrmCntr & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine83_0 & 0xFFFF
// 1310       TCLinkKeyFrmCntr[index].txFrmCntr = 0;
??CrossCallReturnLabel_210:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine84_0 & 0xFFFF
// 1311       
// 1312       //Update the entry
// 1313       osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
??CrossCallReturnLabel_207:
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       ?V2,#0x13
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       R4,#0x0
        MOV       R5,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 1314     }
// 1315     
// 1316   }
// 1317 
// 1318   status = ZDSecMgrDeviceJoin( device );
??ZDSecMgrDeviceJoinDirect_0:
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
        MOV       A,R1
        MOV       ?V2,A
// 1319 
// 1320   if ( status == ZSuccess )
        JNZ       ??ZDSecMgrDeviceJoinDirect_1
// 1321   {
// 1322     // set association status to authenticated
// 1323     ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
        ; Setup parameters for call to function AssocGetWithShort
        MOV       DPL,R6
        MOV       DPH,R7
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
// 1324     
// 1325   #if (ZG_BUILD_COORDINATOR_TYPE)    
// 1326     //Add the device as joining device, if it did join unsecured
// 1327     if(device->secure == FALSE)
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        JNZ       ??ZDSecMgrDeviceJoinDirect_1
// 1328     {
// 1329       bdb_TCAddJoiningDevice(NLME_GetShortAddr(),device->extAddr);
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        ; Setup parameters for call to function bdb_TCAddJoiningDevice
        MOV       DPL,?V4
        MOV       DPH,?V5
        LCALL     ?Subroutine30 & 0xFFFF
// 1330     }
// 1331   #endif
// 1332   }
??CrossCallReturnLabel_28:
        LCALL     `??bdb_TCAddJoiningDevice::?relay`; Banked call to: bdb_TCAddJoiningDevice
// 1333 
// 1334   return status;
??ZDSecMgrDeviceJoinDirect_1:
        MOV       R1,?V2
        LJMP      ?Subroutine1 & 0xFFFF
// 1335 }
          CFI EndBlock cfiBlock153

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond154 Using cfiCommon0
          CFI Function ZDSecMgrSendNwkKey
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker156 Using cfiCommon1
          CFI (cfiPicker156) NoFunction
          CFI (cfiPicker156) Picker
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        MOV       DPL,?V0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiPicker156
// 1336 
// 1337 /******************************************************************************
// 1338  * @fn          ZDSecMgrDeviceJoinFwd
// 1339  *
// 1340  * @brief       Forward join to Trust Center.
// 1341  *
// 1342  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1343  *
// 1344  * @return      ZStatus_t
// 1345  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1346 ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
ZDSecMgrDeviceJoinFwd:
          CFI Block cfiBlock157 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoinFwd
        CODE
// 1347 {
        FUNCALL ZDSecMgrDeviceJoinFwd, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinFwd, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinFwd, APSME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinFwd, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinFwd, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrDeviceJoinFwd, APSME_UpdateDeviceReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV       A,#-0x11
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1348   ZStatus_t               status;
// 1349   APSME_UpdateDeviceReq_t req;
// 1350   uint8 TC_ExtAddr[Z_EXTADDR_LEN];
// 1351 
// 1352   // forward any joining device to the Trust Center -- the Trust Center will
// 1353   // decide if the device is allowed to join
// 1354   status = ZSuccess;
// 1355 
// 1356   // forward authorization to the Trust Center
// 1357   req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 1358   req.devAddr    = device->nwkAddr;
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_120:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
// 1359   req.devExtAddr = device->extAddr;
??CrossCallReturnLabel_87:
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_121:
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
// 1360 
// 1361   // set security status, option for router to reject if policy set
// 1362   if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
??CrossCallReturnLabel_150:
        MOV       A,R2
        ADD       A,#0x7
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       C,0xE0 /* A   */.7
        JNC       ??ZDSecMgrDeviceJoinFwd_0
// 1363   {
// 1364     if ( device->devStatus & DEV_REJOIN_STATUS )
        MOV       C,0xE0 /* A   */.6
        JNC       ??ZDSecMgrDeviceJoinFwd_1
// 1365     {
// 1366       if ( device->secure == TRUE )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDSecMgrDeviceJoinFwd_2
// 1367       {
// 1368         req.status = APSME_UD_HIGH_SECURED_REJOIN;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        SJMP      ??ZDSecMgrDeviceJoinFwd_3
// 1369       }
// 1370       else
// 1371       {
// 1372         req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
??ZDSecMgrDeviceJoinFwd_2:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x7
        SJMP      ??ZDSecMgrDeviceJoinFwd_3
// 1373       }
// 1374     }
// 1375     else
// 1376     {
// 1377       req.status = APSME_UD_HIGH_UNSECURED_JOIN;
??ZDSecMgrDeviceJoinFwd_1:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x5
        SJMP      ??ZDSecMgrDeviceJoinFwd_3
// 1378     }
// 1379   }
// 1380   else
// 1381   {
// 1382     if ( device->devStatus & DEV_REJOIN_STATUS )
??ZDSecMgrDeviceJoinFwd_0:
        MOV       C,0xE0 /* A   */.6
        JNC       ??ZDSecMgrDeviceJoinFwd_4
// 1383     {
// 1384       if ( device->secure == TRUE )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDSecMgrDeviceJoinFwd_5
// 1385       {
// 1386         req.status = APSME_UD_STANDARD_SECURED_REJOIN;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        SJMP      ??ZDSecMgrDeviceJoinFwd_3
// 1387       }
// 1388       else
// 1389       {
// 1390         req.status = APSME_UD_STANDARD_TRUST_CENTER_REJOIN;
??ZDSecMgrDeviceJoinFwd_5:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x3
        SJMP      ??ZDSecMgrDeviceJoinFwd_3
// 1391       }
// 1392     }
// 1393     else
// 1394     {
// 1395       req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
??ZDSecMgrDeviceJoinFwd_4:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
??ZDSecMgrDeviceJoinFwd_3:
        MOVX      @DPTR,A
// 1396     }
// 1397   }
// 1398 
// 1399   // set association status to authenticated
// 1400   ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
        ; Setup parameters for call to function AssocGetWithShort
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
// 1401 
// 1402   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1403   {
// 1404     uint8 found;
// 1405     APSME_GetRequest( apsTrustCenterAddress,0, TC_ExtAddr );
        ; Setup parameters for call to function APSME_GetRequest
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#-0x55
        LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
// 1406     
// 1407     APSME_SearchTCLinkKeyEntry(TC_ExtAddr,&found,NULL);
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1408     
// 1409     // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
// 1410     // un-encrypted and one APS encrypted, to make sure that it can interoperate
// 1411     // with legacy Coordinator devices which can only handle one or the other.
// 1412 #if defined ( APP_TP2_TEST_MODE )
// 1413     if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( found == FALSE ) && ( guTxApsSecON != TRUE ) )
// 1414 #else
// 1415     if ( ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY ) && ( found == FALSE ) )
        MOV       DPTR,#zgApsLinkKeyType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDSecMgrDeviceJoinFwd_6
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       ??ZDSecMgrDeviceJoinFwd_6
// 1416 #endif
// 1417     {
// 1418       req.apsSecure = FALSE;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1419 
// 1420       // send and APSME_UPDATE_DEVICE request to the trust center
// 1421       status = APSME_UpdateDeviceReq( &req );
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        INC       A
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
// 1422     }
// 1423 
// 1424 #if defined ( APP_TP2_TEST_MODE )
// 1425     if ( guTxApsSecON != FALSE )
// 1426     {
// 1427       // send the message APS encrypted
// 1428       req.apsSecure = TRUE;
// 1429 
// 1430       // send and APSME_UPDATE_DEVICE request to the trust center
// 1431       status = APSME_UpdateDeviceReq( &req );
// 1432     }
// 1433 #else
// 1434     // send the message APS encrypted
// 1435     req.apsSecure = TRUE;
??ZDSecMgrDeviceJoinFwd_6:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1436 
// 1437     // send and APSME_UPDATE_DEVICE request to the trust center
// 1438     status = APSME_UpdateDeviceReq( &req );
// 1439 #endif
// 1440   }
// 1441   else
// 1442   {
// 1443     req.apsSecure = FALSE;
// 1444 
// 1445     // send and APSME_UPDATE_DEVICE request to the trust center
// 1446     status = APSME_UpdateDeviceReq( &req );
// 1447   }
// 1448 
// 1449   return status;
        ; Setup parameters for call to function APSME_UpdateDeviceReq
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
        LJMP      ?Subroutine4 & 0xFFFF
// 1450 }
          CFI EndBlock cfiBlock157

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond158 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_114
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function APSME_LinkKeySet
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+-2
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker161 Using cfiCommon1
          CFI (cfiPicker161) NoFunction
          CFI (cfiPicker161) Picker
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_180:
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiPicker161
        REQUIRE ??Subroutine64_0
        ; // Fall through to label ??Subroutine64_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine64_0:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function ZDSecMgrDeviceRemove
          CFI Conditional ??CrossCallReturnLabel_111
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function APSME_KeyFwdToChild
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function APSME_LinkKeySet
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond165) CFA_SP SP+-2
          CFI (cfiCond165) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function APSME_LinkKeySet
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker168 Using cfiCommon1
          CFI (cfiPicker168) NoFunction
          CFI (cfiPicker168) Picker
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiPicker168
        REQUIRE ??Subroutine65_0
        ; // Fall through to label ??Subroutine65_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine65_0:
          CFI Block cfiCond169 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExt
          CFI Conditional ??CrossCallReturnLabel_89
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function ZDSecMgrEntryFree
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-2
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function ZDSecMgrEntryFree
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function ZDSecMgrEntryFree
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function ZDSecMgrAppKeyGet
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond173) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond173) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond173) CFA_SP SP+-7
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function ZDSecMgrAppKeyReq
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function ZDSecMgrAppKeyReq
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-2
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 59)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function ZDSecMgrTclkReq
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-2
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 69)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function ZDSecMgrDeviceRemoveByExtAddr
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function ZDSecMgrDeviceRemove
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function ZDSecMgrDeviceRemove
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function ZDSecMgrDeviceJoin
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function ZDSecMgrDeviceJoin
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+-2
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond187) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond187) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond187) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond187) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond187) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond187) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond187) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond187) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond187) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond187) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond187) CFA_SP SP+-2
          CFI (cfiCond187) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function APSME_IsLinkKeyValid
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-2
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function ZDSecMgrAddLinkKey
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-2
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function APSME_TCLinkKeyLoad
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function ZDSecMgrDeviceRemove
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-2
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function APSME_KeyFwdToChild
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+-2
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function APSME_LinkKeySet
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function APSME_LinkKeySet
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        RET
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197
// 1451 
// 1452 /******************************************************************************
// 1453  * @fn          ZDSecMgrDeviceNew
// 1454  *
// 1455  * @brief       Process a new device.
// 1456  *
// 1457  * @param       device - [in] ZDSecMgrDevice_t, device info
// 1458  *
// 1459  * @return      ZStatus_t
// 1460  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1461 ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
ZDSecMgrDeviceNew:
          CFI Block cfiBlock198 Using cfiCommon0
          CFI Function ZDSecMgrDeviceNew
        CODE
// 1462 {
        FUNCALL ZDSecMgrDeviceNew, ZDSecMgrDeviceJoinDirect
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1463   ZStatus_t status;
// 1464 
// 1465   if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1466       || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
// 1467   {
// 1468     // try to join this device
// 1469     status = ZDSecMgrDeviceJoinDirect( joiner );
// 1470   }
// 1471   else
// 1472   {
// 1473     status = ZDSecMgrDeviceJoinFwd( joiner );
// 1474   }
// 1475 
// 1476   return status;
        ; Setup parameters for call to function ZDSecMgrDeviceJoinDirect
        LCALL     `??ZDSecMgrDeviceJoinDirect::?relay`; Banked call to: ZDSecMgrDeviceJoinDirect
        SJMP      ??Subroutine66_0
// 1477 }
          CFI EndBlock cfiBlock198
// 1478 
// 1479 /******************************************************************************
// 1480  * @fn          ZDSecMgrAssocDeviceAuth
// 1481  *
// 1482  * @brief       Set associated device status to authenticated
// 1483  *
// 1484  * @param       assoc - [in, out] associated_devices_t
// 1485  *
// 1486  * @return      none
// 1487  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1488 void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
ZDSecMgrAssocDeviceAuth:
          CFI Block cfiBlock199 Using cfiCommon0
          CFI Function ZDSecMgrAssocDeviceAuth
        CODE
// 1489 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1490   if ( assoc != NULL )
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDSecMgrAssocDeviceAuth_0
// 1491   {
// 1492     assoc->devStatus |= DEV_SEC_AUTH_STATUS;
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        SETB      0xE0 /* A   */.3
        MOVX      @DPTR,A
// 1493   }
// 1494 }
??ZDSecMgrAssocDeviceAuth_0:
        SJMP      ??Subroutine66_0
          CFI EndBlock cfiBlock199
// 1495 
// 1496 /******************************************************************************
// 1497  * @fn          ZDSecMgrAuthNwkKey
// 1498  *
// 1499  * @brief       Handle next step in authentication process
// 1500  *
// 1501  * @param       none
// 1502  *
// 1503  * @return      none
// 1504  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1505 void ZDSecMgrAuthNwkKey()
ZDSecMgrAuthNwkKey:
          CFI Block cfiBlock200 Using cfiCommon0
          CFI Function ZDSecMgrAuthNwkKey
        CODE
// 1506 {
        FUNCALL ZDSecMgrAuthNwkKey, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1507   if ( devState == DEV_END_DEVICE_UNAUTH )
        MOV       DPTR,#devState
        MOVX      A,@DPTR
        XRL       A,#0x5
        JNZ       ??ZDSecMgrAuthNwkKey_0
// 1508   {
// 1509     // inform ZDO that device has been authenticated
// 1510     osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#-0x80
        MOV       R3,#0x0
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
// 1511   }
// 1512 }
??ZDSecMgrAuthNwkKey_0:
        SJMP      ??Subroutine66_0
          CFI EndBlock cfiBlock200
// 1513 
// 1514 /******************************************************************************
// 1515  * PUBLIC FUNCTIONS
// 1516  */
// 1517 /******************************************************************************
// 1518  * @fn          ZDSecMgrInit
// 1519  *
// 1520  * @brief       Initialize ZigBee Device Security Manager.
// 1521  *
// 1522  * @param       state - device initialization state
// 1523  *
// 1524  * @return      none
// 1525  */
// 1526 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 1527 void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
// 1528 void ZDSecMgrAddrMgrCB( uint8           update,
// 1529                         AddrMgrEntry_t* newEntry,
// 1530                         AddrMgrEntry_t* oldEntry )
// 1531 {
// 1532   (void)update;
// 1533   (void)newEntry;
// 1534   (void)oldEntry;
// 1535 }
// 1536 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 1537 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1538 void ZDSecMgrInit(uint8 state)
ZDSecMgrInit:
          CFI Block cfiBlock201 Using cfiCommon0
          CFI Function ZDSecMgrInit
        CODE
// 1539 {
        FUNCALL ZDSecMgrInit, ZDSecMgrEntryInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInit, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInit, APSME_SetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInit, SSP_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInit, APSME_SecurityCM_CD
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1540   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1541   {
// 1542     // initialize sub modules
// 1543     ZDSecMgrEntryInit(state);
        ; Setup parameters for call to function ZDSecMgrEntryInit
        LCALL     `??ZDSecMgrEntryInit::?relay`; Banked call to: ZDSecMgrEntryInit
// 1544 
// 1545     if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1546     {
// 1547       APSME_SetRequest( apsTrustCenterAddress, 0, NLME_GetExtAddr() );
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function APSME_SetRequest
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#-0x55
        LCALL     `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
// 1548     }
// 1549 
// 1550     // register with Address Manager
// 1551 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
// 1552     AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
// 1553 #endif
// 1554   }
// 1555 
// 1556   if ( ZG_SECURE_ENABLED )
// 1557   {
// 1558     if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1559          || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
// 1560     {
// 1561       // setup joining permissions
// 1562       ZDSecMgrPermitJoiningEnabled = TRUE;  
        MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1563       ZDSecMgrPermitJoiningTimed   = FALSE;
        MOV       DPTR,#ZDSecMgrPermitJoiningTimed
        CLR       A
        MOVX      @DPTR,A
// 1564     }
// 1565   }
// 1566 
// 1567   // configure security based on security mode and type of device
// 1568   ZDSecMgrConfig();
        ; Setup parameters for call to function SSP_Init
        LCALL     `??SSP_Init::?relay`; Banked call to: SSP_Init
        ; Setup parameters for call to function APSME_SecurityCM_CD
        LCALL     `??APSME_SecurityCM_CD::?relay`; Banked call to: APSME_SecurityCM_CD
// 1569 }
        LJMP      ??Subroutine72_0 & 0xFFFF
          CFI EndBlock cfiBlock201
// 1570 
// 1571 /******************************************************************************
// 1572  * @fn          ZDSecMgrConfig
// 1573  *
// 1574  * @brief       Configure ZigBee Device Security Manager.
// 1575  *
// 1576  * @param       none
// 1577  *
// 1578  * @return      none
// 1579  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1580 void ZDSecMgrConfig( void )
ZDSecMgrConfig:
          CFI Block cfiBlock202 Using cfiCommon0
          CFI Function ZDSecMgrConfig
        CODE
// 1581 {
        FUNCALL ZDSecMgrConfig, SSP_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrConfig, APSME_SecurityCM_CD
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1582   if ( ZG_SECURE_ENABLED )
// 1583   {
// 1584     SSP_Init();
        ; Setup parameters for call to function SSP_Init
        LCALL     `??SSP_Init::?relay`; Banked call to: SSP_Init
// 1585 
// 1586     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1587     {
// 1588       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1589       {
// 1590         // COMMERCIAL MODE - COORDINATOR DEVICE
// 1591         APSME_SecurityCM_CD();
        ; Setup parameters for call to function APSME_SecurityCM_CD
        LCALL     `??APSME_SecurityCM_CD::?relay`; Banked call to: APSME_SecurityCM_CD
// 1592       }
// 1593       else if ( ZSTACK_ROUTER_BUILD )
// 1594       {
// 1595         // COMMERCIAL MODE - ROUTER DEVICE
// 1596         APSME_SecurityCM_RD();
// 1597       }
// 1598       else
// 1599       {
// 1600         // COMMERCIAL MODE - END DEVICE
// 1601         APSME_SecurityCM_ED();
// 1602       }
// 1603     }
// 1604     else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 1605     {
// 1606       if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
// 1607       {
// 1608         // RESIDENTIAL MODE - COORDINATOR DEVICE
// 1609         APSME_SecurityRM_CD();
// 1610       }
// 1611       else if ( ZSTACK_ROUTER_BUILD )
// 1612       {
// 1613         // RESIDENTIAL MODE - ROUTER DEVICE
// 1614         APSME_SecurityRM_RD();
// 1615       }
// 1616       else
// 1617       {
// 1618         // RESIDENTIAL MODE - END DEVICE
// 1619         APSME_SecurityRM_ED();
// 1620       }
// 1621     }
// 1622   }
// 1623   else
// 1624   {
// 1625     // NO SECURITY
// 1626     APSME_SecurityNM();
// 1627   }
// 1628 }
        SJMP      ??Subroutine66_0
          CFI EndBlock cfiBlock202

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock203 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOVX      @DPTR,A
        MOV       R1,#0x0
          CFI EndBlock cfiBlock203
        REQUIRE ??Subroutine66_0
        ; // Fall through to label ??Subroutine66_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine66_0:
          CFI Block cfiBlock204 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock204
// 1629 
// 1630 /******************************************************************************
// 1631  * @fn          ZDSecMgrPermitJoining
// 1632  *
// 1633  * @brief       Process request to change joining permissions.
// 1634  *
// 1635  * @param       duration - [in] timed duration for join in seconds
// 1636  *                         - 0x00 not allowed
// 1637  *                         - 0xFF allowed without timeout
// 1638  *
// 1639  * @return      uint8 - success(TRUE:FALSE)
// 1640  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1641 uint8 ZDSecMgrPermitJoining( uint8 duration )
ZDSecMgrPermitJoining:
          CFI Block cfiBlock205 Using cfiCommon0
          CFI Function ZDSecMgrPermitJoining
        CODE
// 1642 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R1
        MOV       R0,A
// 1643   uint8 accept;
// 1644 
// 1645   ZDSecMgrPermitJoiningTimed = FALSE;
        MOV       DPTR,#ZDSecMgrPermitJoiningTimed
        CLR       A
        MOVX      @DPTR,A
// 1646 
// 1647   if ( duration > 0 )
        MOV       A,R0
        MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
        JZ        ??ZDSecMgrPermitJoining_0
// 1648   {
// 1649     ZDSecMgrPermitJoiningEnabled = TRUE;
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1650 
// 1651     ZDSecMgrPermitJoiningTimed = TRUE;
        MOV       DPTR,#ZDSecMgrPermitJoiningTimed
        SJMP      ??ZDSecMgrPermitJoining_1
// 1652   }
// 1653   else
// 1654   {
// 1655     ZDSecMgrPermitJoiningEnabled = FALSE;
??ZDSecMgrPermitJoining_0:
        CLR       A
??ZDSecMgrPermitJoining_1:
        MOVX      @DPTR,A
// 1656   }
// 1657 
// 1658   accept = TRUE;
// 1659 
// 1660   return accept;
        MOV       R1,#0x1
        SJMP      ??Subroutine66_0
// 1661 }
          CFI EndBlock cfiBlock205
// 1662 
// 1663 /******************************************************************************
// 1664  * @fn          ZDSecMgrPermitJoiningTimeout
// 1665  *
// 1666  * @brief       Process permit joining timeout
// 1667  *
// 1668  * @param       none
// 1669  *
// 1670  * @return      none
// 1671  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1672 void ZDSecMgrPermitJoiningTimeout( void )
ZDSecMgrPermitJoiningTimeout:
          CFI Block cfiBlock206 Using cfiCommon0
          CFI Function ZDSecMgrPermitJoiningTimeout
        CODE
// 1673 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1674   if ( ZDSecMgrPermitJoiningTimed == TRUE )
        MOV       DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDSecMgrPermitJoiningTimeout_0
// 1675   {
// 1676     ZDSecMgrPermitJoiningEnabled = FALSE;
        MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
        CLR       A
        MOVX      @DPTR,A
// 1677     ZDSecMgrPermitJoiningTimed   = FALSE;
        MOV       DPTR,#ZDSecMgrPermitJoiningTimed
        MOVX      @DPTR,A
// 1678   }
// 1679 }
??ZDSecMgrPermitJoiningTimeout_0:
        SJMP      ??Subroutine66_0
          CFI EndBlock cfiBlock206
// 1680 
// 1681 /******************************************************************************
// 1682  * @fn          ZDSecMgrNewDeviceEvent
// 1683  *
// 1684  * @brief       Process a the new device event, if found reset new device
// 1685  *              event/timer.
// 1686  *
// 1687  * @param       ShortAddr - of New Device to process
// 1688  *
// 1689  * @return      uint8 - found(TRUE:FALSE)
// 1690  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1691 uint8 ZDSecMgrNewDeviceEvent( uint16 ShortAddr )
ZDSecMgrNewDeviceEvent:
          CFI Block cfiBlock207 Using cfiCommon0
          CFI Function ZDSecMgrNewDeviceEvent
        CODE
// 1692 {
        FUNCALL ZDSecMgrNewDeviceEvent, AssocGetWithShort
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrDeviceNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, ZDSecMgrAddrClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNewDeviceEvent, AssocRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 21
        MOV       A,#-0x15
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 33)
// 1693   uint8                 found;
// 1694   ZDSecMgrDevice_t      device;
// 1695   AddrMgrEntry_t        addrEntry;
// 1696   associated_devices_t* assoc;
// 1697   ZStatus_t             status;
// 1698 
// 1699   // initialize return results
// 1700   found = FALSE;
        MOV       ?V0,#0x0
// 1701 
// 1702   assoc = AssocGetWithShort( ShortAddr );
        ; Setup parameters for call to function AssocGetWithShort
        LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R6,?V2
        MOV       R7,?V3
// 1703 
// 1704   if ( assoc != NULL )
        MOV       A,R6
        ORL       A,R7
        JNZ       $+5
        LJMP      ??ZDSecMgrNewDeviceEvent_0 & 0xFFFF
// 1705   {
// 1706     // device found
// 1707     found = TRUE;
        MOV       ?V0,#0x1
// 1708 
// 1709     // check for preconfigured security
// 1710     if ( zgPreConfigKeys == TRUE )
        MOV       DPTR,#zgPreConfigKeys
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDSecMgrNewDeviceEvent_1
// 1711     {
// 1712       // set association status to authenticated
// 1713       ZDSecMgrAssocDeviceAuth( assoc );
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
// 1714     }
// 1715 
// 1716     // set up device info
// 1717     addrEntry.user  = ADDRMGR_USER_DEFAULT;
??ZDSecMgrNewDeviceEvent_1:
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        LCALL     ?Subroutine49 & 0xFFFF
// 1718     addrEntry.index = assoc->addrIdx;
??CrossCallReturnLabel_62:
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_122:
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
// 1719     AddrMgrEntryGet( &addrEntry );
??CrossCallReturnLabel_151:
        ; Setup parameters for call to function AddrMgrEntryGet
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
// 1720 
// 1721     device.nwkAddr    = assoc->shortAddr;
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_128:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine24 & 0xFFFF
// 1722     device.extAddr    = addrEntry.extAddr;
??CrossCallReturnLabel_23:
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
// 1723     device.parentAddr = NLME_GetShortAddr();
??CrossCallReturnLabel_152:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine81_0 & 0xFFFF
// 1724 
// 1725     // the new device performed Secured Rejoin
// 1726     if ( ( assoc->devStatus & DEV_SECURED_JOIN ) &&
// 1727          ( assoc->devStatus & DEV_REJOIN_STATUS ) )
??CrossCallReturnLabel_199:
        MOV       A,R6
        ADD       A,#0x5
        MOV       R6,A
        JNC       ??ZDSecMgrNewDeviceEvent_2
        INC       R7
??ZDSecMgrNewDeviceEvent_2:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        ANL       A,#0x60
        XRL       A,#0x60
        JNZ       ??ZDSecMgrNewDeviceEvent_3
// 1728     {
// 1729       device.secure     = TRUE;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        SJMP      ??ZDSecMgrNewDeviceEvent_4
// 1730     }
// 1731     else
// 1732     {
// 1733       device.secure     = FALSE;
??ZDSecMgrNewDeviceEvent_3:
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        CLR       A
// 1734     }
??ZDSecMgrNewDeviceEvent_4:
        LCALL     ?Subroutine49 & 0xFFFF
// 1735     device.devStatus  = assoc->devStatus;
??CrossCallReturnLabel_63:
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ??Subroutine74_0 & 0xFFFF
// 1736 
// 1737     // process new device
// 1738     status = ZDSecMgrDeviceNew( &device );
// 1739 
// 1740     if ( status == ZSuccess )
??CrossCallReturnLabel_169:
        LCALL     `??ZDSecMgrDeviceNew::?relay`; Banked call to: ZDSecMgrDeviceNew
        MOV       A,R1
        JNZ       ??ZDSecMgrNewDeviceEvent_5
// 1741     {
// 1742       assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        CLR       0xE0 /* A   */.2
        MOVX      @DPTR,A
        SJMP      ??ZDSecMgrNewDeviceEvent_0
// 1743     }
// 1744     else
// 1745     {
// 1746       // Clear SECURITY bit from Address Manager
// 1747       ZDSecMgrAddrClear( addrEntry.extAddr );
??ZDSecMgrNewDeviceEvent_5:
        ; Setup parameters for call to function ZDSecMgrAddrClear
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
// 1748 
// 1749       // Remove the Association completely
// 1750       AssocRemove( addrEntry.extAddr );
        ; Setup parameters for call to function AssocRemove
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??AssocRemove::?relay`; Banked call to: AssocRemove
// 1751     }
// 1752   }
// 1753 
// 1754   return found;
??ZDSecMgrNewDeviceEvent_0:
        MOV       R1,?V0
        MOV       A,#0x15
        LJMP      ?Subroutine3 & 0xFFFF
// 1755 }
          CFI EndBlock cfiBlock207

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond208 Using cfiCommon0
          CFI Function ZDSecMgrSendNwkKey
          CFI Conditional ??CrossCallReturnLabel_126
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function ZDSecMgrDeviceJoin
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-2
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker211 Using cfiCommon1
          CFI (cfiPicker211) NoFunction
          CFI (cfiPicker211) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiPicker211
        REQUIRE ??Subroutine67_0
        ; // Fall through to label ??Subroutine67_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine67_0:
          CFI Block cfiCond212 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyReq
          CFI Conditional ??CrossCallReturnLabel_117
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function ZDSecMgrSendNwkKey
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function ZDSecMgrDeviceJoin
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-2
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-2
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-2
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function APSME_LinkKeySet
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function ZDSecMgrAPSRemove
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond220) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond220) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond220) CFA_SP SP+-7
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function ZDSecMgrSendNwkKey
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function ZDSecMgrDeviceJoin
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiPicker224 Using cfiCommon1
          CFI (cfiPicker224) NoFunction
          CFI (cfiPicker224) Picker
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_196:
        RET
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiPicker224
// 1756 
// 1757 /******************************************************************************
// 1758  * @fn          ZDSecMgrTCExtAddrCheck
// 1759  *
// 1760  * @brief       Verifies if received ext. address matches TC ext. address.
// 1761  *
// 1762  * @param       extAddr - Extended address to be verified.
// 1763  *
// 1764  * @return      TRUE - extended address matches
// 1765  *              FALSE - otherwise
// 1766  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1767 uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
ZDSecMgrTCExtAddrCheck:
          CFI Block cfiBlock225 Using cfiCommon0
          CFI Function ZDSecMgrTCExtAddrCheck
        CODE
// 1768 {
        FUNCALL ZDSecMgrTCExtAddrCheck, APSME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCExtAddrCheck, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1769   uint8  lookup[Z_EXTADDR_LEN];
// 1770   APSME_GetRequest( apsTrustCenterAddress, 0, lookup );
        ; Setup parameters for call to function APSME_GetRequest
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#-0x55
        LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
// 1771   return osal_ExtAddrEqual( extAddr, lookup );
        ; Setup parameters for call to function sAddrExtCmp
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
          CFI EndBlock cfiBlock225
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7
// 1772 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock226 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x8
        SJMP      ??Subroutine68_0
          CFI EndBlock cfiBlock226

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock227 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0xd
          CFI EndBlock cfiBlock227
        REQUIRE ??Subroutine68_0
        ; // Fall through to label ??Subroutine68_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine68_0:
          CFI Block cfiBlock228 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock228
        REQUIRE ??Subroutine69_0
        ; // Fall through to label ??Subroutine69_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine69_0:
          CFI Block cfiBlock229 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock229
// 1773 
// 1774 /******************************************************************************
// 1775  * @fn          ZDSecMgrTCDataLoad
// 1776  *
// 1777  * @brief       Stores the address of TC into address manager.
// 1778  *
// 1779  * @param       extAddr - Extended address to be verified.
// 1780  *
// 1781  * @return      none
// 1782  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1783 void ZDSecMgrTCDataLoad( uint8* extAddr )
ZDSecMgrTCDataLoad:
          CFI Block cfiBlock230 Using cfiCommon0
          CFI Function ZDSecMgrTCDataLoad
        CODE
// 1784 {
        FUNCALL ZDSecMgrTCDataLoad, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, APSME_IsDistributedSecurity
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTCDataLoad, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 15
        MOV       A,#-0xf
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 1785   uint16 ami;
// 1786   AddrMgrEntry_t entry;
// 1787 
// 1788   // lookup using TC short address
// 1789   entry.user    = ADDRMGR_USER_DEFAULT;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1790   osal_cpyExtAddr( entry.extAddr, extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 1791 
// 1792   // Verify if TC address has been added to Address Manager
// 1793   if ( !APSME_IsDistributedSecurity() && ( AddrMgrEntryLookupExt( &entry ) != TRUE ) )
        ; Setup parameters for call to function APSME_IsDistributedSecurity
        LCALL     `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
        MOV       A,R1
        JNZ       ??ZDSecMgrTCDataLoad_0
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV       A,R1
        XRL       A,#0x1
        JZ        ??ZDSecMgrTCDataLoad_0
// 1794   {
// 1795     ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
// 1796   }
// 1797 }
??ZDSecMgrTCDataLoad_0:
        MOV       A,#0xf
        LJMP      ??Subroutine71_0 & 0xFFFF
          CFI EndBlock cfiBlock230
// 1798 
// 1799 /******************************************************************************
// 1800  * @fn          ZDSecMgrTransportKeyInd
// 1801  *
// 1802  * @brief       Process the ZDO_TransportKeyInd_t message.
// 1803  *
// 1804  * @param       ind - [in] ZDO_TransportKeyInd_t indication
// 1805  *
// 1806  * @return      none
// 1807  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1808 void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
ZDSecMgrTransportKeyInd:
          CFI Block cfiBlock231 Using cfiCommon0
          CFI Function ZDSecMgrTransportKeyInd
        CODE
// 1809 {
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrUpdateTCAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, osal_isbufset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrTCDataLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrReadKeyFromNv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrAuthNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, APSME_EraseICEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 56, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 56, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, bdb_tcLinkKeyExchangeAttempt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, APSME_LinkKeySet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrTransportKeyInd, ZDSecMgrWriteNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 40
        MOV       A,#-0x28
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       ?V0,R2
        MOV       ?V1,R3
// 1810   uint8 index;
// 1811   uint8 zgPreConfigKey[SEC_KEY_LEN];
// 1812 
// 1813   ZDSecMgrUpdateTCAddress( ind->srcExtAddr );
        MOV       A,R2
        ADD       A,#0x16
        MOV       R6,A
        CLR       A
        ADDC      A,?V1
        MOV       R7,A
        ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
// 1814   
// 1815 #if ZG_BUILD_JOINING_TYPE
// 1816   if(ZG_DEVICE_JOINING_TYPE)
// 1817   {
// 1818     //Update the TC address in the entry
// 1819     osal_nv_write(ZCD_NV_TCLK_TABLE_START, osal_offsetof(APSME_TCLKDevEntry_t,extAddr), Z_EXTADDR_LEN, ind->srcExtAddr);
// 1820   }
// 1821 #endif
// 1822   
// 1823   // check for distributed security
// 1824   if ( ( ZG_BUILD_RTR_TYPE ) && osal_isbufset( ind->srcExtAddr, 0xFF, Z_EXTADDR_LEN ) )
        ; Setup parameters for call to function osal_isbufset
        MOV       R4,#0x8
        MOV       R1,#-0x1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        MOV       A,R1
        JZ        ??ZDSecMgrTransportKeyInd_0
// 1825   {
// 1826     ZDSecMgrPermitJoiningEnabled = TRUE;  
        MOV       DPTR,#ZDSecMgrPermitJoiningEnabled
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1827   }
// 1828   
// 1829   // load Trust Center data if needed
// 1830   ZDSecMgrTCDataLoad( ind->srcExtAddr );
??ZDSecMgrTransportKeyInd_0:
        ; Setup parameters for call to function ZDSecMgrTCDataLoad
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrTCDataLoad::?relay`; Banked call to: ZDSecMgrTCDataLoad
// 1831   
// 1832   if ( ( ind->keyType == KEY_TYPE_NWK ) ||
// 1833        ( ind->keyType == 6            ) )
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,?V0
        ADD       A,#0x6
        MOV       ?V2,A
        CLR       A
        ADDC      A,?V1
        MOV       ?V3,A
        MOV       A,#0x1
        XRL       A,R0
        JZ        ??ZDSecMgrTransportKeyInd_1
        MOV       A,#0x6
        XRL       A,R0
        JNZ       ??ZDSecMgrTransportKeyInd_2
// 1834   {
// 1835     // check for dummy NWK key (all zeros)
// 1836     for ( index = 0;
??ZDSecMgrTransportKeyInd_1:
        MOV       R0,#0x0
??ZDSecMgrTransportKeyInd_3:
        MOV       A,R0
        MOV       R2,A
        MOV       A,?V0
        ADD       A,R2
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       ??ZDSecMgrTransportKeyInd_4
// 1837           ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
// 1838           index++ );
        INC       R0
        MOV       A,R0
        CLR       C
        SUBB      A,#0x10
        JC        ??ZDSecMgrTransportKeyInd_3
// 1839 
// 1840     if ( index == SEC_KEY_LEN )
??ZDSecMgrTransportKeyInd_4:
        MOV       A,#0x10
        XRL       A,R0
        JNZ       ??ZDSecMgrTransportKeyInd_5
// 1841     {
// 1842       // load preconfigured key - once!!
// 1843       if ( !_NIB.nwkKeyLoaded )
        MOV       DPTR,#_NIB + 61
        MOVX      A,@DPTR
        JNZ       ??ZDSecMgrTransportKeyInd_6
// 1844       {
// 1845         ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
        ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x62
        MOV       R3,#0x0
        LCALL     `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
// 1846         SSP_UpdateNwkKey( zgPreConfigKey, 0 );
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV       R1,#0x0
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
// 1847         SSP_SwitchNwkKey( 0 );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV       R1,#0x0
        LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 1848 
// 1849         // clear local copy of key
// 1850         osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x18
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
        SJMP      ??ZDSecMgrTransportKeyInd_6
// 1851       }
// 1852     }
// 1853     else
// 1854     {
// 1855       SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
??ZDSecMgrTransportKeyInd_5:
        MOV       A,?V0
        ADD       A,#0x5
        MOV       R6,A
        CLR       A
        ADDC      A,?V1
        MOV       R7,A
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       R2,?V2
        MOV       R3,?V3
        LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
// 1856       if ( !_NIB.nwkKeyLoaded )
        MOV       DPTR,#_NIB + 61
        MOVX      A,@DPTR
        JNZ       ??ZDSecMgrTransportKeyInd_6
// 1857       {
// 1858         SSP_SwitchNwkKey( ind->keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 1859       }
// 1860     }
// 1861 
// 1862     // handle next step in authentication process
// 1863     ZDSecMgrAuthNwkKey();
??ZDSecMgrTransportKeyInd_6:
        ; Setup parameters for call to function ZDSecMgrAuthNwkKey
        LCALL     `??ZDSecMgrAuthNwkKey::?relay`; Banked call to: ZDSecMgrAuthNwkKey
        LJMP      ??ZDSecMgrTransportKeyInd_7 & 0xFFFF
// 1864   }
// 1865   else if ( ind->keyType == KEY_TYPE_TC_LINK )
??ZDSecMgrTransportKeyInd_2:
        MOV       A,#0x4
        XRL       A,R0
        JZ        $+5
        LJMP      ??ZDSecMgrTransportKeyInd_8 & 0xFFFF
// 1866   {
// 1867     uint16 entryIndex;
// 1868     uint8 found;
// 1869     APSME_TCLKDevEntry_t TCLKDevEntry;
// 1870     
// 1871     //Search the entry, which should exist at this point
// 1872     entryIndex = APSME_SearchTCLinkKeyEntry(ind->srcExtAddr, &found, &TCLKDevEntry);
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R6,?V0
        MOV       R7,?V1
// 1873     
// 1874     if(found)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??ZDSecMgrTransportKeyInd_7 & 0xFFFF
// 1875     {
// 1876       //If the key was an IC, then erase the entry since that will not longer be used.
// 1877       if(TCLKDevEntry.keyAttributes == ZG_PROVISIONAL_KEY)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JNZ       ??ZDSecMgrTransportKeyInd_9
// 1878       {
// 1879         APSME_EraseICEntry(&TCLKDevEntry.SeedShift_IcIndex);
        ; Setup parameters for call to function APSME_EraseICEntry
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??APSME_EraseICEntry::?relay`; Banked call to: APSME_EraseICEntry
// 1880       }
// 1881       
// 1882       TCLKDevEntry.keyAttributes = ZG_UNVERIFIED_KEY;
??ZDSecMgrTransportKeyInd_9:
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 1883       TCLKDevEntry.keyType = ZG_UNIQUE_LINK_KEY;
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1884       TCLKDevEntry.rxFrmCntr = 0;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine83_0 & 0xFFFF
// 1885       TCLKDevEntry.txFrmCntr = 0;
??CrossCallReturnLabel_211:
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine83_0 & 0xFFFF
// 1886       TCLKDevEntry.SeedShift_IcIndex = 0;
??CrossCallReturnLabel_212:
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1887       
// 1888       //Update the entry
// 1889       osal_nv_write(entryIndex,0,sizeof(APSME_TCLKDevEntry_t),&TCLKDevEntry);
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       ?V0,#0x13
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 56)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 52)
// 1890 
// 1891       //Create the entry for the key
// 1892       if(ZSUCCESS == osal_nv_item_init(ZCD_NV_TCLK_JOIN_DEV,SEC_KEY_LEN,ind->key) )
        ; Setup parameters for call to function osal_nv_item_init
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x1
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       A,R1
        JNZ       ??ZDSecMgrTransportKeyInd_10
// 1893       {
// 1894         //Or replace it if already existed
// 1895         osal_nv_write(ZCD_NV_TCLK_JOIN_DEV,0,SEC_KEY_LEN,ind->key);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       ?V0,#0x10
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 56)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x1
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 52)
// 1896       }
// 1897       
// 1898       bdb_tcLinkKeyExchangeAttempt(TRUE,BDB_REQ_VERIFY_TC_LINK_KEY);
??ZDSecMgrTransportKeyInd_10:
        ; Setup parameters for call to function bdb_tcLinkKeyExchangeAttempt
        MOV       R2,#0x3
        MOV       R1,#0x1
        LCALL     `??bdb_tcLinkKeyExchangeAttempt::?relay`; Banked call to: bdb_tcLinkKeyExchangeAttempt
        LJMP      ??ZDSecMgrTransportKeyInd_7 & 0xFFFF
// 1899     }
// 1900   }
// 1901   else if ( ind->keyType == KEY_TYPE_APP_LINK )
??ZDSecMgrTransportKeyInd_8:
        MOV       A,#0x3
        XRL       A,R0
        JZ        $+5
        LJMP      ??ZDSecMgrTransportKeyInd_7 & 0xFFFF
// 1902   {
// 1903     if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 1904     {
// 1905       uint16           ami;
// 1906       ZDSecMgrEntry_t* entry;
// 1907 
// 1908       // get the address index
// 1909       if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV       A,R1
        JZ        ??ZDSecMgrTransportKeyInd_11
// 1910       {
// 1911         // store new EXT address
// 1912         ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#-0x2
        MOV       R3,#-0x1
        LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 52)
// 1913         ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
        ; Setup parameters for call to function ZDP_NwkAddrReq
        MOV       R5,#0x0
        MOV       R4,#0x0
        MOV       R1,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
// 1914       }
// 1915 
// 1916       ZDSecMgrEntryLookupAMI( ami, &entry );
??ZDSecMgrTransportKeyInd_11:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_105:
        LCALL     `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
// 1917 
// 1918       if ( entry == NULL )
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_135:
        JNZ       ??CrossCallReturnLabel_153
// 1919       {
// 1920         // get new entry
// 1921         if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
        MOV       A,R1
        JNZ       ??CrossCallReturnLabel_153
// 1922         {
// 1923           // finish setting up entry
// 1924           entry->ami = ami;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine67_0 & 0xFFFF
// 1925         }
// 1926       }
??CrossCallReturnLabel_123:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine77_0 & 0xFFFF
??CrossCallReturnLabel_184:
        LCALL     ??Subroutine73_0 & 0xFFFF
// 1927 
// 1928       ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
??CrossCallReturnLabel_153:
        ; Setup parameters for call to function APSME_LinkKeySet
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
// 1929 
// 1930 #if defined NV_RESTORE
// 1931       ZDSecMgrWriteNV();  // Write the control record for the new established link key to NV.
        ; Setup parameters for call to function ZDSecMgrWriteNV
        LCALL     `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
// 1932 #endif
// 1933     }
// 1934   }
// 1935 }
??ZDSecMgrTransportKeyInd_7:
        MOV       A,#0x28
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock231

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond232 Using cfiCommon0
          CFI Function APSME_IsLinkKeyValid
          CFI Conditional ??CrossCallReturnLabel_138
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function ZDSecMgrAddLinkKey
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker235 Using cfiCommon1
          CFI (cfiPicker235) NoFunction
          CFI (cfiPicker235) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiPicker235
        REQUIRE ??Subroutine70_0
        ; // Fall through to label ??Subroutine70_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine70_0:
          CFI Block cfiCond236 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_129
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+-2
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond238 Using cfiCommon0
          CFI (cfiCond238) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond238) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond238) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond238) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond238) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond238) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond238) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond238) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond238) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond238) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond238) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond238) CFA_SP SP+-2
          CFI (cfiCond238) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond239 Using cfiCommon0
          CFI (cfiCond239) Function ZDSecMgrEntryFree
          CFI (cfiCond239) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond239) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond239) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond239) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond239) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond239) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond239) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond239) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond239) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond239) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond239) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond239) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond239) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond239) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond239) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond239) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond239) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond239) CFA_SP SP+-2
          CFI (cfiCond239) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function ZDSecMgrEntryFree
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-2
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function ZDSecMgrDeviceJoin
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+-2
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_135
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+-2
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function ZDSecMgrRemoveDeviceInd
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+-2
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function APSME_KeyFwdToChild
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-2
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function APSME_IsLinkKeyValid
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function ZDSecMgrAddLinkKey
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-2
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond247) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond247) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-2
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker248 Using cfiCommon1
          CFI (cfiPicker248) NoFunction
          CFI (cfiPicker248) Picker
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_197:
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiCond238
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiPicker248
// 1936 
// 1937 /******************************************************************************
// 1938  * @fn          ZDSecMgrUpdateDeviceInd
// 1939  *
// 1940  * @brief       Process the ZDO_UpdateDeviceInd_t message.
// 1941  *
// 1942  * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
// 1943  *
// 1944  * @return      none
// 1945  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1946 void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
ZDSecMgrUpdateDeviceInd:
          CFI Block cfiBlock249 Using cfiCommon0
          CFI Function ZDSecMgrUpdateDeviceInd
        CODE
// 1947 {
        FUNCALL ZDSecMgrUpdateDeviceInd, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateDeviceInd, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateDeviceInd, bdb_TCAddJoiningDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateDeviceInd, ZDSecMgrDeviceJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 28
        MOV       A,#-0x1c
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
// 1948   ZDSecMgrDevice_t device;
// 1949 
// 1950   device.nwkAddr    = ind->devAddr;
        MOV       A,R0
        ADD       A,#0xc
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_106:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine81_0 & 0xFFFF
// 1951   device.extAddr    = ind->devExtAddr;
??CrossCallReturnLabel_200:
        MOV       A,R0
        ADD       A,#0x4
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine81_0 & 0xFFFF
// 1952   device.parentAddr = ind->srcAddr;
??CrossCallReturnLabel_201:
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_29:
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 1953   device.devStatus  = DEV_SEC_INIT_STATUS;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
// 1954   device.secure     = FALSE;
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 1955 
// 1956   // Trust Center should identify the type of JOIN/REJOIN and
// 1957   // Transport the NWK key accordingly, it will only be transported for:
// 1958   //              APSME_UD_STANDARD_UNSECURED_JOIN
// 1959   //   OR         APSME_UD_STANDARD_TRUST_CENTER_REJOIN
// 1960   if ( ind->status != APSME_UD_DEVICE_LEFT )
        MOV       A,R0
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x2
        XRL       A,R0
        JNZ       $+5
        LJMP      ??ZDSecMgrUpdateDeviceInd_0 & 0xFFFF
// 1961   {
// 1962     if ( ind->status == APSME_UD_STANDARD_SECURED_REJOIN )
        MOV       A,R0
        JNZ       ??ZDSecMgrUpdateDeviceInd_1
// 1963     {
// 1964       device.devStatus &= ~DEV_SEC_INIT_STATUS;
// 1965       device.devStatus |=  DEV_SEC_AUTH_STATUS;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x8
        MOVX      @DPTR,A
// 1966       device.secure = TRUE;
        DEC       A
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
        SJMP      ??ZDSecMgrUpdateDeviceInd_2
// 1967     }
// 1968     else
// 1969     {
// 1970 #if (ZG_BUILD_COORDINATOR_TYPE)
// 1971       uint8  found;
// 1972       uint16 keyNvIndex;
// 1973       APSME_TCLKDevEntry_t TCLKDevEntry;
// 1974       
// 1975       keyNvIndex = APSME_SearchTCLinkKeyEntry(device.extAddr,&found, &TCLKDevEntry);
??ZDSecMgrUpdateDeviceInd_1:
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
// 1976       
// 1977       //If found and it was verified, then allow it to join in a fresh state by erasing the key entry
// 1978       if((found == TRUE) && (TCLKDevEntry.keyAttributes == ZG_VERIFIED_KEY))
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??ZDSecMgrUpdateDeviceInd_3
        MOV       A,#0x19
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??ZDSecMgrUpdateDeviceInd_3
// 1979       {
// 1980         TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 1981         //Increase the shift by one. Validate the maximum shift of the seed which is 15
// 1982         TCLKDevEntry.SeedShift_IcIndex++;
// 1983         TCLKDevEntry.SeedShift_IcIndex &= 0x0F;
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        INC       A
        ANL       A,#0xf
        MOVX      @DPTR,A
// 1984         
// 1985         TCLKDevEntry.rxFrmCntr = 0;
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine83_0 & 0xFFFF
// 1986         TCLKDevEntry.txFrmCntr = 0;  
??CrossCallReturnLabel_213:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine22 & 0xFFFF
// 1987         
// 1988         //Update the entry
// 1989         osal_nv_write(keyNvIndex,0,sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
// 1990       }
??CrossCallReturnLabel_19:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       ?V0,#0x13
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV       R4,#0x0
        MOV       R5,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 38)
// 1991       
// 1992       bdb_TCAddJoiningDevice(device.parentAddr,device.extAddr);
??ZDSecMgrUpdateDeviceInd_3:
        ; Setup parameters for call to function bdb_TCAddJoiningDevice
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine30 & 0xFFFF
// 1993 #endif
// 1994     
// 1995     }
??CrossCallReturnLabel_30:
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_107:
        LCALL     `??bdb_TCAddJoiningDevice::?relay`; Banked call to: bdb_TCAddJoiningDevice
// 1996 
// 1997     ZDSecMgrDeviceJoin( &device );
??ZDSecMgrUpdateDeviceInd_2:
        ; Setup parameters for call to function ZDSecMgrDeviceJoin
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
// 1998   }
// 1999 }
??ZDSecMgrUpdateDeviceInd_0:
        MOV       A,#0x1c
        LJMP      ??Subroutine71_0 & 0xFFFF
          CFI EndBlock cfiBlock249
// 2000 
// 2001 /******************************************************************************
// 2002  * @fn          ZDSecMgrRemoveDeviceInd
// 2003  *
// 2004  * @brief       Process the ZDO_RemoveDeviceInd_t message.
// 2005  *
// 2006  * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
// 2007  *
// 2008  * @return      none
// 2009  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2010 void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
ZDSecMgrRemoveDeviceInd:
          CFI Block cfiBlock250 Using cfiCommon0
          CFI Function ZDSecMgrRemoveDeviceInd
        CODE
// 2011 {
        FUNCALL ZDSecMgrRemoveDeviceInd, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRemoveDeviceInd, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 2012   ZDSecMgrDevice_t device;
// 2013 
// 2014   // only accept from Trust Center
// 2015   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_136:
        JNZ       ??ZDSecMgrRemoveDeviceInd_0
// 2016   {
// 2017     // look up NWK address
// 2018     if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
        MOV       A,R2
        ADD       A,#0x4
        MOV       R6,A
        CLR       A
        ADDC      A,R3
        MOV       R7,A
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDSecMgrRemoveDeviceInd_0
// 2019     {
// 2020       device.parentAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL     `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine81_0 & 0xFFFF
// 2021       device.extAddr    = ind->childExtAddr;
??CrossCallReturnLabel_202:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        LCALL     ??Subroutine74_0 & 0xFFFF
// 2022 
// 2023       // remove device
// 2024       ZDSecMgrDeviceRemove( &device );
// 2025     }
// 2026   }
??CrossCallReturnLabel_170:
        LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
// 2027 }
??ZDSecMgrRemoveDeviceInd_0:
        LJMP      ?Subroutine7 & 0xFFFF
          CFI EndBlock cfiBlock250
// 2028 
// 2029 /******************************************************************************
// 2030  * @fn          ZDSecMgrRequestKeyInd
// 2031  *
// 2032  * @brief       Process the ZDO_RequestKeyInd_t message.
// 2033  *
// 2034  * @param       ind - [in] ZDO_RequestKeyInd_t indication
// 2035  *
// 2036  * @return      none
// 2037  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2038 void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
ZDSecMgrRequestKeyInd:
          CFI Block cfiBlock251 Using cfiCommon0
          CFI Function ZDSecMgrRequestKeyInd
        CODE
// 2039 {
        FUNCALL ZDSecMgrRequestKeyInd, ZDSecMgrAppKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRequestKeyInd, ZDSecMgrTclkReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2040   if ( ind->keyType == KEY_TYPE_NWK )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x1
        XRL       A,R0
        JZ        ??ZDSecMgrRequestKeyInd_0
// 2041   {
// 2042   }
// 2043   else if ( ind->keyType == KEY_TYPE_APP_MASTER )
        MOV       A,#0x2
        XRL       A,R0
        JNZ       ??ZDSecMgrRequestKeyInd_1
// 2044   {
// 2045     ZDSecMgrAppKeyReq( ind );
        ; Setup parameters for call to function ZDSecMgrAppKeyReq
        LCALL     `??ZDSecMgrAppKeyReq::?relay`; Banked call to: ZDSecMgrAppKeyReq
        SJMP      ??ZDSecMgrRequestKeyInd_0
// 2046   }
// 2047   else if ( ind->keyType == KEY_TYPE_TC_LINK )
??ZDSecMgrRequestKeyInd_1:
        MOV       A,#0x4
        XRL       A,R0
        JNZ       ??ZDSecMgrRequestKeyInd_0
// 2048   {
// 2049     ZDSecMgrTclkReq( ind );
        ; Setup parameters for call to function ZDSecMgrTclkReq
        LCALL     `??ZDSecMgrTclkReq::?relay`; Banked call to: ZDSecMgrTclkReq
// 2050   }
// 2051   //else ignore
// 2052 }
??ZDSecMgrRequestKeyInd_0:
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock251
// 2053 
// 2054 
// 2055 /******************************************************************************
// 2056  * @fn          ZDSecMgrVerifyKeyInd
// 2057  *
// 2058  * @brief       Process the ZDO_VerifyKeyInd_t message.
// 2059  *
// 2060  * @param       ind - [in] ZDO_VerifyKeyInd_t indication
// 2061  *
// 2062  * @return      none
// 2063  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2064 void ZDSecMgrVerifyKeyInd( ZDO_VerifyKeyInd_t* ind )
ZDSecMgrVerifyKeyInd:
          CFI Block cfiBlock252 Using cfiCommon0
          CFI Function ZDSecMgrVerifyKeyInd
        CODE
// 2065 {
        FUNCALL ZDSecMgrVerifyKeyInd, ZDSecMgrAppConfKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2066   ZDSecMgrAppConfKeyReq( ind );
        ; Setup parameters for call to function ZDSecMgrAppConfKeyReq
        LCALL     `??ZDSecMgrAppConfKeyReq::?relay`; Banked call to: ZDSecMgrAppConfKeyReq
// 2067 }
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock252
// 2068 
// 2069 
// 2070 /******************************************************************************
// 2071  * @fn          ZDSecMgrSwitchKeyInd
// 2072  *
// 2073  * @brief       Process the ZDO_SwitchKeyInd_t message.
// 2074  *
// 2075  * @param       ind - [in] ZDO_SwitchKeyInd_t indication
// 2076  *
// 2077  * @return      none
// 2078  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2079 void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
ZDSecMgrSwitchKeyInd:
          CFI Block cfiBlock253 Using cfiCommon0
          CFI Function ZDSecMgrSwitchKeyInd
        CODE
// 2080 {
        FUNCALL ZDSecMgrSwitchKeyInd, SSP_SwitchNwkKey
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchKeyInd, ZDApp_NVUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2081   SSP_SwitchNwkKey( ind->keySeqNum );
        ; Setup parameters for call to function SSP_SwitchNwkKey
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
// 2082 
// 2083   // Save if nv
// 2084   ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 2085 }
        LJMP      ??Subroutine66_0 & 0xFFFF
          CFI EndBlock cfiBlock253
// 2086   
// 2087 /******************************************************************************
// 2088  * @fn          ZDSecMgrGenerateSeed
// 2089  *
// 2090  * @brief       Generate the seed for TC link keys and store it in Nv
// 2091  *
// 2092  * @param       SetDefault, force to use new seed
// 2093  *
// 2094  * @return      none
// 2095  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2096 void ZDSecMgrGenerateSeed(uint8 SetDefault)
ZDSecMgrGenerateSeed:
          CFI Block cfiBlock254 Using cfiCommon0
          CFI Function ZDSecMgrGenerateSeed
        CODE
// 2097 {
        FUNCALL ZDSecMgrGenerateSeed, ZDSecMgrGenerateRndKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrGenerateSeed, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrGenerateSeed, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrGenerateSeed, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
        MOV       R6,A
// 2098   uint8 SeedKey[SEC_KEY_LEN];  
// 2099   
// 2100   ZDSecMgrGenerateRndKey(SeedKey);
        ; Setup parameters for call to function ZDSecMgrGenerateRndKey
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
// 2101   
// 2102   if((SUCCESS == osal_nv_item_init(ZCD_NV_TCLK_SEED,SEC_KEY_LEN,SeedKey)) && SetDefault)
        ; Setup parameters for call to function osal_nv_item_init
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x1
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R1
        JNZ       ??ZDSecMgrGenerateSeed_0
        MOV       A,R6
        JZ        ??ZDSecMgrGenerateSeed_0
// 2103   {
// 2104     //Force to use a new seed
// 2105     osal_nv_write(ZCD_NV_TCLK_SEED,0,SEC_KEY_LEN,SeedKey);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV       ?V0,#0x10
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x1
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 2106   }
// 2107 
// 2108   osal_memset(SeedKey,0,SEC_KEY_LEN);
??ZDSecMgrGenerateSeed_0:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2109 }
        MOV       A,#0x10
        SJMP      ??Subroutine71_0
          CFI EndBlock cfiBlock254

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock255 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       A,#0x11
          CFI EndBlock cfiBlock255
        REQUIRE ??Subroutine71_0
        ; // Fall through to label ??Subroutine71_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine71_0:
          CFI Block cfiBlock256 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 69)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock256
        REQUIRE ??Subroutine72_0
        ; // Fall through to label ??Subroutine72_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine72_0:
          CFI Block cfiBlock257 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock257
// 2110 
// 2111 
// 2112 /******************************************************************************
// 2113  * @fn          ZDSecMgrGenerateKeyFromSeed
// 2114  *
// 2115  * @brief       Generate the TC link key for an specific device usign seed and ExtAddr
// 2116  *
// 2117  * @param       [in]  extAddr  
// 2118  * @param       [in]  shift    number of byte shifts that the seed will do to 
// 2119  *                             generate a new key for the same device. 
// 2120  *                             This value must be less than SEC_KEY_LEN
// 2121  * @param       [out] key      buffer in which the key will be copied
// 2122  *
// 2123  * @return      none
// 2124  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2125 void ZDSecMgrGenerateKeyFromSeed(uint8 *extAddr, uint8 shift, uint8 *key)
ZDSecMgrGenerateKeyFromSeed:
          CFI Block cfiBlock258 Using cfiCommon0
          CFI Function ZDSecMgrGenerateKeyFromSeed
        CODE
// 2126 {
        FUNCALL ZDSecMgrGenerateKeyFromSeed, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrGenerateKeyFromSeed, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrGenerateKeyFromSeed, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 16
        MOV       A,#-0x10
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V6,R2
        MOV       ?V7,R3
        MOV       ?V3,R1
        MOV       ?V4,R4
        MOV       ?V5,R5
// 2127   uint8 i;
// 2128   uint8 tempKey[SEC_KEY_LEN];
// 2129   
// 2130   if((key != NULL) && (extAddr != NULL))
        MOV       A,R4
        ORL       A,?V5
        JNZ       $+5
        LJMP      ??ZDSecMgrGenerateKeyFromSeed_0 & 0xFFFF
        MOV       A,R2
        ORL       A,?V7
        JNZ       $+5
        LJMP      ??ZDSecMgrGenerateKeyFromSeed_0 & 0xFFFF
// 2131   {
// 2132     //Read the key
// 2133     osal_nv_read(ZCD_NV_TCLK_SEED,0,SEC_KEY_LEN,tempKey);
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V0,#0x10
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x1
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
// 2134 
// 2135     //shift the seed
// 2136     osal_memcpy(key, &tempKey[shift], SEC_KEY_LEN - shift);
        MOV       R6,?V3
        ; Setup parameters for call to function osal_memcpy
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,DPL
        ADD       A,R6
        MOV       ?V0,A
        CLR       A
        ADDC      A,DPH
        MOV       ?V1,A
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       A,#0x10
        CLR       C
        SUBB      A,R6
        MOV       R4,A
        SUBB      A,0xE0 /* A   */
        MOV       R5,A
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
// 2137     osal_memcpy(&key[SEC_KEY_LEN - shift], tempKey, shift);
        ; Setup parameters for call to function osal_memcpy
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R4,?V3
        MOV       R5,#0x0
        CLR       C
        CLR       A
        SUBB      A,R6
        MOV       R0,A
        SUBB      A,0xE0 /* A   */
        MOV       R1,A
        MOV       A,?V4
        ADD       A,R0
        MOV       R0,A
        MOV       A,?V5
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0x10
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
// 2138    
// 2139     //Create the key from the seed
// 2140     for(i = 0; i < Z_EXTADDR_LEN; i++)
        MOV       R4,#0x0
// 2141     {
// 2142       key[i] ^= extAddr[i];
??ZDSecMgrGenerateKeyFromSeed_1:
        MOV       A,R4
        MOV       R2,A
        MOV       A,?V6
        ADD       A,R2
        MOV       R0,A
        CLR       A
        ADDC      A,?V7
        MOV       R1,A
        MOV       A,?V4
        ADD       A,R2
        MOV       R2,A
        CLR       A
        ADDC      A,?V5
        MOV       R3,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,R5
        MOVX      @DPTR,A
// 2143       key[i+Z_EXTADDR_LEN] ^= extAddr[i];
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R0
        MOVX      @DPTR,A
// 2144     }
        INC       R4
        MOV       A,R4
        CLR       C
        SUBB      A,#0x8
        JC        ??ZDSecMgrGenerateKeyFromSeed_1
// 2145   }
// 2146 }
??ZDSecMgrGenerateKeyFromSeed_0:
        MOV       A,#0x10
        LJMP      ??Subroutine62_0 & 0xFFFF
          CFI EndBlock cfiBlock258
// 2147 
// 2148 
// 2149 /******************************************************************************
// 2150  * @fn          ZDSecMgrGenerateRndKey
// 2151  *
// 2152 * @brief       Generate a random key. NOTE: Random key is generated by osal_rand, refer to osal_rand to see the random properties of the key generated by this mean.
// 2153  *
// 2154  * @param       pKey - [out] Buffer pointer in which the key will be passed.
// 2155  *
// 2156  * @return      none
// 2157  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2158 void ZDSecMgrGenerateRndKey(uint8* pKey)
ZDSecMgrGenerateRndKey:
          CFI Block cfiBlock259 Using cfiCommon0
          CFI Function ZDSecMgrGenerateRndKey
        CODE
// 2159 {
        FUNCALL ZDSecMgrGenerateRndKey, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2160   uint16  temp;
// 2161   uint8   index = 0;
        MOV       ?V0,#0x0
// 2162   
// 2163   while(index < (SEC_KEY_LEN/2))
// 2164   {
// 2165     temp = osal_rand();
??ZDSecMgrGenerateRndKey_0:
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        MOV       ?V2,R2
        MOV       ?V3,R3
// 2166     pKey[index*2]   = (uint8) (temp & 0x00FF);
        MOV       R2,?V0
        MOV       A,R2
        ADD       A,R2
        MOV       R2,A
        CLR       A
        RLC       A
        MOV       R3,A
        MOV       A,R6
        ADD       A,R2
        MOV       DPL,A
        MOV       A,R7
        ADDC      A,R3
        MOV       DPH,A
        MOV       A,?V2
        MOVX      @DPTR,A
// 2167     pKey[index*2+1] = (uint8) ((temp >> 8) & 0x00FF);
        INC       DPTR
        MOV       A,?V3
        MOVX      @DPTR,A
// 2168     index++;
        INC       ?V0
// 2169   }
        MOV       A,?V0
        CLR       C
        SUBB      A,#0x8
        JC        ??ZDSecMgrGenerateRndKey_0
// 2170 }
        LJMP      ??Subroutine78_0 & 0xFFFF
          CFI EndBlock cfiBlock259
// 2171 
// 2172 
// 2173 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 2174 /******************************************************************************
// 2175  * @fn          ZDSecMgrUpdateNwkKey
// 2176  *
// 2177  * @brief       Load a new NWK key and trigger a network update to the dstAddr.
// 2178  *
// 2179  * @param       key       - [in] new NWK key
// 2180  * @param       keySeqNum - [in] new NWK key sequence number
// 2181  *
// 2182  * @return      ZStatus_t
// 2183  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2184 ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
ZDSecMgrUpdateNwkKey:
          CFI Block cfiBlock260 Using cfiCommon0
          CFI Function ZDSecMgrUpdateNwkKey
        CODE
// 2185 {
        FUNCALL ZDSecMgrUpdateNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateNwkKey, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateNwkKey, APSME_TransportKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateNwkKey, SSP_UpdateNwkKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateNwkKey, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 26
        MOV       A,#-0x1a
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        MOV       ?V1,R1
// 2186   ZStatus_t               status;
// 2187   APSME_TransportKeyReq_t req;
// 2188 
// 2189   // initialize common elements of local variables
// 2190   req.keyType   = KEY_TYPE_NWK;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2191 
// 2192   req.dstAddr   = dstAddr;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 2193   req.keySeqNum = keySeqNum;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 2194   req.key       = key;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 2195   req.extAddr   = NULL;
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2196   req.nwkSecure = TRUE;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2197   req.tunnel    = NULL;
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 2198 
// 2199   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 2200   {
// 2201     // Broadcast transport NWK key
// 2202     if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
// 2203         ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
// 2204         ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
        MOV       A,#-0x1
        XRL       A,R4
        JNZ       ??ZDSecMgrUpdateNwkKey_0
        MOV       A,#-0x1
        XRL       A,R5
??ZDSecMgrUpdateNwkKey_0:
        JZ        ??ZDSecMgrUpdateNwkKey_1
        MOV       A,#-0x4
        XRL       A,R4
        JNZ       ??ZDSecMgrUpdateNwkKey_2
        MOV       A,#-0x1
        XRL       A,R5
??ZDSecMgrUpdateNwkKey_2:
        JZ        ??ZDSecMgrUpdateNwkKey_1
        MOV       A,#-0x3
        XRL       A,R4
        JNZ       ??ZDSecMgrUpdateNwkKey_3
        MOV       A,#-0x1
        XRL       A,R5
??ZDSecMgrUpdateNwkKey_3:
        JNZ       ??ZDSecMgrUpdateNwkKey_4
// 2205     {
// 2206       req.apsSecure = FALSE;
??ZDSecMgrUpdateNwkKey_1:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        SJMP      ??ZDSecMgrUpdateNwkKey_5
// 2207       status = APSME_TransportKeyReq( &req );
// 2208     }
// 2209     else
// 2210     {
// 2211       AddrMgrEntry_t          addrEntry;
// 2212 
// 2213       addrEntry.user = ADDRMGR_USER_SECURITY;
??ZDSecMgrUpdateNwkKey_4:
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2214       addrEntry.nwkAddr = dstAddr;
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 2215 
// 2216       status = ZFailure;
        MOV       ?V0,#0x1
// 2217 
// 2218       if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDSecMgrUpdateNwkKey_6
// 2219       {
// 2220         req.extAddr = addrEntry.extAddr;
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine73_0 & 0xFFFF
// 2221         req.apsSecure = TRUE;
??CrossCallReturnLabel_154:
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
// 2222         status = APSME_TransportKeyReq( &req );
// 2223       }
// 2224     }
// 2225   }
??ZDSecMgrUpdateNwkKey_5:
        LCALL     ??Subroutine74_0 & 0xFFFF
??CrossCallReturnLabel_171:
        LCALL     `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
        MOV       A,R1
        MOV       ?V0,A
// 2226   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2227   {
// 2228     req.apsSecure = FALSE;
// 2229     status = APSME_TransportKeyReq( &req );
// 2230   }
// 2231 
// 2232   SSP_UpdateNwkKey( key, keySeqNum );
??ZDSecMgrUpdateNwkKey_6:
        ; Setup parameters for call to function SSP_UpdateNwkKey
        MOV       R1,?V1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
// 2233 
// 2234   // Save if nv
// 2235   ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 2236 
// 2237   return status;
        MOV       R1,?V0
        MOV       A,#0x1a
        LJMP      ??Subroutine71_0 & 0xFFFF
// 2238 }
          CFI EndBlock cfiBlock260

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond261 Using cfiCommon0
          CFI Function ZDSecMgrAppConfKeyReq
          CFI Conditional ??CrossCallReturnLabel_158
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 6)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_159
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+-2
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker263 Using cfiCommon1
          CFI (cfiPicker263) NoFunction
          CFI (cfiPicker263) Picker
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_195:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiPicker263
        REQUIRE ??Subroutine73_0
        ; // Fall through to label ??Subroutine73_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine73_0:
          CFI Block cfiCond264 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyReq
          CFI Conditional ??CrossCallReturnLabel_141
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function ZDSecMgrAppKeyReq
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond265) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+-2
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function ZDSecMgrAppKeyReq
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+-2
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond267 Using cfiCommon0
          CFI (cfiCond267) Function ZDSecMgrAppKeyReq
          CFI (cfiCond267) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond267) CFA_SP SP+-2
          CFI (cfiCond267) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond268 Using cfiCommon0
          CFI (cfiCond268) Function ZDSecMgrTclkReq
          CFI (cfiCond268) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond268) CFA_SP SP+-2
          CFI (cfiCond268) CFA_XSP16 add(XSP16, 69)
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function ZDSecMgrTclkReq
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond269) CFA_SP SP+-2
          CFI (cfiCond269) CFA_XSP16 add(XSP16, 69)
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function ZDSecMgrSendNwkKey
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond270) CFA_SP SP+-2
          CFI (cfiCond270) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond271 Using cfiCommon0
          CFI (cfiCond271) Function ZDSecMgrSendNwkKey
          CFI (cfiCond271) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond271) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond271) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond271) CFA_SP SP+-2
          CFI (cfiCond271) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond272 Using cfiCommon0
          CFI (cfiCond272) Function ZDSecMgrSendNwkKey
          CFI (cfiCond272) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond272) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond272) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond272) CFA_SP SP+-2
          CFI (cfiCond272) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond273) CFA_SP SP+-2
          CFI (cfiCond273) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_151
          CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond274) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond274) CFA_SP SP+-2
          CFI (cfiCond274) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_152
          CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond275) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond275) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond275) CFA_SP SP+-2
          CFI (cfiCond275) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond276 Using cfiCommon0
          CFI (cfiCond276) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond276) Conditional ??CrossCallReturnLabel_153
          CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond276) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond276) CFA_SP SP+-2
          CFI (cfiCond276) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function ZDSecMgrUpdateNwkKey
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_154
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+-2
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function APSME_LinkKeySet
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_155
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond278) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond278) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond278) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+-2
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function ZDSecMgrAddLinkKey
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_156
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+-2
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function APSME_TCLinkKeySync
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_157
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+-2
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function ZDSecMgrAppConfKeyReq
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_158
          CFI (cfiCond281) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond281) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond281) CFA_SP SP+-7
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 6)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_159
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+-2
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker283 Using cfiCommon1
          CFI (cfiPicker283) NoFunction
          CFI (cfiPicker283) Picker
        LCALL     ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_165:
        RET
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiCond267
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiCond271
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiPicker283

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine50:
          CFI Block cfiCond284 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function ZDSecMgrExtAddrStore
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_14
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+-4
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond286 Using cfiCommon0
          CFI (cfiCond286) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond286) Conditional ??CrossCallReturnLabel_161, ??CrossCallReturnLabel_15
          CFI (cfiCond286) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond286) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond286) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond286) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond286) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond286) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond286) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond286) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond286) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond286) CFA_SP SP+-4
          CFI (cfiCond286) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond287 Using cfiCommon0
          CFI (cfiCond287) Function ZDSecMgrAddrStore
          CFI (cfiCond287) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_73
          CFI (cfiCond287) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond287) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond287) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond287) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond287) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond287) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond287) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond287) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond287) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond287) CFA_SP SP+-4
          CFI (cfiCond287) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond288 Using cfiCommon0
          CFI (cfiCond288) Function ZDSecMgrExtAddrStore
          CFI (cfiCond288) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_74
          CFI (cfiCond288) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond288) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond288) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond288) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond288) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond288) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond288) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond288) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond288) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond288) CFA_SP SP+-4
          CFI (cfiCond288) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond289 Using cfiCommon0
          CFI (cfiCond289) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond289) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_75
          CFI (cfiCond289) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond289) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond289) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond289) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond289) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond289) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond289) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond289) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond289) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond289) CFA_SP SP+-4
          CFI (cfiCond289) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function ZDSecMgrEntryLookup
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_76
          CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond290) CFA_SP SP+-4
          CFI (cfiCond290) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_77
          CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond291) CFA_SP SP+-4
          CFI (cfiCond291) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_78
          CFI (cfiCond292) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond292) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond292) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond292) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond292) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond292) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond292) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond292) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond292) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond292) CFA_SP SP+-4
          CFI (cfiCond292) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond293 Using cfiCommon0
          CFI (cfiCond293) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond293) Conditional ??CrossCallReturnLabel_164, ??CrossCallReturnLabel_79
          CFI (cfiCond293) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond293) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond293) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond293) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond293) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond293) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond293) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond293) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond293) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond293) CFA_SP SP+-4
          CFI (cfiCond293) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function ZDSecMgrTclkReq
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_21
          CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond294) CFA_SP SP+-4
          CFI (cfiCond294) CFA_XSP16 add(XSP16, 69)
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function ZDSecMgrDeviceRemove
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_22
          CFI (cfiCond295) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond295) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond295) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond295) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond295) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond295) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond295) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond295) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond295) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond295) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond295) CFA_SP SP+-4
          CFI (cfiCond295) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond296 Using cfiCommon0
          CFI (cfiCond296) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond296) Conditional ??CrossCallReturnLabel_163, ??CrossCallReturnLabel_23
          CFI (cfiCond296) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond296) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond296) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond296) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond296) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond296) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond296) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond296) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond296) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond296) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond296) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond296) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond296) CFA_SP SP+-4
          CFI (cfiCond296) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond297 Using cfiCommon0
          CFI (cfiCond297) Function ZDSecMgrAddrClear
          CFI (cfiCond297) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_16
          CFI (cfiCond297) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond297) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond297) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond297) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond297) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond297) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond297) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond297) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond297) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond297) CFA_SP SP+-4
          CFI (cfiCond297) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function ZDSecMgrDeviceJoin
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_17
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond298) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond298) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+-4
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond299 Using cfiCommon0
          CFI (cfiCond299) Function APSME_TCLinkKeyLoad
          CFI (cfiCond299) Conditional ??CrossCallReturnLabel_162, ??CrossCallReturnLabel_18
          CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond299) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond299) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond299) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond299) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond299) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond299) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond299) CFA_SP SP+-4
          CFI (cfiCond299) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond300 Using cfiCommon0
          CFI (cfiCond300) Function ZDSecMgrSendNwkKey
          CFI (cfiCond300) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_4
          CFI (cfiCond300) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond300) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond300) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond300) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond300) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond300) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond300) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond300) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond300) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond300) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond300) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond300) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond300) CFA_SP SP+-4
          CFI (cfiCond300) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function ZDSecMgrDeviceJoin
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_160, ??CrossCallReturnLabel_5
          CFI (cfiCond301) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond301) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond301) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond301) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond301) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond301) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond301) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond301) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond301) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond301) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond301) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond301) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond301) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond301) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond301) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond301) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond301) CFA_SP SP+-4
          CFI (cfiCond301) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function ZDSecMgrAppConfKeyReq
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_158
          CFI (cfiCond302) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond302) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond302) CFA_SP SP+-9
          CFI (cfiCond302) CFA_XSP16 add(XSP16, 6)
          CFI Block cfiCond303 Using cfiCommon0
          CFI (cfiCond303) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond303) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_159
          CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond303) CFA_SP SP+-4
          CFI (cfiCond303) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function ZDSecMgrAppKeyReq
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_141
          CFI (cfiCond304) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond304) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond304) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond304) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond304) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond304) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond304) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond304) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond304) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond304) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond304) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond304) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond304) CFA_SP SP+-4
          CFI (cfiCond304) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond305 Using cfiCommon0
          CFI (cfiCond305) Function ZDSecMgrAppKeyReq
          CFI (cfiCond305) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_142
          CFI (cfiCond305) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond305) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond305) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond305) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond305) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond305) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond305) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond305) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond305) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond305) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond305) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond305) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond305) CFA_SP SP+-4
          CFI (cfiCond305) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond306 Using cfiCommon0
          CFI (cfiCond306) Function ZDSecMgrAppKeyReq
          CFI (cfiCond306) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_143
          CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond306) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond306) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond306) CFA_SP SP+-4
          CFI (cfiCond306) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function ZDSecMgrAppKeyReq
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_144
          CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond307) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond307) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond307) CFA_SP SP+-4
          CFI (cfiCond307) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function ZDSecMgrTclkReq
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_145
          CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond308) CFA_SP SP+-4
          CFI (cfiCond308) CFA_XSP16 add(XSP16, 69)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function ZDSecMgrTclkReq
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_146
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+-4
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 69)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function ZDSecMgrSendNwkKey
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_147
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+-4
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function ZDSecMgrSendNwkKey
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_148
          CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond311) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond311) CFA_SP SP+-4
          CFI (cfiCond311) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond312 Using cfiCommon0
          CFI (cfiCond312) Function ZDSecMgrSendNwkKey
          CFI (cfiCond312) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_149
          CFI (cfiCond312) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond312) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond312) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond312) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond312) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond312) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond312) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond312) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond312) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond312) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond312) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond312) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond312) CFA_SP SP+-4
          CFI (cfiCond312) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond313 Using cfiCommon0
          CFI (cfiCond313) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond313) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_150
          CFI (cfiCond313) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond313) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond313) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond313) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond313) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond313) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond313) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond313) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond313) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond313) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond313) CFA_SP SP+-4
          CFI (cfiCond313) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond314 Using cfiCommon0
          CFI (cfiCond314) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond314) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_151
          CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond314) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond314) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond314) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond314) CFA_SP SP+-4
          CFI (cfiCond314) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_152
          CFI (cfiCond315) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond315) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond315) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond315) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond315) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond315) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond315) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond315) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond315) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond315) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond315) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond315) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond315) CFA_SP SP+-4
          CFI (cfiCond315) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_153
          CFI (cfiCond316) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond316) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond316) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond316) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond316) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond316) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond316) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond316) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond316) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond316) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond316) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond316) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond316) CFA_SP SP+-4
          CFI (cfiCond316) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond317 Using cfiCommon0
          CFI (cfiCond317) Function ZDSecMgrUpdateNwkKey
          CFI (cfiCond317) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_154
          CFI (cfiCond317) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond317) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond317) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond317) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond317) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond317) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond317) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond317) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond317) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond317) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond317) CFA_SP SP+-4
          CFI (cfiCond317) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function APSME_LinkKeySet
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_155
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond318) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond318) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond318) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+-4
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function ZDSecMgrAddLinkKey
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_156
          CFI (cfiCond319) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond319) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond319) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond319) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond319) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond319) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond319) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond319) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond319) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond319) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond319) CFA_SP SP+-4
          CFI (cfiCond319) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond320 Using cfiCommon0
          CFI (cfiCond320) Function APSME_TCLinkKeySync
          CFI (cfiCond320) Conditional ??CrossCallReturnLabel_165, ??CrossCallReturnLabel_157
          CFI (cfiCond320) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond320) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond320) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond320) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond320) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond320) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond320) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond320) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond320) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond320) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond320) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond320) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond320) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond320) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond320) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond320) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond320) CFA_SP SP+-4
          CFI (cfiCond320) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker321 Using cfiCommon1
          CFI (cfiPicker321) NoFunction
          CFI (cfiPicker321) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiCond286
          CFI EndBlock cfiCond287
          CFI EndBlock cfiCond288
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiCond296
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiCond299
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiCond305
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiCond312
          CFI EndBlock cfiCond313
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiCond320
          CFI EndBlock cfiPicker321
// 2239 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 2240 
// 2241 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 2242 /******************************************************************************
// 2243  * @fn          ZDSecMgrSwitchNwkKey
// 2244  *
// 2245  * @brief       Causes the NWK key to switch via a network command to the dstAddr.
// 2246  *
// 2247  * @param       keySeqNum - [in] new NWK key sequence number
// 2248  *
// 2249  * @return      ZStatus_t
// 2250  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2251 ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
ZDSecMgrSwitchNwkKey:
          CFI Block cfiBlock322 Using cfiCommon0
          CFI Function ZDSecMgrSwitchNwkKey
        CODE
// 2252 {
        FUNCALL ZDSecMgrSwitchNwkKey, APSME_SwitchKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchNwkKey, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchNwkKey, APSME_SwitchKeyReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSwitchNwkKey, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV       A,#-0x11
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       ?V1,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2253   ZStatus_t            status;
// 2254   APSME_SwitchKeyReq_t req;
// 2255 
// 2256   // initialize common elements of local variables
// 2257   req.dstAddr = dstAddr;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 2258   req.keySeqNum = keySeqNum;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        MOVX      @DPTR,A
// 2259 
// 2260   if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
// 2261   {
// 2262     // Broadcast switch NWK key
// 2263     if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
// 2264         ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
// 2265         ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
        MOV       A,#-0x1
        XRL       A,R6
        JNZ       ??ZDSecMgrSwitchNwkKey_0
        MOV       A,#-0x1
        XRL       A,R7
??ZDSecMgrSwitchNwkKey_0:
        JZ        ??ZDSecMgrSwitchNwkKey_1
        MOV       A,#-0x4
        XRL       A,R6
        JNZ       ??ZDSecMgrSwitchNwkKey_2
        MOV       A,#-0x1
        XRL       A,R7
??ZDSecMgrSwitchNwkKey_2:
        JZ        ??ZDSecMgrSwitchNwkKey_1
        MOV       A,#-0x3
        XRL       A,R6
        JNZ       ??ZDSecMgrSwitchNwkKey_3
        MOV       A,#-0x1
        XRL       A,R7
??ZDSecMgrSwitchNwkKey_3:
        JNZ       ??ZDSecMgrSwitchNwkKey_4
// 2266     {
// 2267       req.apsSecure = FALSE;
??ZDSecMgrSwitchNwkKey_1:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        SJMP      ??ZDSecMgrSwitchNwkKey_5
// 2268       status = APSME_SwitchKeyReq( &req );
// 2269     }
// 2270     else
// 2271     {
// 2272       AddrMgrEntry_t          addrEntry;
// 2273 
// 2274       addrEntry.user = ADDRMGR_USER_SECURITY;
??ZDSecMgrSwitchNwkKey_4:
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2275       addrEntry.nwkAddr = dstAddr;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
// 2276 
// 2277       status = ZFailure;
        MOV       ?V0,#0x1
// 2278 
// 2279       if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??ZDSecMgrSwitchNwkKey_6
// 2280       {
// 2281         req.dstAddr = addrEntry.nwkAddr;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine25 & 0xFFFF
// 2282         req.apsSecure = TRUE;
??CrossCallReturnLabel_159:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
// 2283         status = APSME_SwitchKeyReq( &req );
// 2284       }
// 2285     }
// 2286   }
??ZDSecMgrSwitchNwkKey_5:
        LCALL     ??Subroutine74_0 & 0xFFFF
??CrossCallReturnLabel_172:
        LCALL     `??APSME_SwitchKeyReq::?relay`; Banked call to: APSME_SwitchKeyReq
        MOV       A,R1
        MOV       ?V0,A
// 2287   else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
// 2288   {
// 2289     req.apsSecure = FALSE;
// 2290     status = APSME_SwitchKeyReq( &req );
// 2291   }
// 2292 
// 2293   if ( dstAddr >= NWK_BROADCAST_SHORTADDR_DEVZCZR)
??ZDSecMgrSwitchNwkKey_6:
        CLR       C
        MOV       A,R6
        SUBB      A,#-0x4
        MOV       A,R7
        SUBB      A,#-0x1
        JC        ??ZDSecMgrSwitchNwkKey_7
// 2294   {
// 2295     zgSwitchCoordKey = TRUE;
        MOV       DPTR,#zgSwitchCoordKey
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2296     zgSwitchCoordKeyIndex = keySeqNum;
        MOV       A,?V1
        MOV       DPTR,#zgSwitchCoordKeyIndex
        MOVX      @DPTR,A
// 2297   }
// 2298   // Save if nv
// 2299   ZDApp_NVUpdate();
??ZDSecMgrSwitchNwkKey_7:
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL     `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 2300 
// 2301   return status;
        MOV       R1,?V0
        LJMP      ?Subroutine4 & 0xFFFF
// 2302 }
          CFI EndBlock cfiBlock322

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond323 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_166
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond324 Using cfiCommon0
          CFI (cfiCond324) Function ZDSecMgrRequestAppKey
          CFI (cfiCond324) Conditional ??CrossCallReturnLabel_167
          CFI (cfiCond324) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond324) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond324) CFA_SP SP+-7
          CFI (cfiCond324) CFA_XSP16 add(XSP16, 4)
          CFI Block cfiPicker325 Using cfiCommon1
          CFI (cfiPicker325) NoFunction
          CFI (cfiPicker325) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
          CFI EndBlock cfiCond323
          CFI EndBlock cfiCond324
          CFI EndBlock cfiPicker325
        REQUIRE ??Subroutine74_0
        ; // Fall through to label ??Subroutine74_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine74_0:
          CFI Block cfiCond326 Using cfiCommon0
          CFI Function ZDSecMgrAppConfKeyReq
          CFI Conditional ??CrossCallReturnLabel_168
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 6)
          CFI Block cfiCond327 Using cfiCommon0
          CFI (cfiCond327) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond327) Conditional ??CrossCallReturnLabel_169
          CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond327) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond327) CFA_SP SP+-2
          CFI (cfiCond327) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond328 Using cfiCommon0
          CFI (cfiCond328) Function ZDSecMgrRemoveDeviceInd
          CFI (cfiCond328) Conditional ??CrossCallReturnLabel_170
          CFI (cfiCond328) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond328) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond328) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond328) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond328) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond328) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond328) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond328) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond328) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond328) CFA_SP SP+-2
          CFI (cfiCond328) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond329 Using cfiCommon0
          CFI (cfiCond329) Function ZDSecMgrUpdateNwkKey
          CFI (cfiCond329) Conditional ??CrossCallReturnLabel_171
          CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond329) CFA_SP SP+-2
          CFI (cfiCond329) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond330 Using cfiCommon0
          CFI (cfiCond330) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond330) Conditional ??CrossCallReturnLabel_172
          CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond330) CFA_SP SP+-2
          CFI (cfiCond330) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond331 Using cfiCommon0
          CFI (cfiCond331) Function ZDSecMgrAPSRemove
          CFI (cfiCond331) Conditional ??CrossCallReturnLabel_173
          CFI (cfiCond331) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond331) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond331) CFA_SP SP+-7
          CFI (cfiCond331) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond332 Using cfiCommon0
          CFI (cfiCond332) Function ZDSecMgrEntryLookup
          CFI (cfiCond332) Conditional ??CrossCallReturnLabel_166
          CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond332) CFA_SP SP+-2
          CFI (cfiCond332) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond333 Using cfiCommon0
          CFI (cfiCond333) Function ZDSecMgrRequestAppKey
          CFI (cfiCond333) Conditional ??CrossCallReturnLabel_167
          CFI (cfiCond333) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond333) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond333) CFA_SP SP+-7
          CFI (cfiCond333) CFA_XSP16 add(XSP16, 4)
          CFI Block cfiPicker334 Using cfiCommon1
          CFI (cfiPicker334) NoFunction
          CFI (cfiPicker334) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function APSME_RequestKeyReq
        ; Setup parameters for call to function APSME_ConfirmKeyReq
        ; Setup parameters for call to function ZDSecMgrDeviceNew
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        ; Setup parameters for call to function APSME_TransportKeyReq
        ; Setup parameters for call to function APSME_SwitchKeyReq
        ; Setup parameters for call to function ZDSecMgrDeviceRemove
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        RET
          CFI EndBlock cfiCond326
          CFI EndBlock cfiCond327
          CFI EndBlock cfiCond328
          CFI EndBlock cfiCond329
          CFI EndBlock cfiCond330
          CFI EndBlock cfiCond331
          CFI EndBlock cfiCond332
          CFI EndBlock cfiCond333
          CFI EndBlock cfiPicker334
// 2303 #endif // ( ZG_BUILD_COORDINATOR_TYPE )
// 2304 
// 2305 /******************************************************************************
// 2306  * @fn          ZDSecMgrRequestAppKey
// 2307  *
// 2308  * @brief       Request an application key with partner.
// 2309  *
// 2310  * @param       partExtAddr - [in] partner extended address
// 2311  *
// 2312  * @return      ZStatus_t
// 2313  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2314 ZStatus_t ZDSecMgrRequestAppKey( uint8 *partExtAddr )
ZDSecMgrRequestAppKey:
          CFI Block cfiBlock335 Using cfiCommon0
          CFI Function ZDSecMgrRequestAppKey
        CODE
// 2315 {
        FUNCALL ZDSecMgrRequestAppKey, APSME_RequestKeyReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 4)
// 2316   ZStatus_t status;
// 2317   APSME_RequestKeyReq_t req;
// 2318 
// 2319   req.dstAddr = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
// 2320   req.keyType = KEY_TYPE_APP_MASTER;
        INC       A
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
// 2321 
// 2322   req.partExtAddr = partExtAddr;
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
// 2323   status = APSME_RequestKeyReq( &req );
// 2324 
// 2325   return status;
??CrossCallReturnLabel_167:
        LCALL     `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
        MOV       A,#0x4
        LJMP      ?Subroutine8 & 0xFFFF
// 2326 }
          CFI EndBlock cfiBlock335
// 2327 
// 2328 #if ( ZG_BUILD_JOINING_TYPE )
// 2329 /******************************************************************************
// 2330  * @fn          ZDSecMgrSetupPartner
// 2331  *
// 2332  * @brief       Setup for application key partner.
// 2333  *
// 2334  * @param       partNwkAddr - [in] partner network address
// 2335  *
// 2336  * @return      ZStatus_t
// 2337  */
// 2338 ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
// 2339 {
// 2340   AddrMgrEntry_t entry;
// 2341   ZStatus_t      status;
// 2342 
// 2343   status = ZFailure;
// 2344 
// 2345   // update the address manager
// 2346   entry.user    = ADDRMGR_USER_SECURITY;
// 2347   entry.nwkAddr = partNwkAddr;
// 2348   AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
// 2349 
// 2350   if ( AddrMgrEntryUpdate( &entry ) == TRUE )
// 2351   {
// 2352     status = ZSuccess;
// 2353 
// 2354     // check for address discovery
// 2355     if ( partNwkAddr == INVALID_NODE_ADDR )
// 2356     {
// 2357       status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2358     }
// 2359     else if ( !AddrMgrExtAddrValid( partExtAddr ) )
// 2360     {
// 2361       status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 2362     }
// 2363   }
// 2364 
// 2365   return status;
// 2366 }
// 2367 #endif // ( ZG_BUILD_JOINING_TYPE )
// 2368 
// 2369 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 2370 /******************************************************************************
// 2371  * @fn          ZDSecMgrAppKeyTypeSet
// 2372  *
// 2373  * @brief       Set application key type.
// 2374  *
// 2375  * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
// 2376  *                                                   KEY_TYPE_APP_LINK@3
// 2377  *
// 2378  * @return      ZStatus_t
// 2379  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2380 ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
ZDSecMgrAppKeyTypeSet:
          CFI Block cfiBlock336 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyTypeSet
        CODE
// 2381 {
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV       A,R1
        MOV       R0,A
// 2382   if ( keyType == KEY_TYPE_APP_LINK )
        MOV       A,#0x3
        XRL       A,R0
        MOV       DPTR,#ZDSecMgrAppKeyType
        JNZ       ??ZDSecMgrAppKeyTypeSet_0
// 2383   {
// 2384     ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
        MOV       A,#0x3
        SJMP      ??ZDSecMgrAppKeyTypeSet_1
// 2385   }
// 2386   else
// 2387   {
// 2388     ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
??ZDSecMgrAppKeyTypeSet_0:
        MOV       A,#0x2
// 2389   }
??ZDSecMgrAppKeyTypeSet_1:
        LJMP      ?Subroutine2 & 0xFFFF
// 2390 
// 2391   return ZSuccess;
// 2392 }
          CFI EndBlock cfiBlock336
// 2393 #endif
// 2394 
// 2395 /******************************************************************************
// 2396  * ZigBee Device Security Manager - Stub Implementations
// 2397  */
// 2398 
// 2399 
// 2400 /******************************************************************************
// 2401  * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
// 2402  *
// 2403  * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
// 2404  *
// 2405  * @param       extAddr - [in] EXT address
// 2406  * @param       data    - [in] APSME_LinkKeyData_t
// 2407  *
// 2408  * @return      ZStatus_t
// 2409  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2410 ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
APSME_LinkKeySet:
          CFI Block cfiBlock337 Using cfiCommon0
          CFI Function APSME_LinkKeySet
        CODE
// 2411 {
        FUNCALL APSME_LinkKeySet, ZDSecMgrEntryLookupExtGetIndex
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_LinkKeySet, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       ?V2,R4
        MOV       ?V3,R5
// 2412   ZStatus_t status;
// 2413   ZDSecMgrEntry_t* entry;
// 2414   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 2415   uint16 Index;
// 2416 
// 2417   // lookup entry index for specified EXT address
// 2418   status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        LCALL     `??ZDSecMgrEntryLookupExtGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupExtGetIndex
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,R1
        MOV       R6,A
// 2419 
// 2420   if ( status == ZSuccess )
        JZ        $+5
        LJMP      ??CrossCallReturnLabel_219 & 0xFFFF
// 2421   {
// 2422     // point to NV item
// 2423     entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x2
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_185:
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine73_0 & 0xFFFF
// 2424 
// 2425     pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
??CrossCallReturnLabel_155:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x18
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2426 
// 2427     if (pApsLinkKey != NULL)
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??CrossCallReturnLabel_219 & 0xFFFF
// 2428     {
// 2429       // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
// 2430       osal_nv_read( entry->keyNvId, 0,
// 2431                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V4,#0x18
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_114:
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2432 
// 2433       // set new values of the key
// 2434       osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,?V2
        MOV       ?V5,?V3
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2435       pApsLinkKey->rxFrmCntr = 0;
        MOV       A,?V0
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        LCALL     ??Subroutine82_0 & 0xFFFF
// 2436       pApsLinkKey->txFrmCntr = 0;
??CrossCallReturnLabel_217:
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL     ?Subroutine22 & 0xFFFF
// 2437 
// 2438       osal_nv_write( entry->keyNvId, 0,
// 2439                     sizeof(APSME_LinkKeyData_t), pApsLinkKey );
??CrossCallReturnLabel_20:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V2,#0x18
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_115:
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2440 
// 2441       // clear copy of key in RAM
// 2442       osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x18
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2443 
// 2444       osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_177:
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_124:
        MOV       A,R0
        MOV       B,#0x9
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x9
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#ApsLinkKeyFrmCntr & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       A,R0
        ADD       A,#-0x9
        LCALL     ?Subroutine23 & 0xFFFF
// 2445 
// 2446       // set initial values for counters in RAM
// 2447       ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
// 2448       ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
??CrossCallReturnLabel_218:
        MOV       A,R0
        ADD       A,#-0x5
        LCALL     ?Subroutine23 & 0xFFFF
// 2449     }
// 2450   }
// 2451 
// 2452   return status;
??CrossCallReturnLabel_219:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x4
          CFI EndBlock cfiBlock337
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
// 2453 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock338 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock338
        REQUIRE ??Subroutine75_0
        ; // Fall through to label ??Subroutine75_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine75_0:
          CFI Block cfiBlock339 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x7
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock339

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond340 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_177
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond341 Using cfiCommon0
          CFI (cfiCond341) Function APSME_TCLinkKeyLoad
          CFI (cfiCond341) Conditional ??CrossCallReturnLabel_178
          CFI (cfiCond341) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond341) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond341) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond341) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond341) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond341) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond341) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond341) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond341) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond341) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond341) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond341) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond341) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond341) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond341) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond341) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond341) CFA_SP SP+-2
          CFI (cfiCond341) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond342 Using cfiCommon0
          CFI (cfiCond342) Function APSME_TCLinkKeyLoad
          CFI (cfiCond342) Conditional ??CrossCallReturnLabel_179
          CFI (cfiCond342) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond342) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond342) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond342) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond342) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond342) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond342) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond342) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond342) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond342) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond342) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond342) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond342) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond342) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond342) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond342) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond342) CFA_SP SP+-2
          CFI (cfiCond342) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiPicker343 Using cfiCommon1
          CFI (cfiPicker343) NoFunction
          CFI (cfiPicker343) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond340
          CFI EndBlock cfiCond341
          CFI EndBlock cfiCond342
          CFI EndBlock cfiPicker343
        REQUIRE ??Subroutine76_0
        ; // Fall through to label ??Subroutine76_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine76_0:
          CFI Block cfiCond344 Using cfiCommon0
          CFI Function ZDSecMgrAppKeyGet
          CFI Conditional ??CrossCallReturnLabel_174
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond345 Using cfiCommon0
          CFI (cfiCond345) Function ZDSecMgrAppKeyGet
          CFI (cfiCond345) Conditional ??CrossCallReturnLabel_175
          CFI (cfiCond345) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond345) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond345) CFA_SP SP+-8
          CFI Block cfiCond346 Using cfiCommon0
          CFI (cfiCond346) Function ZDSecMgrDeviceJoin
          CFI (cfiCond346) Conditional ??CrossCallReturnLabel_176
          CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond346) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond346) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond346) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond346) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond346) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond346) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond346) CFA_SP SP+-2
          CFI (cfiCond346) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond347 Using cfiCommon0
          CFI (cfiCond347) Function APSME_LinkKeySet
          CFI (cfiCond347) Conditional ??CrossCallReturnLabel_177
          CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond347) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond347) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond347) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond347) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond347) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond347) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond347) CFA_SP SP+-2
          CFI (cfiCond347) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond348 Using cfiCommon0
          CFI (cfiCond348) Function APSME_TCLinkKeyLoad
          CFI (cfiCond348) Conditional ??CrossCallReturnLabel_178
          CFI (cfiCond348) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond348) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond348) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond348) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond348) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond348) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond348) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond348) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond348) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond348) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond348) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond348) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond348) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond348) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond348) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond348) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond348) CFA_SP SP+-2
          CFI (cfiCond348) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond349 Using cfiCommon0
          CFI (cfiCond349) Function APSME_TCLinkKeyLoad
          CFI (cfiCond349) Conditional ??CrossCallReturnLabel_179
          CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond349) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond349) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond349) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond349) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond349) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond349) CFA_SP SP+-2
          CFI (cfiCond349) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiPicker350 Using cfiCommon1
          CFI (cfiPicker350) NoFunction
          CFI (cfiPicker350) Picker
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_182:
        RET
          CFI EndBlock cfiCond344
          CFI EndBlock cfiCond345
          CFI EndBlock cfiCond346
          CFI EndBlock cfiCond347
          CFI EndBlock cfiCond348
          CFI EndBlock cfiCond349
          CFI EndBlock cfiPicker350

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine52:
          CFI Block cfiCond351 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_180, ??CrossCallReturnLabel_114
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond352 Using cfiCommon0
          CFI (cfiCond352) Function APSME_LinkKeySet
          CFI (cfiCond352) Conditional ??CrossCallReturnLabel_180, ??CrossCallReturnLabel_115
          CFI (cfiCond352) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond352) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond352) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond352) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond352) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond352) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond352) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond352) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond352) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond352) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond352) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond352) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond352) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond352) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond352) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond352) CFA_SP SP+-4
          CFI (cfiCond352) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond353 Using cfiCommon0
          CFI (cfiCond353) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond353) Conditional ??CrossCallReturnLabel_180, ??CrossCallReturnLabel_116
          CFI (cfiCond353) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond353) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond353) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond353) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond353) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond353) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond353) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond353) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond353) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond353) CFA_SP SP+-4
          CFI (cfiCond353) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond354 Using cfiCommon0
          CFI (cfiCond354) Function APSME_LinkKeySet
          CFI (cfiCond354) Conditional ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_177
          CFI (cfiCond354) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond354) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond354) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond354) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond354) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond354) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond354) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond354) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond354) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond354) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond354) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond354) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond354) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond354) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond354) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond354) CFA_SP SP+-4
          CFI (cfiCond354) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond355 Using cfiCommon0
          CFI (cfiCond355) Function APSME_TCLinkKeyLoad
          CFI (cfiCond355) Conditional ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_178
          CFI (cfiCond355) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond355) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond355) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond355) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond355) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond355) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond355) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond355) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond355) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond355) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond355) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond355) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond355) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond355) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond355) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond355) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond355) CFA_SP SP+-4
          CFI (cfiCond355) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond356 Using cfiCommon0
          CFI (cfiCond356) Function APSME_TCLinkKeyLoad
          CFI (cfiCond356) Conditional ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_179
          CFI (cfiCond356) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond356) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond356) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond356) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond356) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond356) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond356) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond356) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond356) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond356) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond356) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond356) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond356) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond356) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond356) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond356) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond356) CFA_SP SP+-4
          CFI (cfiCond356) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond357 Using cfiCommon0
          CFI (cfiCond357) Function ZDSecMgrAppKeyGet
          CFI (cfiCond357) Conditional ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_174
          CFI (cfiCond357) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond357) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond357) CFA_SP SP+-9
          CFI Block cfiCond358 Using cfiCommon0
          CFI (cfiCond358) Function ZDSecMgrAppKeyGet
          CFI (cfiCond358) Conditional ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_175
          CFI (cfiCond358) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond358) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond358) CFA_SP SP+-10
          CFI Block cfiCond359 Using cfiCommon0
          CFI (cfiCond359) Function ZDSecMgrDeviceJoin
          CFI (cfiCond359) Conditional ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_176
          CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond359) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond359) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond359) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond359) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond359) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond359) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond359) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond359) CFA_SP SP+-4
          CFI (cfiCond359) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond360 Using cfiCommon0
          CFI (cfiCond360) Function ZDSecMgrAuthenticationSet
          CFI (cfiCond360) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_34
          CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond360) CFA_SP SP+-4
          CFI (cfiCond360) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond361 Using cfiCommon0
          CFI (cfiCond361) Function ZDSecMgrAuthenticationCheck
          CFI (cfiCond361) Conditional ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_35
          CFI (cfiCond361) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond361) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond361) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond361) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond361) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond361) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond361) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond361) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond361) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond361) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond361) CFA_SP SP+-4
          CFI (cfiCond361) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker362 Using cfiCommon1
          CFI (cfiPicker362) NoFunction
          CFI (cfiPicker362) Picker
        LCALL     ??Subroutine85_0 & 0xFFFF
??CrossCallReturnLabel_227:
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond351
          CFI EndBlock cfiCond352
          CFI EndBlock cfiCond353
          CFI EndBlock cfiCond354
          CFI EndBlock cfiCond355
          CFI EndBlock cfiCond356
          CFI EndBlock cfiCond357
          CFI EndBlock cfiCond358
          CFI EndBlock cfiCond359
          CFI EndBlock cfiCond360
          CFI EndBlock cfiCond361
          CFI EndBlock cfiPicker362

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond363 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_185
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond364 Using cfiCommon0
          CFI (cfiCond364) Function ZDSecMgrAddLinkKey
          CFI (cfiCond364) Conditional ??CrossCallReturnLabel_186
          CFI (cfiCond364) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond364) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond364) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond364) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond364) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond364) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond364) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond364) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond364) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond364) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond364) CFA_SP SP+-2
          CFI (cfiCond364) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker365 Using cfiCommon1
          CFI (cfiPicker365) NoFunction
          CFI (cfiPicker365) Picker
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond363
          CFI EndBlock cfiCond364
          CFI EndBlock cfiPicker365
        REQUIRE ??Subroutine77_0
        ; // Fall through to label ??Subroutine77_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine77_0:
          CFI Block cfiCond366 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExtGetIndex
          CFI Conditional ??CrossCallReturnLabel_183
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond367 Using cfiCommon0
          CFI (cfiCond367) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond367) Conditional ??CrossCallReturnLabel_184
          CFI (cfiCond367) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond367) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond367) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond367) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond367) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond367) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond367) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond367) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond367) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond367) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond367) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond367) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond367) CFA_SP SP+-2
          CFI (cfiCond367) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond368 Using cfiCommon0
          CFI (cfiCond368) Function APSME_LinkKeySet
          CFI (cfiCond368) Conditional ??CrossCallReturnLabel_185
          CFI (cfiCond368) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond368) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond368) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond368) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond368) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond368) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond368) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond368) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond368) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond368) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond368) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond368) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond368) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond368) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond368) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond368) CFA_SP SP+-2
          CFI (cfiCond368) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond369 Using cfiCommon0
          CFI (cfiCond369) Function ZDSecMgrAddLinkKey
          CFI (cfiCond369) Conditional ??CrossCallReturnLabel_186
          CFI (cfiCond369) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond369) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond369) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond369) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond369) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond369) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond369) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond369) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond369) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond369) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond369) CFA_SP SP+-2
          CFI (cfiCond369) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker370 Using cfiCommon1
          CFI (cfiPicker370) NoFunction
          CFI (cfiPicker370) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R2
        RET
          CFI EndBlock cfiCond366
          CFI EndBlock cfiCond367
          CFI EndBlock cfiCond368
          CFI EndBlock cfiCond369
          CFI EndBlock cfiPicker370

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond371 Using cfiCommon0
          CFI Function ZDSecMgrUpdateDeviceInd
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond372 Using cfiCommon0
          CFI (cfiCond372) Function APSME_LinkKeySet
          CFI (cfiCond372) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond372) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond372) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond372) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond372) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond372) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond372) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond372) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond372) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond372) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond372) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond372) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond372) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond372) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond372) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond372) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond372) CFA_SP SP+-2
          CFI (cfiCond372) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker373 Using cfiCommon1
          CFI (cfiPicker373) NoFunction
          CFI (cfiPicker373) Picker
        CLR       A
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_221:
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond371
          CFI EndBlock cfiCond372
          CFI EndBlock cfiPicker373
// 2454 
// 2455 /******************************************************************************
// 2456  * @fn          ZDSecMgrAuthenticationSet
// 2457  *
// 2458  * @brief       Mark the specific device as authenticated or not
// 2459  *
// 2460  * @param       extAddr - [in] EXT address
// 2461  * @param       option  - [in] authenticated or not
// 2462  *
// 2463  * @return      ZStatus_t
// 2464  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2465 ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
ZDSecMgrAuthenticationSet:
          CFI Block cfiBlock374 Using cfiCommon0
          CFI Function ZDSecMgrAuthenticationSet
        CODE
// 2466 {
        FUNCALL ZDSecMgrAuthenticationSet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R1
        MOV       R6,A
// 2467   ZStatus_t        status;
// 2468   ZDSecMgrEntry_t* entry;
// 2469 
// 2470 
// 2471   // lookup entry index for specified EXT address
// 2472   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
        MOV       A,R1
        MOV       R1,A
// 2473 
// 2474   if ( status == ZSuccess )
        JNZ       ??ZDSecMgrAuthenticationSet_0
// 2475   {
// 2476     entry->authenticateOption = option;
        LCALL     ?Subroutine33 & 0xFFFF
// 2477   }
??CrossCallReturnLabel_34:
        MOV       A,R6
        MOVX      @DPTR,A
// 2478 
// 2479   return status;
??ZDSecMgrAuthenticationSet_0:
        LJMP      ?Subroutine6 & 0xFFFF
// 2480 }
          CFI EndBlock cfiBlock374
// 2481 
// 2482 /******************************************************************************
// 2483  * @fn          ZDSecMgrAuthenticationCheck
// 2484  *
// 2485  * @brief       Check if the specific device has been authenticated or not
// 2486  *              For non-trust center device, always return TRUE
// 2487  *
// 2488  * @param       shortAddr - [in] short address
// 2489  *
// 2490  * @return      TRUE @ authenticated with CBKE
// 2491  *              FALSE @ not authenticated
// 2492  */
// 2493 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2494 uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
ZDSecMgrAuthenticationCheck:
          CFI Block cfiBlock375 Using cfiCommon0
          CFI Function ZDSecMgrAuthenticationCheck
        CODE
// 2495 {
        FUNCALL ZDSecMgrAuthenticationCheck, APSME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticationCheck, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticationCheck, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticationCheck, AddrMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticationCheck, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAuthenticationCheck, ZDSecMgrExtAddrLookup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV       A,#-0xc
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 2496 #if defined (TC_LINKKEY_JOIN)
// 2497 
// 2498   ZDSecMgrEntry_t* entry;
// 2499   uint8 extAddr[Z_EXTADDR_LEN];
// 2500 
// 2501   // If the local device is not the trust center, always return TRUE
// 2502   APSME_GetRequest( apsTrustCenterAddress, 0, extAddr );
        ; Setup parameters for call to function APSME_GetRequest
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#-0x55
        LCALL     `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
// 2503   if ( ! osal_ExtAddrEqual( extAddr , NLME_GetExtAddr() ) )
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL     `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
        ; Setup parameters for call to function sAddrExtCmp
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV       A,R1
        JZ        ??ZDSecMgrAuthenticationCheck_0
// 2504   {
// 2505     return TRUE;
// 2506   }
// 2507   // Otherwise, check the authentication option
// 2508   else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
        ; Setup parameters for call to function AddrMgrExtAddrLookup
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
        MOV       A,R1
        JZ        ??ZDSecMgrAuthenticationCheck_1
// 2509   {
// 2510     // lookup entry index for specified EXT address
// 2511     if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
        MOV       A,R1
        JNZ       ??ZDSecMgrAuthenticationCheck_2
// 2512     {
// 2513       if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
        LCALL     ?Subroutine33 & 0xFFFF
// 2514       {
// 2515         return TRUE;
// 2516       }
// 2517       else
// 2518       {
// 2519         return FALSE;
// 2520       }
// 2521     }
??CrossCallReturnLabel_35:
        MOVX      A,@DPTR
        JNZ       ??ZDSecMgrAuthenticationCheck_0
// 2522     else
// 2523     {
// 2524       // it may have been secured with TCLK only
// 2525       uint16    ami;
// 2526 
// 2527       // lookup address index in address manager
// 2528       if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
// 2529       {
// 2530         return TRUE;
// 2531       }
// 2532     }
// 2533   }
// 2534   return FALSE;
??ZDSecMgrAuthenticationCheck_1:
        MOV       R1,#0x0
??ZDSecMgrAuthenticationCheck_3:
        MOV       A,#0xc
        LJMP      ??Subroutine71_0 & 0xFFFF
??ZDSecMgrAuthenticationCheck_2:
        ; Setup parameters for call to function ZDSecMgrExtAddrLookup
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
        MOV       A,R1
        JNZ       ??ZDSecMgrAuthenticationCheck_1
??ZDSecMgrAuthenticationCheck_0:
        MOV       R1,#0x1
        SJMP      ??ZDSecMgrAuthenticationCheck_3
// 2535 
// 2536 #else
// 2537   (void)shortAddr;  // Intentionally unreferenced parameter
// 2538 
// 2539   // For non AMI/SE Profile, perform no check and always return TRUE.
// 2540   return TRUE;
// 2541 
// 2542 #endif // TC_LINKKEY_JOIN
// 2543 }
          CFI EndBlock cfiBlock375

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond376 Using cfiCommon0
          CFI Function ZDSecMgrAuthenticationSet
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond377 Using cfiCommon0
          CFI (cfiCond377) Function ZDSecMgrAuthenticationCheck
          CFI (cfiCond377) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond377) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond377) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond377) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond377) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond377) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond377) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond377) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond377) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond377) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond377) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond377) CFA_SP SP+-2
          CFI (cfiCond377) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker378 Using cfiCommon1
          CFI (cfiPicker378) NoFunction
          CFI (cfiPicker378) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_181:
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        RET
          CFI EndBlock cfiCond376
          CFI EndBlock cfiCond377
          CFI EndBlock cfiPicker378
// 2544 
// 2545 
// 2546 /******************************************************************************
// 2547  * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
// 2548  *
// 2549  * @brief       Get Key NV ID for specified NWK address.
// 2550  *
// 2551  * @param       extAddr - [in] EXT address
// 2552  * @param       keyNvId - [out] NV ID
// 2553  *
// 2554  * @return      ZStatus_t
// 2555  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2556 ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
APSME_LinkKeyNVIdGet:
          CFI Block cfiBlock379 Using cfiCommon0
          CFI Function APSME_LinkKeyNVIdGet
        CODE
// 2557 {
        FUNCALL APSME_LinkKeyNVIdGet, ZDSecMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2558   ZStatus_t status;
// 2559   ZDSecMgrEntry_t* entry;
// 2560 
// 2561   // lookup entry index for specified NWK address
// 2562   status = ZDSecMgrEntryLookupExt( extAddr, &entry );
        ; Setup parameters for call to function ZDSecMgrEntryLookupExt
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        LCALL     `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
        MOV       A,R1
        MOV       R1,A
// 2563 
// 2564   if ( status == ZSuccess )
        JNZ       ??APSME_LinkKeyNVIdGet_0
// 2565   {
// 2566     // return the index to the NV table
// 2567     *pKeyNvId = entry->keyNvId;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine26 & 0xFFFF
// 2568   }
??CrossCallReturnLabel_116:
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        SJMP      ??APSME_LinkKeyNVIdGet_1
// 2569   else
// 2570   {
// 2571     *pKeyNvId = SEC_NO_KEY_NV_ID;
??APSME_LinkKeyNVIdGet_0:
        MOV       DPL,R6
        MOV       DPH,R7
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
??APSME_LinkKeyNVIdGet_1:
        MOVX      @DPTR,A
// 2572   }
// 2573 
// 2574   return status;
        LJMP      ?Subroutine6 & 0xFFFF
// 2575 }
          CFI EndBlock cfiBlock379
// 2576 
// 2577 /******************************************************************************
// 2578  * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
// 2579  *
// 2580  * @brief       Verifies if Link Key in NV has been set.
// 2581  *
// 2582  * @param       extAddr - [in] EXT address
// 2583  *
// 2584  * @return      TRUE - Link Key has been established
// 2585  *              FALSE - Link Key in NV has default value.
// 2586  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2587 uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
APSME_IsLinkKeyValid:
          CFI Block cfiBlock380 Using cfiCommon0
          CFI Function APSME_IsLinkKeyValid
        CODE
// 2588 {
        FUNCALL APSME_IsLinkKeyValid, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, APSME_LinkKeyNVIdGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_IsLinkKeyValid, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 18
        MOV       A,#-0x12
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2589   APSME_LinkKeyData_t *pKeyData;
// 2590   uint16 apsLinkKeyNvId;
// 2591   uint8 nullKey[SEC_KEY_LEN];
// 2592   uint8 status = FALSE;
        MOV       R6,#0x0
// 2593 
// 2594   // initialize default vealue to compare to
// 2595   osal_memset(nullKey, 0x00, SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2596 
// 2597   // check for APS link NV ID
// 2598   APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
        ; Setup parameters for call to function APSME_LinkKeyNVIdGet
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??APSME_LinkKeyNVIdGet::?relay`; Banked call to: APSME_LinkKeyNVIdGet
// 2599 
// 2600   if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_138:
        JZ        ??APSME_IsLinkKeyValid_0
// 2601   {
// 2602     pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x18
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
// 2603 
// 2604     if (pKeyData != NULL)
        MOV       A,R2
        ORL       A,?V5
        JZ        ??APSME_IsLinkKeyValid_0
// 2605     {
// 2606       // retrieve key from NV
// 2607       if ( osal_nv_read( apsLinkKeyNvId, 0,
// 2608                         sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV       ?V0,#0x18
        MOV       ?V1,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_108:
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
        JNZ       ??APSME_IsLinkKeyValid_1
// 2609       {
// 2610         // if stored key is different than default value, then a key has been established
// 2611         if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
        ; Setup parameters for call to function osal_memcmp
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       ?V2,R6
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       R3,#0x0
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV       A,R1
        JNZ       ??APSME_IsLinkKeyValid_1
// 2612         {
// 2613           status = TRUE;
        MOV       R6,#0x1
// 2614         }
// 2615       }
// 2616 
// 2617       // clear copy of key in RAM
// 2618       osal_memset(pKeyData, 0x00, sizeof(APSME_LinkKeyData_t));
??APSME_IsLinkKeyValid_1:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x18
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2619 
// 2620       osal_mem_free(pKeyData);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2621     }
// 2622   }
// 2623 
// 2624   return status;
??APSME_IsLinkKeyValid_0:
        MOV       A,R6
        MOV       R1,A
        MOV       A,#0x12
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
// 2625 }
          CFI EndBlock cfiBlock380
// 2626 
// 2627 /******************************************************************************
// 2628  * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
// 2629  *
// 2630  * @brief       Verify and process key transportation to child.
// 2631  *
// 2632  * @param       ind - [in] APSME_TransportKeyInd_t
// 2633  *
// 2634  * @return      uint8 - success(TRUE:FALSE)
// 2635  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2636 uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
APSME_KeyFwdToChild:
          CFI Block cfiBlock381 Using cfiCommon0
          CFI Function APSME_KeyFwdToChild
        CODE
// 2637 {
        FUNCALL APSME_KeyFwdToChild, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_KeyFwdToChild, ZDSecMgrAssocDeviceAuth
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2638   // verify from Trust Center
// 2639   if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine70_0 & 0xFFFF
??CrossCallReturnLabel_137:
        JNZ       ??APSME_KeyFwdToChild_0
// 2640   {
// 2641     // check for initial NWK key
// 2642     if ( ( ind->keyType == KEY_TYPE_NWK ) ||
// 2643          ( ind->keyType == 6            ) )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        MOV       A,#0x1
        XRL       A,R0
        JZ        ??APSME_KeyFwdToChild_1
        MOV       A,#0x6
        XRL       A,R0
        JNZ       ??APSME_KeyFwdToChild_2
// 2644     {
// 2645       // set association status to authenticated
// 2646       ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
??APSME_KeyFwdToChild_1:
        ; Setup parameters for call to function AssocGetWithExt
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine64_0 & 0xFFFF
// 2647     }
??CrossCallReturnLabel_112:
        LCALL     `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
        ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
        LCALL     `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
// 2648 
// 2649     return TRUE;
??APSME_KeyFwdToChild_2:
        MOV       R1,#0x1
        SJMP      ??APSME_KeyFwdToChild_3
// 2650   }
// 2651 
// 2652   return FALSE;
??APSME_KeyFwdToChild_0:
        MOV       R1,#0x0
??APSME_KeyFwdToChild_3:
        LJMP      ??Subroutine72_0 & 0xFFFF
// 2653 }
          CFI EndBlock cfiBlock381
// 2654 
// 2655 /******************************************************************************
// 2656  * @fn          ZDSecMgrAddLinkKey
// 2657  *
// 2658  * @brief       Add the application link key to ZDSecMgr. Also mark the device
// 2659  *              as authenticated in the authenticateOption. Note that this function
// 2660  *              is hardwared to CBKE right now.
// 2661  *
// 2662  * @param       shortAddr - short address of the partner device
// 2663  * @param       extAddr - extended address of the partner device
// 2664  * @param       key - link key
// 2665  *
// 2666  * @return      ZStatus_t
// 2667  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2668 ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
ZDSecMgrAddLinkKey:
          CFI Block cfiBlock382 Using cfiCommon0
          CFI Function ZDSecMgrAddLinkKey
        CODE
// 2669 {
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrAddrStore
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryLookupAMI
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrEntryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, APSME_LinkKeySet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrAuthenticationSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrAddLinkKey, ZDSecMgrWriteNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 2670   uint16           ami;
// 2671   ZDSecMgrEntry_t* entry;
// 2672 
// 2673   /* Store the device address in the addr manager */
// 2674   if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
        ; Setup parameters for call to function ZDSecMgrAddrStore
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        LCALL     `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,R1
        JZ        ??ZDSecMgrAddLinkKey_0
// 2675   {
// 2676     /* Adding to Addr Manager fails */
// 2677     return ZFailure;
        MOV       R1,#0x1
        SJMP      ??ZDSecMgrAddLinkKey_1
// 2678   }
// 2679 
// 2680   /* Lookup entry using specified address index */
// 2681   ZDSecMgrEntryLookupAMI( ami, &entry );
??ZDSecMgrAddLinkKey_0:
        ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_109:
        LCALL     `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
// 2682 
// 2683   // If no existing entry, create one
// 2684   if ( entry == NULL )
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_139:
        JNZ       ??CrossCallReturnLabel_156
// 2685   {
// 2686     if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
        ; Setup parameters for call to function ZDSecMgrEntryNew
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
        MOV       A,R1
        JNZ       ??ZDSecMgrAddLinkKey_2
// 2687     {
// 2688       entry->ami = ami;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine85_0 & 0xFFFF
// 2689     }
??CrossCallReturnLabel_223:
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_186:
        LCALL     ??Subroutine73_0 & 0xFFFF
// 2690     else
// 2691     {
// 2692       /* Security Manager full */
// 2693       return ZBufferFull;
// 2694     }
// 2695   }
// 2696   // Write the link key
// 2697   APSME_LinkKeySet( extAddr, key );
??CrossCallReturnLabel_156:
        ; Setup parameters for call to function APSME_LinkKeySet
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
// 2698 
// 2699 #if defined (TC_LINKKEY_JOIN)
// 2700   // Mark the device as authenticated.
// 2701   ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
        ; Setup parameters for call to function ZDSecMgrAuthenticationSet
        MOV       R1,#0x1
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??ZDSecMgrAuthenticationSet::?relay`; Banked call to: ZDSecMgrAuthenticationSet
// 2702 #endif
// 2703 
// 2704 #if defined NV_RESTORE
// 2705   ZDSecMgrWriteNV();  // Write the new established link key to NV.
        ; Setup parameters for call to function ZDSecMgrWriteNV
        LCALL     `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
// 2706 #endif
// 2707 
// 2708   return ZSuccess;
        MOV       R1,#0x0
??ZDSecMgrAddLinkKey_1:
        MOV       A,#0x4
        LJMP      ??Subroutine71_0 & 0xFFFF
??ZDSecMgrAddLinkKey_2:
        MOV       R1,#0x11
        SJMP      ??ZDSecMgrAddLinkKey_1
// 2709 }
          CFI EndBlock cfiBlock382
// 2710 
// 2711 /******************************************************************************
// 2712  * @fn          ZDSecMgrInitNV
// 2713  *
// 2714  * @brief       Initialize the SecMgr entry data in NV with all values set to 0
// 2715  *
// 2716  * @param       none
// 2717  *
// 2718  * @return      uint8 - <osal_nv_item_init> return codes
// 2719  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2720 uint8 ZDSecMgrInitNV(void)
ZDSecMgrInitNV:
          CFI Block cfiBlock383 Using cfiCommon0
          CFI Function ZDSecMgrInitNV
        CODE
// 2721 {
        FUNCALL ZDSecMgrInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2722 
// 2723   uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE,
// 2724                 (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R2,#0x4c
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R6,A
// 2725 
// 2726   // If the item does not already exist, set all values to 0
// 2727   if (rtrn == NV_ITEM_UNINIT)
        MOV       A,#0x9
        XRL       A,R6
        JNZ       ??ZDSecMgrInitNV_0
// 2728   {
// 2729     nvDeviceListHdr_t hdr;
// 2730     hdr.numRecs = 0;
        LCALL     ?Subroutine12 & 0xFFFF
// 2731     osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
// 2732   }
??CrossCallReturnLabel_0:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x4c
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 2733 
// 2734   rtrn |= osal_nv_item_init( ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN,
// 2735                              zgApsTrustCenterAddr );
// 2736 
// 2737   return rtrn;
??ZDSecMgrInitNV_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV       ?V0,#zgApsTrustCenterAddr & 0xff
        MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R2,#0x71
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        ORL       A,R6
        MOV       R1,A
        MOV       A,#0x2
        LJMP      ??Subroutine71_0 & 0xFFFF
// 2738 }
          CFI EndBlock cfiBlock383
// 2739 
// 2740 #if defined ( NV_RESTORE )
// 2741 /*********************************************************************
// 2742  * @fn      ZDSecMgrWriteNV()
// 2743  *
// 2744  * @brief   Save off the APS link key list to NV
// 2745  *
// 2746  * @param   none
// 2747  *
// 2748  * @return  none
// 2749  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2750 static void ZDSecMgrWriteNV( void )
ZDSecMgrWriteNV:
          CFI Block cfiBlock384 Using cfiCommon0
          CFI Function ZDSecMgrWriteNV
        CODE
// 2751 {
        FUNCALL ZDSecMgrWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2752   uint16 i;
// 2753   nvDeviceListHdr_t hdr;
// 2754 
// 2755   hdr.numRecs = 0;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine79_0 & 0xFFFF
// 2756 
// 2757   if (ZDSecMgrEntries != NULL)
??CrossCallReturnLabel_190:
        JZ        ??ZDSecMgrWriteNV_0
// 2758   {
// 2759     for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
// 2760     {
// 2761       // Save off the record
// 2762       osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 2763                     (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
// 2764                     sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
??ZDSecMgrWriteNV_1:
        MOV       A,?V0
        MOV       B,#0x5
        MUL       AB
        MOV       R6,A
        MOV       R0,B
        MOV       B,#0x5
        MOV       A,?V1
        MUL       AB
        ADD       A,R0
        MOV       R7,A
        ; Setup parameters for call to function osal_nv_write
        MOV       DPTR,#ZDSecMgrEntries
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V2,#0x5
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,?V0
        MOV       B,#0x5
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x5
        MOV       A,?V1
        LCALL     ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2765 
// 2766       if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
        LCALL     ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_33:
        JNZ       ??ZDSecMgrWriteNV_2
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDSecMgrWriteNV_2:
        JZ        ??ZDSecMgrWriteNV_3
// 2767       {
// 2768         hdr.numRecs++;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine37 & 0xFFFF
// 2769       }
// 2770     }
??CrossCallReturnLabel_41:
        MOVX      @DPTR,A
??ZDSecMgrWriteNV_3:
        INC       ?V0
        MOV       A,?V0
        JNZ       ??ZDSecMgrWriteNV_4
        INC       ?V1
??ZDSecMgrWriteNV_4:
        CLR       C
        SUBB      A,#0x3
        MOV       A,?V1
        SUBB      A,#0x0
        JC        ??ZDSecMgrWriteNV_1
// 2771   }
// 2772 
// 2773   // Save off the header
// 2774   osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
??ZDSecMgrWriteNV_0:
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x4c
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2775 }
        MOV       A,#0x2
          CFI EndBlock cfiBlock384
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock385 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 51)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock385
        REQUIRE ??Subroutine78_0
        ; // Fall through to label ??Subroutine78_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine78_0:
          CFI Block cfiBlock386 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock386

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond387 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond388 Using cfiCommon0
          CFI (cfiCond388) Function ZDSecMgrWriteNV
          CFI (cfiCond388) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond388) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond388) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond388) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond388) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond388) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond388) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond388) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond388) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond388) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond388) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond388) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond388) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond388) CFA_SP SP+-2
          CFI (cfiCond388) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker389 Using cfiCommon1
          CFI (cfiPicker389) NoFunction
          CFI (cfiPicker389) Picker
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        RET
          CFI EndBlock cfiCond387
          CFI EndBlock cfiCond388
          CFI EndBlock cfiPicker389

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond390 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond391 Using cfiCommon0
          CFI (cfiCond391) Function ZDSecMgrWriteNV
          CFI (cfiCond391) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond391) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond391) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond391) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond391) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond391) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond391) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond391) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond391) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond391) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond391) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond391) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond391) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond391) CFA_SP SP+-2
          CFI (cfiCond391) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker392 Using cfiCommon1
          CFI (cfiPicker392) NoFunction
          CFI (cfiPicker392) Picker
        LCALL     ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_65:
        MOVX      A,@DPTR
        XRL       A,#0xfe
        RET
          CFI EndBlock cfiCond390
          CFI EndBlock cfiCond391
          CFI EndBlock cfiPicker392

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond393 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookup
          CFI Conditional ??CrossCallReturnLabel_187
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond394 Using cfiCommon0
          CFI (cfiCond394) Function ZDSecMgrEntryNew
          CFI (cfiCond394) Conditional ??CrossCallReturnLabel_188
          CFI (cfiCond394) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond394) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond394) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond394) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond394) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond394) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond394) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond394) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond394) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond394) CFA_SP SP+-2
          CFI (cfiCond394) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker395 Using cfiCommon1
          CFI (cfiPicker395) NoFunction
          CFI (cfiPicker395) Picker
        MOV       R7,A
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond393
          CFI EndBlock cfiCond394
          CFI EndBlock cfiPicker395
        REQUIRE ??Subroutine79_0
        ; // Fall through to label ??Subroutine79_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine79_0:
          CFI Block cfiCond396 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupAMI
          CFI Conditional ??CrossCallReturnLabel_189
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond397 Using cfiCommon0
          CFI (cfiCond397) Function ZDSecMgrWriteNV
          CFI (cfiCond397) Conditional ??CrossCallReturnLabel_190
          CFI (cfiCond397) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond397) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond397) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond397) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond397) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond397) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond397) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond397) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond397) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond397) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond397) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond397) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond397) CFA_SP SP+-2
          CFI (cfiCond397) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond398 Using cfiCommon0
          CFI (cfiCond398) Function ZDSecMgrEntryLookup
          CFI (cfiCond398) Conditional ??CrossCallReturnLabel_187
          CFI (cfiCond398) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond398) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond398) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond398) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond398) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond398) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond398) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond398) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond398) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond398) CFA_SP SP+-2
          CFI (cfiCond398) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond399 Using cfiCommon0
          CFI (cfiCond399) Function ZDSecMgrEntryNew
          CFI (cfiCond399) Conditional ??CrossCallReturnLabel_188
          CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond399) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond399) CFA_SP SP+-2
          CFI (cfiCond399) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker400 Using cfiCommon1
          CFI (cfiPicker400) NoFunction
          CFI (cfiPicker400) Picker
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
          CFI EndBlock cfiCond396
          CFI EndBlock cfiCond397
          CFI EndBlock cfiCond398
          CFI EndBlock cfiCond399
          CFI EndBlock cfiPicker400
        REQUIRE ??Subroutine80_0
        ; // Fall through to label ??Subroutine80_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine80_0:
          CFI Block cfiCond401 Using cfiCommon0
          CFI Function ZDSecMgrEntryInit
          CFI Conditional ??CrossCallReturnLabel_191
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond402 Using cfiCommon0
          CFI (cfiCond402) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond402) Conditional ??CrossCallReturnLabel_189
          CFI (cfiCond402) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond402) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond402) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond402) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond402) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond402) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond402) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond402) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond402) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond402) CFA_SP SP+-2
          CFI (cfiCond402) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond403 Using cfiCommon0
          CFI (cfiCond403) Function ZDSecMgrWriteNV
          CFI (cfiCond403) Conditional ??CrossCallReturnLabel_190
          CFI (cfiCond403) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond403) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond403) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond403) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond403) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond403) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond403) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond403) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond403) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond403) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond403) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond403) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond403) CFA_SP SP+-2
          CFI (cfiCond403) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond404 Using cfiCommon0
          CFI (cfiCond404) Function ZDSecMgrEntryLookup
          CFI (cfiCond404) Conditional ??CrossCallReturnLabel_187
          CFI (cfiCond404) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond404) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond404) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond404) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond404) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond404) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond404) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond404) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond404) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond404) CFA_SP SP+-2
          CFI (cfiCond404) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond405 Using cfiCommon0
          CFI (cfiCond405) Function ZDSecMgrEntryNew
          CFI (cfiCond405) Conditional ??CrossCallReturnLabel_188
          CFI (cfiCond405) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond405) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond405) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond405) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond405) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond405) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond405) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond405) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond405) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond405) CFA_SP SP+-2
          CFI (cfiCond405) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker406 Using cfiCommon1
          CFI (cfiPicker406) NoFunction
          CFI (cfiPicker406) Picker
        MOVX      @DPTR,A
        MOV       DPTR,#ZDSecMgrEntries
        LCALL     ?Subroutine51 & 0xFFFF
??CrossCallReturnLabel_198:
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond401
          CFI EndBlock cfiCond402
          CFI EndBlock cfiCond403
          CFI EndBlock cfiCond404
          CFI EndBlock cfiCond405
          CFI EndBlock cfiPicker406
// 2776 #endif // NV_RESTORE
// 2777 
// 2778 #if defined ( NV_RESTORE )
// 2779 /******************************************************************************
// 2780  * @fn          ZDSecMgrRestoreFromNV
// 2781  *
// 2782  * @brief       Restore the APS Link Key entry data from NV. It does not restore
// 2783  *              the key data itself as they remain in NV until they are used.
// 2784  *              Only list data is restored.
// 2785  *              Restore zgTrustCenterAdress from NV.
// 2786  *
// 2787  * @param       none
// 2788  *
// 2789  * @return      None.
// 2790  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2791 static void ZDSecMgrRestoreFromNV( void )
ZDSecMgrRestoreFromNV:
          CFI Block cfiBlock407 Using cfiCommon0
          CFI Function ZDSecMgrRestoreFromNV
        CODE
// 2792 {
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 2793   nvDeviceListHdr_t hdr;
// 2794   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 2795 
// 2796   if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
// 2797       ((hdr.numRecs > 0) && (hdr.numRecs <= ZDSECMGR_ENTRY_MAX)))
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x4c
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,R1
        JZ        $+5
        LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_140:
        JNZ       $+5
        LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#0x4
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JC        $+5
        LJMP      ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
// 2798   {
// 2799     uint8 x;
// 2800 
// 2801     pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x18
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V4,R2
        MOV       ?V5,R3
// 2802 
// 2803     for (x = 0; x < ZDSECMGR_ENTRY_MAX; x++)
        MOV       ?V6,#0x0
// 2804     {
// 2805       if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
// 2806                         (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
// 2807                         sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
??ZDSecMgrRestoreFromNV_1:
        MOV       A,?V6
        MOV       B,#0x5
        MUL       AB
        MOV       R6,A
        MOV       R7,B
        ; Setup parameters for call to function osal_nv_read
        LCALL     ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       ?V0,#0x5
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,?V6
        MOV       B,#0x5
        MUL       AB
        MOV       R0,A
        MOV       A,R7
        LCALL     ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,R1
        JZ        $+5
        LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
// 2808       {
// 2809         // update data only for valid entries
// 2810         if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
        MOV       DPTR,#ZDSecMgrEntries
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       R1,A
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        XRL       A,#0xfe
        JNZ       ??ZDSecMgrRestoreFromNV_3
        INC       DPTR
        MOVX      A,@DPTR
        CPL       A
??ZDSecMgrRestoreFromNV_3:
        JNZ       $+5
        LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
// 2811         {
// 2812           if (pApsLinkKey != NULL)
        MOV       A,?V4
        ORL       A,?V5
        JNZ       $+5
        LJMP      ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
// 2813           {
// 2814             // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
// 2815             osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0,
// 2816                          sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       ?V0,#0x18
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine64_0 & 0xFFFF
??CrossCallReturnLabel_113:
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 2817 
// 2818             // set new values for the counter
// 2819             pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
        MOV       DPTR,#__Constant_3e9
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV       R0,#?V0
        LCALL     ?L_ADD_TO_X
        LCALL     ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_64:
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
        MOV       A,R0
        MOV       B,#0x9
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x9
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#ApsLinkKeyFrmCntr & 0xff
        ADD       A,R0
        MOV       R4,A
        MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
        ADDC      A,R1
        MOV       R5,A
        LCALL     ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL     ?XLOAD_R0123
        MOV       A,R4
        ADD       A,#-0x9
        MOV       DPL,A
        MOV       A,R5
        ADDC      A,#-0x13
        MOV       DPH,A
        LCALL     ?XSTORE_R0123
// 2820 
// 2821             // restore values for counters in RAM
// 2822             ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr =
// 2823                                             pApsLinkKey->txFrmCntr;
// 2824 
// 2825             ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr =
// 2826                                             pApsLinkKey->rxFrmCntr;
        MOV       A,?V4
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        LCALL     ?XLOAD_R0123
        MOV       A,R4
        ADD       A,#-0x5
        MOV       DPL,A
        MOV       A,R5
        ADDC      A,#-0x13
        MOV       DPH,A
        LCALL     ?XSTORE_R0123
// 2827 
// 2828             osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0,
// 2829                           sizeof(APSME_LinkKeyData_t), pApsLinkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       ?V0,#0x18
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 2830 
// 2831             // clear copy of key in RAM
// 2832             osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x18
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2833           }
// 2834         }
// 2835       }
// 2836     }
??ZDSecMgrRestoreFromNV_2:
        INC       ?V6
        MOV       A,?V6
        CLR       C
        SUBB      A,#0x3
        JNC       $+5
        LJMP      ??ZDSecMgrRestoreFromNV_1 & 0xFFFF
// 2837 
// 2838     if (pApsLinkKey != NULL)
        MOV       A,?V4
        ORL       A,?V5
        JZ        ??ZDSecMgrRestoreFromNV_0
// 2839     {
// 2840       osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2841     }
// 2842   }
// 2843 
// 2844   osal_nv_read( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
??ZDSecMgrRestoreFromNV_0:
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V0,#zgApsTrustCenterAddr & 0xff
        MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       ?V0,#0x8
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x71
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 2845 }
        MOV       A,#0x2
        LJMP      ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock407

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine53:
          CFI Block cfiCond408 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond409 Using cfiCommon0
          CFI (cfiCond409) Function ZDSecMgrWriteNV
          CFI (cfiCond409) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_33
          CFI (cfiCond409) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond409) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond409) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond409) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond409) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond409) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond409) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond409) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond409) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond409) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond409) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond409) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond409) CFA_SP SP+-4
          CFI (cfiCond409) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond410 Using cfiCommon0
          CFI (cfiCond410) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond410) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond410) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond410) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond410) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond410) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond410) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond410) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond410) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond410) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond410) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond410) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond410) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond410) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond410) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond410) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond410) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond410) CFA_SP SP+-2
          CFI (cfiCond410) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker411 Using cfiCommon1
          CFI (cfiPicker411) NoFunction
          CFI (cfiPicker411) Picker
        MOV       DPTR,#ZDSecMgrEntries
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       DPL,R0
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond408
          CFI EndBlock cfiCond409
          CFI EndBlock cfiCond410
          CFI EndBlock cfiPicker411

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond412 Using cfiCommon0
          CFI Function ZDSecMgrRestoreFromNV
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond413 Using cfiCommon0
          CFI (cfiCond413) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond413) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond413) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond413) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond413) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond413) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond413) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond413) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond413) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond413) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond413) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond413) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond413) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond413) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond413) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond413) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond413) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond413) CFA_SP SP+-2
          CFI (cfiCond413) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker414 Using cfiCommon1
          CFI (cfiPicker414) NoFunction
          CFI (cfiPicker414) Picker
        MOV       A,?V4
        ADD       A,#0x10
        MOV       DPL,A
        CLR       A
        ADDC      A,?V5
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond412
          CFI EndBlock cfiCond413
          CFI EndBlock cfiPicker414

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond415 Using cfiCommon0
          CFI Function ZDSecMgrEntryFree
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond416 Using cfiCommon0
          CFI (cfiCond416) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond416) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond416) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond416) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond416) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond416) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond416) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond416) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond416) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond416) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond416) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond416) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond416) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond416) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond416) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond416) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond416) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond416) CFA_SP SP+-2
          CFI (cfiCond416) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker417 Using cfiCommon1
          CFI (cfiPicker417) NoFunction
          CFI (cfiPicker417) Picker
        MOV       DPTR,#ZDSecMgrEntries
        MOVX      A,@DPTR
        ADD       A,R6
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,R7
        MOV       ?V1,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond415
          CFI EndBlock cfiCond416
          CFI EndBlock cfiPicker417
// 2846 #endif // NV_RESTORE
// 2847 
// 2848 /*********************************************************************
// 2849  * @fn          ZDSecMgrSetDefaultNV
// 2850  *
// 2851  * @brief       Write the defaults to NV for Entry table and for APS key data table
// 2852  *
// 2853  * @param       none
// 2854  *
// 2855  * @return      none
// 2856  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2857 void ZDSecMgrSetDefaultNV( void )
ZDSecMgrSetDefaultNV:
          CFI Block cfiBlock418 Using cfiCommon0
          CFI Function ZDSecMgrSetDefaultNV
        CODE
// 2858 {
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSetDefaultNV, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 7
        MOV       A,#-0x7
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2859   uint16 i;
// 2860   nvDeviceListHdr_t hdr;
// 2861   ZDSecMgrEntry_t secMgrEntry;
// 2862   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 2863 
// 2864   // Initialize the header
// 2865   hdr.numRecs = 0;
        LCALL     ?Subroutine12 & 0xFFFF
// 2866 
// 2867   // clear the header
// 2868   osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
??CrossCallReturnLabel_1:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x4c
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2869 
// 2870   osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x5
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2871 
// 2872   for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV       R6,#0x0
        MOV       R7,#0x0
// 2873   {
// 2874     // Clear the record
// 2875     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 2876                 (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
// 2877                         sizeof(ZDSecMgrEntry_t), &secMgrEntry );
??ZDSecMgrSetDefaultNV_0:
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V0,#0x5
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
        MOV       A,R0
        MOV       B,#0x5
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x5
        MOV       A,R1
        LCALL     ?Subroutine39 & 0xFFFF
// 2878   }
??CrossCallReturnLabel_45:
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        INC       R6
        MOV       A,R6
        JNZ       ??ZDSecMgrSetDefaultNV_1
        INC       R7
??ZDSecMgrSetDefaultNV_1:
        CLR       C
        SUBB      A,#0x3
        MOV       A,R7
        SUBB      A,#0x0
        JC        ??ZDSecMgrSetDefaultNV_0
// 2879 
// 2880   pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x18
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2881 
// 2882   if (pApsLinkKey != NULL)
        MOV       A,R2
        ORL       A,?V1
        JZ        ??ZDSecMgrSetDefaultNV_2
// 2883   {
// 2884     osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x18
        MOV       R5,#0x0
        MOV       R1,#0x0
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2885 
// 2886     for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV       R6,#0x0
        MOV       R7,#0x0
// 2887     {
// 2888       // Clear the record
// 2889       osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
// 2890                     sizeof(APSME_LinkKeyData_t), pApsLinkKey);
??ZDSecMgrSetDefaultNV_3:
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V2,#0x18
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x1
        MOV       R2,A
        MOV       A,R7
        ADDC      A,#0x2
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 2891     }
        INC       R6
        MOV       A,R6
        JNZ       ??ZDSecMgrSetDefaultNV_4
        INC       R7
??ZDSecMgrSetDefaultNV_4:
        CLR       C
        SUBB      A,#0x3
        MOV       A,R7
        SUBB      A,#0x0
        JC        ??ZDSecMgrSetDefaultNV_3
// 2892 
// 2893     osal_mem_free(pApsLinkKey);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2894   }
// 2895 }
??ZDSecMgrSetDefaultNV_2:
        MOV       A,#0x7
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock418

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond419 Using cfiCommon0
          CFI Function ZDSecMgrWriteNV
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond420 Using cfiCommon0
          CFI (cfiCond420) Function ZDSecMgrSetDefaultNV
          CFI (cfiCond420) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond420) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond420) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond420) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond420) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond420) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond420) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond420) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond420) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond420) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond420) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond420) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond420) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond420) CFA_SP SP+-2
          CFI (cfiCond420) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker421 Using cfiCommon1
          CFI (cfiPicker421) NoFunction
          CFI (cfiPicker421) Picker
        MUL       AB
        ADD       A,R2
        LCALL     ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_67:
        RET
          CFI EndBlock cfiCond419
          CFI EndBlock cfiCond420
          CFI EndBlock cfiPicker421

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine54:
          CFI Block cfiCond422 Using cfiCommon0
          CFI Function ZDSecMgrRestoreFromNV
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond423 Using cfiCommon0
          CFI (cfiCond423) Function ZDSecMgrWriteNV
          CFI (cfiCond423) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_44
          CFI (cfiCond423) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond423) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond423) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond423) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond423) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond423) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond423) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond423) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond423) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond423) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond423) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond423) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond423) CFA_SP SP+-4
          CFI (cfiCond423) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond424 Using cfiCommon0
          CFI (cfiCond424) Function ZDSecMgrSetDefaultNV
          CFI (cfiCond424) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_45
          CFI (cfiCond424) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond424) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond424) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond424) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond424) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond424) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond424) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond424) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond424) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond424) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond424) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond424) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond424) CFA_SP SP+-4
          CFI (cfiCond424) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiPicker425 Using cfiCommon1
          CFI (cfiPicker425) NoFunction
          CFI (cfiPicker425) Picker
        MOV       R1,A
        MOV       A,R0
        ADD       A,#0x2
        MOV       R4,A
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        MOV       R2,#0x4c
        MOV       R3,#0x0
        RET
          CFI EndBlock cfiCond422
          CFI EndBlock cfiCond423
          CFI EndBlock cfiCond424
          CFI EndBlock cfiPicker425

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond426 Using cfiCommon0
          CFI Function ZDSecMgrInitNV
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond427 Using cfiCommon0
          CFI (cfiCond427) Function ZDSecMgrSetDefaultNV
          CFI (cfiCond427) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond427) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond427) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond427) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond427) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond427) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond427) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond427) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond427) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond427) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond427) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond427) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond427) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond427) CFA_SP SP+-2
          CFI (cfiCond427) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker428 Using cfiCommon1
          CFI (cfiPicker428) NoFunction
          CFI (cfiPicker428) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond426
          CFI EndBlock cfiCond427
          CFI EndBlock cfiPicker428
// 2896 
// 2897 #if defined ( NV_RESTORE )
// 2898 /*********************************************************************
// 2899  * @fn      ZDSecMgrUpdateNV()
// 2900  *
// 2901  * @brief   Updates one entry of the APS link key table to NV
// 2902  *
// 2903  * @param   index - to the entry in security manager table
// 2904  *
// 2905  * @return  none
// 2906  */
// 2907 static void ZDSecMgrUpdateNV( uint16 index )
// 2908 {
// 2909   nvDeviceListHdr_t hdr;
// 2910 
// 2911   if (ZDSecMgrEntries != NULL)
// 2912   {
// 2913     // Save off the record
// 2914     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
// 2915                    (uint16)((sizeof(nvDeviceListHdr_t)) + (index * sizeof(ZDSecMgrEntry_t))),
// 2916                    sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[index] );
// 2917   }
// 2918 
// 2919   if (osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS)
// 2920   {
// 2921     if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
// 2922     {
// 2923       if (hdr.numRecs > 0)
// 2924       {
// 2925         hdr.numRecs--;
// 2926       }
// 2927     }
// 2928     else
// 2929     {
// 2930       hdr.numRecs++;
// 2931     }
// 2932 
// 2933     // Save off the header
// 2934     osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
// 2935   }
// 2936 }
// 2937 #endif // NV_RESTORE
// 2938 
// 2939 /******************************************************************************
// 2940  * @fn          ZDSecMgrAPSRemove
// 2941  *
// 2942  * @brief       Remove device from network.
// 2943  *
// 2944  * @param       nwkAddr - device's NWK address
// 2945  * @param       extAddr - device's Extended address
// 2946  * @param       parentAddr - parent's NWK address
// 2947  *
// 2948  * @return      ZStatus_t
// 2949  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2950 ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
ZDSecMgrAPSRemove:
          CFI Block cfiBlock429 Using cfiCommon0
          CFI Function ZDSecMgrAPSRemove
        CODE
// 2951 {
        FUNCALL ZDSecMgrAPSRemove, ZDSecMgrDeviceRemove
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 8)
// 2952   ZDSecMgrDevice_t device;
// 2953 
// 2954   if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
// 2955        ( extAddr == NULL )              ||
// 2956        ( parentAddr == INVALID_NODE_ADDR ) )
        MOV       A,#-0x2
        XRL       A,R2
        JNZ       ??ZDSecMgrAPSRemove_0
        MOV       A,#-0x1
        XRL       A,R3
??ZDSecMgrAPSRemove_0:
        JZ        ??ZDSecMgrAPSRemove_1
        MOV       A,R4
        ORL       A,R5
        JZ        ??ZDSecMgrAPSRemove_1
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine67_0 & 0xFFFF
??CrossCallReturnLabel_125:
        MOV       A,#-0x2
        XRL       A,R0
        JNZ       ??ZDSecMgrAPSRemove_2
        MOV       A,#-0x1
        XRL       A,R1
??ZDSecMgrAPSRemove_2:
        JNZ       ??ZDSecMgrAPSRemove_3
// 2957   {
// 2958     return ( ZFailure );
??ZDSecMgrAPSRemove_1:
        MOV       R1,#0x1
        SJMP      ??ZDSecMgrAPSRemove_4
// 2959   }
// 2960 
// 2961   device.nwkAddr = nwkAddr;
??ZDSecMgrAPSRemove_3:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine81_0 & 0xFFFF
// 2962   device.extAddr = extAddr;
??CrossCallReturnLabel_203:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 2963   device.parentAddr = parentAddr;
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LCALL     ??Subroutine74_0 & 0xFFFF
// 2964 
// 2965   // remove device
// 2966   ZDSecMgrDeviceRemove( &device );
??CrossCallReturnLabel_173:
        LCALL     `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
// 2967 
// 2968   return ( ZSuccess );
        MOV       R1,#0x0
??ZDSecMgrAPSRemove_4:
        MOV       A,#0x8
        LJMP      ?Subroutine8 & 0xFFFF
// 2969 }
          CFI EndBlock cfiBlock429

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond430 Using cfiCommon0
          CFI Function ZDSecMgrEntryLookupExtGetIndex
          CFI Conditional ??CrossCallReturnLabel_205
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond431 Using cfiCommon0
          CFI (cfiCond431) Function ZDSecMgrEntryNew
          CFI (cfiCond431) Conditional ??CrossCallReturnLabel_206
          CFI (cfiCond431) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond431) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond431) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond431) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond431) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond431) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond431) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond431) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond431) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond431) CFA_SP SP+-2
          CFI (cfiCond431) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker432 Using cfiCommon1
          CFI (cfiPicker432) NoFunction
          CFI (cfiPicker432) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond430
          CFI EndBlock cfiCond431
          CFI EndBlock cfiPicker432
        REQUIRE ??Subroutine81_0
        ; // Fall through to label ??Subroutine81_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine81_0:
          CFI Block cfiCond433 Using cfiCommon0
          CFI Function ZDSecMgrNewDeviceEvent
          CFI Conditional ??CrossCallReturnLabel_199
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond434 Using cfiCommon0
          CFI (cfiCond434) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond434) Conditional ??CrossCallReturnLabel_200
          CFI (cfiCond434) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond434) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond434) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond434) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond434) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond434) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond434) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond434) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond434) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond434) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond434) CFA_SP SP+-2
          CFI (cfiCond434) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond435 Using cfiCommon0
          CFI (cfiCond435) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond435) Conditional ??CrossCallReturnLabel_201
          CFI (cfiCond435) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond435) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond435) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond435) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond435) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond435) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond435) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond435) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond435) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond435) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond435) CFA_SP SP+-2
          CFI (cfiCond435) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond436 Using cfiCommon0
          CFI (cfiCond436) Function ZDSecMgrRemoveDeviceInd
          CFI (cfiCond436) Conditional ??CrossCallReturnLabel_202
          CFI (cfiCond436) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond436) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond436) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond436) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond436) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond436) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond436) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond436) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond436) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond436) CFA_SP SP+-2
          CFI (cfiCond436) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond437 Using cfiCommon0
          CFI (cfiCond437) Function ZDSecMgrAPSRemove
          CFI (cfiCond437) Conditional ??CrossCallReturnLabel_203
          CFI (cfiCond437) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond437) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond437) CFA_SP SP+-7
          CFI (cfiCond437) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond438 Using cfiCommon0
          CFI (cfiCond438) Function APSME_TCLinkKeyLoad
          CFI (cfiCond438) Conditional ??CrossCallReturnLabel_204
          CFI (cfiCond438) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond438) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond438) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond438) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond438) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond438) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond438) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond438) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond438) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond438) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond438) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond438) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond438) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond438) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond438) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond438) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond438) CFA_SP SP+-2
          CFI (cfiCond438) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond439 Using cfiCommon0
          CFI (cfiCond439) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond439) Conditional ??CrossCallReturnLabel_205
          CFI (cfiCond439) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond439) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond439) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond439) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond439) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond439) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond439) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond439) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond439) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond439) CFA_SP SP+-2
          CFI (cfiCond439) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond440 Using cfiCommon0
          CFI (cfiCond440) Function ZDSecMgrEntryNew
          CFI (cfiCond440) Conditional ??CrossCallReturnLabel_206
          CFI (cfiCond440) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond440) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond440) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond440) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond440) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond440) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond440) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond440) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond440) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond440) CFA_SP SP+-2
          CFI (cfiCond440) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker441 Using cfiCommon1
          CFI (cfiPicker441) NoFunction
          CFI (cfiPicker441) Picker
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond433
          CFI EndBlock cfiCond434
          CFI EndBlock cfiCond435
          CFI EndBlock cfiCond436
          CFI EndBlock cfiCond437
          CFI EndBlock cfiCond438
          CFI EndBlock cfiCond439
          CFI EndBlock cfiCond440
          CFI EndBlock cfiPicker441
// 2970 
// 2971 /******************************************************************************
// 2972  * @fn          APSME_TCLinkKeyInit
// 2973  *
// 2974  * @brief       Initialize the NV table for preconfigured TC link key
// 2975  *
// 2976  *              When zgUseDefaultTCL is set to TRUE, the default preconfig
// 2977  *              Trust Center Link Key is written to NV. A single tclk is used
// 2978  *              by all devices joining the network.
// 2979  *
// 2980  * @param       setDefault - TRUE to set default values
// 2981  *
// 2982  * @return      none
// 2983  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2984 void APSME_TCLinkKeyInit(uint8 setDefault)
APSME_TCLinkKeyInit:
          CFI Block cfiBlock442 Using cfiCommon0
          CFI Function APSME_TCLinkKeyInit
        CODE
// 2985 {
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyInit, APSME_EraseICEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R1
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
// 2986   APSME_TCLKDevEntry_t TCLKDevEntry;
// 2987   uint8                rtrn;
// 2988   uint16               i;
// 2989   
// 2990   // Clear the data for the keys
// 2991   osal_memset( &TCLKDevEntry, 0x00, sizeof(APSME_TCLKDevEntry_t) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x13
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2992   TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 2993   
// 2994   // Initialize all NV items
// 2995   for( i = 0; i < gZDSECMGR_TC_DEVICE_MAX; i++ )
        MOV       ?V4,#0x0
        MOV       ?V5,#0x0
// 2996   {
// 2997     // If the item doesn't exist in NV memory, create and initialize
// 2998     // it with the default value passed in, either defaultTCLK or 0
// 2999     rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i),
// 3000                                sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry);
// 3001 
// 3002     if (rtrn == SUCCESS)
??APSME_TCLinkKeyInit_0:
        MOV       A,?V4
        ADD       A,#0x11
        MOV       R6,A
        MOV       A,?V5
        ADDC      A,#0x1
        MOV       R7,A
        ; Setup parameters for call to function osal_nv_item_init
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       R4,#0x13
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R1
        JZ        $+5
        LJMP      ??APSME_TCLinkKeyInit_1 & 0xFFFF
// 3003     {
// 3004       if(setDefault)
        MOV       A,?V4
        MOV       B,#0x9
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x9
        MOV       A,?V5
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_46:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R0,#?V0
        JZ        ??APSME_TCLinkKeyInit_2
// 3005       {
// 3006         //Force to initialize the entry
// 3007         osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0, sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry);
        ; Setup parameters for call to function osal_nv_write
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       ?V0,#0x13
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 3008         TCLinkKeyFrmCntr[i].txFrmCntr = 0;
        MOV       DPL,?V6
        MOV       DPH,?V7
        LCALL     ??Subroutine83_0 & 0xFFFF
// 3009         TCLinkKeyFrmCntr[i].rxFrmCntr = 0;
??CrossCallReturnLabel_214:
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine48 & 0xFFFF
// 3010       }
??CrossCallReturnLabel_220:
        LJMP      ??APSME_TCLinkKeyInit_3 & 0xFFFF
// 3011       else
// 3012       {
// 3013         // set the Frame counters to 0 to existing keys in NV
// 3014         osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0,
// 3015                        sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
??APSME_TCLinkKeyInit_2:
        ; Setup parameters for call to function osal_nv_read
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       ?V0,#0x13
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 3016 
// 3017         // increase the value stored in NV
// 3018         TCLKDevEntry.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
        MOV       DPTR,#__Constant_b
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,#?V0
        LCALL     ?L_ADD_TO_X
// 3019 
// 3020         osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
// 3021                         sizeof(APSME_TCLKDevEntry_t), &TCLKDevEntry );
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       ?V0,#0x13
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 3022 
// 3023         // set initial values for counters in RAM
// 3024         TCLinkKeyFrmCntr[i].txFrmCntr = TCLKDevEntry.txFrmCntr;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?XLOAD_R0123
        MOV       DPL,?V6
        MOV       DPH,?V7
        LCALL     ?XSTORE_R0123
// 3025         TCLinkKeyFrmCntr[i].rxFrmCntr = TCLKDevEntry.rxFrmCntr;
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?XLOAD_R0123
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?XSTORE_R0123
// 3026         
// 3027         // Making sure data is cleared and set to default for every key all the time
// 3028         osal_memset( &TCLKDevEntry, 0x00, sizeof(APSME_TCLKDevEntry_t) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x13
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 3029         TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
??APSME_TCLinkKeyInit_3:
        MOVX      @DPTR,A
// 3030       }
// 3031     }
// 3032   }
??APSME_TCLinkKeyInit_1:
        INC       ?V4
        MOV       A,?V4
        JNZ       ??APSME_TCLinkKeyInit_4
        INC       ?V5
??APSME_TCLinkKeyInit_4:
        CLR       C
        SUBB      A,#0x3
        MOV       A,?V5
        SUBB      A,#0x0
        JNC       $+5
        LJMP      ??APSME_TCLinkKeyInit_0 & 0xFFFF
// 3033 
// 3034   if(setDefault)
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JZ        ??APSME_TCLinkKeyInit_5
// 3035   {
// 3036     //Force to erase all IC
// 3037     APSME_EraseICEntry(NULL);
        ; Setup parameters for call to function APSME_EraseICEntry
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??APSME_EraseICEntry::?relay`; Banked call to: APSME_EraseICEntry
// 3038   }
// 3039 }
??APSME_TCLinkKeyInit_5:
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock442

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond443 Using cfiCommon0
          CFI Function ZDSecMgrUpdateDeviceInd
          CFI Conditional ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond444 Using cfiCommon0
          CFI (cfiCond444) Function APSME_LinkKeySet
          CFI (cfiCond444) Conditional ??CrossCallReturnLabel_221, ??CrossCallReturnLabel_20
          CFI (cfiCond444) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond444) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond444) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond444) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond444) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond444) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond444) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond444) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond444) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond444) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond444) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond444) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond444) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond444) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond444) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond444) CFA_SP SP+-4
          CFI (cfiCond444) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond445 Using cfiCommon0
          CFI (cfiCond445) Function APSME_TCLinkKeyInit
          CFI (cfiCond445) Conditional ??CrossCallReturnLabel_220
          CFI (cfiCond445) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond445) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond445) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond445) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond445) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond445) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond445) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond445) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond445) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond445) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond445) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond445) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond445) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond445) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond445) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond445) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond445) CFA_SP SP+-2
          CFI (cfiCond445) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond446 Using cfiCommon0
          CFI (cfiCond446) Function APSME_LinkKeySet
          CFI (cfiCond446) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_218
          CFI (cfiCond446) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond446) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond446) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond446) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond446) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond446) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond446) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond446) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond446) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond446) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond446) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond446) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond446) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond446) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond446) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond446) CFA_SP SP+-4
          CFI (cfiCond446) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond447 Using cfiCommon0
          CFI (cfiCond447) Function APSME_LinkKeySet
          CFI (cfiCond447) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_219
          CFI (cfiCond447) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond447) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond447) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond447) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond447) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond447) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond447) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond447) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond447) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond447) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond447) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond447) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond447) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond447) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond447) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond447) CFA_SP SP+-4
          CFI (cfiCond447) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond448 Using cfiCommon0
          CFI (cfiCond448) Function APSME_LinkKeySet
          CFI (cfiCond448) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_217
          CFI (cfiCond448) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond448) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond448) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond448) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond448) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond448) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond448) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond448) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond448) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond448) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond448) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond448) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond448) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond448) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond448) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond448) CFA_SP SP+-4
          CFI (cfiCond448) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond449 Using cfiCommon0
          CFI (cfiCond449) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond449) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_208
          CFI (cfiCond449) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond449) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond449) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond449) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond449) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond449) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond449) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond449) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond449) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond449) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond449) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond449) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond449) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond449) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond449) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond449) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond449) CFA_SP SP+-4
          CFI (cfiCond449) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond450 Using cfiCommon0
          CFI (cfiCond450) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond450) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_209
          CFI (cfiCond450) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond450) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond450) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond450) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond450) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond450) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond450) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond450) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond450) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond450) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond450) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond450) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond450) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond450) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond450) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond450) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond450) CFA_SP SP+-4
          CFI (cfiCond450) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond451 Using cfiCommon0
          CFI (cfiCond451) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond451) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_210
          CFI (cfiCond451) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond451) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond451) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond451) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond451) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond451) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond451) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond451) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond451) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond451) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond451) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond451) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond451) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond451) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond451) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond451) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond451) CFA_SP SP+-4
          CFI (cfiCond451) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond452 Using cfiCommon0
          CFI (cfiCond452) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond452) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_211
          CFI (cfiCond452) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond452) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond452) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond452) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond452) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond452) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond452) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond452) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond452) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond452) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond452) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond452) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond452) CFA_SP SP+-4
          CFI (cfiCond452) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond453 Using cfiCommon0
          CFI (cfiCond453) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond453) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_212
          CFI (cfiCond453) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond453) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond453) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond453) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond453) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond453) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond453) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond453) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond453) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond453) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond453) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond453) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond453) CFA_SP SP+-4
          CFI (cfiCond453) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond454 Using cfiCommon0
          CFI (cfiCond454) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond454) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_213
          CFI (cfiCond454) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond454) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond454) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond454) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond454) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond454) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond454) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond454) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond454) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond454) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond454) CFA_SP SP+-4
          CFI (cfiCond454) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond455 Using cfiCommon0
          CFI (cfiCond455) Function APSME_TCLinkKeyInit
          CFI (cfiCond455) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_214
          CFI (cfiCond455) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond455) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond455) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond455) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond455) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond455) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond455) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond455) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond455) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond455) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond455) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond455) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond455) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond455) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond455) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond455) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond455) CFA_SP SP+-4
          CFI (cfiCond455) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond456 Using cfiCommon0
          CFI (cfiCond456) Function APSME_TCLinkKeyLoad
          CFI (cfiCond456) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_215
          CFI (cfiCond456) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond456) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond456) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond456) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond456) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond456) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond456) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond456) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond456) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond456) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond456) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond456) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond456) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond456) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond456) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond456) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond456) CFA_SP SP+-4
          CFI (cfiCond456) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond457 Using cfiCommon0
          CFI (cfiCond457) Function APSME_TCLinkKeyLoad
          CFI (cfiCond457) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_216
          CFI (cfiCond457) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond457) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond457) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond457) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond457) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond457) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond457) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond457) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond457) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond457) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond457) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond457) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond457) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond457) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond457) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond457) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond457) CFA_SP SP+-4
          CFI (cfiCond457) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond458 Using cfiCommon0
          CFI (cfiCond458) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond458) Conditional ??CrossCallReturnLabel_222, ??CrossCallReturnLabel_207
          CFI (cfiCond458) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond458) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond458) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond458) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond458) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond458) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond458) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond458) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond458) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond458) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond458) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond458) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond458) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond458) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond458) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond458) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond458) CFA_SP SP+-4
          CFI (cfiCond458) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker459 Using cfiCommon1
          CFI (cfiPicker459) NoFunction
          CFI (cfiPicker459) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        INC       DPTR
        RET
          CFI EndBlock cfiCond443
          CFI EndBlock cfiCond444
          CFI EndBlock cfiCond445
          CFI EndBlock cfiCond446
          CFI EndBlock cfiCond447
          CFI EndBlock cfiCond448
          CFI EndBlock cfiCond449
          CFI EndBlock cfiCond450
          CFI EndBlock cfiCond451
          CFI EndBlock cfiCond452
          CFI EndBlock cfiCond453
          CFI EndBlock cfiCond454
          CFI EndBlock cfiCond455
          CFI EndBlock cfiCond456
          CFI EndBlock cfiCond457
          CFI EndBlock cfiCond458
          CFI EndBlock cfiPicker459

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond460 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_218
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond461 Using cfiCommon0
          CFI (cfiCond461) Function APSME_LinkKeySet
          CFI (cfiCond461) Conditional ??CrossCallReturnLabel_219
          CFI (cfiCond461) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond461) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond461) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond461) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond461) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond461) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond461) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond461) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond461) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond461) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond461) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond461) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond461) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond461) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond461) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond461) CFA_SP SP+-2
          CFI (cfiCond461) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker462 Using cfiCommon1
          CFI (cfiPicker462) NoFunction
          CFI (cfiPicker462) Picker
        MOV       DPL,A
        MOV       A,R1
        ADDC      A,#-0x13
          CFI EndBlock cfiCond460
          CFI EndBlock cfiCond461
          CFI EndBlock cfiPicker462
        REQUIRE ??Subroutine82_0
        ; // Fall through to label ??Subroutine82_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine82_0:
          CFI Block cfiCond463 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_217
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond464 Using cfiCommon0
          CFI (cfiCond464) Function APSME_LinkKeySet
          CFI (cfiCond464) Conditional ??CrossCallReturnLabel_218
          CFI (cfiCond464) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond464) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond464) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond464) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond464) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond464) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond464) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond464) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond464) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond464) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond464) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond464) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond464) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond464) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond464) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond464) CFA_SP SP+-2
          CFI (cfiCond464) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond465 Using cfiCommon0
          CFI (cfiCond465) Function APSME_LinkKeySet
          CFI (cfiCond465) Conditional ??CrossCallReturnLabel_219
          CFI (cfiCond465) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond465) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond465) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond465) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond465) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond465) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond465) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond465) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond465) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond465) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond465) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond465) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond465) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond465) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond465) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond465) CFA_SP SP+-2
          CFI (cfiCond465) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker466 Using cfiCommon1
          CFI (cfiPicker466) NoFunction
          CFI (cfiPicker466) Picker
        MOV       DPH,A
          CFI EndBlock cfiCond463
          CFI EndBlock cfiCond464
          CFI EndBlock cfiCond465
          CFI EndBlock cfiPicker466
        REQUIRE ??Subroutine83_0
        ; // Fall through to label ??Subroutine83_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine83_0:
          CFI Block cfiCond467 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoinDirect
          CFI Conditional ??CrossCallReturnLabel_208
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond468 Using cfiCommon0
          CFI (cfiCond468) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond468) Conditional ??CrossCallReturnLabel_209
          CFI (cfiCond468) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond468) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond468) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond468) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond468) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond468) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond468) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond468) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond468) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond468) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond468) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond468) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond468) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond468) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond468) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond468) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond468) CFA_SP SP+-2
          CFI (cfiCond468) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond469 Using cfiCommon0
          CFI (cfiCond469) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond469) Conditional ??CrossCallReturnLabel_210
          CFI (cfiCond469) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond469) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond469) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond469) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond469) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond469) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond469) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond469) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond469) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond469) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond469) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond469) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond469) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond469) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond469) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond469) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond469) CFA_SP SP+-2
          CFI (cfiCond469) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond470 Using cfiCommon0
          CFI (cfiCond470) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond470) Conditional ??CrossCallReturnLabel_211
          CFI (cfiCond470) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond470) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond470) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond470) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond470) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond470) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond470) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond470) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond470) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond470) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond470) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond470) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond470) CFA_SP SP+-2
          CFI (cfiCond470) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond471 Using cfiCommon0
          CFI (cfiCond471) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond471) Conditional ??CrossCallReturnLabel_212
          CFI (cfiCond471) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond471) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond471) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond471) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond471) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond471) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond471) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond471) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond471) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond471) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond471) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond471) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond471) CFA_SP SP+-2
          CFI (cfiCond471) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond472 Using cfiCommon0
          CFI (cfiCond472) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond472) Conditional ??CrossCallReturnLabel_213
          CFI (cfiCond472) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond472) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond472) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond472) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond472) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond472) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond472) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond472) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond472) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond472) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond472) CFA_SP SP+-2
          CFI (cfiCond472) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond473 Using cfiCommon0
          CFI (cfiCond473) Function APSME_TCLinkKeyInit
          CFI (cfiCond473) Conditional ??CrossCallReturnLabel_214
          CFI (cfiCond473) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond473) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond473) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond473) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond473) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond473) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond473) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond473) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond473) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond473) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond473) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond473) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond473) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond473) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond473) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond473) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond473) CFA_SP SP+-2
          CFI (cfiCond473) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond474 Using cfiCommon0
          CFI (cfiCond474) Function APSME_TCLinkKeyLoad
          CFI (cfiCond474) Conditional ??CrossCallReturnLabel_215
          CFI (cfiCond474) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond474) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond474) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond474) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond474) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond474) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond474) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond474) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond474) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond474) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond474) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond474) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond474) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond474) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond474) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond474) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond474) CFA_SP SP+-2
          CFI (cfiCond474) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond475 Using cfiCommon0
          CFI (cfiCond475) Function APSME_TCLinkKeyLoad
          CFI (cfiCond475) Conditional ??CrossCallReturnLabel_216
          CFI (cfiCond475) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond475) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond475) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond475) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond475) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond475) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond475) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond475) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond475) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond475) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond475) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond475) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond475) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond475) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond475) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond475) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond475) CFA_SP SP+-2
          CFI (cfiCond475) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond476 Using cfiCommon0
          CFI (cfiCond476) Function APSME_LinkKeySet
          CFI (cfiCond476) Conditional ??CrossCallReturnLabel_217
          CFI (cfiCond476) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond476) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond476) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond476) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond476) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond476) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond476) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond476) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond476) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond476) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond476) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond476) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond476) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond476) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond476) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond476) CFA_SP SP+-2
          CFI (cfiCond476) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond477 Using cfiCommon0
          CFI (cfiCond477) Function APSME_LinkKeySet
          CFI (cfiCond477) Conditional ??CrossCallReturnLabel_218
          CFI (cfiCond477) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond477) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond477) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond477) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond477) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond477) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond477) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond477) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond477) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond477) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond477) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond477) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond477) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond477) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond477) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond477) CFA_SP SP+-2
          CFI (cfiCond477) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond478 Using cfiCommon0
          CFI (cfiCond478) Function APSME_LinkKeySet
          CFI (cfiCond478) Conditional ??CrossCallReturnLabel_219
          CFI (cfiCond478) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond478) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond478) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond478) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond478) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond478) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond478) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond478) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond478) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond478) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond478) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond478) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond478) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond478) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond478) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond478) CFA_SP SP+-2
          CFI (cfiCond478) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker479 Using cfiCommon1
          CFI (cfiPicker479) NoFunction
          CFI (cfiPicker479) Picker
        CLR       A
          CFI EndBlock cfiCond467
          CFI EndBlock cfiCond468
          CFI EndBlock cfiCond469
          CFI EndBlock cfiCond470
          CFI EndBlock cfiCond471
          CFI EndBlock cfiCond472
          CFI EndBlock cfiCond473
          CFI EndBlock cfiCond474
          CFI EndBlock cfiCond475
          CFI EndBlock cfiCond476
          CFI EndBlock cfiCond477
          CFI EndBlock cfiCond478
          CFI EndBlock cfiPicker479
        REQUIRE ??Subroutine84_0
        ; // Fall through to label ??Subroutine84_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine84_0:
          CFI Block cfiCond480 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoinDirect
          CFI Conditional ??CrossCallReturnLabel_207
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond481 Using cfiCommon0
          CFI (cfiCond481) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond481) Conditional ??CrossCallReturnLabel_208
          CFI (cfiCond481) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond481) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond481) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond481) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond481) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond481) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond481) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond481) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond481) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond481) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond481) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond481) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond481) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond481) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond481) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond481) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond481) CFA_SP SP+-2
          CFI (cfiCond481) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond482 Using cfiCommon0
          CFI (cfiCond482) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond482) Conditional ??CrossCallReturnLabel_209
          CFI (cfiCond482) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond482) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond482) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond482) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond482) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond482) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond482) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond482) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond482) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond482) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond482) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond482) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond482) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond482) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond482) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond482) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond482) CFA_SP SP+-2
          CFI (cfiCond482) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond483 Using cfiCommon0
          CFI (cfiCond483) Function ZDSecMgrDeviceJoinDirect
          CFI (cfiCond483) Conditional ??CrossCallReturnLabel_210
          CFI (cfiCond483) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond483) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond483) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond483) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond483) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond483) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond483) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond483) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond483) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond483) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond483) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond483) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond483) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond483) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond483) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond483) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond483) CFA_SP SP+-2
          CFI (cfiCond483) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond484 Using cfiCommon0
          CFI (cfiCond484) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond484) Conditional ??CrossCallReturnLabel_211
          CFI (cfiCond484) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond484) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond484) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond484) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond484) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond484) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond484) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond484) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond484) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond484) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond484) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond484) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond484) CFA_SP SP+-2
          CFI (cfiCond484) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond485 Using cfiCommon0
          CFI (cfiCond485) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond485) Conditional ??CrossCallReturnLabel_212
          CFI (cfiCond485) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond485) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond485) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond485) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond485) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond485) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond485) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond485) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond485) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond485) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond485) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond485) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond485) CFA_SP SP+-2
          CFI (cfiCond485) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond486 Using cfiCommon0
          CFI (cfiCond486) Function ZDSecMgrUpdateDeviceInd
          CFI (cfiCond486) Conditional ??CrossCallReturnLabel_213
          CFI (cfiCond486) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond486) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond486) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond486) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond486) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond486) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond486) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond486) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond486) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond486) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond486) CFA_SP SP+-2
          CFI (cfiCond486) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond487 Using cfiCommon0
          CFI (cfiCond487) Function APSME_TCLinkKeyInit
          CFI (cfiCond487) Conditional ??CrossCallReturnLabel_214
          CFI (cfiCond487) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond487) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond487) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond487) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond487) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond487) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond487) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond487) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond487) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond487) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond487) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond487) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond487) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond487) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond487) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond487) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond487) CFA_SP SP+-2
          CFI (cfiCond487) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond488 Using cfiCommon0
          CFI (cfiCond488) Function APSME_TCLinkKeyLoad
          CFI (cfiCond488) Conditional ??CrossCallReturnLabel_215
          CFI (cfiCond488) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond488) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond488) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond488) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond488) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond488) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond488) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond488) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond488) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond488) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond488) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond488) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond488) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond488) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond488) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond488) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond488) CFA_SP SP+-2
          CFI (cfiCond488) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond489 Using cfiCommon0
          CFI (cfiCond489) Function APSME_TCLinkKeyLoad
          CFI (cfiCond489) Conditional ??CrossCallReturnLabel_216
          CFI (cfiCond489) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond489) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond489) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond489) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond489) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond489) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond489) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond489) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond489) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond489) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond489) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond489) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond489) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond489) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond489) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond489) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond489) CFA_SP SP+-2
          CFI (cfiCond489) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond490 Using cfiCommon0
          CFI (cfiCond490) Function APSME_LinkKeySet
          CFI (cfiCond490) Conditional ??CrossCallReturnLabel_217
          CFI (cfiCond490) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond490) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond490) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond490) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond490) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond490) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond490) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond490) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond490) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond490) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond490) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond490) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond490) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond490) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond490) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond490) CFA_SP SP+-2
          CFI (cfiCond490) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond491 Using cfiCommon0
          CFI (cfiCond491) Function APSME_LinkKeySet
          CFI (cfiCond491) Conditional ??CrossCallReturnLabel_218
          CFI (cfiCond491) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond491) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond491) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond491) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond491) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond491) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond491) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond491) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond491) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond491) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond491) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond491) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond491) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond491) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond491) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond491) CFA_SP SP+-2
          CFI (cfiCond491) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond492 Using cfiCommon0
          CFI (cfiCond492) Function APSME_LinkKeySet
          CFI (cfiCond492) Conditional ??CrossCallReturnLabel_219
          CFI (cfiCond492) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond492) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond492) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond492) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond492) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond492) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond492) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond492) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond492) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond492) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond492) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond492) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond492) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond492) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond492) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond492) CFA_SP SP+-2
          CFI (cfiCond492) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker493 Using cfiCommon1
          CFI (cfiPicker493) NoFunction
          CFI (cfiPicker493) Picker
        LCALL     ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_222:
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond480
          CFI EndBlock cfiCond481
          CFI EndBlock cfiCond482
          CFI EndBlock cfiCond483
          CFI EndBlock cfiCond484
          CFI EndBlock cfiCond485
          CFI EndBlock cfiCond486
          CFI EndBlock cfiCond487
          CFI EndBlock cfiCond488
          CFI EndBlock cfiCond489
          CFI EndBlock cfiCond490
          CFI EndBlock cfiCond491
          CFI EndBlock cfiCond492
          CFI EndBlock cfiPicker493
// 3040 
// 3041 
// 3042 /******************************************************************************
// 3043  * @fn          APSME_TCLinkKeySync
// 3044  *
// 3045  * @brief       Sync Trust Center LINK key data.
// 3046  *
// 3047  * @param       srcAddr - [in] srcAddr
// 3048  * @param       si      - [in, out] SSP_Info_t
// 3049  *
// 3050  * @return      ZStatus_t
// 3051  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3052 ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
APSME_TCLinkKeySync:
          CFI Block cfiBlock494 Using cfiCommon0
          CFI Function APSME_TCLinkKeySync
        CODE
// 3053 {
        FUNCALL APSME_TCLinkKeySync, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_LookupExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeySync, bdb_doTrustCenterRequireKeyExchange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 20
        MOV       A,#-0x14
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       ?V2,R4
        MOV       ?V3,R5
// 3054   APSME_TCLKDevEntry_t  TCLKDevEntry;
// 3055   ZStatus_t             status = ZSecNoKey;
        MOV       ?V0,#-0x5f
// 3056   uint32                *tclkRxFrmCntr;
// 3057   uint16                entryIndex = 0xFFFF;
// 3058   uint16                selectedId = gZDSECMGR_TC_DEVICE_MAX;
// 3059   uint8                 entryFound = FALSE;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
// 3060   
// 3061 #if ZG_BUILD_JOINING_TYPE
// 3062   uint8   defaultEntry[Z_EXTADDR_LEN];
// 3063 #endif
// 3064  
// 3065   // Look up the IEEE address of the trust center if it's available
// 3066   if ( AddrMgrExtAddrValid( si->extAddr ) == FALSE )
        MOV       A,R4
        ADD       A,#0x6
        MOV       R6,A
        CLR       A
        ADDC      A,?V3
        MOV       R7,A
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
        MOV       A,R1
        JNZ       ??APSME_TCLinkKeySync_0
// 3067   {
// 3068     APSME_LookupExtAddr( srcAddr, si->extAddr );
        ; Setup parameters for call to function APSME_LookupExtAddr
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
// 3069   }
// 3070 
// 3071   entryIndex = APSME_SearchTCLinkKeyEntry(si->extAddr,&entryFound,&TCLKDevEntry);
??APSME_TCLinkKeySync_0:
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V4,R0
        MOV       ?V5,R1
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP102_8
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       ?V4,R2
        MOV       ?V5,R3
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??APSME_TCLinkKeySync_1 & 0xFFFF
// 3072   
// 3073 #if ZG_BUILD_JOINING_TYPE
// 3074   if(ZG_DEVICE_JOINING_TYPE && !entryFound)
// 3075   {
// 3076     osal_memset(defaultEntry, 0, Z_EXTADDR_LEN);
// 3077     entryIndex = APSME_SearchTCLinkKeyEntry(defaultEntry,&entryFound,&TCLKDevEntry);
// 3078   }
// 3079 #endif
// 3080   
// 3081   if(entryFound)
// 3082   {
// 3083     status = ZSuccess;
        MOV       ?V0,#0x0
// 3084     
// 3085     selectedId = entryIndex - ZCD_NV_TCLK_TABLE_START;
// 3086 
// 3087     switch(TCLKDevEntry.keyAttributes)
        MOV       A,?V2
        ADD       A,#0x20
        MOV       R2,A
        CLR       A
        ADDC      A,?V3
        MOV       R3,A
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JZ        ??APSME_TCLinkKeySync_2
        DEC       A
        JZ        ??APSME_TCLinkKeySync_3
        DEC       A
        JZ        ??APSME_TCLinkKeySync_4
        ADD       A,#0x5
        JZ        ??APSME_TCLinkKeySync_4
        ADD       A,#-0x2
        JZ        $+5
        LJMP      ??APSME_TCLinkKeySync_5 & 0xFFFF
// 3088     {
// 3089       case ZG_UNVERIFIED_KEY:
// 3090         #if ZG_BUILD_JOINING_TYPE
// 3091         if(ZG_DEVICE_JOINING_TYPE)
// 3092         {   
// 3093           si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
// 3094           break;
// 3095         }
// 3096         #endif
// 3097       case ZG_DEFAULT_KEY:
// 3098         if(ZG_DEVICE_JOINING_TYPE)
??APSME_TCLinkKeySync_3:
        MOV       DPTR,#zgDeviceLogicalType
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        ??APSME_TCLinkKeySync_6
        MOVX      A,@DPTR
        XRL       A,#0x2
        JNZ       ??APSME_TCLinkKeySync_7
// 3099         { 
// 3100           //If default was found, then it is joining as FN, then try distributed key as well
// 3101           si->distributedKeyTry = TRUE;
??APSME_TCLinkKeySync_6:
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3102         }
// 3103         si->keyNvId = ZCD_NV_TCLK_DEFAULT;
??APSME_TCLinkKeySync_7:
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_52:
        SJMP      ??APSME_TCLinkKeySync_8
// 3104       break;
// 3105       case ZG_PROVISIONAL_KEY:
// 3106         si->keyNvId = ZCD_NV_TCLK_IC_TABLE_START + TCLKDevEntry.SeedShift_IcIndex;
??APSME_TCLinkKeySync_2:
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL     ??Subroutine73_0 & 0xFFFF
// 3107         //Attempt to use default keys (centralized and distributed) if IC fails?
// 3108         si->distributedKeyTry = gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY;
??CrossCallReturnLabel_157:
        MOV       DPL,R2
        MOV       DPH,R3
        CLR       A
        MOVX      @DPTR,A
// 3109         si->defaultKeyTry = gZDSECMGR_TC_ATTEMPT_DEFAULT_KEY;
        MOV       A,?V2
        ADD       A,#0x21
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
        CLR       A
??APSME_TCLinkKeySync_8:
        MOVX      @DPTR,A
// 3110       break;
        LJMP      ??APSME_TCLinkKeySync_5 & 0xFFFF
// 3111       case ZG_VERIFIED_KEY:
// 3112       case ZG_NON_R21_NWK_JOINED:
// 3113         //Only verify the frame counter for Verified keys, or keys used with non R21 TC
// 3114         tclkRxFrmCntr = &TCLinkKeyFrmCntr[selectedId].rxFrmCntr;
??APSME_TCLinkKeySync_4:
        MOV       A,?V4
        MOV       B,#0x9
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x9
        MOV       A,?V5
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#(TCLinkKeyFrmCntr + 107) & 0xff
        ADD       A,R0
        MOV       R2,A
        MOV       A,#((TCLinkKeyFrmCntr - 2453) >> 8) & 0xff
        ADDC      A,R1
        MOV       R3,A
// 3115 
// 3116         if ( si->frmCntr >= *tclkRxFrmCntr )
        MOV       A,?V2
        ADD       A,#0x12
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       R0,#?V4
        LCALL     ?UL_GE_X
        JNC       ??APSME_TCLinkKeySync_9
// 3117         {
// 3118           // update the rx frame counter
// 3119           *tclkRxFrmCntr = si->frmCntr + 1;
        MOV       DPTR,#__Constant_1
        MOV       R0,#?V4
        LCALL     ?L_ADD_X
        MOV       DPL,R2
        MOV       DPH,R3
        MOV       A,?V4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V5
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V7
        MOVX      @DPTR,A
// 3120           status = ZSuccess;
// 3121           
// 3122           #if ZG_BUILD_JOINING_TYPE
// 3123           if(ZG_DEVICE_JOINING_TYPE)
// 3124           {   
// 3125             si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
// 3126             break;
// 3127           }
// 3128           #endif
// 3129           #if ZG_BUILD_COORDINATOR_TYPE
// 3130           if(ZG_DEVICE_COORDINATOR_TYPE)
// 3131           {
// 3132             si->keyNvId = ZCD_NV_TCLK_SEED;
        LCALL     ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3133             si->seedShift = TCLKDevEntry.SeedShift_IcIndex;
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,?V2
        ADD       A,#0x22
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 3134           }
// 3135           #endif
// 3136           osal_memcpy(si->dstExtAddr, TCLKDevEntry.extAddr,Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V4,R1
        MOV       ?V5,R2
        MOV       ?V6,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 39)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,?V2
        ADD       A,#0x18
        MOV       R2,A
        CLR       A
        ADDC      A,?V3
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        SJMP      ??APSME_TCLinkKeySync_5
// 3137         }
// 3138         else
// 3139         {
// 3140           status = ZSecOldFrmCount;
??APSME_TCLinkKeySync_9:
        MOV       ?V0,#-0x5e
        SJMP      ??APSME_TCLinkKeySync_5
// 3141         }
// 3142       break;
// 3143       default:
// 3144         //This should not happen
// 3145       break;
// 3146     }
// 3147   }
// 3148   else
// 3149   {
// 3150     if (ZG_DEVICE_COORDINATOR_TYPE) 
// 3151     {    
// 3152       if(bdb_doTrustCenterRequireKeyExchange() == FALSE)
??APSME_TCLinkKeySync_1:
        ; Setup parameters for call to function bdb_doTrustCenterRequireKeyExchange
        LCALL     `??bdb_doTrustCenterRequireKeyExchange::?relay`; Banked call to: bdb_doTrustCenterRequireKeyExchange
        MOV       A,R1
        JNZ       ??APSME_TCLinkKeySync_5
// 3153       {
// 3154         //If the TCLK exchange is not mandated, and the key cannot be found for this device, 
// 3155         //is because we have erased the entry. Try with default key.
// 3156         si->keyNvId = ZCD_NV_TCLK_DEFAULT;
        LCALL     ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_53:
        MOVX      @DPTR,A
// 3157         status = ZSuccess;
        MOV       ?V0,#0x0
// 3158       }
// 3159     }
// 3160   }
// 3161   
// 3162   
// 3163   return status;
??APSME_TCLinkKeySync_5:
        MOV       R1,?V0
        LJMP      ?Subroutine1 & 0xFFFF
// 3164 }
          CFI EndBlock cfiBlock494

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond495 Using cfiCommon0
          CFI Function APSME_TCLinkKeySync
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond496 Using cfiCommon0
          CFI (cfiCond496) Function APSME_TCLinkKeySync
          CFI (cfiCond496) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond496) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond496) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond496) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond496) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond496) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond496) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond496) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond496) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond496) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond496) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond496) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond496) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond496) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond496) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond496) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond496) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond496) CFA_SP SP+-2
          CFI (cfiCond496) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker497 Using cfiCommon1
          CFI (cfiPicker497) NoFunction
          CFI (cfiPicker497) Picker
        LCALL     ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_69:
        RET
          CFI EndBlock cfiCond495
          CFI EndBlock cfiCond496
          CFI EndBlock cfiPicker497

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine55:
          CFI Block cfiCond498 Using cfiCommon0
          CFI Function APSME_TCLinkKeySync
          CFI Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond499 Using cfiCommon0
          CFI (cfiCond499) Function APSME_TCLinkKeySync
          CFI (cfiCond499) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_59
          CFI (cfiCond499) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond499) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond499) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond499) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond499) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond499) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond499) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond499) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond499) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond499) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond499) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond499) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond499) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond499) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond499) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond499) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond499) CFA_SP SP+-4
          CFI (cfiCond499) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond500 Using cfiCommon0
          CFI (cfiCond500) Function APSME_TCLinkKeySync
          CFI (cfiCond500) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_52
          CFI (cfiCond500) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond500) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond500) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond500) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond500) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond500) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond500) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond500) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond500) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond500) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond500) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond500) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond500) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond500) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond500) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond500) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond500) CFA_SP SP+-4
          CFI (cfiCond500) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond501 Using cfiCommon0
          CFI (cfiCond501) Function APSME_TCLinkKeySync
          CFI (cfiCond501) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_53
          CFI (cfiCond501) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond501) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond501) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond501) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond501) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond501) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond501) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond501) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond501) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond501) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond501) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond501) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond501) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond501) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond501) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond501) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond501) CFA_SP SP+-4
          CFI (cfiCond501) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker502 Using cfiCommon1
          CFI (cfiPicker502) NoFunction
          CFI (cfiPicker502) Picker
        MOV       A,?V2
        ADD       A,#0xf
        MOV       DPL,A
        CLR       A
        ADDC      A,?V3
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond498
          CFI EndBlock cfiCond499
          CFI EndBlock cfiCond500
          CFI EndBlock cfiCond501
          CFI EndBlock cfiPicker502

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond503 Using cfiCommon0
          CFI Function APSME_TCLinkKeySync
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond504 Using cfiCommon0
          CFI (cfiCond504) Function APSME_TCLinkKeySync
          CFI (cfiCond504) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond504) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond504) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond504) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond504) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond504) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond504) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond504) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond504) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond504) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond504) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond504) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond504) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond504) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond504) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond504) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond504) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond504) CFA_SP SP+-2
          CFI (cfiCond504) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker505 Using cfiCommon1
          CFI (cfiPicker505) NoFunction
          CFI (cfiPicker505) Picker
        LCALL     ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV       A,#0x3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x1
        RET
          CFI EndBlock cfiCond503
          CFI EndBlock cfiCond504
          CFI EndBlock cfiPicker505
// 3165 
// 3166 /******************************************************************************
// 3167  * @fn          APSME_TCLinkKeyLoad
// 3168  *
// 3169  * @brief       Load Trust Center LINK key data.
// 3170  *
// 3171  * @param       dstAddr - [in] dstAddr
// 3172  * @param       si      - [in, out] SSP_Info_t
// 3173  *
// 3174  * @return      ZStatus_t
// 3175  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3176 ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
APSME_TCLinkKeyLoad:
          CFI Block cfiBlock506 Using cfiCommon0
          CFI Function APSME_TCLinkKeyLoad
        CODE
// 3177 {
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, APSME_SearchTCLinkKeyEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 53, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 53, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 55, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 55, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL APSME_TCLinkKeyLoad, AddrMgrEntryRelease
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 35
        MOV       A,#-0x23
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
// 3178   APSME_TCLKDevEntry_t TCLKDevEntry;
// 3179   AddrMgrEntry_t       addrEntry;
// 3180   ZStatus_t            status = ZSecNoKey;
        MOV       ?V2,#-0x5f
// 3181   uint16               entryIndex;
// 3182   uint8                extAddrFound;
// 3183   uint8                found;
// 3184 
// 3185   
// 3186   // Look up the ami of the srcAddr if available
// 3187   addrEntry.user    = ADDRMGR_USER_DEFAULT;
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 3188   addrEntry.nwkAddr = dstAddr;
        MOV       A,#0x17
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine81_0 & 0xFFFF
// 3189 
// 3190   extAddrFound = AddrMgrExtAddrValid( si->extAddr );
// 3191   
// 3192   if(extAddrFound)
??CrossCallReturnLabel_204:
        MOV       A,R6
        ADD       A,#0x6
        MOV       ?V0,A
        CLR       A
        ADDC      A,R7
        MOV       ?V1,A
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV       R2,?V0
        MOV       R3,A
        LCALL     `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
        MOV       A,R1
        JNZ       $+5
        LJMP      ??APSME_TCLinkKeyLoad_0 & 0xFFFF
// 3193   {
// 3194     entryIndex = APSME_SearchTCLinkKeyEntry(si->extAddr,&found,&TCLKDevEntry);
        ; Setup parameters for call to function APSME_SearchTCLinkKeyEntry
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 53)
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP102_8
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??APSME_SearchTCLinkKeyEntry::?relay`; Banked call to: APSME_SearchTCLinkKeyEntry
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       ?V6,R2
        MOV       ?V7,R3
// 3195     if(entryIndex != 0xFFFF)
        MOV       A,R6
        ADD       A,#0xf
        MOV       ?V4,A
        CLR       A
        ADDC      A,R7
        MOV       ?V5,A
        MOV       A,#-0x1
        XRL       A,?V6
        JNZ       ??APSME_TCLinkKeyLoad_1
        MOV       A,#-0x1
        XRL       A,?V7
??APSME_TCLinkKeyLoad_1:
        JNZ       $+5
        LJMP      ??APSME_TCLinkKeyLoad_2 & 0xFFFF
// 3196     {
// 3197       uint16 i = entryIndex - ZCD_NV_TCLK_TABLE_START;
        LCALL     ?Subroutine43 & 0xFFFF
// 3198       
// 3199       if(found)
??CrossCallReturnLabel_51:
        MOV       R2,B
        MOV       B,#0x9
        MOV       A,R1
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#TCLinkKeyFrmCntr & 0xff
        ADD       A,R0
        MOV       R0,A
        MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
        ADDC      A,R1
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_18:
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JZ        ??APSME_TCLinkKeyLoad_3
// 3200       {
// 3201         switch(TCLKDevEntry.keyAttributes)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JZ        ??APSME_TCLinkKeyLoad_4
        DEC       A
        JZ        ??APSME_TCLinkKeyLoad_5
        DEC       A
        JZ        ??APSME_TCLinkKeyLoad_6
        ADD       A,#0x5
        JZ        ??APSME_TCLinkKeyLoad_5
        ADD       A,#-0x2
        JZ        $+5
        LJMP      ??APSME_TCLinkKeyLoad_7 & 0xFFFF
// 3202         {
// 3203           case ZG_UNVERIFIED_KEY:
// 3204             #if ZG_BUILD_JOINING_TYPE
// 3205             if(ZG_DEVICE_JOINING_TYPE)
// 3206             {   
// 3207               si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
// 3208               break;
// 3209             }
// 3210             #endif
// 3211           case ZG_DEFAULT_KEY:
// 3212           case ZG_NON_R21_NWK_JOINED:
// 3213             si->keyNvId = ZCD_NV_TCLK_DEFAULT;
??APSME_TCLinkKeyLoad_5:
        LJMP      ??APSME_TCLinkKeyLoad_8 & 0xFFFF
// 3214           break;
// 3215           case ZG_PROVISIONAL_KEY:
// 3216             si->keyNvId = ZCD_NV_TCLK_IC_TABLE_START + TCLKDevEntry.SeedShift_IcIndex;
??APSME_TCLinkKeyLoad_4:
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        LJMP      ??APSME_TCLinkKeyLoad_9 & 0xFFFF
// 3217           break;
// 3218           case ZG_VERIFIED_KEY:
// 3219             #if ZG_BUILD_JOINING_TYPE
// 3220             if(ZG_DEVICE_JOINING_TYPE)
// 3221             {   
// 3222               si->keyNvId = ZCD_NV_TCLK_JOIN_DEV;
// 3223               break;
// 3224             }
// 3225             #endif
// 3226             #if ZG_BUILD_COORDINATOR_TYPE
// 3227             if(ZG_DEVICE_COORDINATOR_TYPE)
// 3228             {
// 3229               si->keyNvId = ZCD_NV_TCLK_SEED;
??APSME_TCLinkKeyLoad_6:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
// 3230               si->seedShift = TCLKDevEntry.SeedShift_IcIndex;
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R6
        ADD       A,#0x22
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 3231             }
// 3232             #endif
// 3233             osal_memcpy(si->dstExtAddr, TCLKDevEntry.extAddr,Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       ?V0,R1
        MOV       ?V1,R2
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,R6
        ADD       A,#0x18
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 51)
// 3234           break;
        LJMP      ??APSME_TCLinkKeyLoad_7 & 0xFFFF
// 3235           default:
// 3236             //This should not happen
// 3237           break;
// 3238         }
// 3239       }
// 3240       //Not found, then create an entry for it. Adding the device to the TCLKDev Entries for first time
// 3241       else
// 3242       {
// 3243         //Initialize the entry
// 3244         osal_memcpy(TCLKDevEntry.extAddr, si->extAddr, Z_EXTADDR_LEN);
??APSME_TCLinkKeyLoad_3:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 54)
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 51)
// 3245         TCLKDevEntry.keyAttributes = ZG_DEFAULT_KEY;
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x1
        MOVX      @DPTR,A
// 3246         TCLKDevEntry.keyType = ZG_GLOBAL_LINK_KEY;
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3247         //Create the entry with a random shift of the seed. Validate the maximum shift of the seed which is 15
// 3248         TCLKDevEntry.SeedShift_IcIndex = osal_rand() & 0x000F;
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        MOV       A,R2
        ANL       A,#0xf
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 3249         TCLKDevEntry.txFrmCntr = 0;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine83_0 & 0xFFFF
// 3250         TCLKDevEntry.rxFrmCntr = 0;
??CrossCallReturnLabel_215:
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        LCALL     ??Subroutine83_0 & 0xFFFF
// 3251         //save entry in nv
// 3252         osal_nv_write(entryIndex,0,sizeof(APSME_TCLKDevEntry_t),&TCLKDevEntry);
??CrossCallReturnLabel_216:
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 53)
        MOV       ?V0,#0x13
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 55)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,?V6
        MOV       R3,?V7
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 51)
// 3253         //Initialize framecounter
// 3254         osal_memset(&TCLinkKeyFrmCntr[i],0,sizeof(APSME_TCLinkKeyFrmCntr_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x9
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine65_0 & 0xFFFF
??CrossCallReturnLabel_110:
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 3255         // set the keyNvId to use
// 3256         si->keyNvId = ZCD_NV_TCLK_DEFAULT;
??APSME_TCLinkKeyLoad_8:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,#0x3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x1
??APSME_TCLinkKeyLoad_9:
        MOVX      @DPTR,A
// 3257       }
// 3258 
// 3259       // update link key related fields
// 3260       si->keyID   = SEC_KEYID_LINK;
??APSME_TCLinkKeyLoad_7:
        MOV       A,R6
        ADD       A,#0xe
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        CLR       A
        LCALL     ?Subroutine15 & 0xFFFF
// 3261       si->frmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
??CrossCallReturnLabel_7:
        MOV       DPH,A
        MOV       DPL,R0
        LCALL     ?XLOAD_R0123
        MOV       A,R6
        ADD       A,#0x12
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        LCALL     ?XSTORE_R0123
// 3262 
// 3263       // update outgoing frame counter
// 3264       TCLinkKeyFrmCntr[i].txFrmCntr++;
        MOV       DPTR,#__Constant_1
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_178:
        MOV       R0,#?V0
        LCALL     ?L_ADD_TO_X
// 3265 
// 3266   #if defined ( NV_RESTORE )
// 3267       // write periodically to NV
// 3268       if ( !(TCLinkKeyFrmCntr[i].txFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
        LCALL     ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_179:
        MOV       R0,#?V0
        LCALL     ?L_MOV_X
        MOV       DPTR,#__Constant_a
        MOV       R0,#?V4
        LCALL     ?L_MOV_X
        MOV       R0,#?V0
        MOV       R1,#?V4
        LCALL     ?UL_DIV_MOD
        MOV       A,?V4
        ORL       A,?V5
        ORL       A,?V6
        ORL       A,?V7
        JNZ       ??APSME_TCLinkKeyLoad_10
// 3269       {
// 3270         // set the flag to write key to NV
// 3271         TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
        LCALL     ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_225:
        XCH       A,R0
        ADD       A,#0x8
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3272 
// 3273         // Notify the ZDApp that the frame counter has changed.
// 3274         osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x0
        MOV       R3,#0x4
        MOV       DPTR,#ZDAppTaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        SJMP      ??APSME_TCLinkKeyLoad_10
// 3275       }
// 3276   #endif
// 3277     }  
// 3278     else
// 3279     {
// 3280       //If no more TCLK entries, try global so we can try to add legacy devices
// 3281       si->keyNvId = ZCD_NV_TCLK_DEFAULT;
??APSME_TCLinkKeyLoad_2:
        MOV       DPL,?V4
        MOV       DPH,?V5
        MOV       A,#0x3
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3282     }
// 3283     status = ZSuccess;
??APSME_TCLinkKeyLoad_10:
        MOV       ?V2,#0x0
        SJMP      ??APSME_TCLinkKeyLoad_11
??APSME_TCLinkKeyLoad_0:
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
// 3284   }
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV       A,R1
        XRL       A,#0x1
        JNZ       ??APSME_TCLinkKeyLoad_11
// 3285   
// 3286   // If no TC link key found, remove the device from the address manager
// 3287   if ( (status != ZSuccess) && (AddrMgrEntryLookupNwk(&addrEntry) == TRUE) )
// 3288   {
// 3289     AddrMgrEntryRelease( &addrEntry );
        ; Setup parameters for call to function AddrMgrEntryRelease
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
// 3290   }
// 3291 
// 3292   return status;
??APSME_TCLinkKeyLoad_11:
        MOV       R1,?V2
        MOV       A,#0x23
        LJMP      ??Subroutine62_0 & 0xFFFF
// 3293 }
          CFI EndBlock cfiBlock506

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond507 Using cfiCommon0
          CFI Function ZDSecMgrDeviceJoinDirect
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond508 Using cfiCommon0
          CFI (cfiCond508) Function APSME_TCLinkKeyLoad
          CFI (cfiCond508) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond508) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond508) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond508) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond508) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond508) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond508) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond508) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond508) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond508) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond508) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond508) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond508) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond508) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond508) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond508) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond508) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond508) CFA_SP SP+-2
          CFI (cfiCond508) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiPicker509 Using cfiCommon1
          CFI (cfiPicker509) NoFunction
          CFI (cfiPicker509) Picker
        MOV       A,R2
        ADD       A,#-0x11
        MOV       R0,A
        MOV       A,R3
        ADDC      A,#-0x2
        MOV       R1,A
        MOV       A,R0
        MOV       B,#0x9
        MUL       AB
        MOV       R0,A
        RET
          CFI EndBlock cfiCond507
          CFI EndBlock cfiCond508
          CFI EndBlock cfiPicker509

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond510 Using cfiCommon0
          CFI Function APSME_TCLinkKeySync
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond511 Using cfiCommon0
          CFI (cfiCond511) Function APSME_TCLinkKeyLoad
          CFI (cfiCond511) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond511) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond511) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond511) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond511) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond511) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond511) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond511) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond511) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond511) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond511) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond511) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond511) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond511) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond511) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond511) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond511) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond511) CFA_SP SP+-2
          CFI (cfiCond511) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiPicker512 Using cfiCommon1
          CFI (cfiPicker512) NoFunction
          CFI (cfiPicker512) Picker
        MOVX      A,@DPTR
        ADD       A,#0x4
        MOV       R0,A
        CLR       A
        ADDC      A,#0x1
        MOV       R1,A
        RET
          CFI EndBlock cfiCond510
          CFI EndBlock cfiCond511
          CFI EndBlock cfiPicker512

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond513 Using cfiCommon0
          CFI Function ZDSecMgrAddrClear
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond514 Using cfiCommon0
          CFI (cfiCond514) Function APSME_TCLinkKeyLoad
          CFI (cfiCond514) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond514) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond514) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond514) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond514) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond514) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond514) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond514) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond514) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond514) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond514) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond514) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond514) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond514) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond514) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond514) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond514) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond514) CFA_SP SP+-2
          CFI (cfiCond514) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiPicker515 Using cfiCommon1
          CFI (cfiPicker515) NoFunction
          CFI (cfiPicker515) Picker
        MOVX      @DPTR,A
        LCALL     ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_226:
        RET
          CFI EndBlock cfiCond513
          CFI EndBlock cfiCond514
          CFI EndBlock cfiPicker515

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine56:
          CFI Block cfiCond516 Using cfiCommon0
          CFI Function APSME_TCLinkKeyLoad
          CFI Conditional ??CrossCallReturnLabel_225
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond517 Using cfiCommon0
          CFI (cfiCond517) Function ZDSecMgrAddrClear
          CFI (cfiCond517) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_6
          CFI (cfiCond517) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond517) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond517) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond517) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond517) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond517) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond517) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond517) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond517) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond517) CFA_SP SP+-4
          CFI (cfiCond517) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond518 Using cfiCommon0
          CFI (cfiCond518) Function APSME_TCLinkKeyLoad
          CFI (cfiCond518) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_7
          CFI (cfiCond518) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond518) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond518) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond518) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond518) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond518) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond518) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond518) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond518) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond518) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond518) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond518) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond518) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond518) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond518) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond518) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond518) CFA_SP SP+-4
          CFI (cfiCond518) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiPicker519 Using cfiCommon1
          CFI (cfiPicker519) NoFunction
          CFI (cfiPicker519) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond516
          CFI EndBlock cfiCond517
          CFI EndBlock cfiCond518
          CFI EndBlock cfiPicker519
        REQUIRE ??Subroutine85_0
        ; // Fall through to label ??Subroutine85_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine85_0:
          CFI Block cfiCond520 Using cfiCommon0
          CFI Function ZDSecMgrAddrStore
          CFI Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond521 Using cfiCommon0
          CFI (cfiCond521) Function ZDSecMgrExtAddrStore
          CFI (cfiCond521) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_74
          CFI (cfiCond521) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond521) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond521) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond521) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond521) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond521) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond521) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond521) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond521) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond521) CFA_SP SP+-4
          CFI (cfiCond521) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond522 Using cfiCommon0
          CFI (cfiCond522) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond522) Conditional ??CrossCallReturnLabel_224, ??CrossCallReturnLabel_75
          CFI (cfiCond522) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond522) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond522) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond522) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond522) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond522) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond522) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond522) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond522) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond522) CFA_SP SP+-4
          CFI (cfiCond522) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond523 Using cfiCommon0
          CFI (cfiCond523) Function ZDSecMgrAddrStore
          CFI (cfiCond523) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_13
          CFI (cfiCond523) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond523) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond523) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond523) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond523) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond523) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond523) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond523) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond523) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond523) CFA_SP SP+-6
          CFI (cfiCond523) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond524 Using cfiCommon0
          CFI (cfiCond524) Function ZDSecMgrExtAddrStore
          CFI (cfiCond524) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_14
          CFI (cfiCond524) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond524) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond524) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond524) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond524) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond524) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond524) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond524) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond524) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond524) CFA_SP SP+-6
          CFI (cfiCond524) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond525 Using cfiCommon0
          CFI (cfiCond525) Function ZDSecMgrExtAddrLookup
          CFI (cfiCond525) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_194, ??CrossCallReturnLabel_15
          CFI (cfiCond525) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond525) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond525) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond525) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond525) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond525) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond525) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond525) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond525) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond525) CFA_SP SP+-6
          CFI (cfiCond525) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond526 Using cfiCommon0
          CFI (cfiCond526) Function ZDSecMgrAppKeyReq
          CFI (cfiCond526) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_2
          CFI (cfiCond526) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond526) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond526) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond526) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond526) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond526) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond526) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond526) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond526) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond526) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond526) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond526) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond526) CFA_SP SP+-6
          CFI (cfiCond526) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond527 Using cfiCommon0
          CFI (cfiCond527) Function ZDSecMgrTclkReq
          CFI (cfiCond527) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_3
          CFI (cfiCond527) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond527) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond527) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond527) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond527) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond527) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond527) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond527) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond527) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond527) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond527) CFA_SP SP+-6
          CFI (cfiCond527) CFA_XSP16 add(XSP16, 69)
          CFI Block cfiCond528 Using cfiCommon0
          CFI (cfiCond528) Function ZDSecMgrSendNwkKey
          CFI (cfiCond528) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_8
          CFI (cfiCond528) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond528) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond528) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond528) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond528) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond528) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond528) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond528) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond528) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond528) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond528) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond528) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond528) CFA_SP SP+-6
          CFI (cfiCond528) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond529 Using cfiCommon0
          CFI (cfiCond529) Function ZDSecMgrDeviceRemove
          CFI (cfiCond529) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_9
          CFI (cfiCond529) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond529) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond529) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond529) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond529) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond529) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond529) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond529) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond529) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond529) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond529) CFA_SP SP+-6
          CFI (cfiCond529) CFA_XSP16 add(XSP16, 29)
          CFI Block cfiCond530 Using cfiCommon0
          CFI (cfiCond530) Function ZDSecMgrSendNwkKey
          CFI (cfiCond530) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_126
          CFI (cfiCond530) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond530) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond530) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond530) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond530) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond530) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond530) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond530) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond530) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond530) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond530) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond530) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond530) CFA_SP SP+-6
          CFI (cfiCond530) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond531 Using cfiCommon0
          CFI (cfiCond531) Function ZDSecMgrDeviceJoin
          CFI (cfiCond531) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_127
          CFI (cfiCond531) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond531) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond531) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond531) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond531) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond531) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond531) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond531) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond531) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond531) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond531) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond531) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond531) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond531) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond531) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond531) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond531) CFA_SP SP+-6
          CFI (cfiCond531) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond532 Using cfiCommon0
          CFI (cfiCond532) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond532) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_128
          CFI (cfiCond532) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond532) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond532) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond532) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond532) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond532) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond532) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond532) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond532) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond532) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond532) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond532) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond532) CFA_SP SP+-6
          CFI (cfiCond532) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond533 Using cfiCommon0
          CFI (cfiCond533) Function ZDSecMgrAppKeyReq
          CFI (cfiCond533) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_117
          CFI (cfiCond533) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond533) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond533) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond533) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond533) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond533) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond533) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond533) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond533) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond533) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond533) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond533) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond533) CFA_SP SP+-6
          CFI (cfiCond533) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond534 Using cfiCommon0
          CFI (cfiCond534) Function ZDSecMgrSendNwkKey
          CFI (cfiCond534) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_118
          CFI (cfiCond534) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond534) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond534) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond534) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond534) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond534) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond534) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond534) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond534) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond534) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond534) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond534) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond534) CFA_SP SP+-6
          CFI (cfiCond534) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond535 Using cfiCommon0
          CFI (cfiCond535) Function ZDSecMgrDeviceJoin
          CFI (cfiCond535) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_119
          CFI (cfiCond535) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond535) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond535) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond535) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond535) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond535) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond535) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond535) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond535) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond535) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond535) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond535) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond535) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond535) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond535) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond535) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond535) CFA_SP SP+-6
          CFI (cfiCond535) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond536 Using cfiCommon0
          CFI (cfiCond536) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond536) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_120
          CFI (cfiCond536) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond536) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond536) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond536) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond536) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond536) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond536) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond536) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond536) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond536) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond536) CFA_SP SP+-6
          CFI (cfiCond536) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond537 Using cfiCommon0
          CFI (cfiCond537) Function ZDSecMgrDeviceJoinFwd
          CFI (cfiCond537) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_121
          CFI (cfiCond537) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond537) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond537) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond537) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond537) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond537) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond537) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond537) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond537) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond537) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond537) CFA_SP SP+-6
          CFI (cfiCond537) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond538 Using cfiCommon0
          CFI (cfiCond538) Function ZDSecMgrNewDeviceEvent
          CFI (cfiCond538) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_122
          CFI (cfiCond538) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond538) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond538) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond538) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond538) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond538) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond538) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond538) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond538) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond538) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond538) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond538) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond538) CFA_SP SP+-6
          CFI (cfiCond538) CFA_XSP16 add(XSP16, 33)
          CFI Block cfiCond539 Using cfiCommon0
          CFI (cfiCond539) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond539) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_123
          CFI (cfiCond539) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond539) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond539) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond539) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond539) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond539) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond539) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond539) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond539) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond539) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond539) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond539) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond539) CFA_SP SP+-6
          CFI (cfiCond539) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond540 Using cfiCommon0
          CFI (cfiCond540) Function APSME_LinkKeySet
          CFI (cfiCond540) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_124
          CFI (cfiCond540) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond540) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond540) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond540) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond540) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond540) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond540) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond540) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond540) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond540) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond540) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond540) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond540) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond540) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond540) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond540) CFA_SP SP+-6
          CFI (cfiCond540) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond541 Using cfiCommon0
          CFI (cfiCond541) Function ZDSecMgrAPSRemove
          CFI (cfiCond541) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_196, ??CrossCallReturnLabel_125
          CFI (cfiCond541) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond541) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond541) CFA_SP SP+-11
          CFI (cfiCond541) CFA_XSP16 add(XSP16, 8)
          CFI Block cfiCond542 Using cfiCommon0
          CFI (cfiCond542) Function APSME_IsLinkKeyValid
          CFI (cfiCond542) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_138
          CFI (cfiCond542) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond542) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond542) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond542) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond542) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond542) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond542) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond542) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond542) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond542) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond542) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond542) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond542) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond542) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond542) CFA_SP SP+-6
          CFI (cfiCond542) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond543 Using cfiCommon0
          CFI (cfiCond543) Function ZDSecMgrAddLinkKey
          CFI (cfiCond543) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_139
          CFI (cfiCond543) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond543) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond543) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond543) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond543) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond543) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond543) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond543) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond543) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond543) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond543) CFA_SP SP+-6
          CFI (cfiCond543) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond544 Using cfiCommon0
          CFI (cfiCond544) Function ZDSecMgrRestoreFromNV
          CFI (cfiCond544) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_140
          CFI (cfiCond544) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond544) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond544) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond544) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond544) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond544) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond544) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond544) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond544) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond544) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond544) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond544) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond544) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond544) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond544) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond544) CFA_SP SP+-6
          CFI (cfiCond544) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond545 Using cfiCommon0
          CFI (cfiCond545) Function ZDSecMgrEntryInit
          CFI (cfiCond545) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_129
          CFI (cfiCond545) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond545) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond545) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond545) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond545) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond545) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond545) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond545) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond545) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond545) CFA_SP SP+-6
          CFI (cfiCond545) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond546 Using cfiCommon0
          CFI (cfiCond546) Function ZDSecMgrEntryLookupExtGetIndex
          CFI (cfiCond546) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_130
          CFI (cfiCond546) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond546) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond546) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond546) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond546) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond546) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond546) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond546) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond546) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond546) CFA_SP SP+-6
          CFI (cfiCond546) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond547 Using cfiCommon0
          CFI (cfiCond547) Function ZDSecMgrEntryLookupAMIGetIndex
          CFI (cfiCond547) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_131
          CFI (cfiCond547) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond547) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond547) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond547) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond547) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond547) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond547) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond547) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond547) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond547) CFA_SP SP+-6
          CFI (cfiCond547) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond548 Using cfiCommon0
          CFI (cfiCond548) Function ZDSecMgrEntryFree
          CFI (cfiCond548) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_132
          CFI (cfiCond548) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond548) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond548) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond548) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond548) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond548) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond548) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond548) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond548) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond548) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond548) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond548) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond548) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond548) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond548) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond548) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond548) CFA_SP SP+-6
          CFI (cfiCond548) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond549 Using cfiCommon0
          CFI (cfiCond549) Function ZDSecMgrEntryFree
          CFI (cfiCond549) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_133
          CFI (cfiCond549) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond549) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond549) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond549) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond549) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond549) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond549) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond549) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond549) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond549) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond549) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond549) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond549) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond549) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond549) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond549) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond549) CFA_SP SP+-6
          CFI (cfiCond549) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond550 Using cfiCommon0
          CFI (cfiCond550) Function ZDSecMgrDeviceJoin
          CFI (cfiCond550) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_134
          CFI (cfiCond550) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond550) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond550) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond550) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond550) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond550) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond550) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond550) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond550) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond550) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond550) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond550) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond550) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond550) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond550) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond550) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond550) CFA_SP SP+-6
          CFI (cfiCond550) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond551 Using cfiCommon0
          CFI (cfiCond551) Function ZDSecMgrTransportKeyInd
          CFI (cfiCond551) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_135
          CFI (cfiCond551) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond551) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond551) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond551) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond551) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond551) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond551) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond551) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond551) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond551) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond551) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond551) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond551) CFA_SP SP+-6
          CFI (cfiCond551) CFA_XSP16 add(XSP16, 52)
          CFI Block cfiCond552 Using cfiCommon0
          CFI (cfiCond552) Function ZDSecMgrRemoveDeviceInd
          CFI (cfiCond552) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_136
          CFI (cfiCond552) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond552) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond552) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond552) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond552) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond552) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond552) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond552) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond552) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond552) CFA_SP SP+-6
          CFI (cfiCond552) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond553 Using cfiCommon0
          CFI (cfiCond553) Function APSME_KeyFwdToChild
          CFI (cfiCond553) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_197, ??CrossCallReturnLabel_137
          CFI (cfiCond553) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond553) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond553) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond553) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond553) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond553) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond553) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond553) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond553) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond553) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond553) CFA_SP SP+-6
          CFI (cfiCond553) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond554 Using cfiCommon0
          CFI (cfiCond554) Function ZDSecMgrAppConfKeyReq
          CFI (cfiCond554) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_195, ??CrossCallReturnLabel_158
          CFI (cfiCond554) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond554) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond554) CFA_SP SP+-11
          CFI (cfiCond554) CFA_XSP16 add(XSP16, 6)
          CFI Block cfiCond555 Using cfiCommon0
          CFI (cfiCond555) Function ZDSecMgrSwitchNwkKey
          CFI (cfiCond555) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_195, ??CrossCallReturnLabel_159
          CFI (cfiCond555) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond555) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond555) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond555) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond555) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond555) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond555) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond555) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond555) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond555) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond555) CFA_SP SP+-6
          CFI (cfiCond555) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond556 Using cfiCommon0
          CFI (cfiCond556) Function ZDSecMgrEntryLookup
          CFI (cfiCond556) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_198, ??CrossCallReturnLabel_187
          CFI (cfiCond556) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond556) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond556) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond556) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond556) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond556) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond556) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond556) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond556) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond556) CFA_SP SP+-6
          CFI (cfiCond556) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond557 Using cfiCommon0
          CFI (cfiCond557) Function ZDSecMgrEntryNew
          CFI (cfiCond557) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_198, ??CrossCallReturnLabel_188
          CFI (cfiCond557) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond557) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond557) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond557) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond557) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond557) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond557) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond557) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond557) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond557) CFA_SP SP+-6
          CFI (cfiCond557) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond558 Using cfiCommon0
          CFI (cfiCond558) Function ZDSecMgrEntryLookupAMI
          CFI (cfiCond558) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_198, ??CrossCallReturnLabel_189
          CFI (cfiCond558) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond558) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond558) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond558) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond558) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond558) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond558) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond558) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond558) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond558) CFA_SP SP+-6
          CFI (cfiCond558) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond559 Using cfiCommon0
          CFI (cfiCond559) Function ZDSecMgrWriteNV
          CFI (cfiCond559) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_198, ??CrossCallReturnLabel_190
          CFI (cfiCond559) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond559) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond559) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond559) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond559) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond559) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond559) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond559) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond559) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond559) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond559) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond559) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond559) CFA_SP SP+-6
          CFI (cfiCond559) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond560 Using cfiCommon0
          CFI (cfiCond560) Function ZDSecMgrEntryInit
          CFI (cfiCond560) Conditional ??CrossCallReturnLabel_228, ??CrossCallReturnLabel_198, ??CrossCallReturnLabel_191
          CFI (cfiCond560) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond560) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond560) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond560) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond560) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond560) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond560) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond560) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond560) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond560) CFA_SP SP+-6
          CFI (cfiCond560) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond561 Using cfiCommon0
          CFI (cfiCond561) Function APSME_LinkKeySet
          CFI (cfiCond561) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_180, ??CrossCallReturnLabel_114
          CFI (cfiCond561) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond561) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond561) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond561) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond561) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond561) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond561) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond561) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond561) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond561) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond561) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond561) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond561) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond561) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond561) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond561) CFA_SP SP+-6
          CFI (cfiCond561) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond562 Using cfiCommon0
          CFI (cfiCond562) Function APSME_LinkKeySet
          CFI (cfiCond562) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_180, ??CrossCallReturnLabel_115
          CFI (cfiCond562) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond562) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond562) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond562) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond562) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond562) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond562) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond562) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond562) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond562) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond562) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond562) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond562) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond562) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond562) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond562) CFA_SP SP+-6
          CFI (cfiCond562) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond563 Using cfiCommon0
          CFI (cfiCond563) Function APSME_LinkKeyNVIdGet
          CFI (cfiCond563) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_180, ??CrossCallReturnLabel_116
          CFI (cfiCond563) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond563) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond563) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond563) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond563) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond563) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond563) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond563) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond563) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond563) CFA_SP SP+-6
          CFI (cfiCond563) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond564 Using cfiCommon0
          CFI (cfiCond564) Function APSME_LinkKeySet
          CFI (cfiCond564) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_177
          CFI (cfiCond564) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond564) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond564) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond564) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond564) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond564) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond564) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond564) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond564) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond564) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond564) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond564) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond564) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond564) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond564) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond564) CFA_SP SP+-6
          CFI (cfiCond564) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond565 Using cfiCommon0
          CFI (cfiCond565) Function APSME_TCLinkKeyLoad
          CFI (cfiCond565) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_178
          CFI (cfiCond565) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond565) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond565) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond565) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond565) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond565) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond565) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond565) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond565) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond565) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond565) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond565) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond565) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond565) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond565) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond565) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond565) CFA_SP SP+-6
          CFI (cfiCond565) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond566 Using cfiCommon0
          CFI (cfiCond566) Function APSME_TCLinkKeyLoad
          CFI (cfiCond566) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_179
          CFI (cfiCond566) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond566) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond566) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond566) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond566) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond566) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond566) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond566) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond566) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond566) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond566) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond566) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond566) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond566) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond566) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond566) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond566) CFA_SP SP+-6
          CFI (cfiCond566) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond567 Using cfiCommon0
          CFI (cfiCond567) Function ZDSecMgrAppKeyGet
          CFI (cfiCond567) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_174
          CFI (cfiCond567) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond567) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond567) CFA_SP SP+-11
          CFI Block cfiCond568 Using cfiCommon0
          CFI (cfiCond568) Function ZDSecMgrAppKeyGet
          CFI (cfiCond568) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_175
          CFI (cfiCond568) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond568) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond568) CFA_SP SP+-12
          CFI Block cfiCond569 Using cfiCommon0
          CFI (cfiCond569) Function ZDSecMgrDeviceJoin
          CFI (cfiCond569) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_182, ??CrossCallReturnLabel_176
          CFI (cfiCond569) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond569) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond569) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond569) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond569) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond569) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond569) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond569) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond569) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond569) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond569) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond569) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond569) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond569) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond569) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond569) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond569) CFA_SP SP+-6
          CFI (cfiCond569) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond570 Using cfiCommon0
          CFI (cfiCond570) Function ZDSecMgrAuthenticationSet
          CFI (cfiCond570) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_34
          CFI (cfiCond570) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond570) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond570) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond570) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond570) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond570) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond570) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond570) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond570) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond570) CFA_SP SP+-6
          CFI (cfiCond570) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond571 Using cfiCommon0
          CFI (cfiCond571) Function ZDSecMgrAuthenticationCheck
          CFI (cfiCond571) Conditional ??CrossCallReturnLabel_227, ??CrossCallReturnLabel_181, ??CrossCallReturnLabel_35
          CFI (cfiCond571) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond571) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond571) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond571) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond571) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond571) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond571) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond571) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond571) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond571) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond571) CFA_SP SP+-6
          CFI (cfiCond571) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond572 Using cfiCommon0
          CFI (cfiCond572) Function ZDSecMgrAddLinkKey
          CFI (cfiCond572) Conditional ??CrossCallReturnLabel_223
          CFI (cfiCond572) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond572) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond572) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond572) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond572) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond572) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond572) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond572) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond572) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond572) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond572) CFA_SP SP+-2
          CFI (cfiCond572) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond573 Using cfiCommon0
          CFI (cfiCond573) Function APSME_TCLinkKeyLoad
          CFI (cfiCond573) Conditional ??CrossCallReturnLabel_225
          CFI (cfiCond573) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond573) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond573) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond573) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond573) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond573) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond573) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond573) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond573) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond573) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond573) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond573) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond573) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond573) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond573) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond573) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond573) CFA_SP SP+-2
          CFI (cfiCond573) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiCond574 Using cfiCommon0
          CFI (cfiCond574) Function ZDSecMgrAddrClear
          CFI (cfiCond574) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_6
          CFI (cfiCond574) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond574) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond574) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond574) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond574) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond574) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond574) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond574) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond574) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond574) CFA_SP SP+-4
          CFI (cfiCond574) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond575 Using cfiCommon0
          CFI (cfiCond575) Function APSME_TCLinkKeyLoad
          CFI (cfiCond575) Conditional ??CrossCallReturnLabel_226, ??CrossCallReturnLabel_7
          CFI (cfiCond575) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond575) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond575) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond575) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond575) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond575) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond575) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond575) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond575) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond575) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond575) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond575) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond575) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond575) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond575) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond575) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond575) CFA_SP SP+-4
          CFI (cfiCond575) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiPicker576 Using cfiCommon1
          CFI (cfiPicker576) NoFunction
          CFI (cfiPicker576) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond520
          CFI EndBlock cfiCond521
          CFI EndBlock cfiCond522
          CFI EndBlock cfiCond523
          CFI EndBlock cfiCond524
          CFI EndBlock cfiCond525
          CFI EndBlock cfiCond526
          CFI EndBlock cfiCond527
          CFI EndBlock cfiCond528
          CFI EndBlock cfiCond529
          CFI EndBlock cfiCond530
          CFI EndBlock cfiCond531
          CFI EndBlock cfiCond532
          CFI EndBlock cfiCond533
          CFI EndBlock cfiCond534
          CFI EndBlock cfiCond535
          CFI EndBlock cfiCond536
          CFI EndBlock cfiCond537
          CFI EndBlock cfiCond538
          CFI EndBlock cfiCond539
          CFI EndBlock cfiCond540
          CFI EndBlock cfiCond541
          CFI EndBlock cfiCond542
          CFI EndBlock cfiCond543
          CFI EndBlock cfiCond544
          CFI EndBlock cfiCond545
          CFI EndBlock cfiCond546
          CFI EndBlock cfiCond547
          CFI EndBlock cfiCond548
          CFI EndBlock cfiCond549
          CFI EndBlock cfiCond550
          CFI EndBlock cfiCond551
          CFI EndBlock cfiCond552
          CFI EndBlock cfiCond553
          CFI EndBlock cfiCond554
          CFI EndBlock cfiCond555
          CFI EndBlock cfiCond556
          CFI EndBlock cfiCond557
          CFI EndBlock cfiCond558
          CFI EndBlock cfiCond559
          CFI EndBlock cfiCond560
          CFI EndBlock cfiCond561
          CFI EndBlock cfiCond562
          CFI EndBlock cfiCond563
          CFI EndBlock cfiCond564
          CFI EndBlock cfiCond565
          CFI EndBlock cfiCond566
          CFI EndBlock cfiCond567
          CFI EndBlock cfiCond568
          CFI EndBlock cfiCond569
          CFI EndBlock cfiCond570
          CFI EndBlock cfiCond571
          CFI EndBlock cfiCond572
          CFI EndBlock cfiCond573
          CFI EndBlock cfiCond574
          CFI EndBlock cfiCond575
          CFI EndBlock cfiPicker576
// 3294 
// 3295 /******************************************************************************
// 3296  * @fn          APSME_IsDefaultTCLK
// 3297  *
// 3298  * @brief       Return TRUE or FALSE based on the extended address.  If the
// 3299  *              input ext address is all FFs, it means the trust center link
// 3300  *              assoiciated with the address is the default trust center link key
// 3301  *
// 3302  * @param       extAddr - [in] extended address
// 3303  *
// 3304  * @return      uint8 TRUE/FALSE
// 3305  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3306 uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
APSME_IsDefaultTCLK:
          CFI Block cfiBlock577 Using cfiCommon0
          CFI Function APSME_IsDefaultTCLK
        CODE
// 3307 {
        FUNCALL APSME_IsDefaultTCLK, osal_isbufset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3308   return osal_isbufset( extAddr, 0xFF, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_isbufset
        MOV       R4,#0x8
        MOV       R1,#-0x1
        LCALL     `??osal_isbufset::?relay`; Banked call to: osal_isbufset
        LJMP      ??Subroutine66_0 & 0xFFFF
// 3309 }
          CFI EndBlock cfiBlock577
// 3310 
// 3311 /******************************************************************************
// 3312  * @fn          ZDSecMgrNwkKeyInit
// 3313  *
// 3314  * @brief       Initialize the NV items for
// 3315  *                  ZCD_NV_NWKKEY,
// 3316  *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and
// 3317  *                  ZCD_NV_NWK_ALTERN_KEY_INFO
// 3318  *
// 3319  * @param       setDefault
// 3320  *
// 3321  * @return      none
// 3322  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3323 void ZDSecMgrNwkKeyInit(uint8 setDefault)
ZDSecMgrNwkKeyInit:
          CFI Block cfiBlock578 Using cfiCommon0
          CFI Function ZDSecMgrNwkKeyInit
        CODE
// 3324 {
        FUNCALL ZDSecMgrNwkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 62, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 62, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrNwkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 50
        MOV       A,#-0x32
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
        MOV       ?V0,R1
// 3325   uint8 status;
// 3326   nwkKeyDesc nwkKey;
// 3327   // Initialize NV items for NWK key, this structure contains the frame counter
// 3328   // and is only used when NV_RESTORE is enabled
// 3329   nwkActiveKeyItems keyItems;
// 3330   
// 3331 
// 3332   uint8 i,nwkFrameCounterReset = FALSE;
        CLR       ?VB.0
// 3333   nwkSecMaterialDesc_t nwkSecMaterialDesc;
// 3334   
// 3335   //NwkSecMaterial entry is empty if set to 0s
// 3336   osal_memset(&nwkSecMaterialDesc,0,sizeof(nwkSecMaterialDesc_t));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0xc
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 3337 #ifdef NV_RESTORE  
// 3338   // Has been set to reset the nwk security material?
// 3339   if ( zgReadStartupOptions() & ZCD_STARTOPT_CLEAR_NWK_FRAME_COUNTER )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
        MOV       A,R1
        MOV       R0,A
        MOV       C,0xE0 /* A   */.7
        JNC       ??ZDSecMgrNwkKeyInit_0
// 3340   {
// 3341     nwkFrameCounterReset = TRUE;
        SETB      ?VB.0
// 3342   }
// 3343 #else
// 3344   nwkFrameCounterReset = TRUE;
// 3345 #endif
// 3346   
// 3347   //Initialize the nwk security material
// 3348   for( i = 0; i < gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES; i++)
??ZDSecMgrNwkKeyInit_0:
        MOV       ?V1,#0x0
        SJMP      ??ZDSecMgrNwkKeyInit_1
// 3349   {
// 3350     if((osal_nv_item_init(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc) == SUCCESS) && (nwkFrameCounterReset))
??ZDSecMgrNwkKeyInit_2:
        MOV       A,R6
        ADD       A,#0x75
        MOV       R6,A
        JNC       ??ZDSecMgrNwkKeyInit_3
        INC       R7
??ZDSecMgrNwkKeyInit_3:
        ; Setup parameters for call to function osal_nv_item_init
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV       R4,#0xc
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
        MOV       A,R1
        JNZ       ??ZDSecMgrNwkKeyInit_4
        MOV       C,?VB.0
        JNC       ??ZDSecMgrNwkKeyInit_4
// 3351     {
// 3352       osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV       ?V2,#0xc
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 66)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
// 3353     }
// 3354   }
??ZDSecMgrNwkKeyInit_4:
        INC       ?V1
??ZDSecMgrNwkKeyInit_1:
        MOV       R6,?V1
        MOV       R7,#0x0
        MOV       DPTR,#gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        CLR       A
        MOVC      A,@A+DPTR
        MOV       R0,A
        MOV       A,R6
        CLR       C
        SUBB      A,R0
        JC        ??ZDSecMgrNwkKeyInit_2
// 3355   //Set the last item to the generic nwk security material by setting extPanId to 0xFFs
// 3356   osal_memset(nwkSecMaterialDesc.extendedPanID,0xFF,Z_EXTADDR_LEN);
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#-0x1
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 3357   
// 3358   if((osal_nv_item_init(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc) == SUCCESS) && (nwkFrameCounterReset))
        MOV       A,R6
        ADD       A,#0x74
        MOV       R6,A
        JNC       ??ZDSecMgrNwkKeyInit_5
        INC       R7
??ZDSecMgrNwkKeyInit_5:
        ; Setup parameters for call to function osal_nv_item_init
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV       R4,#0xc
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
        MOV       A,R1
        JNZ       ??ZDSecMgrNwkKeyInit_6
        MOV       C,?VB.0
        JNC       ??ZDSecMgrNwkKeyInit_6
// 3359   {
// 3360     osal_nv_write(ZCD_NV_NWK_SEC_MATERIAL_TABLE_START + i - 1,0,sizeof(nwkSecMaterialDesc_t),&nwkSecMaterialDesc);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV       ?V2,#0xc
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 66)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
// 3361   }
// 3362 
// 3363 
// 3364   osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
??ZDSecMgrNwkKeyInit_6:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x15
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 3365 
// 3366   status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
// 3367 
// 3368 #if defined ( NV_RESTORE )
// 3369   // reset the values of NV items if NV_RESTORE is not enabled
// 3370   if ((status == SUCCESS) && (setDefault == TRUE))
        ; Setup parameters for call to function osal_nv_item_init
        MOV       A,#0x1d
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV       R4,#0x15
        MOV       R5,#0x0
        MOV       R2,#-0x7e
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
        MOV       A,R1
        JNZ       ??ZDSecMgrNwkKeyInit_7
        MOV       A,#0x1
        XRL       A,?V0
        JNZ       ??ZDSecMgrNwkKeyInit_7
// 3371   {
// 3372     // clear NV data to default values
// 3373     osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV       ?V2,#0x15
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 66)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7e
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
// 3374   }
// 3375 #else
// 3376   (void)setDefault;   // to eliminate compiler warning
// 3377 
// 3378   // reset the values of NV items if NV_RESTORE is not enabled
// 3379   if (status == SUCCESS)
// 3380   {
// 3381     osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
// 3382   }
// 3383 #endif // defined (NV_RESTORE)
// 3384 
// 3385   // Initialize NV items for NWK Active and Alternate keys. These items are used
// 3386   // all the time, independently of NV_RESTORE being set or not
// 3387   osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
??ZDSecMgrNwkKeyInit_7:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 3388 
// 3389   status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
// 3390 
// 3391 #if defined ( NV_RESTORE )
// 3392   // reset the values of NV items if NV_RESTORE is not enabled
// 3393   if ((status == SUCCESS) && (setDefault == TRUE))
        ; Setup parameters for call to function osal_nv_item_init
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R2,#0x3a
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
        MOV       A,R1
        JNZ       ??ZDSecMgrNwkKeyInit_8
        MOV       A,#0x1
        XRL       A,?V0
        JNZ       ??ZDSecMgrNwkKeyInit_8
// 3394   {
// 3395     // clear NV data to default values
// 3396     osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV       ?V2,#0x11
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 66)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3a
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
// 3397   }
// 3398 #else
// 3399   // reset the values of NV items if NV_RESTORE is not enabled
// 3400   if (status == SUCCESS)
// 3401   {
// 3402     osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
// 3403   }
// 3404 #endif // defined (NV_RESTORE)
// 3405 
// 3406   status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
// 3407 
// 3408 #if defined ( NV_RESTORE )
// 3409   // reset the values of NV items if NV_RESTORE is not enabled
// 3410   if ((status == SUCCESS) && (setDefault == TRUE))
??ZDSecMgrNwkKeyInit_8:
        ; Setup parameters for call to function osal_nv_item_init
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R2,#0x3b
        MOV       R3,#0x0
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
        MOV       A,R1
        JNZ       ??ZDSecMgrNwkKeyInit_9
        MOV       A,#0x1
        XRL       A,?V0
        JNZ       ??ZDSecMgrNwkKeyInit_9
// 3411   {
// 3412     // clear NV data to default values
// 3413     osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 64)
        MOV       ?V2,#0x11
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 66)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3b
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 62)
// 3414   }
// 3415 #else
// 3416   // reset the values of NV items if NV_RESTORE is not enabled
// 3417   if (status == SUCCESS)
// 3418   {
// 3419     osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
// 3420   }
// 3421 #endif // defined (NV_RESTORE)
// 3422 
// 3423 }
??ZDSecMgrNwkKeyInit_9:
        MOV       A,#0x32
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock578
// 3424 
// 3425 
// 3426 
// 3427 /*********************************************************************
// 3428  * @fn          ZDSecMgrReadKeyFromNv
// 3429  *
// 3430  * @brief       Looks for a specific key in NV based on Index value
// 3431  *
// 3432  * @param   keyNvId - Index of key to look in NV
// 3433  *                    valid values are:
// 3434  *                    ZCD_NV_NWK_ACTIVE_KEY_INFO
// 3435  *                    ZCD_NV_NWK_ALTERN_KEY_INFO
// 3436  *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
// 3437  *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
// 3438  *                    ZCD_NV_PRECFGKEY
// 3439  *
// 3440  * @param  *keyinfo - Data is read into this buffer.
// 3441  *
// 3442  * @return  SUCCESS if NV data was copied to the keyinfo parameter .
// 3443  *          Otherwise, NV_OPER_FAILED for failure.
// 3444  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3445 ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
ZDSecMgrReadKeyFromNv:
          CFI Block cfiBlock579 Using cfiCommon0
          CFI Function ZDSecMgrReadKeyFromNv
        CODE
// 3446 {
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrReadKeyFromNv, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV       A,#-0xf
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV       ?V0,R4
        MOV       ?V1,R5
// 3447   if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
// 3448       (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
        MOV       A,#0x3a
        XRL       A,R2
        JNZ       ??ZDSecMgrReadKeyFromNv_0
        MOV       A,R3
??ZDSecMgrReadKeyFromNv_0:
        JZ        ??ZDSecMgrReadKeyFromNv_1
        MOV       A,#0x3b
        XRL       A,R2
        ORL       A,R3
        JNZ       ??ZDSecMgrReadKeyFromNv_2
// 3449   {
// 3450     // get NWK active or alternate key from NV
// 3451     return (osal_nv_read(keyNvId,
// 3452                          osal_offsetof(nwkKeyDesc, key),
// 3453                          SEC_KEY_LEN,
// 3454                          keyinfo));
??ZDSecMgrReadKeyFromNv_1:
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       ?V0,#0x10
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x1
        SJMP      ??ZDSecMgrReadKeyFromNv_3
          CFI CFA_XSP16 add(XSP16, 15)
// 3455   }
// 3456   
// 3457   else if(keyNvId == ZCD_NV_TCLK_DEFAULT)
??ZDSecMgrReadKeyFromNv_2:
        MOV       A,#0x3
        XRL       A,R2
        JNZ       ??ZDSecMgrReadKeyFromNv_4
        MOV       A,#0x1
        XRL       A,R3
??ZDSecMgrReadKeyFromNv_4:
        JNZ       ??ZDSecMgrReadKeyFromNv_5
// 3458   {
// 3459     osal_memcpy(keyinfo,defaultTCLinkKey,SEC_KEY_LEN);
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V4,#defaultTCLinkKey & 0xff
        MOV       ?V5,#(defaultTCLinkKey >> 8) & 0xff
        MOV       ?V6,#-0x80
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R4,#0x10
        MOV       R5,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 3460     return ZSuccess;
        MOV       R1,#0x0
        SJMP      ??ZDSecMgrReadKeyFromNv_6
// 3461   }
// 3462   
// 3463 #if (ZG_BUILD_JOINING_TYPE) 
// 3464   else if(keyNvId == ZCD_NV_DISTRIBUTED_KEY)
// 3465   {
// 3466     if(ZG_DEVICE_JOINING_TYPE)
// 3467     {
// 3468       osal_memcpy(keyinfo,distributedDefaultKey,SEC_KEY_LEN);
// 3469       return ZSuccess;
// 3470     }
// 3471   }
// 3472 #endif
// 3473   
// 3474   else if((keyNvId == ZCD_NV_TCLK_JOIN_DEV) || (keyNvId == ZCD_NV_PRECFGKEY)) 
??ZDSecMgrReadKeyFromNv_5:
        MOV       A,#0x2
        XRL       A,R2
        JNZ       ??ZDSecMgrReadKeyFromNv_7
        MOV       A,#0x1
        XRL       A,R3
??ZDSecMgrReadKeyFromNv_7:
        JZ        ??ZDSecMgrReadKeyFromNv_8
        MOV       A,#0x62
        XRL       A,R2
        ORL       A,R3
        JZ        ??ZDSecMgrReadKeyFromNv_8
// 3475   {
// 3476     // Read entry keyNvId of the TC link key table from NV. keyNvId should be
// 3477     // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
// 3478     return (osal_nv_read(keyNvId,
// 3479                          0,
// 3480                          SEC_KEY_LEN,
// 3481                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
// 3482   }
// 3483     else if (keyNvId == ZCD_NV_PRECFGKEY)
// 3484   {
// 3485     // Read entry keyNvId of the Preconfig key from NV.
// 3486     return (osal_nv_read(keyNvId,
// 3487                          0,
// 3488                          SEC_KEY_LEN,
// 3489                          keyinfo));
// 3490   }
// 3491 
// 3492   else if((keyNvId >= ZCD_NV_TCLK_IC_TABLE_START) &&
// 3493            (keyNvId < (ZCD_NV_TCLK_IC_TABLE_START + gZDSECMGR_TC_DEVICE_IC_MAX)))
        MOV       A,R2
        ADD       A,#-0x4
        MOV       R0,A
        MOV       A,R3
        ADDC      A,#-0x2
        MOV       R1,A
        CLR       C
        MOV       A,R0
        SUBB      A,#0xc
        MOV       A,R1
        SUBB      A,#0x0
        JC        ??ZDSecMgrReadKeyFromNv_8
// 3494   {
// 3495     //Read the key derived from the IC
// 3496     return (osal_nv_read(keyNvId,
// 3497                          0,
// 3498                          SEC_KEY_LEN,
// 3499                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
// 3500   
// 3501   }
// 3502   else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
// 3503            (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
        MOV       A,R2
        ADD       A,#-0x1
        MOV       R0,A
        MOV       A,R3
        ADDC      A,#-0x3
        MOV       R1,A
        CLR       C
        MOV       A,R0
        LCALL     ??Subroutine60_0 & 0xFFFF
??CrossCallReturnLabel_80:
        JNC       ??ZDSecMgrReadKeyFromNv_9
// 3504   {
// 3505     // Read entry keyNvId of the APS link key table from NV. keyNvId should be
// 3506     // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
// 3507     return (osal_nv_read(keyNvId,
// 3508                          osal_offsetof(APSME_LinkKeyData_t, key),
// 3509                          SEC_KEY_LEN,
// 3510                          keyinfo));
        ; Setup parameters for call to function osal_nv_read
??ZDSecMgrReadKeyFromNv_8:
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       ?V0,#0x10
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R4,#0x0
??ZDSecMgrReadKeyFromNv_3:
        MOV       R5,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        SJMP      ??ZDSecMgrReadKeyFromNv_6
// 3511   }
// 3512 
// 3513   return NV_OPER_FAILED;
??ZDSecMgrReadKeyFromNv_9:
        MOV       R1,#0xa
??ZDSecMgrReadKeyFromNv_6:
        LJMP      ??Subroutine75_0 & 0xFFFF
// 3514 }
          CFI EndBlock cfiBlock579
// 3515 
// 3516 /******************************************************************************
// 3517  * @fn          ZDSecMgrApsLinkKeyInit
// 3518  *
// 3519  * @brief       Initialize the NV table for Application link keys
// 3520  *
// 3521  * @param       setDefault - TRUE to set default values
// 3522  *
// 3523  * @return      none
// 3524  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3525 void ZDSecMgrApsLinkKeyInit(uint8 setDefault)
ZDSecMgrApsLinkKeyInit:
          CFI Block cfiBlock580 Using cfiCommon0
          CFI Function ZDSecMgrApsLinkKeyInit
        CODE
// 3526 {
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrApsLinkKeyInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 24
        MOV       A,#-0x18
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       ?V1,R1
// 3527   APSME_LinkKeyData_t pApsLinkKey;
// 3528   uint8 i;
// 3529   uint8 status;
// 3530 
// 3531   // Initialize all NV items for APS link key, if not exist already.
// 3532   osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x18
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 3533 
// 3534   for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
        MOV       ?V0,#0x0
// 3535   {
// 3536     status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i),
// 3537                                sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
// 3538 
// 3539 #if defined ( NV_RESTORE )
// 3540   // If the set default is requested, the APS Link key needs to be erased, regardless of the NV_RESTORE enabled
// 3541       if ((status == SUCCESS) && (setDefault == TRUE ))
??ZDSecMgrApsLinkKeyInit_0:
        MOV       A,?V0
        ADD       A,#0x1
        MOV       R6,A
        CLR       A
        ADDC      A,#0x2
        MOV       R7,A
        ; Setup parameters for call to function osal_nv_item_init
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       R4,#0x18
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV       A,R1
        JNZ       ??ZDSecMgrApsLinkKeyInit_1
        MOV       A,#0x1
        XRL       A,?V1
        JNZ       ??ZDSecMgrApsLinkKeyInit_1
// 3542       {
// 3543         osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
// 3544                       sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV       ?V2,#0x18
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 3545 
// 3546       }
// 3547 #else
// 3548     // reset the values of NV items if NV_RESTORE is not enabled
// 3549     if (status == SUCCESS)
// 3550     {
// 3551       osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
// 3552                     sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
// 3553 
// 3554     }
// 3555 #endif // defined (NV_RESTORE)
// 3556   }
??ZDSecMgrApsLinkKeyInit_1:
        INC       ?V0
        MOV       A,R6
        CLR       C
        SUBB      A,#0x3
        JC        ??ZDSecMgrApsLinkKeyInit_0
// 3557 }
        MOV       A,#0x18
        LJMP      ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock580
// 3558 
// 3559 
// 3560 /******************************************************************************
// 3561  * @fn          ZDSecMgrInitNVKeyTables
// 3562  *
// 3563  * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
// 3564  *
// 3565  * @param       setDefault - TRUE to set default values
// 3566  *
// 3567  * @return      none
// 3568  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3569 void ZDSecMgrInitNVKeyTables(uint8 setDefault)
ZDSecMgrInitNVKeyTables:
          CFI Block cfiBlock581 Using cfiCommon0
          CFI Function ZDSecMgrInitNVKeyTables
        CODE
// 3570 {
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrNwkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrApsLinkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, APSME_TCLinkKeyInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrInitNVKeyTables, ZDSecMgrGenerateSeed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
// 3571   ZDSecMgrNwkKeyInit(setDefault);
        ; Setup parameters for call to function ZDSecMgrNwkKeyInit
        LCALL     `??ZDSecMgrNwkKeyInit::?relay`; Banked call to: ZDSecMgrNwkKeyInit
// 3572   ZDSecMgrApsLinkKeyInit(setDefault); 
        ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDSecMgrApsLinkKeyInit::?relay`; Banked call to: ZDSecMgrApsLinkKeyInit
// 3573   APSME_TCLinkKeyInit(setDefault);
        ; Setup parameters for call to function APSME_TCLinkKeyInit
        MOV       A,R6
        MOV       R1,A
        LCALL     `??APSME_TCLinkKeyInit::?relay`; Banked call to: APSME_TCLinkKeyInit
// 3574   
// 3575 #if ZG_BUILD_COORDINATOR_TYPE
// 3576   if(ZG_DEVICE_COORDINATOR_TYPE)
// 3577   {
// 3578     ZDSecMgrGenerateSeed(setDefault);
        ; Setup parameters for call to function ZDSecMgrGenerateSeed
        MOV       A,R6
        MOV       R1,A
        LCALL     `??ZDSecMgrGenerateSeed::?relay`; Banked call to: ZDSecMgrGenerateSeed
// 3579     
// 3580   }
// 3581 #endif
// 3582 }
        LJMP      ??Subroutine69_0 & 0xFFFF
          CFI EndBlock cfiBlock581
// 3583 
// 3584 
// 3585 /******************************************************************************
// 3586  * @fn          ZDSecMgrSaveApsLinkKey
// 3587  *
// 3588  * @brief       Save APS Link Key to NV. It will loop through all the keys
// 3589  *              to see which one to save.
// 3590  *
// 3591  * @param       none
// 3592  *
// 3593  * @return      none
// 3594  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3595 void ZDSecMgrSaveApsLinkKey(void)
ZDSecMgrSaveApsLinkKey:
          CFI Block cfiBlock582 Using cfiCommon0
          CFI Function ZDSecMgrSaveApsLinkKey
        CODE
// 3596 {
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveApsLinkKey, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
// 3597   APSME_LinkKeyData_t *pKeyData = NULL;
// 3598   int i;
// 3599 
// 3600   pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x18
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 3601 
// 3602   if (pKeyData != NULL)
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??ZDSecMgrSaveApsLinkKey_0 & 0xFFFF
// 3603   {
// 3604     // checks all pending flags to know which one to save
// 3605     for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
// 3606     {
// 3607       if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
??ZDSecMgrSaveApsLinkKey_1:
        MOV       A,?V2
        MOV       B,#0x9
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x9
        MOV       A,?V3
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#ApsLinkKeyFrmCntr & 0xff
        ADD       A,R0
        MOV       ?V6,A
        MOV       A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
        ADDC      A,R1
        MOV       ?V7,A
        MOV       DPL,?V6
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??ZDSecMgrSaveApsLinkKey_2 & 0xFFFF
        MOV       A,?V2
        ADD       A,#0x1
        MOV       R6,A
        MOV       A,?V3
        ADDC      A,#0x2
        MOV       R7,A
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V4,#0x18
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
// 3608       {
// 3609         // retrieve key from NV
// 3610         if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
// 3611                          sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        JNZ       ??ZDSecMgrSaveApsLinkKey_2
// 3612         {
// 3613           pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
        MOV       DPL,?V6
        MOV       DPH,?V7
        LCALL     ?XLOAD_R0123
        LCALL     ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_55:
        LCALL     ?XSTORE_R0123
// 3614           pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?XLOAD_R0123
        MOV       A,?V0
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        LCALL     ?XSTORE_R0123
// 3615 
// 3616           // Write the APS link key back to the NV
// 3617           osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
// 3618                         sizeof(APSME_LinkKeyData_t), pKeyData);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 3619 
// 3620           // clear the pending write flag
// 3621           ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
// 3622         }
// 3623       }
// 3624     }
??ZDSecMgrSaveApsLinkKey_2:
        INC       ?V2
        MOV       A,?V2
        JNZ       ??ZDSecMgrSaveApsLinkKey_3
        INC       ?V3
??ZDSecMgrSaveApsLinkKey_3:
        CLR       C
        SUBB      A,#0x3
        MOV       A,?V3
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JNC       $+5
        LJMP      ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
// 3625 
// 3626     // clear copy of key in RAM
// 3627     osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x18
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 3628 
// 3629     osal_mem_free(pKeyData);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3630   }
// 3631 }
??ZDSecMgrSaveApsLinkKey_0:
        LJMP      ??Subroutine63_0 & 0xFFFF
          CFI EndBlock cfiBlock582

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond583 Using cfiCommon0
          CFI Function APSME_LinkKeySet
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond584 Using cfiCommon0
          CFI (cfiCond584) Function ZDSecMgrSaveApsLinkKey
          CFI (cfiCond584) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond584) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond584) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond584) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond584) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond584) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond584) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond584) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond584) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond584) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond584) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond584) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond584) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond584) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond584) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond584) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond584) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond584) CFA_SP SP+-2
          CFI (cfiCond584) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker585 Using cfiCommon1
          CFI (cfiPicker585) NoFunction
          CFI (cfiPicker585) Picker
        MOV       A,?V0
        ADD       A,#0x10
        MOV       DPL,A
        CLR       A
        ADDC      A,?V1
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond583
          CFI EndBlock cfiCond584
          CFI EndBlock cfiPicker585
// 3632 
// 3633 /******************************************************************************
// 3634  * @fn          ZDSecMgrSaveTCLinkKey
// 3635  *
// 3636  * @brief       Save TC Link Key to NV. It will loop through all the keys
// 3637  *              to see which one to save.
// 3638  *
// 3639  * @param       none
// 3640  *
// 3641  * @return      none
// 3642  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3643 void ZDSecMgrSaveTCLinkKey(void)
ZDSecMgrSaveTCLinkKey:
          CFI Block cfiBlock586 Using cfiCommon0
          CFI Function ZDSecMgrSaveTCLinkKey
        CODE
// 3644 {
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrSaveTCLinkKey, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
// 3645   APSME_TCLKDevEntry_t *pKeyData = NULL;
// 3646   uint16 i;
// 3647 
// 3648   pKeyData = (APSME_TCLKDevEntry_t *)osal_mem_alloc(sizeof(APSME_TCLKDevEntry_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x13
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 3649 
// 3650   if (pKeyData != NULL)
        MOV       A,R2
        ORL       A,?V1
        JNZ       $+5
        LJMP      ??ZDSecMgrSaveTCLinkKey_0 & 0xFFFF
// 3651   {
// 3652     for( i = 0; i < gZDSECMGR_TC_DEVICE_MAX; i++ )
        MOV       ?V2,#0x0
        MOV       ?V3,#0x0
// 3653     {
// 3654       if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
??ZDSecMgrSaveTCLinkKey_1:
        MOV       A,?V2
        MOV       B,#0x9
        MUL       AB
        MOV       R0,A
        MOV       R2,B
        MOV       B,#0x9
        MOV       A,?V3
        LCALL     ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV       DPL,?V6
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x1
        JZ        $+5
        LJMP      ??ZDSecMgrSaveTCLinkKey_2 & 0xFFFF
// 3655       {
// 3656         if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0,
// 3657                          sizeof(APSME_TCLKDevEntry_t), pKeyData) == SUCCESS)
        MOV       A,?V2
        ADD       A,#0x11
        MOV       R6,A
        MOV       A,?V3
        ADDC      A,#0x1
        MOV       R7,A
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V4,#0x13
        MOV       ?V5,#0x0
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,R1
        JNZ       ??ZDSecMgrSaveTCLinkKey_2
// 3658         {
// 3659           pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
        MOV       DPL,?V6
        MOV       DPH,?V7
        LCALL     ?XLOAD_R0123
        MOV       DPL,?V0
        MOV       DPH,?V1
        LCALL     ?XSTORE_R0123
// 3660           pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?XLOAD_R0123
        MOV       DPL,?V0
        MOV       DPH,?V1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?XSTORE_R0123
// 3661 
// 3662           // Write the TC link key back to the NV
// 3663           osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0,
// 3664                         sizeof(APSME_TCLKDevEntry_t), pKeyData);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       R0,#?V4
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 3665 
// 3666           // clear the pending write flag
// 3667           TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
        MOV       DPL,?V6
        MOV       DPH,?V7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
// 3668         }
// 3669       }
// 3670     }
??ZDSecMgrSaveTCLinkKey_2:
        INC       ?V2
        MOV       A,?V2
        JNZ       ??ZDSecMgrSaveTCLinkKey_3
        INC       ?V3
??ZDSecMgrSaveTCLinkKey_3:
        CLR       C
        SUBB      A,#0x3
        MOV       A,?V3
        SUBB      A,#0x0
        JNC       $+5
        LJMP      ??ZDSecMgrSaveTCLinkKey_1 & 0xFFFF
// 3671 
// 3672     osal_mem_free(pKeyData);
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3673   }
// 3674 }
??ZDSecMgrSaveTCLinkKey_0:
        LJMP      ??Subroutine63_0 & 0xFFFF
          CFI EndBlock cfiBlock586

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond587 Using cfiCommon0
          CFI Function APSME_TCLinkKeyInit
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond588 Using cfiCommon0
          CFI (cfiCond588) Function ZDSecMgrSaveTCLinkKey
          CFI (cfiCond588) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond588) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond588) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond588) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond588) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond588) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond588) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond588) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond588) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond588) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond588) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond588) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond588) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond588) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond588) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond588) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond588) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond588) CFA_SP SP+-2
          CFI (cfiCond588) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker589 Using cfiCommon1
          CFI (cfiPicker589) NoFunction
          CFI (cfiPicker589) Picker
        MUL       AB
        ADD       A,R2
        MOV       R1,A
        MOV       A,#TCLinkKeyFrmCntr & 0xff
        ADD       A,R0
        MOV       ?V6,A
        MOV       A,#(TCLinkKeyFrmCntr >> 8) & 0xff
        ADDC      A,R1
        MOV       ?V7,A
        RET
          CFI EndBlock cfiCond587
          CFI EndBlock cfiCond588
          CFI EndBlock cfiPicker589
// 3675 
// 3676 /******************************************************************************
// 3677  * @fn          ZDSecMgrUpdateTCAddress
// 3678  *
// 3679  * @brief       Update Trust Center address and save to NV.
// 3680  *
// 3681  * @param       extAddr - [in] extended address or NULL if no TC protected
// 3682  *
// 3683  * @return      none
// 3684  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3685 void ZDSecMgrUpdateTCAddress( uint8 *extAddr )
ZDSecMgrUpdateTCAddress:
          CFI Block cfiBlock590 Using cfiCommon0
          CFI Function ZDSecMgrUpdateTCAddress
        CODE
// 3686 {
        FUNCALL ZDSecMgrUpdateTCAddress, APSME_SetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateTCAddress, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrUpdateTCAddress, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 8
        MOV       A,#-0x8
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3687   uint8 noTCAddress[Z_EXTADDR_LEN] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
        MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x8
        LCALL     ?MOVE_LONG8_XDATA_XDATA
// 3688   APSME_SetRequest( apsTrustCenterAddress, 0, ( extAddr != NULL) ? extAddr : noTCAddress );
        MOV       A,R2
        ORL       A,R3
        JZ        ??ZDSecMgrUpdateTCAddress_0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        SJMP      ??ZDSecMgrUpdateTCAddress_1
??ZDSecMgrUpdateTCAddress_0:
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R6,?V0
        MOV       R7,?V1
??ZDSecMgrUpdateTCAddress_1:
        ; Setup parameters for call to function APSME_SetRequest
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        MOV       R2,#0x0
        MOV       R3,#0x0
        MOV       R1,#-0x55
        LCALL     `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
// 3689   osal_cpyExtAddr( zgApsTrustCenterAddr, ( extAddr != NULL) ? extAddr : noTCAddress );
        MOV       A,R6
        MOV       R4,A
        MOV       A,R7
        MOV       R5,A
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R2,#zgApsTrustCenterAddr & 0xff
        MOV       R3,#(zgApsTrustCenterAddr >> 8) & 0xff
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 3690   
// 3691 #if defined ( NV_RESTORE )
// 3692   osal_nv_write( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
        ; Setup parameters for call to function osal_nv_write
        MOV       ?V0,#zgApsTrustCenterAddr & 0xff
        MOV       ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V0,#0x8
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x71
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3693 #endif
// 3694 }
        MOV       A,#0x8
        LJMP      ??Subroutine71_0 & 0xFFFF
          CFI EndBlock cfiBlock590
// 3695 
// 3696 #if defined ( ZBA_FALLBACK_NWKKEY )
// 3697 /******************************************************************************
// 3698  * @fn          ZDSecMgrFallbackNwkKey
// 3699  *
// 3700  * @brief       Use the ZBA fallback network key.
// 3701  *
// 3702  * @param       none
// 3703  *
// 3704  * @return      none
// 3705  */
// 3706 void ZDSecMgrFallbackNwkKey( void )
// 3707 {
// 3708   if ( !_NIB.nwkKeyLoaded )
// 3709   {
// 3710     uint8 fallbackKey[SEC_KEY_LEN];
// 3711 
// 3712     ZDSecMgrReadKeyFromNv( ZCD_NV_PRECFGKEY, fallbackKey );
// 3713     SSP_UpdateNwkKey( fallbackKey, 0);
// 3714     SSP_SwitchNwkKey( 0 );
// 3715 
// 3716     // clear local copy of key
// 3717     osal_memset( fallbackKey, 0x00, SEC_KEY_LEN );
// 3718 
// 3719     // handle next step in authentication process
// 3720     ZDSecMgrAuthNwkKey();
// 3721   }
// 3722 }
// 3723 #endif // defined ( ZBA_FALLBACK_NWKKEY )
// 3724 
// 3725 #if defined ( NV_RESTORE )
// 3726 /******************************************************************************
// 3727  * @fn          ZDSecMgrClearNVKeyValues
// 3728  *
// 3729  * @brief       If NV_RESTORE is enabled and the status of the network needs
// 3730  *              default values this fuction clears ZCD_NV_NWKKEY,
// 3731  *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link
// 3732  *
// 3733  * @param       none
// 3734  *
// 3735  * @return      none
// 3736  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 3737 void ZDSecMgrClearNVKeyValues(void)
ZDSecMgrClearNVKeyValues:
          CFI Block cfiBlock591 Using cfiCommon0
          CFI Function ZDSecMgrClearNVKeyValues
        CODE
// 3738 {
        FUNCALL ZDSecMgrClearNVKeyValues, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrClearNVKeyValues, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrClearNVKeyValues, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrClearNVKeyValues, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDSecMgrClearNVKeyValues, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 52, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 52, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 38
        MOV       A,#-0x26
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3739   nwkActiveKeyItems keyItems;
// 3740   nwkKeyDesc nwkKey;
// 3741 
// 3742   osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x15
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 3743 
// 3744   osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       ?V0,#0x15
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x7e
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3745 
// 3746   // Initialize NV items for NWK Active and Alternate keys.
// 3747   osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x11
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 3748 
// 3749   osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       ?V0,#0x11
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3a
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3750 
// 3751   osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
        ; Setup parameters for call to function osal_nv_write
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 50)
        MOV       ?V0,#0x11
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 52)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x3b
        MOV       R3,#0x0
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 3752 }
        MOV       A,#0x26
        LJMP      ??Subroutine71_0 & 0xFFFF
          CFI EndBlock cfiBlock591

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for requestNewTrustCenterLinkKey`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for requestLinkKeyTimeout>`:
        DATA32
        DD 5000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ZDSecMgrAppKeyType>`:
        DATA8
        DB 3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAddrStore::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrExtAddrStore::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrExtAddrStore

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrExtAddrLookup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrExtAddrLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAddrClear::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAddrClear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookupAMI::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookupAMI

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookupExt::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookupExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookupExtGetIndex::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookupExtGetIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryLookupAMIGetIndex::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryLookupAMIGetIndex

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryFree::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryFree

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrEntryNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrEntryNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAppKeyGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAppKeyGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAppKeyReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAppKeyReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrTclkReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrTclkReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAppConfKeyReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAppConfKeyReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSendNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSendNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceRemoveByExtAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceRemoveByExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceRemove::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceValidateRM::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceValidateRM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceValidate::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceValidate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceJoin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceJoin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceJoinDirect::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceJoinDirect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceJoinFwd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceJoinFwd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrDeviceNew::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrDeviceNew

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAssocDeviceAuth::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAssocDeviceAuth

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAuthNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAuthNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrConfig::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrPermitJoining::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrPermitJoining

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrPermitJoiningTimeout::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrPermitJoiningTimeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrNewDeviceEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrNewDeviceEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrTCExtAddrCheck::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrTCExtAddrCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrTCDataLoad::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrTCDataLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrTransportKeyInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrTransportKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrUpdateDeviceInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrUpdateDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrRemoveDeviceInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrRemoveDeviceInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrRequestKeyInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrRequestKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrVerifyKeyInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrVerifyKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSwitchKeyInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSwitchKeyInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrGenerateSeed::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrGenerateSeed

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrGenerateKeyFromSeed::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrGenerateKeyFromSeed

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrGenerateRndKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrGenerateRndKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrUpdateNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrUpdateNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSwitchNwkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSwitchNwkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrRequestAppKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrRequestAppKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAppKeyTypeSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAppKeyTypeSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_LinkKeySet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_LinkKeySet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAuthenticationSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAuthenticationSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAuthenticationCheck::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAuthenticationCheck

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_LinkKeyNVIdGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_LinkKeyNVIdGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_IsLinkKeyValid::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_IsLinkKeyValid

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_KeyFwdToChild::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_KeyFwdToChild

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAddLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAddLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrInitNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrInitNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrWriteNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrWriteNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrRestoreFromNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrRestoreFromNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSetDefaultNV::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSetDefaultNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrAPSRemove::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrAPSRemove

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_TCLinkKeyInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_TCLinkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_TCLinkKeySync::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_TCLinkKeySync

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_TCLinkKeyLoad::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_TCLinkKeyLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??APSME_IsDefaultTCLK::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    APSME_IsDefaultTCLK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrNwkKeyInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrNwkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrReadKeyFromNv::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrReadKeyFromNv

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrApsLinkKeyInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrApsLinkKeyInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrInitNVKeyTables::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrInitNVKeyTables

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSaveApsLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSaveApsLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrSaveTCLinkKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrSaveTCLinkKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrUpdateTCAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrUpdateTCAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDSecMgrClearNVKeyValues::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDSecMgrClearNVKeyValues

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 255, 255, 255, 255, 255, 255,`:
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e9:
        DD 1001

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_b:
        DD 11

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_a:
        DD 10

        END
// 3753 #endif // defined ( NV_RESTORE )
// 3754 
// 3755 /******************************************************************************
// 3756 ******************************************************************************/
// 
// 10 901 bytes in segment BANKED_CODE
//    426 bytes in segment BANK_RELAYS
//      5 bytes in segment CODE_C
//      6 bytes in segment XDATA_I
//      6 bytes in segment XDATA_ID
//     24 bytes in segment XDATA_ROM_C
//     86 bytes in segment XDATA_Z
// 
//    437 bytes of CODE     memory
//      8 bytes of CONST    memory (+ 16 bytes shared)
// 10 901 bytes of HUGECODE memory
//     92 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
