###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               22/Nov/2023  15:42:45
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\fuzzing-coordinator-response-collection\Components\stack\sys\ZGlobals.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWB0A8.tmp
#        (D:\fuzzing-coordinator-response-collection\Components\stack\sys\ZGlobals.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
#        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
#        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
#        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
#        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\ZGlobals.lst
#    Object file        =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\ZGlobals.r51
#
###############################################################################

D:\fuzzing-coordinator-response-collection\Components\stack\sys\ZGlobals.c
      1          /**************************************************************************************************
      2            Filename:       ZGlobals.c
      3            Revised:        $Date: 2015-10-05 14:56:09 -0700 (Mon, 05 Oct 2015) $
      4            Revision:       $Revision: 44517 $
      5          
      6            Description:    User definable Z-Stack parameters.
      7          
      8          
      9            Copyright 2007-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL_Nv.h"
     46          #include "ZDObject.h"
     47          #include "ZGlobals.h"
     48          #include "ZDNwkMgr.h"
     49          #include "OnBoard.h"
     50          #include "ZDSecMgr.h"
     51          #include "bdb.h"
     52          
     53          /*********************************************************************
     54           * MACROS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * TYPEDEFS
     63           */
     64          
     65          typedef struct zgItem
     66          {
     67            uint16 id;
     68            uint16 len;
     69            void *buf;
     70          } zgItem_t;
     71          
     72          /*********************************************************************
     73           * NWK GLOBAL VARIABLES
     74           */
     75          
     76          // Polling values

   \                                 In  segment XDATA_I, align 1, keep-with-next
     77          uint32 zgPollRate = POLL_RATE;
   \                     zgPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     78          uint32 zgSavedPollRate = POLL_RATE;
   \                     zgSavedPollRate:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgSavedPollRate>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     79          uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
   \                     zgQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgQueuedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     80          uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
   \                     zgResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgResponsePollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     81          uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
   \                     zgRejoinPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgRejoinPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
     82          
     83          // Rejoin backoff (silent period ) duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     84          uint32 zgDefaultRejoinBackoff = REJOIN_BACKOFF;
   \                     zgDefaultRejoinBackoff:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultRejoinBackoff>`
   \   000004                REQUIRE __INIT_XDATA_I
     85          
     86          // Rejoin scan duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     87          uint32 zgDefaultRejoinScan = REJOIN_SCAN ;
   \                     zgDefaultRejoinScan:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultRejoinScan>`
   \   000004                REQUIRE __INIT_XDATA_I
     88          
     89          // Transmission retries numbers

   \                                 In  segment XDATA_I, align 1, keep-with-next
     90          uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
   \                     zgMaxDataRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxDataRetries>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     91          uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
   \                     zgMaxPollFailureRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
     92          
     93          // Default channel list

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint32 zgDefaultChannelList = 0;
   \                     zgDefaultChannelList:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     95          
     96          // Stack profile Id

   \                                 In  segment XDATA_I, align 1, keep-with-next
     97          uint8 zgStackProfile = STACK_PROFILE_ID;
   \                     zgStackProfile:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStackProfile>`
   \   000001                REQUIRE __INIT_XDATA_I
     98          
     99          // Default indirect message holding timeout

   \                                 In  segment XDATA_I, align 1, keep-with-next
    100          uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
   \                     zgIndirectMsgTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I
    101          
    102          // Security mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    103          uint8 zgSecurityMode = ZG_SECURITY_MODE;
   \                     zgSecurityMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurityMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    104          
    105          // Secure permit join

   \                                 In  segment XDATA_I, align 1, keep-with-next
    106          uint8 zgSecurePermitJoin = TRUE;
   \                     zgSecurePermitJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurePermitJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    107          
    108          // trustcenter allows rejoins using well known or default keys 

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          uint8 zgAllowRejoins = FALSE;   // FALSE by default
   \                     zgAllowRejoins:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    110          
    111          //allowInstallCodes

   \                                 In  segment XDATA_I, align 1, keep-with-next
    112          uint8 zgAllowInstallCodes = ZG_IC_SUPPORTED_NOT_REQUIRED;
   \                     zgAllowInstallCodes:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgAllowInstallCodes>`
   \   000001                REQUIRE __INIT_XDATA_I
    113          //Allow other devices in the network to change the TC permit joining policy

   \                                 In  segment XDATA_I, align 1, keep-with-next
    114          uint8 zgAllowRemoteTCPolicyChange = TRUE;
   \                     zgAllowRemoteTCPolicyChange:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgAllowRemoteTCPolicyChange>`
   \   000001                REQUIRE __INIT_XDATA_I
    115          
    116          //Change these policies to FALSE is not supported
    117          //uint8 zgAllowTrustCenterLinkKeyRequest = TRUE;
    118          //uint8 zgAllowApplicationKeyRequests = TRUE;
    119          
    120          
    121          // Trust center address

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          uint8 zgApsTrustCenterAddr[Z_EXTADDR_LEN] = { 0 };
   \                     zgApsTrustCenterAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    123          
    124          
    125          // Route Discovery Time - amount of time that a route request lasts

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
   \                     zgRouteDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    127          
    128          // Route expiry

   \                                 In  segment XDATA_I, align 1, keep-with-next
    129          uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
   \                     zgRouteExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    130          
    131          // Extended PAN Id

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          uint8 zgExtendedPANID[Z_EXTADDR_LEN];
   \                     zgExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    133          
    134          // Broadcast parameters

   \                                 In  segment XDATA_I, align 1, keep-with-next
    135          uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
   \                     zgMaxBcastRetires:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxBcastRetires>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    136          uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
   \                     zgPassiveAckTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgPassiveAckTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    137          uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
   \                     zgBcastDeliveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgBcastDeliveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    138          
    139          // Network mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    140          uint8 zgNwkMode = NWK_MODE;
   \                     zgNwkMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    141          
    142          // Many-to-one values

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
   \                     zgConcentratorEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
   \                     zgConcentratorDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    145          uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
   \                     zgConcentratorRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgConcentratorRadius>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
   \                     zgConcentratorRC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    147          uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
   \                     zgNwkSrcRtgExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    148          
    149          // Cleanup Child Table according to routing traffic

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 zgRouterOffAssocCleanup = FALSE;
   \                     zgRouterOffAssocCleanup:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151          
    152          // Determines whether or not a remote NWK leave request command frame received
    153          // by the local device is accepted .

   \                                 In  segment XDATA_I, align 1, keep-with-next
    154          uint8 zgNwkLeaveRequestAllowed = TRUE;
   \                     zgNwkLeaveRequestAllowed:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkLeaveRequestAllowed>`
   \   000001                REQUIRE __INIT_XDATA_I
    155          
    156          //=======    Child Aging PARENT ROUTER (ZR/ZC) configuration   ========
    157          // You can setup a router to support Child Table Aging in 1 of 2 modes of
    158          // operation.  The first mode is NWK_PARENT_INFO_ORPHAN_NOTIFICATION and it
    159          // expects end devices to use orphan scan periodically as a means of a keep-alive
    160          // notification to the parent.  The other mode is NWK_PARENT_INFO_MAC_DATA_POLL
    161          // which uses the end device's MAC POLL request as the keep-alive notification.
    162          // The first method is preferred for new devices, where the end devices provide
    163          // support for it (which will be manditory in future Zigbee Home Automation
    164          // Specifications).
    165          // The second method is compatible with older end devices without the need for
    166          // specific child aging support.
    167          //
    168          // The method supported by the router (or coordinator) is determined at build time
    169          // by setting zgNwkParentInformation to either NWK_PARENT_INFO_ORPHAN_NOTIFICATION
    170          // or NWK_PARENT_INFO_MAC_DATA_POLL.
    171          //
    172          // End device built with Child Table Aging support both methods, the method is
    173          // determined by the parent and communicated at run-time.
    174          #if ( ZG_BUILD_RTR_TYPE )

   \                                 In  segment XDATA_I, align 1, keep-with-next
    175          uint8 zgNwkParentInformation = NWK_PARENT_INFO_MAC_DATA_POLL;
   \                     zgNwkParentInformation:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkParentInformation>`
   \   000001                REQUIRE __INIT_XDATA_I
    176          #else
    177          uint8 zgNwkParentInformation = NWK_PARENT_INFO_UNDEFINED;
    178          #endif
    179          
    180          // This is an index into table Requested Timeout Enumerated Values.
    181          // It is used by the parent router, it indicates the default timeout value
    182          // for any end device that does not negotiate a different timeout value

   \                                 In  segment XDATA_I, align 1, keep-with-next
    183          uint8 zgNwkEndDeviceTimeoutDefault = NWK_END_DEV_TIMEOUT_DEFAULT;
   \                     zgNwkEndDeviceTimeoutDefault:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkEndDeviceTimeoutDefault`
   \   000001                REQUIRE __INIT_XDATA_I
    184          
    185          // Index into table Requested Timeout Enumerated Values.
    186          // Used to keep the leave message into MAC queue for child devices that has expired

   \                                 In  segment XDATA_I, align 1, keep-with-next
    187          uint8 zgNwkEndDeviceLeaveTimeoutDefault = NWK_END_DEVICE_LEAVE_TIMEOUT;
   \                     zgNwkEndDeviceLeaveTimeoutDefault:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkEndDeviceLeaveTimeoutDe`
   \   000001                REQUIRE __INIT_XDATA_I
    188          //=====================================================================
    189          
    190          //==========    Child Aging END DEVICE configuration    ===============
    191          // Values used by End Device when sending End Device Timeout Request

   \                                 In  segment XDATA_I, align 1, keep-with-next
    192          uint8 zgEndDeviceTimeoutValue  = END_DEV_TIMEOUT_VALUE;
   \                     zgEndDeviceTimeoutValue:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgEndDeviceTimeoutValue>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          uint8 zgEndDeviceConfiguration = END_DEV_CONFIGURATION;
   \                     zgEndDeviceConfiguration:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          
    195          
    196          //=====================================================================
    197          
    198          // Determines if the Child Aging Table Management process is active or not.
    199          // This feature is optional and it is disabled by default.
    200          //
    201          // NOTICE:  Before enabling Child Aging make sure to review all the related
    202          // definitions in this file, especially zgNwkParentInformation.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    203          uint8 zgChildAgingEnable = TRUE;
   \                     zgChildAgingEnable:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgChildAgingEnable>`
   \   000001                REQUIRE __INIT_XDATA_I
    204          
    205          //==========    TouchLink NWK configuration    ===============
    206          // Values used by Router when starts a network as initiator

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          uint8 zTouchLinkNwkStartRtr = FALSE;
   \                     zTouchLinkNwkStartRtr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    208          
    209          /*********************************************************************
    210           * APS GLOBAL VARIABLES
    211           */
    212          
    213          // The maximum number of retries allowed after a transmission failure

   \                                 In  segment XDATA_I, align 1, keep-with-next
    214          uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
   \                     zgApscMaxFrameRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
    215          
    216          // The maximum number of seconds (milliseconds) to wait for an
    217          // acknowledgement to a transmitted frame.
    218          
    219          // This number is used by polled devices.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    220          uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
   \                     zgApscAckWaitDurationPolled:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
   \   000002                REQUIRE __INIT_XDATA_I
    221          
    222          // This number is used by non-polled devices in the following formula:
    223          //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

   \                                 In  segment XDATA_I, align 1, keep-with-next
    224          uint8 zgApsAckWaitMultiplier = 2;
   \                     zgApsAckWaitMultiplier:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
   \   000001                REQUIRE __INIT_XDATA_I
    225          
    226          // The maximum number of milliseconds for the end device binding

   \                                 In  segment XDATA_I, align 1, keep-with-next
    227          uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
   \                     zgApsDefaultMaxBindingTime:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
   \   000002                REQUIRE __INIT_XDATA_I
    228          
    229          // The 64-big identifier of the network to join or form.
    230          // Default set to all zeros

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    231          uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
   \                     zgApsUseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    232          
    233          // A boolean flag that indicates whether it is OK to use insecure join
    234          // on startup. Default set to TRUE

   \                                 In  segment XDATA_I, align 1, keep-with-next
    235          uint8 zgApsUseInsecureJoin = TRUE;
   \                     zgApsUseInsecureJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    236          
    237          // The radius of broadcast multicast transmissions

   \                                 In  segment XDATA_I, align 1, keep-with-next
    238          uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
   \                     zgApsNonMemberRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsNonMemberRadius>`
   \   000001                REQUIRE __INIT_XDATA_I
    239          
    240          // Commissioned Network Address

   \                                 In  segment XDATA_I, align 1, keep-with-next
    241          uint16 zgNwkCommissionedNwkAddr = INVALID_NODE_ADDR;
   \                     zgNwkCommissionedNwkAddr:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgNwkCommissionedNwkAddr>`
   \   000002                REQUIRE __INIT_XDATA_I
    242          
    243          // APS Duplication Rejection table variables

   \                                 In  segment XDATA_I, align 1, keep-with-next
    244          uint16 zgApscDupRejTimeoutInc = DEFAULT_APS_DUP_REJ_TIMEOUT_INCREMENT;
   \                     zgApscDupRejTimeoutInc:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscDupRejTimeoutInc>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    245          uint8  zgApscDupRejTimeoutCount = DEFAULT_APS_DUP_REJ_TIMEOUT;
   \                     zgApscDupRejTimeoutCount:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscDupRejTimeoutCount>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    246          uint16 zgApsMinDupRejTableSize = APS_DUP_REJ_ENTRIES;
   \                     zgApsMinDupRejTableSize:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsMinDupRejTableSize>`
   \   000002                REQUIRE __INIT_XDATA_I
    247          
    248          
    249          
    250          /*********************************************************************
    251           * SECURITY GLOBAL VARIABLES
    252           */
    253          
    254          // If TRUE, preConfigKey should be configured on all devices on the network
    255          // If false, it is configured only on the coordinator and sent to other
    256          // devices upon joining.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    257          uint8 zgPreConfigKeys = FALSE;
   \                     zgPreConfigKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    258          
    259          // The type of link key in use.  This will determine the security
    260          // policies associated with sending and receiving APS messages.
    261          // If ZG_GLOBAL_LINK_KEY APS TCLK security may be used for specific APS commands
    262          // If ZG_UNIQUE_LINK_KEY APS TCLK security is required for specific APS commands

   \                                 In  segment XDATA_I, align 1, keep-with-next
    263          uint8 zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY;
   \                     zgApsLinkKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsLinkKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    264          
    265          // With changes introduced in R20 of the ZigBee specification,
    266          // boolean value of zgUseDefaultTCLK is set depending on zgApsLinkKeyType value.
    267          //
    268          // For zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY, zgUseDefaultTCLK = TRUE
    269          // For zgApsLinkKeyType = ZG_UNIQUE_LINK_KEY, different devices have
    270          // different value:
    271          //      ZC should have             zgUseDefaultTCLK = FALSE
    272          //      Other devices should have  zgUseDefaultTCLK = TRUE
    273          // This is initialized in zgInitItems()
    274          // If ZG_UNIQUE_LINK_KEY, individual trust center link key between each device
    275          // and the trust center should be manually configured via MT_SYS_OSAL_NV_WRITE

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    276          uint8 zgUseDefaultTCLK;
   \                     zgUseDefaultTCLK:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    277          
    278          #if defined ( APP_TP2_TEST_MODE )
    279          uint8 guTxApsSecON = TP_GU_BOTH;
    280          uint8 guEnforceRxApsSec = TP_GU_ALL;
    281          #endif
    282          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    283          uint8 zgApsAllowR19Sec = FALSE;
   \                     zgApsAllowR19Sec:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    284          uint8 zgSwitchCoordKey = FALSE;
   \                     zgSwitchCoordKey:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    285          uint8 zgSwitchCoordKeyIndex = 0;
   \                     zgSwitchCoordKeyIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    286          
    287          /*********************************************************************
    288           * ZDO GLOBAL VARIABLES
    289           */
    290          
    291          // Configured PAN ID

   \                                 In  segment XDATA_I, align 1, keep-with-next
    292          uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
   \                     zgConfigPANID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgConfigPANID>`
   \   000002                REQUIRE __INIT_XDATA_I
    293          
    294          // Device Logical Type

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    295          uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
   \                     zgDeviceLogicalType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    296          
    297          // Startup Delay

   \                                 In  segment XDATA_I, align 1, keep-with-next
    298          uint8 zgStartDelay = START_DELAY;
   \                     zgStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    299          
    300          #if !defined MT_TASK
    301          // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().

   \                                 In  segment XDATA_I, align 1, keep-with-next
    302          uint8 zgZdoDirectCB = TRUE;
   \                     zgZdoDirectCB:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgZdoDirectCB>`
   \   000001                REQUIRE __INIT_XDATA_I
    303          #endif
    304          
    305          // Min number of attempted transmissions for Channel Interference detection

   \                                 In  segment XDATA_I, align 1, keep-with-next
    306          uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
   \                     zgNwkMgrMinTransmissions:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
   \   000001                REQUIRE __INIT_XDATA_I
    307          
    308          /*********************************************************************
    309           * APPLICATION GLOBAL VARIABLES
    310           */
    311          
    312          // Network Manager Mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    313          uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
   \                     zgNwkMgrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    314          
    315          /*********************************************************************
    316           * NON-STANDARD GLOBAL VARIABLES
    317           */
    318          
    319          // Simple API Endpoint

   \                                 In  segment XDATA_I, align 1, keep-with-next
    320          uint8 zgSapiEndpoint = SAPI_ENDPOINT;
   \                     zgSapiEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSapiEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
    321          
    322          /*********************************************************************
    323           * LOCAL VARIABLES
    324           */
    325          
    326          /*********************************************************************
    327           * ZGlobal Item Table
    328           */

   \                                 In  segment CODE_C, align 1
    329          static CONST zgItem_t zgItemTable[] =
   \                     zgItemTable:
   \   000000   8F00         DW 143
   \   000002   0100         DW 1
   \   000004   ....         DW zgZdoDirectCB
   \   000006   8700         DW 135
   \   000008   0100         DW 1
   \   00000A   ....         DW zgDeviceLogicalType
   \   00000C   3500         DW 53
   \   00000E   0400         DW 4
   \   000010   ....         DW zgPollRate
   \   000012   2500         DW 37
   \   000014   0200         DW 2
   \   000016   ....         DW zgQueuedPollRate
   \   000018   2600         DW 38
   \   00001A   0200         DW 2
   \   00001C   ....         DW zgResponsePollRate
   \   00001E   2700         DW 39
   \   000020   0200         DW 2
   \   000022   ....         DW zgRejoinPollRate
   \   000024   2800         DW 40
   \   000026   0100         DW 1
   \   000028   ....         DW zgMaxDataRetries
   \   00002A   2900         DW 41
   \   00002C   0100         DW 1
   \   00002E   ....         DW zgMaxPollFailureRetries
   \   000030   8400         DW 132
   \   000032   0400         DW 4
   \   000034   ....         DW zgDefaultChannelList
   \   000036   8600         DW 134
   \   000038   0100         DW 1
   \   00003A   ....         DW bdbAttributes + 0DH
   \   00003C   2A00         DW 42
   \   00003E   0100         DW 1
   \   000040   ....         DW zgStackProfile
   \   000042   2B00         DW 43
   \   000044   0100         DW 1
   \   000046   ....         DW zgIndirectMsgTimeout
   \   000048   2C00         DW 44
   \   00004A   0100         DW 1
   \   00004C   ....         DW zgRouteExpiryTime
   \   00004E   2D00         DW 45
   \   000050   0800         DW 8
   \   000052   ....         DW zgExtendedPANID
   \   000054   2E00         DW 46
   \   000056   0100         DW 1
   \   000058   ....         DW zgMaxBcastRetires
   \   00005A   2F00         DW 47
   \   00005C   0100         DW 1
   \   00005E   ....         DW zgPassiveAckTimeout
   \   000060   3000         DW 48
   \   000062   0100         DW 1
   \   000064   ....         DW zgBcastDeliveryTime
   \   000066   3100         DW 49
   \   000068   0100         DW 1
   \   00006A   ....         DW zgNwkMode
   \   00006C   3200         DW 50
   \   00006E   0100         DW 1
   \   000070   ....         DW zgConcentratorEnable
   \   000072   3300         DW 51
   \   000074   0100         DW 1
   \   000076   ....         DW zgConcentratorDiscoveryTime
   \   000078   3400         DW 52
   \   00007A   0100         DW 1
   \   00007C   ....         DW zgConcentratorRadius
   \   00007E   3600         DW 54
   \   000080   0100         DW 1
   \   000082   ....         DW zgConcentratorRC
   \   000084   3800         DW 56
   \   000086   0100         DW 1
   \   000088   ....         DW zgNwkSrcRtgExpiryTime
   \   00008A   3900         DW 57
   \   00008C   0100         DW 1
   \   00008E   ....         DW zgRouteDiscoveryTime
   \   000090   8300         DW 131
   \   000092   0200         DW 2
   \   000094   ....         DW zgConfigPANID
   \   000096   6300         DW 99
   \   000098   0100         DW 1
   \   00009A   ....         DW zgPreConfigKeys
   \   00009C   6400         DW 100
   \   00009E   0100         DW 1
   \   0000A0   ....         DW zgSecurityMode
   \   0000A2   6500         DW 101
   \   0000A4   0100         DW 1
   \   0000A6   ....         DW zgSecurePermitJoin
   \   0000A8   6D00         DW 109
   \   0000AA   0100         DW 1
   \   0000AC   ....         DW zgUseDefaultTCLK
   \   0000AE   7100         DW 113
   \   0000B0   0800         DW 8
   \   0000B2   ....         DW zgApsTrustCenterAddr
   \   0000B4   6600         DW 102
   \   0000B6   0100         DW 1
   \   0000B8   ....         DW zgApsLinkKeyType
   \   0000BA   4300         DW 67
   \   0000BC   0100         DW 1
   \   0000BE   ....         DW zgApscMaxFrameRetries
   \   0000C0   4400         DW 68
   \   0000C2   0200         DW 2
   \   0000C4   ....         DW zgApscAckWaitDurationPolled
   \   0000C6   4500         DW 69
   \   0000C8   0100         DW 1
   \   0000CA   ....         DW zgApsAckWaitMultiplier
   \   0000CC   4600         DW 70
   \   0000CE   0200         DW 2
   \   0000D0   ....         DW zgApsDefaultMaxBindingTime
   \   0000D2   4700         DW 71
   \   0000D4   0800         DW 8
   \   0000D6   ....         DW zgApsUseExtendedPANID
   \   0000D8   4800         DW 72
   \   0000DA   0100         DW 1
   \   0000DC   ....         DW zgApsUseInsecureJoin
   \   0000DE   4B00         DW 75
   \   0000E0   0100         DW 1
   \   0000E2   ....         DW zgApsNonMemberRadius
   \   0000E4   0400         DW 4
   \   0000E6   0100         DW 1
   \   0000E8   ....         DW zgStartDelay
   \   0000EA   A100         DW 161
   \   0000EC   0100         DW 1
   \   0000EE   ....         DW zgSapiEndpoint
   \   0000F0   3700         DW 55
   \   0000F2   0100         DW 1
   \   0000F4   ....         DW zgNwkMgrMode
   \   0000F6   8800         DW 136
   \   0000F8   0100         DW 1
   \   0000FA   ....         DW zgNwkMgrMinTransmissions
   \   0000FC   3C00         DW 60
   \   0000FE   0100         DW 1
   \   000100   ....         DW zgRouterOffAssocCleanup
   \   000102   3D00         DW 61
   \   000104   0100         DW 1
   \   000106   ....         DW zgNwkLeaveRequestAllowed
   \   000108   4900         DW 73
   \   00010A   0200         DW 2
   \   00010C   ....         DW zgNwkCommissionedNwkAddr
   \   00010E   6700         DW 103
   \   000110   0100         DW 1
   \   000112   ....         DW zgApsAllowR19Sec
   \   000114   4D00         DW 77
   \   000116   0200         DW 2
   \   000118   ....         DW zgApscDupRejTimeoutInc
   \   00011A   4E00         DW 78
   \   00011C   0100         DW 1
   \   00011E   ....         DW zgApscDupRejTimeoutCount
   \   000120   4F00         DW 79
   \   000122   0200         DW 2
   \   000124   ....         DW zgApsMinDupRejTableSize
   \   000126   3E00         DW 62
   \   000128   0100         DW 1
   \   00012A   ....         DW zgChildAgingEnable
   \   00012C   5100         DW 81
   \   00012E   0100         DW 1
   \   000130   ....         DW zgNwkParentInformation
   \   000132   5200         DW 82
   \   000134   0100         DW 1
   \   000136   ....         DW zgNwkEndDeviceTimeoutDefault
   \   000138   5300         DW 83
   \   00013A   0100         DW 1
   \   00013C   ....         DW zgEndDeviceTimeoutValue
   \   00013E   5400         DW 84
   \   000140   0100         DW 1
   \   000142   ....         DW zgEndDeviceConfiguration
   \   000144   0000         DW 0
   \   000146   0000         DW 0
   \   000148   0000         DW 0H
    330          {
    331          #if defined ( NV_INIT )
    332          #if !defined MT_TASK
    333            {
    334              ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
    335            },
    336          #endif
    337            {
    338              ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
    339            },
    340            {
    341              ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
    342            },
    343            {
    344              ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
    345            },
    346            {
    347              ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
    348            },
    349            {
    350              ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
    351            },
    352            {
    353              ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
    354            },
    355            {
    356              ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
    357            },
    358            {
    359              ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
    360            },
    361            {
    362              ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
    363            },
    364            {
    365              ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
    366            },
    367            {
    368              ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
    369            },
    370            {
    371              ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
    372            },
    373            {
    374              ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
    375            },
    376            {
    377              ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
    378            },
    379            {
    380              ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
    381            },
    382            {
    383              ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
    384            },
    385            {
    386              ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
    387            },
    388            {
    389              ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
    390            },
    391            {
    392              ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
    393            },
    394            {
    395              ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
    396            },
    397            {
    398              ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
    399            },
    400            {
    401              ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
    402            },
    403            {
    404              ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
    405            },
    406          #ifndef NONWK
    407            {
    408              ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
    409            },
    410            {
    411              ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
    412            },
    413            {
    414              ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
    415            },
    416            {
    417              ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
    418            },
    419            {
    420              ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
    421            },
    422            {
    423              ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN, zgApsTrustCenterAddr
    424            },
    425            {
    426              ZCD_NV_APS_LINK_KEY_TYPE, sizeof(zgApsLinkKeyType), &zgApsLinkKeyType
    427            },
    428          #endif // NONWK
    429            {
    430              ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
    431            },
    432            {
    433              ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
    434            },
    435            {
    436              ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
    437            },
    438            {
    439              ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
    440            },
    441            {
    442              ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
    443            },
    444            {
    445              ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
    446            },
    447            {
    448              ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
    449            },
    450            {
    451              ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
    452            },
    453            {
    454              ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
    455            },
    456            {
    457              ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
    458            },
    459            {
    460              ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
    461            },
    462            {
    463              ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP, sizeof(zgRouterOffAssocCleanup), &zgRouterOffAssocCleanup
    464            },
    465            {
    466              ZCD_NV_NWK_LEAVE_REQ_ALLOWED, sizeof(zgNwkLeaveRequestAllowed), &zgNwkLeaveRequestAllowed
    467            },
    468            {
    469              ZCD_NV_COMMISSIONED_NWK_ADDR, sizeof(zgNwkCommissionedNwkAddr), &zgNwkCommissionedNwkAddr
    470            },
    471            {
    472              ZCD_NV_APS_ALLOW_R19_SECURITY, sizeof(zgApsAllowR19Sec), &zgApsAllowR19Sec
    473            },
    474            {
    475              ZCD_NV_APS_DUPREJ_TIMEOUT_INC, sizeof(zgApscDupRejTimeoutInc), &zgApscDupRejTimeoutInc
    476            },
    477            {
    478              ZCD_NV_APS_DUPREJ_TIMEOUT_COUNT, sizeof(zgApscDupRejTimeoutCount), &zgApscDupRejTimeoutCount
    479            },
    480            {
    481              ZCD_NV_APS_DUPREJ_TABLE_SIZE, sizeof(zgApsMinDupRejTableSize), &zgApsMinDupRejTableSize
    482            },
    483            {
    484              ZCD_NV_NWK_CHILD_AGE_ENABLE, sizeof(zgChildAgingEnable), &zgChildAgingEnable
    485            },
    486            {
    487              ZCD_NV_NWK_PARENT_INFO, sizeof(zgNwkParentInformation), &zgNwkParentInformation
    488            },
    489            {
    490              ZCD_NV_NWK_ENDDEV_TIMEOUT_DEF, sizeof(zgNwkEndDeviceTimeoutDefault), &zgNwkEndDeviceTimeoutDefault
    491            },
    492            {
    493              ZCD_NV_END_DEV_TIMEOUT_VALUE, sizeof(zgEndDeviceTimeoutValue), &zgEndDeviceTimeoutValue
    494            },
    495            {
    496              ZCD_NV_END_DEV_CONFIGURATION, sizeof(zgEndDeviceConfiguration), &zgEndDeviceConfiguration
    497            },
    498          #endif // NV_INIT
    499            // Last item -- DO NOT MOVE IT!
    500            {
    501              0x00, 0, NULL
    502            }
    503          };
    504          
    505          /*********************************************************************
    506           * LOCAL FUNCTIONS
    507           */
    508          
    509          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
    510          
    511          static void zgUpgradeNVItems( void );
    512          
    513          #ifndef NONWK
    514          static uint8 zgPreconfigKeyInit( uint8 setDefault );
    515          #endif
    516          
    517          /*********************************************************************
    518           * @fn       zgItemInit()
    519           *
    520           * @brief
    521           *
    522           *   Initialize a global item. If the item doesn't exist in NV memory,
    523           *   write the system default (value passed in) into NV memory. But if
    524           *   it exists, set the item to the value stored in NV memory.
    525           *
    526           *   Also, if setDefault is TRUE and the item exists, we will write
    527           *   the default value to NV space.
    528           *
    529           * @param   id - item id
    530           * @param   len - item len
    531           * @param   buf - pointer to the item
    532           * @param   setDefault - TRUE to set default, not read
    533           *
    534           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    535           *          exist in NV, NV_OPER_FAILED if failure.
    536           */
    537          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
    538          {
    539            uint8 status;
    540          
    541            // If the item doesn't exist in NV memory, create and initialize
    542            // it with the value passed in.
    543            status = osal_nv_item_init( id, len, buf );
    544            if ( status == ZSUCCESS )
    545            {
    546              if ( setDefault )
    547              {
    548                // Write the default value back to NV
    549                status = osal_nv_write( id, 0, len, buf );
    550              }
    551              else
    552              {
    553                // The item exists in NV memory, read it from NV memory
    554                status = osal_nv_read( id, 0, len, buf );
    555              }
    556            }
    557          
    558            return (status);
    559          }
    560          
    561          /*********************************************************************
    562           * API FUNCTIONS
    563           */
    564          
    565          /*********************************************************************
    566           * @fn          zgInit
    567           *
    568           * @brief
    569           *
    570           *   Initialize the Z-Stack Globals. If an item doesn't exist in
    571           *   NV memory, write the system default into NV memory. But if
    572           *   it exists, set the item to the value stored in NV memory.
    573           *
    574           * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
    575           *       that the Config state items (zgItemTable) need to be
    576           *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
    577           *
    578           * @param       none
    579           *
    580           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    581           *              exist in NV, NV_OPER_FAILED if failure.
    582           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    583          uint8 zgInit( void )
   \                     zgInit:
    584          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV       A,#-0x12
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    585            uint8  setDefault = FALSE;
   \   00000A   7E00         MOV       R6,#0x0
    586            uint8  status;
    587            
    588          #ifdef NV_RESTORE
    589            // Do we want to default the Config state values
    590            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
   \   00000C                ; Setup parameters for call to function zgReadStartupOptions
   \   00000C   12....       LCALL     `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000F   E9           MOV       A,R1
   \   000010   F8           MOV       R0,A
   \   000011   A2E0         MOV       C,0xE0 /* A   */.0
   \   000013   5002         JNC       ??zgInit_0
    591            {
    592              setDefault = TRUE;
   \   000015   7E01         MOV       R6,#0x1
    593            }
    594          #else
    595              setDefault = TRUE;
    596          #endif
    597            
    598            status = osal_nv_item_init(ZCD_NV_BDBNODEISONANETWORK,sizeof(bdbAttributes.bdbNodeIsOnANetwork),&bdbAttributes.bdbNodeIsOnANetwork);
    599          
    600            //Force to reset state if device is forced to FN
    601            if((status == SUCCESS) && setDefault)
   \                     ??zgInit_0:
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   75....       MOV       ?V0,#(bdbAttributes + 14) & 0xff
   \   00001A   75....       MOV       ?V1,#((bdbAttributes + 14) >> 8) & 0xff
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000022   7C01         MOV       R4,#0x1
   \   000024   7D00         MOV       R5,#0x0
   \   000026   7A55         MOV       R2,#0x55
   \   000028   7B00         MOV       R3,#0x0
   \   00002A   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032   E9           MOV       A,R1
   \   000033   700A         JNZ       ??zgInit_1
   \   000035   EE           MOV       A,R6
   \   000036   A2E0         MOV       C,0xE0 /* A   */.0
   \   000038   5005         JNC       ??zgInit_1
    602            {
    603              bdb_setNodeIsOnANetwork(false);
   \   00003A                ; Setup parameters for call to function bdb_setNodeIsOnANetwork
   \   00003A   7900         MOV       R1,#0x0
   \   00003C   12....       LCALL     `??bdb_setNodeIsOnANetwork::?relay`; Banked call to: bdb_setNodeIsOnANetwork
    604            }
    605            
    606          #if defined (FEATURE_SYSTEM_STATS) 
    607            {
    608              // This sections tracks the number of resets
    609              uint16 bootCnt = 0;
    610          
    611              // Update the Boot Counter
    612              if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
    613              {
    614                // Get the old value from NV memory
    615                osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    616              }
    617          
    618              // Increment the Boot Counter and store it into NV memory
    619              if ( setDefault )
    620              {
    621                bootCnt = 0;
    622              }
    623              else
    624              {
    625                bootCnt++;
    626              }
    627          
    628              osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    629            }
    630          #endif  // FEATURE_SYSTEM_STATS
    631          
    632            zgUpgradeNVItems();
   \                     ??zgInit_1:
   \   00003F                ; Setup parameters for call to function osal_nv_item_len
   \   00003F   7A24         MOV       R2,#0x24
   \   000041   7B00         MOV       R3,#0x0
   \   000043   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000046   8A..         MOV       ?V0,R2
   \   000048   8B..         MOV       ?V1,R3
   \   00004A                ; Setup parameters for call to function osal_nv_item_len
   \   00004A   7A35         MOV       R2,#0x35
   \   00004C   7B00         MOV       R3,#0x0
   \   00004E   12....       LCALL     `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000051   8B..         MOV       ?V3,R3
   \   000053   EA           MOV       A,R2
   \   000054   45..         ORL       A,?V3
   \   000056   7072         JNZ       ??zgInit_2
   \   000058   7402         MOV       A,#0x2
   \   00005A   65..         XRL       A,?V0
   \   00005C   45..         ORL       A,?V1
   \   00005E   706A         JNZ       ??zgInit_2
   \   000060                ; Setup parameters for call to function osal_nv_read
   \   000060   A8..         MOV       R0,?XSP + 0
   \   000062   A9..         MOV       R1,?XSP + 1
   \   000064   88..         MOV       ?V0,R0
   \   000066   89..         MOV       ?V1,R1
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   75..02       MOV       ?V0,#0x2
   \   000070   75..00       MOV       ?V1,#0x0
   \   000073   78..         MOV       R0,#?V0
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000078   7C00         MOV       R4,#0x0
   \   00007A   7D00         MOV       R5,#0x0
   \   00007C   7A24         MOV       R2,#0x24
   \   00007E   7B00         MOV       R3,#0x0
   \   000080   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000083   7404         MOV       A,#0x4
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
   \   000088   85..82       MOV       DPL,?XSP + 0
   \   00008B   85..83       MOV       DPH,?XSP + 1
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   F8           MOV       R0,A
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   F9           MOV       R1,A
   \   000093   E8           MOV       A,R0
   \   000094   FA           MOV       R2,A
   \   000095   E9           MOV       A,R1
   \   000096   FB           MOV       R3,A
   \   000097   90....       MOV       DPTR,#zgPollRate
   \   00009A   EA           MOV       A,R2
   \   00009B   F0           MOVX      @DPTR,A
   \   00009C   A3           INC       DPTR
   \   00009D   EB           MOV       A,R3
   \   00009E   F0           MOVX      @DPTR,A
   \   00009F   A3           INC       DPTR
   \   0000A0   E4           CLR       A
   \   0000A1   F0           MOVX      @DPTR,A
   \   0000A2   A3           INC       DPTR
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4                ; Setup parameters for call to function osal_nv_item_init
   \   0000A4   75....       MOV       ?V0,#zgPollRate & 0xff
   \   0000A7   75....       MOV       ?V1,#(zgPollRate >> 8) & 0xff
   \   0000AA   78..         MOV       R0,#?V0
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AF   7C04         MOV       R4,#0x4
   \   0000B1   7D00         MOV       R5,#0x0
   \   0000B3   7A35         MOV       R2,#0x35
   \   0000B5   7B00         MOV       R3,#0x0
   \   0000B7   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000BA   7402         MOV       A,#0x2
   \   0000BC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BF                ; Setup parameters for call to function osal_nv_delete
   \   0000BF   7C02         MOV       R4,#0x2
   \   0000C1   7D00         MOV       R5,#0x0
   \   0000C3   7A24         MOV       R2,#0x24
   \   0000C5   7B00         MOV       R3,#0x0
   \   0000C7   12....       LCALL     `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
    633          
    634            // Initialize the Extended PAN ID as my own extended address
    635            ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
   \                     ??zgInit_2:
   \   0000CA                ; Setup parameters for call to function ZMacGetReq
   \   0000CA   7A..         MOV       R2,#zgExtendedPANID & 0xff
   \   0000CC   7B..         MOV       R3,#(zgExtendedPANID >> 8) & 0xff
   \   0000CE   79E2         MOV       R1,#-0x1e
   \   0000D0   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    636          
    637            // Initialize the items table
    638            zgInitItems( setDefault );
   \   0000D3                ; Setup parameters for call to function zgInitItems
   \   0000D3   EE           MOV       A,R6
   \   0000D4   F9           MOV       R1,A
   \   0000D5   12....       LCALL     `??zgInitItems::?relay`; Banked call to: zgInitItems
    639          
    640          #ifndef NONWK
    641            if ( ZG_SECURE_ENABLED )
    642            {
    643              // Initialize the Pre-Configured Key to the default key
    644              zgPreconfigKeyInit( setDefault );
   \   0000D8                ; Setup parameters for call to function osal_memset
   \   0000D8   7C10         MOV       R4,#0x10
   \   0000DA   7D00         MOV       R5,#0x0
   \   0000DC   7900         MOV       R1,#0x0
   \   0000DE   7402         MOV       A,#0x2
   \   0000E0   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E3   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000E6   90....       MOV       DPTR,#zgDeviceLogicalType
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   6004         JZ        ??zgInit_3
   \   0000EC   6401         XRL       A,#0x1
   \   0000EE   704F         JNZ       ??zgInit_4
   \                     ??zgInit_3:
   \   0000F0   75....       MOV       ?V0,#defaultKey & 0xff
   \   0000F3   75....       MOV       ?V1,#(defaultKey >> 8) & 0xff
   \   0000F6   75..80       MOV       ?V2,#-0x80
   \   0000F9                ; Setup parameters for call to function osal_memcmp
   \   0000F9   7402         MOV       A,#0x2
   \   0000FB   12....       LCALL     ?XSTACK_DISP100_8
   \   0000FE   88..         MOV       ?V4,R0
   \   000100   89..         MOV       ?V5,R1
   \   000102   75..00       MOV       ?V6,#0x0
   \   000105   78..         MOV       R0,#?V4
   \   000107   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00010A   7C10         MOV       R4,#0x10
   \   00010C   7D00         MOV       R5,#0x0
   \   00010E   A9..         MOV       R1,?V0
   \   000110   AA..         MOV       R2,?V1
   \   000112   AB..         MOV       R3,?V2
   \   000114   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000117   7403         MOV       A,#0x3
   \   000119   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011C   E9           MOV       A,R1
   \   00011D   600A         JZ        ??zgInit_5
   \   00011F                ; Setup parameters for call to function ZDSecMgrGenerateRndKey
   \   00011F   7402         MOV       A,#0x2
   \   000121   12....       LCALL     ?XSTACK_DISP101_8
   \   000124   12....       LCALL     `??ZDSecMgrGenerateRndKey::?relay`; Banked call to: ZDSecMgrGenerateRndKey
   \   000127   8016         SJMP      ??zgInit_4
   \                     ??zgInit_5:
   \   000129                ; Setup parameters for call to function osal_memcpy
   \   000129   78..         MOV       R0,#?V0
   \   00012B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012E   7C10         MOV       R4,#0x10
   \   000130   7D00         MOV       R5,#0x0
   \   000132   7405         MOV       A,#0x5
   \   000134   12....       LCALL     ?XSTACK_DISP101_8
   \   000137   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00013A   7403         MOV       A,#0x3
   \   00013C   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zgInit_4:
   \   00013F                ; Setup parameters for call to function osal_nv_item_init
   \   00013F   7402         MOV       A,#0x2
   \   000141   12....       LCALL     ?XSTACK_DISP100_8
   \   000144   88..         MOV       ?V0,R0
   \   000146   89..         MOV       ?V1,R1
   \   000148   78..         MOV       R0,#?V0
   \   00014A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014D   7C10         MOV       R4,#0x10
   \   00014F   7D00         MOV       R5,#0x0
   \   000151   7A62         MOV       R2,#0x62
   \   000153   7B00         MOV       R3,#0x0
   \   000155   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000158   7402         MOV       A,#0x2
   \   00015A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015D   E9           MOV       A,R1
   \   00015E   7025         JNZ       ??zgInit_6
   \   000160   EE           MOV       A,R6
   \   000161   A2E0         MOV       C,0xE0 /* A   */.0
   \   000163   5020         JNC       ??zgInit_6
   \   000165                ; Setup parameters for call to function osal_nv_write
   \   000165   78..         MOV       R0,#?V0
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016A   75..10       MOV       ?V0,#0x10
   \   00016D   75..00       MOV       ?V1,#0x0
   \   000170   78..         MOV       R0,#?V0
   \   000172   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000175   7C00         MOV       R4,#0x0
   \   000177   7D00         MOV       R5,#0x0
   \   000179   7A62         MOV       R2,#0x62
   \   00017B   7B00         MOV       R3,#0x0
   \   00017D   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000180   7404         MOV       A,#0x4
   \   000182   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zgInit_6:
   \   000185                ; Setup parameters for call to function osal_memset
   \   000185   7C10         MOV       R4,#0x10
   \   000187   7D00         MOV       R5,#0x0
   \   000189   7900         MOV       R1,#0x0
   \   00018B   7402         MOV       A,#0x2
   \   00018D   12....       LCALL     ?XSTACK_DISP101_8
   \   000190   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    645          
    646              // Initialize NV items for all Keys: NWK, APS, TCLK and Master
    647              ZDSecMgrInitNVKeyTables( setDefault );
   \   000193                ; Setup parameters for call to function ZDSecMgrInitNVKeyTables
   \   000193   EE           MOV       A,R6
   \   000194   F9           MOV       R1,A
   \   000195   12....       LCALL     `??ZDSecMgrInitNVKeyTables::?relay`; Banked call to: ZDSecMgrInitNVKeyTables
    648            }
    649          #endif // NONWK
    650          
    651            // Clear the Config State default
    652            if ( setDefault )
   \   000198   EE           MOV       A,R6
   \   000199   A2E0         MOV       C,0xE0 /* A   */.0
   \   00019B   5007         JNC       ??zgInit_7
    653            {
    654              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   00019D                ; Setup parameters for call to function zgWriteStartupOptions
   \   00019D   7A01         MOV       R2,#0x1
   \   00019F   7900         MOV       R1,#0x0
   \   0001A1   12....       LCALL     `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    655            }
    656            
    657            return ( ZSUCCESS );
   \                     ??zgInit_7:
   \   0001A4   7900         MOV       R1,#0x0
   \   0001A6   7412         MOV       A,#0x12
   \   0001A8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AB   7F07         MOV       R7,#0x7
   \   0001AD   02....       LJMP      ?BANKED_LEAVE_XDATA
    658          }
    659          
    660          /*********************************************************************
    661           * @fn          zgInitItems
    662           *
    663           * @brief       Initializes RAM variables from NV.  If NV items don't
    664           *              exist, then the NV is initialize with what is in RAM
    665           *              variables.
    666           *
    667           * @param       none
    668           *
    669           * @return      none
    670           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          void zgInitItems( uint8 setDefault )
   \                     zgInitItems:
    672          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V3,R1
    673            uint8  i = 0;
   \   000007   75..00       MOV       ?V2,#0x0
    674          
    675            if ( ZG_BUILD_COORDINATOR_TYPE && ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY ) )
   \   00000A   90....       MOV       DPTR,#zgApsLinkKeyType
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   90....       MOV       DPTR,#zgUseDefaultTCLK
   \   000011   7003         JNZ       ??zgInitItems_0
    676            {
    677              zgUseDefaultTCLK = FALSE;
   \   000013   E4           CLR       A
   \   000014   8002         SJMP      ??zgInitItems_1
    678            }
    679            else
    680            {
    681              // Most of the time default TCLK will be used
    682              zgUseDefaultTCLK = TRUE;
   \                     ??zgInitItems_0:
   \   000016   7401         MOV       A,#0x1
   \                     ??zgInitItems_1:
   \   000018   F0           MOVX      @DPTR,A
   \   000019   801A         SJMP      ??zgInitItems_2
    683            }
    684          
    685            while ( zgItemTable[i].id != 0x00 )
    686            {
   \                     ??zgInitItems_3:
   \   00001B                ; Setup parameters for call to function osal_nv_read
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   7C00         MOV       R4,#0x0
   \   000025   7D00         MOV       R5,#0x0
   \   000027   EE           MOV       A,R6
   \   000028   FA           MOV       R2,A
   \   000029   EF           MOV       A,R7
   \   00002A   FB           MOV       R3,A
   \   00002B   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \                     ??zgInitItems_4:
   \   00002E   7404         MOV       A,#0x4
   \   000030   12....       LCALL     ?DEALLOC_XSTACK8
    687              // Initialize the item
    688              zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
    689          
    690              // Move on to the next item
    691              i++;
   \                     ??zgInitItems_5:
   \   000033   05..         INC       ?V2
   \                     ??zgInitItems_2:
   \   000035   E5..         MOV       A,?V2
   \   000037   75F006       MOV       B,#0x6
   \   00003A   A4           MUL       AB
   \   00003B   F8           MOV       R0,A
   \   00003C   A9F0         MOV       R1,B
   \   00003E   74..         MOV       A,#zgItemTable & 0xff
   \   000040   28           ADD       A,R0
   \   000041   F8           MOV       R0,A
   \   000042   74..         MOV       A,#(zgItemTable >> 8) & 0xff
   \   000044   39           ADDC      A,R1
   \   000045   F9           MOV       R1,A
   \   000046   8882         MOV       DPL,R0
   \   000048   8983         MOV       DPH,R1
   \   00004A   E4           CLR       A
   \   00004B   93           MOVC      A,@A+DPTR
   \   00004C   FA           MOV       R2,A
   \   00004D   7401         MOV       A,#0x1
   \   00004F   93           MOVC      A,@A+DPTR
   \   000050   FB           MOV       R3,A
   \   000051   EA           MOV       A,R2
   \   000052   4B           ORL       A,R3
   \   000053   606E         JZ        ??zgInitItems_6
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   E4           CLR       A
   \   00005A   93           MOVC      A,@A+DPTR
   \   00005B   F5..         MOV       ?V4,A
   \   00005D   7401         MOV       A,#0x1
   \   00005F   93           MOVC      A,@A+DPTR
   \   000060   F5..         MOV       ?V5,A
   \   000062   8882         MOV       DPL,R0
   \   000064   8983         MOV       DPH,R1
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E4           CLR       A
   \   000069   93           MOVC      A,@A+DPTR
   \   00006A   C0E0         PUSH      A
   \   00006C   7401         MOV       A,#0x1
   \   00006E   93           MOVC      A,@A+DPTR
   \   00006F   F583         MOV       DPH,A
   \   000071   D082         POP       DPL
   \   000073   8582..       MOV       ?V0,DPL
   \   000076   8583..       MOV       ?V1,DPH
   \   000079   8882         MOV       DPL,R0
   \   00007B   8983         MOV       DPH,R1
   \   00007D   E4           CLR       A
   \   00007E   93           MOVC      A,@A+DPTR
   \   00007F   C0E0         PUSH      A
   \   000081   7401         MOV       A,#0x1
   \   000083   93           MOVC      A,@A+DPTR
   \   000084   F583         MOV       DPH,A
   \   000086   D082         POP       DPL
   \   000088   AE82         MOV       R6,DPL
   \   00008A   AF83         MOV       R7,DPH
   \   00008C                ; Setup parameters for call to function osal_nv_item_init
   \   00008C   78..         MOV       R0,#?V4
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000091   AC..         MOV       R4,?V0
   \   000093   AD..         MOV       R5,?V1
   \   000095   EE           MOV       A,R6
   \   000096   FA           MOV       R2,A
   \   000097   EF           MOV       A,R7
   \   000098   FB           MOV       R3,A
   \   000099   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00009C   7402         MOV       A,#0x2
   \   00009E   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A1   E9           MOV       A,R1
   \   0000A2   708F         JNZ       ??zgInitItems_5
   \   0000A4   E5..         MOV       A,?V3
   \   0000A6   78..         MOV       R0,#?V4
   \   0000A8   7003         JNZ       $+5
   \   0000AA   02....       LJMP      ??zgInitItems_3 & 0xFFFF
   \   0000AD                ; Setup parameters for call to function osal_nv_write
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B0   78..         MOV       R0,#?V0
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B5   7C00         MOV       R4,#0x0
   \   0000B7   7D00         MOV       R5,#0x0
   \   0000B9   EE           MOV       A,R6
   \   0000BA   FA           MOV       R2,A
   \   0000BB   EF           MOV       A,R7
   \   0000BC   FB           MOV       R3,A
   \   0000BD   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000C0   02....       LJMP      ??zgInitItems_4 & 0xFFFF
    692            }
    693          }
   \                     ??zgInitItems_6:
   \   0000C3   7F06         MOV       R7,#0x6
   \   0000C5   02....       LJMP      ?BANKED_LEAVE_XDATA
    694          
    695          /*********************************************************************
    696           * @fn          zgReadStartupOptions
    697           *
    698           * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
    699           *
    700           * @param       none
    701           *
    702           * @return      the ZCD_NV_STARTUP_OPTION NV item
    703           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    704          uint8 zgReadStartupOptions( void )
   \                     zgReadStartupOptions:
    705          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    706            // Default to Use Config State and Use Network State
    707            uint8 startupOption = 0;
   \   00000A   12....       LCALL     ?Subroutine1 & 0xFFFF
    708          
    709            // This should have been done in ZMain.c, but just in case.
    710            if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
    711                                        sizeof(startupOption),
    712                                        &startupOption ) == ZSUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   00000D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000010   7C01         MOV       R4,#0x1
   \   000012   7D00         MOV       R5,#0x0
   \   000014   7A03         MOV       R2,#0x3
   \   000016   7B00         MOV       R3,#0x0
   \   000018   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001B   7402         MOV       A,#0x2
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000020   E9           MOV       A,R1
   \   000021   7020         JNZ       ??zgReadStartupOptions_0
    713            {
    714              // Read saved startup control
    715              osal_nv_read( ZCD_NV_STARTUP_OPTION,
    716                            0,
    717                            sizeof( startupOption ),
    718                            &startupOption);
   \   000023                ; Setup parameters for call to function osal_nv_read
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000028   75..01       MOV       ?V0,#0x1
   \   00002B   75..00       MOV       ?V1,#0x0
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV       R4,#0x0
   \   000035   7D00         MOV       R5,#0x0
   \   000037   7A03         MOV       R2,#0x3
   \   000039   7B00         MOV       R3,#0x0
   \   00003B   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003E   7404         MOV       A,#0x4
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
    719            }
    720            return ( startupOption );
   \                     ??zgReadStartupOptions_0:
   \   000043   85..82       MOV       DPL,?XSP + 0
   \   000046   85..83       MOV       DPH,?XSP + 1
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   F9           MOV       R1,A
   \   00004B                REQUIRE ?Subroutine0
   \   00004B                ; // Fall through to label ?Subroutine0
    721          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005   7F02         MOV       R7,#0x2
   \   000007   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E4           CLR       A
   \   000007                REQUIRE ??Subroutine2_0
   \   000007                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_nv_item_init
   \   000001                ; Setup parameters for call to function osal_nv_read
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
    722          
    723          /*********************************************************************
    724           * @fn          zgWriteStartupOptions
    725           *
    726           * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
    727           *
    728           * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
    729           *               clear bit. The set bit is an OR operation, and the
    730           *               clear bit is an AND ~(bitOptions) operation.
    731           *
    732           * @param       bitOptions - which bits to perform action on:
    733           *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
    734           *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    735           *
    736           * @return      ZSUCCESS if successful
    737           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    738          uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
   \                     zgWriteStartupOptions:
    739          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   EA           MOV       A,R2
   \   00000D   FF           MOV       R7,A
    740            uint8 status;
    741            uint8 startupOptions = 0;
   \   00000E   12....       LCALL     ?Subroutine1 & 0xFFFF
    742          
    743            status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
    744                          0,
    745                          sizeof( startupOptions ),
    746                          &startupOptions );
   \                     ??CrossCallReturnLabel_1:
   \   000011   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000014   75..01       MOV       ?V0,#0x1
   \   000017   75..00       MOV       ?V1,#0x0
   \   00001A   78..         MOV       R0,#?V0
   \   00001C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001F   7C00         MOV       R4,#0x0
   \   000021   7D00         MOV       R5,#0x0
   \   000023   7A03         MOV       R2,#0x3
   \   000025   7B00         MOV       R3,#0x0
   \   000027   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002A   7404         MOV       A,#0x4
   \   00002C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002F   E9           MOV       A,R1
   \   000030   F9           MOV       R1,A
    747          
    748            if ( status == ZSUCCESS )
   \   000031   703E         JNZ       ??zgWriteStartupOptions_0
    749            {
    750              if ( action == ZG_STARTUP_SET )
   \   000033   74FF         MOV       A,#-0x1
   \   000035   6E           XRL       A,R6
   \   000036   700A         JNZ       ??zgWriteStartupOptions_1
    751              {
    752                // Set bits
    753                startupOptions |= bitOptions;
   \   000038   85..82       MOV       DPL,?XSP + 0
   \   00003B   85..83       MOV       DPH,?XSP + 1
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   4F           ORL       A,R7
   \   000040   800C         SJMP      ??zgWriteStartupOptions_2
    754              }
    755              else
    756              {
    757                // Clear bits
    758                startupOptions &= (bitOptions ^ 0xFF);
   \                     ??zgWriteStartupOptions_1:
   \   000042   74FF         MOV       A,#-0x1
   \   000044   6F           XRL       A,R7
   \   000045   F8           MOV       R0,A
   \   000046   85..82       MOV       DPL,?XSP + 0
   \   000049   85..83       MOV       DPH,?XSP + 1
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   58           ANL       A,R0
    759              }
    760          
    761              // Changed?
    762              status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
    763                           0,
    764                           sizeof( startupOptions ),
    765                           &startupOptions );
    766            }
   \                     ??zgWriteStartupOptions_2:
   \   00004E   12....       LCALL     ??Subroutine2_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000051   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000054   75..01       MOV       ?V0,#0x1
   \   000057   75..00       MOV       ?V1,#0x0
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005F   7C00         MOV       R4,#0x0
   \   000061   7D00         MOV       R5,#0x0
   \   000063   7A03         MOV       R2,#0x3
   \   000065   7B00         MOV       R3,#0x0
   \   000067   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00006A   7404         MOV       A,#0x4
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006F   E9           MOV       A,R1
   \   000070   F9           MOV       R1,A
    767          
    768            return ( status );
   \                     ??zgWriteStartupOptions_0:
   \   000071   02....       LJMP      ?Subroutine0 & 0xFFFF
    769          }
    770          
    771          /*********************************************************************
    772           * @fn          zgSetItem
    773           *
    774           * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
    775           *
    776           * @param       id - NV ID
    777           *              len - NV item length
    778           *              buf - pointer to the input buffer
    779           *
    780           * @return      none
    781           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    782          void zgSetItem( uint16 id, uint16 len, void *buf )
   \                     zgSetItem:
    783          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    784          
    785            uint8  i = 0;
   \   000005   75..00       MOV       ?V0,#0x0
   \   000008   8002         SJMP      ??zgSetItem_0
    786          
    787            // Look up the NV item table
    788            while ( zgItemTable[i].id != 0x00 )
    789            {
    790              if( zgItemTable[i].id == id )
    791              {
    792                if ( zgItemTable[i].len == len )
    793                {
    794                  osal_memcpy( zgItemTable[i].buf, buf, len );
    795                }
    796                break;
    797              }
    798              // Move on to the next item
    799              i++;
   \                     ??zgSetItem_1:
   \   00000A   05..         INC       ?V0
   \                     ??zgSetItem_0:
   \   00000C   E5..         MOV       A,?V0
   \   00000E   75F006       MOV       B,#0x6
   \   000011   A4           MUL       AB
   \   000012   F8           MOV       R0,A
   \   000013   A9F0         MOV       R1,B
   \   000015   74..         MOV       A,#zgItemTable & 0xff
   \   000017   28           ADD       A,R0
   \   000018   F8           MOV       R0,A
   \   000019   74..         MOV       A,#(zgItemTable >> 8) & 0xff
   \   00001B   39           ADDC      A,R1
   \   00001C   F9           MOV       R1,A
   \   00001D   E8           MOV       A,R0
   \   00001E   FE           MOV       R6,A
   \   00001F   E9           MOV       A,R1
   \   000020   FF           MOV       R7,A
   \   000021   8E82         MOV       DPL,R6
   \   000023   8F83         MOV       DPH,R7
   \   000025   E4           CLR       A
   \   000026   93           MOVC      A,@A+DPTR
   \   000027   C0E0         PUSH      A
   \   000029   7401         MOV       A,#0x1
   \   00002B   93           MOVC      A,@A+DPTR
   \   00002C   F583         MOV       DPH,A
   \   00002E   D082         POP       DPL
   \   000030   A882         MOV       R0,DPL
   \   000032   A983         MOV       R1,DPH
   \   000034   E8           MOV       A,R0
   \   000035   49           ORL       A,R1
   \   000036   6048         JZ        ??zgSetItem_2
   \   000038   EA           MOV       A,R2
   \   000039   68           XRL       A,R0
   \   00003A   7002         JNZ       ??zgSetItem_3
   \   00003C   EB           MOV       A,R3
   \   00003D   69           XRL       A,R1
   \                     ??zgSetItem_3:
   \   00003E   70CA         JNZ       ??zgSetItem_1
   \   000040   8E82         MOV       DPL,R6
   \   000042   8F83         MOV       DPH,R7
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   E4           CLR       A
   \   000047   93           MOVC      A,@A+DPTR
   \   000048   F8           MOV       R0,A
   \   000049   7401         MOV       A,#0x1
   \   00004B   93           MOVC      A,@A+DPTR
   \   00004C   F9           MOV       R1,A
   \   00004D   EC           MOV       A,R4
   \   00004E   68           XRL       A,R0
   \   00004F   7002         JNZ       ??zgSetItem_4
   \   000051   ED           MOV       A,R5
   \   000052   69           XRL       A,R1
   \                     ??zgSetItem_4:
   \   000053   702B         JNZ       ??zgSetItem_2
   \   000055                ; Setup parameters for call to function osal_memcpy
   \   000055   740B         MOV       A,#0xb
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   F5..         MOV       ?V0,A
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F5..         MOV       ?V1,A
   \   000061   75..00       MOV       ?V2,#0x0
   \   000064   78..         MOV       R0,#?V0
   \   000066   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000069   8E82         MOV       DPL,R6
   \   00006B   8F83         MOV       DPH,R7
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   A3           INC       DPTR
   \   000070   A3           INC       DPTR
   \   000071   E4           CLR       A
   \   000072   93           MOVC      A,@A+DPTR
   \   000073   FA           MOV       R2,A
   \   000074   7401         MOV       A,#0x1
   \   000076   93           MOVC      A,@A+DPTR
   \   000077   FB           MOV       R3,A
   \   000078   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007B   7403         MOV       A,#0x3
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
    800            }
    801          }
   \                     ??zgSetItem_2:
   \   000080   7F03         MOV       R7,#0x3
   \   000082   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPollRate>`:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSavedPollRate>`:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgQueuedPollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgResponsePollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRejoinPollRate>`:
   \   000000   B801         DW 440

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultRejoinBackoff>`:
   \   000000   A0BB0D00     DD 900000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultRejoinScan>`:
   \   000000   A0BB0D00     DD 900000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxDataRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxPollFailureRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStackProfile>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgIndirectMsgTimeout>`:
   \   000000   07           DB 7

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurityMode>`:
   \   000000   04           DB 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurePermitJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgAllowInstallCodes>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgAllowRemoteTCPolicyChange>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteDiscoveryTime>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteExpiryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxBcastRetires>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPassiveAckTimeout>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBcastDeliveryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConcentratorRadius>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkSrcRtgExpiryTime>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkLeaveRequestAllowed>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkParentInformation>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkEndDeviceTimeoutDefault`:
   \   000000   08           DB 8

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkEndDeviceLeaveTimeoutDe`:
   \   000000   09           DB 9

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgEndDeviceTimeoutValue>`:
   \   000000   08           DB 8

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgChildAgingEnable>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscMaxFrameRetries>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscAckWaitDurationPolled>`:
   \   000000   B80B         DW 3000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsAckWaitMultiplier>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsDefaultMaxBindingTime>`:
   \   000000   803E         DW 16000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsUseInsecureJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsNonMemberRadius>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkCommissionedNwkAddr>`:
   \   000000   FEFF         DW 65534

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscDupRejTimeoutInc>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscDupRejTimeoutCount>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsMinDupRejTableSize>`:
   \   000000   0500         DW 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsLinkKeyType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConfigPANID>`:
   \   000000   FFFF         DW 65535

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStartDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgZdoDirectCB>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMinTransmissions>`:
   \   000000   14           DB 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSapiEndpoint>`:
   \   000000   E0           DB 224

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInitItems::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInitItems

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgReadStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgReadStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgWriteStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgWriteStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgSetItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgSetItem
    802          
    803          #ifndef NONWK
    804          /*********************************************************************
    805           * @fn       zgPreconfigKeyInit()
    806           *
    807           * @brief
    808           *
    809           *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
    810           *   write the system default (value passed in) into NV memory. But if
    811           *   it exists do not overwrite it.
    812           *
    813           *   Also, if setDefault is TRUE and the item exists, we will write
    814           *   the default value to NV space.
    815           *
    816           * @param   setDefault - TRUE to set default
    817           *
    818           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    819           *          exist in NV, NV_OPER_FAILED if failure.
    820           */
    821          static uint8 zgPreconfigKeyInit( uint8 setDefault )
    822          {
    823            uint8              zgPreConfigKey[SEC_KEY_LEN];
    824            uint8              status;
    825            
    826            //NWK KEY
    827            //if nwk key is set to zeros, then generate a random key and use it
    828            osal_memset(zgPreConfigKey,0,SEC_KEY_LEN);
    829            
    830          #if (ZG_BUILD_RTR_TYPE)
    831            if(ZG_DEVICE_RTR_TYPE)
    832            {  
    833              if(osal_memcmp(defaultKey, zgPreConfigKey,SEC_KEY_LEN))
    834              {
    835                ZDSecMgrGenerateRndKey(zgPreConfigKey);
    836              }
    837              else
    838              {
    839                // Initialize the Pre-Configured Key to the default key
    840                osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
    841              }
    842            }
    843          #endif
    844            
    845            
    846            // If the item doesn't exist in NV memory, create and initialize it
    847            status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
    848            if ( status == ZSUCCESS )
    849            {
    850              if ( setDefault )
    851              {
    852                // Write the default value back to NV
    853                status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
    854              }
    855            }
    856            
    857            // clear local copy of default key
    858            osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    859          
    860            return (status);
    861          }
    862          #endif
    863          
    864          /*********************************************************************
    865           * @fn       zgUpgradeNVItems()
    866           *
    867           * @brief
    868           *
    869           *   Function that upgrades NV Items that have changed.
    870           *
    871           * @param   none
    872           *
    873           * @return  none
    874           */
    875          static void zgUpgradeNVItems( void )
    876          {
    877          #if defined ( ZCD_NV_POLL_RATE_OLD16 )
    878            {
    879              // This conversion will only happen if the old poll rate exists and
    880              // the new poll rate doesn't exist.  It will read the old poll rate,
    881              // convert it to the new poll rate, create the new poll rate NV item,
    882              // then delete the old poll rate NV item.
    883              uint16 oldNvLen;
    884              uint16 newNvLen;
    885          
    886              // Use the length of the NV items to determine if they exist
    887              oldNvLen = osal_nv_item_len( ZCD_NV_POLL_RATE_OLD16 );
    888              newNvLen = osal_nv_item_len( ZCD_NV_POLL_RATE );
    889              if ( (newNvLen == 0) && (oldNvLen == sizeof ( uint16 )) )
    890              {
    891                // The old poll rate exists, so read it and convert to the new 32 bit poll rate
    892                uint16 oldPollRate;
    893                osal_nv_read( ZCD_NV_POLL_RATE_OLD16, 0, sizeof(uint16), &oldPollRate );
    894                zgPollRate = (uint32)oldPollRate;
    895                osal_nv_item_init( ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate );
    896                osal_nv_delete( ZCD_NV_POLL_RATE_OLD16, oldNvLen );
    897              }
    898            }
    899          #endif // ZCD_NV_POLL_RATE_OLD16
    900          }
    901          
    902          /*********************************************************************
    903          *********************************************************************/

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
     37   zgInit
       33   -> ZDSecMgrGenerateRndKey
       33   -> ZDSecMgrInitNVKeyTables
       33   -> ZMacGetReq
       33   -> bdb_setNodeIsOnANetwork
       36   -> osal_memcmp
       36   -> osal_memcpy
       33   -> osal_memset
       33   -> osal_nv_delete
       35   -> osal_nv_item_init
       33   -> osal_nv_item_len
       37   -> osal_nv_read
       37   -> osal_nv_write
       33   -> zgInitItems
       33   -> zgReadStartupOptions
       33   -> zgWriteStartupOptions
     51   zgInitItems
       16   -> osal_nv_item_init
       18   -> osal_nv_read
       18   -> osal_nv_write
     48   zgReadStartupOptions
       13   -> osal_nv_item_init
       15   -> osal_nv_read
     16   zgSetItem
       14   -> osal_memcpy
     48   zgWriteStartupOptions
       15   -> osal_nv_read
       15   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for zgAllowInstallCodes>
       1  ?<Initializer for zgAllowRemoteTCPolicyChange>
       1  ?<Initializer for zgApsAckWaitMultiplier>
       2  ?<Initializer for zgApsDefaultMaxBindingTime>
       1  ?<Initializer for zgApsLinkKeyType>
       2  ?<Initializer for zgApsMinDupRejTableSize>
       1  ?<Initializer for zgApsNonMemberRadius>
       1  ?<Initializer for zgApsUseInsecureJoin>
       2  ?<Initializer for zgApscAckWaitDurationPolled>
       1  ?<Initializer for zgApscDupRejTimeoutCount>
       2  ?<Initializer for zgApscDupRejTimeoutInc>
       1  ?<Initializer for zgApscMaxFrameRetries>
       1  ?<Initializer for zgBcastDeliveryTime>
       1  ?<Initializer for zgChildAgingEnable>
       1  ?<Initializer for zgConcentratorRadius>
       2  ?<Initializer for zgConfigPANID>
       4  ?<Initializer for zgDefaultRejoinBackoff>
       4  ?<Initializer for zgDefaultRejoinScan>
       1  ?<Initializer for zgEndDeviceTimeoutValue>
       1  ?<Initializer for zgIndirectMsgTimeout>
       1  ?<Initializer for zgMaxBcastRetires>
       1  ?<Initializer for zgMaxDataRetries>
       1  ?<Initializer for zgMaxPollFailureRetries>
       2  ?<Initializer for zgNwkCommissionedNwkAddr>
       1  ?<Initializer for zgNwkEndDeviceLeaveTimeoutDe
       1  ?<Initializer for zgNwkEndDeviceTimeoutDefault
       1  ?<Initializer for zgNwkLeaveRequestAllowed>
       1  ?<Initializer for zgNwkMgrMinTransmissions>
       1  ?<Initializer for zgNwkMgrMode>
       1  ?<Initializer for zgNwkMode>
       1  ?<Initializer for zgNwkParentInformation>
       1  ?<Initializer for zgNwkSrcRtgExpiryTime>
       1  ?<Initializer for zgPassiveAckTimeout>
       4  ?<Initializer for zgPollRate>
       2  ?<Initializer for zgQueuedPollRate>
       2  ?<Initializer for zgRejoinPollRate>
       2  ?<Initializer for zgResponsePollRate>
       1  ?<Initializer for zgRouteDiscoveryTime>
       1  ?<Initializer for zgRouteExpiryTime>
       1  ?<Initializer for zgSapiEndpoint>
       4  ?<Initializer for zgSavedPollRate>
       1  ?<Initializer for zgSecurePermitJoin>
       1  ?<Initializer for zgSecurityMode>
       1  ?<Initializer for zgStackProfile>
       1  ?<Initializer for zgStartDelay>
       1  ?<Initializer for zgZdoDirectCB>
      12  ??Subroutine2_0
      10  ?Subroutine0
       7  ?Subroutine1
       1  zTouchLinkNwkStartRtr
       1  zgAllowInstallCodes
       1  zgAllowRejoins
       1  zgAllowRemoteTCPolicyChange
       1  zgApsAckWaitMultiplier
       1  zgApsAllowR19Sec
       2  zgApsDefaultMaxBindingTime
       1  zgApsLinkKeyType
       2  zgApsMinDupRejTableSize
       1  zgApsNonMemberRadius
       8  zgApsTrustCenterAddr
       8  zgApsUseExtendedPANID
       1  zgApsUseInsecureJoin
       2  zgApscAckWaitDurationPolled
       1  zgApscDupRejTimeoutCount
       2  zgApscDupRejTimeoutInc
       1  zgApscMaxFrameRetries
       1  zgBcastDeliveryTime
       1  zgChildAgingEnable
       1  zgConcentratorDiscoveryTime
       1  zgConcentratorEnable
       1  zgConcentratorRC
       1  zgConcentratorRadius
       2  zgConfigPANID
       4  zgDefaultChannelList
       4  zgDefaultRejoinBackoff
       4  zgDefaultRejoinScan
       1  zgDeviceLogicalType
       1  zgEndDeviceConfiguration
       1  zgEndDeviceTimeoutValue
       8  zgExtendedPANID
       1  zgIndirectMsgTimeout
     432  zgInit
       6  zgInit::?relay
     200  zgInitItems
       6  zgInitItems::?relay
     330  zgItemTable
       1  zgMaxBcastRetires
       1  zgMaxDataRetries
       1  zgMaxPollFailureRetries
       2  zgNwkCommissionedNwkAddr
       1  zgNwkEndDeviceLeaveTimeoutDefault
       1  zgNwkEndDeviceTimeoutDefault
       1  zgNwkLeaveRequestAllowed
       1  zgNwkMgrMinTransmissions
       1  zgNwkMgrMode
       1  zgNwkMode
       1  zgNwkParentInformation
       1  zgNwkSrcRtgExpiryTime
       1  zgPassiveAckTimeout
       4  zgPollRate
       1  zgPreConfigKeys
       2  zgQueuedPollRate
      75  zgReadStartupOptions
       6  zgReadStartupOptions::?relay
       2  zgRejoinPollRate
       2  zgResponsePollRate
       1  zgRouteDiscoveryTime
       1  zgRouteExpiryTime
       1  zgRouterOffAssocCleanup
       1  zgSapiEndpoint
       4  zgSavedPollRate
       1  zgSecurePermitJoin
       1  zgSecurityMode
     133  zgSetItem
       6  zgSetItem::?relay
       1  zgStackProfile
       1  zgStartDelay
       1  zgSwitchCoordKey
       1  zgSwitchCoordKeyIndex
       1  zgUseDefaultTCLK
     116  zgWriteStartupOptions
       6  zgWriteStartupOptions::?relay
       1  zgZdoDirectCB

 
 985 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 330 bytes in segment CODE_C
  67 bytes in segment XDATA_I
  67 bytes in segment XDATA_ID
  41 bytes in segment XDATA_Z
 
 427 bytes of CODE     memory
 985 bytes of HUGECODE memory
 108 bytes of XDATA    memory

Errors: none
Warnings: none
