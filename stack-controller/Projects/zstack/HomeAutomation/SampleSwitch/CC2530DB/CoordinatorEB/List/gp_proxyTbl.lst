###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               22/Nov/2023  15:42:40
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\fuzzing-coordinator-response-collection\Components\stack\GP\gp_proxyTbl.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EW98B0.tmp
#        (D:\fuzzing-coordinator-response-collection\Components\stack\GP\gp_proxyTbl.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
#        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
#        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
#        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
#        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\gp_proxyTbl.lst
#    Object file        =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\gp_proxyTbl.r51
#
###############################################################################

D:\fuzzing-coordinator-response-collection\Components\stack\GP\gp_proxyTbl.c
      1          /**************************************************************************************************
      2            Filename:       gp_proxyTbl.c
      3            Revised:        $Date: 2016-02-25 11:51:49 -0700 (Thu, 25 Feb 2016) $
      4            Revision:       $Revision: - $
      5          
      6            Description:    This file contains the implementation of the cGP stub.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45             
     46          #include "ZGlobals.h"
     47          #include "ZDObject.h"
     48          #include "nwk_util.h"   
     49          #include "ZComDef.h"
     50          #include "cGP_stub.h"
     51          #include "gp_common.h"
     52          #include "gp_interface.h"
     53          #include "zcl_green_power.h"
     54          #include "OSAL.h"
     55          
     56          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     57             
     58           /*********************************************************************
     59           * MACROS
     60           */ 
     61          
     62           /*********************************************************************
     63           * CONSTANTS
     64           */
     65          
     66          /*********************************************************************
     67           * TYPEDEFS
     68           */
     69             
     70           /*********************************************************************
     71           * GLOBAL VARIABLES
     72           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          ZDO_DeviceAnnce_t aliasConflictAnnce;
   \                     aliasConflictAnnce:
   \   000000                DS 11
   \   00000B                REQUIRE __INIT_XDATA_Z
     74          
     75           /*********************************************************************
     76           * EXTERNAL VARIABLES
     77           */
     78          
     79          /*********************************************************************
     80           * EXTERNAL FUNCTIONS
     81           */
     82          
     83          /*********************************************************************
     84           * LOCAL VARIABLES
     85           */
     86          
     87           /*********************************************************************
     88           * LOCAL FUNCTIONS
     89           */
     90          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen );
     91          static uint8 pt_getAlias( uint8* pNew );
     92          static uint8 pt_getSecurity( uint8* pNew );
     93          static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew );
     94          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink );
     95          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr );
     96          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew );
     97          
     98          /*********************************************************************
     99           * PUBLIC FUNCTIONS
    100           *********************************************************************/
    101          
    102          /*********************************************************************
    103           * @fn          pt_ZclReadGetProxyEntry
    104           *
    105           * @brief       Populate the given item data
    106           *
    107           * @param       nvId - NV entry to read
    108           *              pData - Pointer to OTA message payload
    109           *              len - Lenght of the payload
    110           *
    111           * @return
    112           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          uint8 pt_ZclReadGetProxyEntry( uint16 nvId, uint8* pData, uint8* len )
   \                     pt_ZclReadGetProxyEntry:
    114          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 151
   \   000005   7469         MOV       A,#0x69
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
    115            uint8  freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000014   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   000017   748D         MOV       A,#-0x73
   \   000019   12....       LCALL     ?XSTACK_DISP102_8
   \   00001C   740A         MOV       A,#0xa
   \   00001E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    116            uint8  currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000021   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
   \   000024   740B         MOV       A,#0xb
   \   000026   12....       LCALL     ?XSTACK_DISP102_8
   \   000029   7441         MOV       A,#0x41
   \   00002B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    117            uint8  gpdEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00002E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_2`
   \   000031   7441         MOV       A,#0x41
   \   000033   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    118            uint8  gpdEntryLen = 0;
   \   000036   85..82       MOV       DPL,?XSP + 0
   \   000039   85..83       MOV       DPH,?XSP + 1
   \   00003C   F0           MOVX      @DPTR,A
    119            uint8  status;
    120            uint16 options;
    121          
    122            status = gp_getProxyTableByIndex( nvId, currEntry );
   \   00003D                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00003D   740B         MOV       A,#0xb
   \   00003F   12....       LCALL     ?XSTACK_DISP102_8
   \   000042   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000045   E9           MOV       A,R1
   \   000046   F5..         MOV       ?V7,A
    123          
    124            // if FAIL or Empty
    125            if ( ( status == NV_OPER_FAILED ) || ( status == NV_INVALID_DATA ) )
   \   000048   740A         MOV       A,#0xa
   \   00004A   65..         XRL       A,?V7
   \   00004C   6006         JZ        ??pt_ZclReadGetProxyEntry_0
   \   00004E   740D         MOV       A,#0xd
   \   000050   65..         XRL       A,?V7
   \   000052   7003         JNZ       ??pt_ZclReadGetProxyEntry_1
    126            {
    127              // FAIL
    128              return status;
   \                     ??pt_ZclReadGetProxyEntry_0:
   \   000054   02....       LJMP      ??pt_ZclReadGetProxyEntry_2 & 0xFFFF
    129            }
    130          
    131            osal_memcpy( &gpdEntry[gpdEntryLen], &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \                     ??pt_ZclReadGetProxyEntry_1:
   \   000057   740B         MOV       A,#0xb
   \   000059   12....       LCALL     ?XSTACK_DISP100_8
   \   00005C   88..         MOV       ?V0,R0
   \   00005E   89..         MOV       ?V1,R1
   \   000060   75..00       MOV       ?V2,#0x0
   \   000063                ; Setup parameters for call to function osal_memcpy
   \   000063   78..         MOV       R0,#?V0
   \   000065   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000068   7C02         MOV       R4,#0x2
   \   00006A   7D00         MOV       R5,#0x0
   \   00006C   7403         MOV       A,#0x3
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F8           MOV       R0,A
   \   000073   744F         MOV       A,#0x4f
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00007B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007E   7403         MOV       A,#0x3
   \   000080   12....       LCALL     ?DEALLOC_XSTACK8
    132            osal_memcpy( &options, &currEntry[PROXY_TBL_ENTRY_OPT], sizeof ( uint16 ) );
   \   000083                ; Setup parameters for call to function osal_memcpy
   \   000083   78..         MOV       R0,#?V0
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000088   7C02         MOV       R4,#0x2
   \   00008A   7D00         MOV       R5,#0x0
   \   00008C   7409         MOV       A,#0x9
   \   00008E   12....       LCALL     ?XSTACK_DISP101_8
   \   000091   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000094   7403         MOV       A,#0x3
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
    133            gpdEntryLen += sizeof ( uint16 );
   \   000099   85..82       MOV       DPL,?XSP + 0
   \   00009C   85..83       MOV       DPH,?XSP + 1
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   2402         ADD       A,#0x2
   \   0000A2   F0           MOVX      @DPTR,A
    134            
    135            // Options bitfield
    136            // If Application Id bitfield is 0b000
    137            if( GP_IS_APPLICATION_ID_GPD( options ) )
   \   0000A3   7406         MOV       A,#0x6
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   5407         ANL       A,#0x7
   \   0000AB   F8           MOV       R0,A
   \   0000AC   7018         JNZ       ??pt_ZclReadGetProxyEntry_3
    138            {        
    139              // Populate GPD ID
    140              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   0000AE                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000AE   A8..         MOV       R0,?XSP + 0
   \   0000B0   A9..         MOV       R1,?XSP + 1
   \   0000B2   88..         MOV       ?V0,R0
   \   0000B4   89..         MOV       ?V1,R1
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BB   744E         MOV       A,#0x4e
   \   0000BD   12....       LCALL     ?XSTACK_DISP102_8
   \   0000C0   7904         MOV       R1,#0x4
   \   0000C2   7413         MOV       A,#0x13
   \   0000C4   8038         SJMP      ??pt_ZclReadGetProxyEntry_4
    141            }
    142            // If Application Id bitfield is 0b010
    143            else if( GP_IS_APPLICATION_ID_IEEE( options ) )
   \                     ??pt_ZclReadGetProxyEntry_3:
   \   0000C6   7402         MOV       A,#0x2
   \   0000C8   68           XRL       A,R0
   \   0000C9   7042         JNZ       ??pt_ZclReadGetProxyEntry_5
    144            {   
    145              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN, gpdEntry, &gpdEntryLen );
   \   0000CB                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000CB   A8..         MOV       R0,?XSP + 0
   \   0000CD   A9..         MOV       R1,?XSP + 1
   \   0000CF   88..         MOV       ?V0,R0
   \   0000D1   89..         MOV       ?V1,R1
   \   0000D3   78..         MOV       R0,#?V0
   \   0000D5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D8   744E         MOV       A,#0x4e
   \   0000DA   12....       LCALL     ?XSTACK_DISP102_8
   \   0000DD   7908         MOV       R1,#0x8
   \   0000DF   740F         MOV       A,#0xf
   \   0000E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E4   AA82         MOV       R2,DPL
   \   0000E6   AB83         MOV       R3,DPH
   \   0000E8   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000EB   7402         MOV       A,#0x2
   \   0000ED   12....       LCALL     ?DEALLOC_XSTACK8
    146              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_EP], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   0000F0                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000F0   78..         MOV       R0,#?V0
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F5   744E         MOV       A,#0x4e
   \   0000F7   12....       LCALL     ?XSTACK_DISP102_8
   \   0000FA   7901         MOV       R1,#0x1
   \   0000FC   7417         MOV       A,#0x17
   \                     ??pt_ZclReadGetProxyEntry_4:
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   AA82         MOV       R2,DPL
   \   000103   AB83         MOV       R3,DPH
   \   000105   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000108   7402         MOV       A,#0x2
   \   00010A   12....       LCALL     ?DEALLOC_XSTACK8
    147            }
    148            
    149            if ( PROXY_TBL_GET_ASSIGNED_ALIAS( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_5:
   \   00010D   740C         MOV       A,#0xc
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   E0           MOVX      A,@DPTR
   \   000113   A2E5         MOV       C,0xE0 /* A   */.5
   \   000115   5025         JNC       ??pt_ZclReadGetProxyEntry_6
    150            {
    151              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ), gpdEntry, &gpdEntryLen );
   \   000117                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000117   A8..         MOV       R0,?XSP + 0
   \   000119   A9..         MOV       R1,?XSP + 1
   \   00011B   88..         MOV       ?V0,R0
   \   00011D   89..         MOV       ?V1,R1
   \   00011F   78..         MOV       R0,#?V0
   \   000121   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000124   744E         MOV       A,#0x4e
   \   000126   12....       LCALL     ?XSTACK_DISP102_8
   \   000129   7902         MOV       R1,#0x2
   \   00012B   7418         MOV       A,#0x18
   \   00012D   12....       LCALL     ?XSTACK_DISP0_8
   \   000130   AA82         MOV       R2,DPL
   \   000132   AB83         MOV       R3,DPH
   \   000134   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000137   7402         MOV       A,#0x2
   \   000139   12....       LCALL     ?DEALLOC_XSTACK8
    152            }
    153            
    154            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_6:
   \   00013C   740C         MOV       A,#0xc
   \   00013E   12....       LCALL     ?XSTACK_DISP0_8
   \   000141   E0           MOVX      A,@DPTR
   \   000142   A2E6         MOV       C,0xE0 /* A   */.6
   \   000144   5025         JNC       ??pt_ZclReadGetProxyEntry_7
    155            {
    156              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   000146                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000146   A8..         MOV       R0,?XSP + 0
   \   000148   A9..         MOV       R1,?XSP + 1
   \   00014A   88..         MOV       ?V0,R0
   \   00014C   89..         MOV       ?V1,R1
   \   00014E   78..         MOV       R0,#?V0
   \   000150   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000153   744E         MOV       A,#0x4e
   \   000155   12....       LCALL     ?XSTACK_DISP102_8
   \   000158   7901         MOV       R1,#0x1
   \   00015A   741A         MOV       A,#0x1a
   \   00015C   12....       LCALL     ?XSTACK_DISP0_8
   \   00015F   AA82         MOV       R2,DPL
   \   000161   AB83         MOV       R3,DPH
   \   000163   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000166   7402         MOV       A,#0x2
   \   000168   12....       LCALL     ?DEALLOC_XSTACK8
    157            }
    158            
    159            if ( ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) || ( PROXY_TBL_GET_SEC_CAP( currEntry[PROXY_TBL_ENTRY_OPT] ) ) ) )
   \                     ??pt_ZclReadGetProxyEntry_7:
   \   00016B   740C         MOV       A,#0xc
   \   00016D   12....       LCALL     ?XSTACK_DISP0_8
   \   000170   E0           MOVX      A,@DPTR
   \   000171   A2E6         MOV       C,0xE0 /* A   */.6
   \   000173   400A         JC        ??pt_ZclReadGetProxyEntry_8
   \   000175   740B         MOV       A,#0xb
   \   000177   12....       LCALL     ?XSTACK_DISP0_8
   \   00017A   E0           MOVX      A,@DPTR
   \   00017B   A2E5         MOV       C,0xE0 /* A   */.5
   \   00017D   5025         JNC       ??pt_ZclReadGetProxyEntry_9
    160            {
    161              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_8:
   \   00017F                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00017F   A8..         MOV       R0,?XSP + 0
   \   000181   A9..         MOV       R1,?XSP + 1
   \   000183   88..         MOV       ?V0,R0
   \   000185   89..         MOV       ?V1,R1
   \   000187   78..         MOV       R0,#?V0
   \   000189   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018C   744E         MOV       A,#0x4e
   \   00018E   12....       LCALL     ?XSTACK_DISP102_8
   \   000191   7904         MOV       R1,#0x4
   \   000193   741B         MOV       A,#0x1b
   \   000195   12....       LCALL     ?XSTACK_DISP0_8
   \   000198   AA82         MOV       R2,DPL
   \   00019A   AB83         MOV       R3,DPH
   \   00019C   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00019F   7402         MOV       A,#0x2
   \   0001A1   12....       LCALL     ?DEALLOC_XSTACK8
    162            }
    163            
    164            if ( PROXY_TBL_GET_SEC_USE( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_9:
   \   0001A4   740C         MOV       A,#0xc
   \   0001A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A9   E0           MOVX      A,@DPTR
   \   0001AA   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001AC   5025         JNC       ??pt_ZclReadGetProxyEntry_10
    165            {
    166              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN, gpdEntry, &gpdEntryLen );
   \   0001AE                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001AE   A8..         MOV       R0,?XSP + 0
   \   0001B0   A9..         MOV       R1,?XSP + 1
   \   0001B2   88..         MOV       ?V0,R0
   \   0001B4   89..         MOV       ?V1,R1
   \   0001B6   78..         MOV       R0,#?V0
   \   0001B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BB   744E         MOV       A,#0x4e
   \   0001BD   12....       LCALL     ?XSTACK_DISP102_8
   \   0001C0   7910         MOV       R1,#0x10
   \   0001C2   741F         MOV       A,#0x1f
   \   0001C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C7   AA82         MOV       R2,DPL
   \   0001C9   AB83         MOV       R3,DPH
   \   0001CB   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001CE   7402         MOV       A,#0x2
   \   0001D0   12....       LCALL     ?DEALLOC_XSTACK8
    167            }
    168            
    169            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??pt_ZclReadGetProxyEntry_10:
   \   0001D3   740B         MOV       A,#0xb
   \   0001D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D8   E0           MOVX      A,@DPTR
   \   0001D9   A2E6         MOV       C,0xE0 /* A   */.6
   \   0001DB   4003         JC        $+5
   \   0001DD   02....       LJMP      ??pt_ZclReadGetProxyEntry_11 & 0xFFFF
    170            {
    171              uint8 sinkCount = 0;
   \   0001E0   7401         MOV       A,#0x1
   \   0001E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E5   12....       LCALL     ?Subroutine4 & 0xFFFF
    172              uint8 sinkCountByte = gpdEntryLen;
    173              
    174              gpdEntryLen += sizeof ( sinkCountByte );
    175              
    176              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??CrossCallReturnLabel_3:
   \   0001E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EB   E582         MOV       A,DPL
   \   0001ED   28           ADD       A,R0
   \   0001EE   FE           MOV       R6,A
   \   0001EF   E4           CLR       A
   \   0001F0   3583         ADDC      A,DPH
   \   0001F2   FF           MOV       R7,A
   \   0001F3   748D         MOV       A,#-0x73
   \   0001F5   12....       LCALL     ?XSTACK_DISP100_8
   \   0001F8   88..         MOV       ?V0,R0
   \   0001FA   89..         MOV       ?V1,R1
   \   0001FC   7401         MOV       A,#0x1
   \   0001FE   12....       LCALL     ?XSTACK_DISP100_8
   \   000201   7408         MOV       A,#0x8
   \   000203   12....       LCALL     ?XSTACK_DISP0_8
   \   000206   E8           MOV       A,R0
   \   000207   F0           MOVX      @DPTR,A
   \   000208   A3           INC       DPTR
   \   000209   E9           MOV       A,R1
   \   00020A   F0           MOVX      @DPTR,A
   \   00020B   A3           INC       DPTR
   \   00020C   E4           CLR       A
   \   00020D   F0           MOVX      @DPTR,A
   \   00020E                ; Setup parameters for call to function osal_memcmp
   \   00020E   742D         MOV       A,#0x2d
   \   000210   12....       LCALL     ?XSTACK_DISP0_8
   \   000213   A982         MOV       R1,DPL
   \   000215   AA83         MOV       R2,DPH
   \   000217   89..         MOV       ?V4,R1
   \   000219   8A..         MOV       ?V5,R2
   \   00021B   75..00       MOV       ?V6,#0x0
   \   00021E   78..         MOV       R0,#?V4
   \   000220   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000223   7C0A         MOV       R4,#0xa
   \   000225   7D00         MOV       R5,#0x0
   \   000227   A9..         MOV       R1,?V0
   \   000229   AA..         MOV       R2,?V1
   \   00022B   AB..         MOV       R3,?V2
   \   00022D   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000230   7403         MOV       A,#0x3
   \   000232   12....       LCALL     ?DEALLOC_XSTACK8
   \   000235   E9           MOV       A,R1
   \   000236   7045         JNZ       ??pt_ZclReadGetProxyEntry_12
    177              {
    178                sinkCount += 1;
   \   000238   7401         MOV       A,#0x1
   \   00023A   12....       LCALL     ?XSTACK_DISP0_8
   \   00023D   E0           MOVX      A,@DPTR
   \   00023E   04           INC       A
   \   00023F   F0           MOVX      @DPTR,A
    179                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \   000240                ; Setup parameters for call to function osal_memcpy
   \   000240   7408         MOV       A,#0x8
   \   000242   12....       LCALL     ?XSTACK_DISP0_8
   \   000245   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \   000248   7C01         MOV       R4,#0x1
   \   00024A   7D00         MOV       R5,#0x0
   \   00024C   EE           MOV       A,R6
   \   00024D   FA           MOV       R2,A
   \   00024E   EF           MOV       A,R7
   \   00024F   FB           MOV       R3,A
   \   000250   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000253   7403         MOV       A,#0x3
   \   000255   12....       LCALL     ?DEALLOC_XSTACK8
    180                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   000258                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000258   A8..         MOV       R0,?XSP + 0
   \   00025A   A9..         MOV       R1,?XSP + 1
   \   00025C   88..         MOV       ?V4,R0
   \   00025E   89..         MOV       ?V5,R1
   \   000260   78..         MOV       R0,#?V4
   \   000262   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000265   744E         MOV       A,#0x4e
   \   000267   12....       LCALL     ?XSTACK_DISP102_8
   \   00026A   790A         MOV       R1,#0xa
   \   00026C   742F         MOV       A,#0x2f
   \   00026E   12....       LCALL     ?XSTACK_DISP0_8
   \   000271   AA82         MOV       R2,DPL
   \   000273   AB83         MOV       R3,DPH
   \   000275   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000278   7402         MOV       A,#0x2
   \   00027A   12....       LCALL     ?DEALLOC_XSTACK8
    181              }
    182              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_ZclReadGetProxyEntry_12:
   \   00027D                ; Setup parameters for call to function osal_memcmp
   \   00027D   7437         MOV       A,#0x37
   \   00027F   12....       LCALL     ?XSTACK_DISP0_8
   \   000282   A982         MOV       R1,DPL
   \   000284   AA83         MOV       R2,DPH
   \   000286   89..         MOV       ?V4,R1
   \   000288   8A..         MOV       ?V5,R2
   \   00028A   78..         MOV       R0,#?V4
   \   00028C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00028F   7C0A         MOV       R4,#0xa
   \   000291   7D00         MOV       R5,#0x0
   \   000293   A9..         MOV       R1,?V0
   \   000295   AA..         MOV       R2,?V1
   \   000297   AB..         MOV       R3,?V2
   \   000299   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00029C   7403         MOV       A,#0x3
   \   00029E   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A1   E9           MOV       A,R1
   \   0002A2   7045         JNZ       ??pt_ZclReadGetProxyEntry_11
    183              {
    184                sinkCount += 1;
   \   0002A4   7401         MOV       A,#0x1
   \   0002A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A9   E0           MOVX      A,@DPTR
   \   0002AA   04           INC       A
   \   0002AB   F0           MOVX      @DPTR,A
    185                osal_memcpy( &gpdEntry[sinkCountByte], &sinkCount, sizeof ( uint8 ) );
   \   0002AC                ; Setup parameters for call to function osal_memcpy
   \   0002AC   7408         MOV       A,#0x8
   \   0002AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B1   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \   0002B4   7C01         MOV       R4,#0x1
   \   0002B6   7D00         MOV       R5,#0x0
   \   0002B8   EE           MOV       A,R6
   \   0002B9   FA           MOV       R2,A
   \   0002BA   EF           MOV       A,R7
   \   0002BB   FB           MOV       R3,A
   \   0002BC   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002BF   7403         MOV       A,#0x3
   \   0002C1   12....       LCALL     ?DEALLOC_XSTACK8
    186                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN, gpdEntry, &gpdEntryLen );
   \   0002C4                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002C4   A8..         MOV       R0,?XSP + 0
   \   0002C6   A9..         MOV       R1,?XSP + 1
   \   0002C8   88..         MOV       ?V0,R0
   \   0002CA   89..         MOV       ?V1,R1
   \   0002CC   78..         MOV       R0,#?V0
   \   0002CE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002D1   744E         MOV       A,#0x4e
   \   0002D3   12....       LCALL     ?XSTACK_DISP102_8
   \   0002D6   790A         MOV       R1,#0xa
   \   0002D8   7439         MOV       A,#0x39
   \   0002DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002DD   AA82         MOV       R2,DPL
   \   0002DF   AB83         MOV       R3,DPH
   \   0002E1   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0002E4   7402         MOV       A,#0x2
   \   0002E6   12....       LCALL     ?DEALLOC_XSTACK8
    187              }
    188            }
    189               
    190            if ( PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??pt_ZclReadGetProxyEntry_11:
   \   0002E9   740C         MOV       A,#0xc
   \   0002EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002EE   E0           MOVX      A,@DPTR
   \   0002EF   A2E0         MOV       C,0xE0 /* A   */.0
   \   0002F1   4003         JC        $+5
   \   0002F3   02....       LJMP      ??pt_ZclReadGetProxyEntry_13 & 0xFFFF
    191            {
    192              uint8 groupCount = 0;
   \   0002F6   7401         MOV       A,#0x1
   \   0002F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0002FB   12....       LCALL     ?Subroutine4 & 0xFFFF
    193              uint8 groupCountByte = gpdEntryLen;
    194              
    195              gpdEntryLen++;
    196              
    197              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \                     ??CrossCallReturnLabel_4:
   \   0002FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000301   E582         MOV       A,DPL
   \   000303   28           ADD       A,R0
   \   000304   FE           MOV       R6,A
   \   000305   E4           CLR       A
   \   000306   3583         ADDC      A,DPH
   \   000308   FF           MOV       R7,A
   \   000309   7401         MOV       A,#0x1
   \   00030B   12....       LCALL     ?XSTACK_DISP100_8
   \   00030E   88..         MOV       ?V0,R0
   \   000310   89..         MOV       ?V1,R1
   \   000312   7441         MOV       A,#0x41
   \   000314   12....       LCALL     ?XSTACK_DISP0_8
   \   000317   E0           MOVX      A,@DPTR
   \   000318   A2E0         MOV       C,0xE0 /* A   */.0
   \   00031A   5042         JNC       ??pt_ZclReadGetProxyEntry_14
    198              {
    199                groupCount += 1;
   \   00031C   7401         MOV       A,#0x1
   \   00031E   12....       LCALL     ?XSTACK_DISP0_8
   \   000321   7401         MOV       A,#0x1
   \   000323   F0           MOVX      @DPTR,A
    200                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof ( uint8 ) );
   \   000324                ; Setup parameters for call to function osal_memcpy
   \   000324   78..         MOV       R0,#?V0
   \   000326   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000329   7C01         MOV       R4,#0x1
   \   00032B   7D00         MOV       R5,#0x0
   \   00032D   EE           MOV       A,R6
   \   00032E   FA           MOV       R2,A
   \   00032F   EF           MOV       A,R7
   \   000330   FB           MOV       R3,A
   \   000331   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000334   7403         MOV       A,#0x3
   \   000336   12....       LCALL     ?DEALLOC_XSTACK8
    201                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   000339                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000339   A8..         MOV       R0,?XSP + 0
   \   00033B   A9..         MOV       R1,?XSP + 1
   \   00033D   88..         MOV       ?V4,R0
   \   00033F   89..         MOV       ?V5,R1
   \   000341   78..         MOV       R0,#?V4
   \   000343   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000346   744E         MOV       A,#0x4e
   \   000348   12....       LCALL     ?XSTACK_DISP102_8
   \   00034B   7904         MOV       R1,#0x4
   \   00034D   7444         MOV       A,#0x44
   \   00034F   12....       LCALL     ?XSTACK_DISP0_8
   \   000352   AA82         MOV       R2,DPL
   \   000354   AB83         MOV       R3,DPH
   \   000356   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000359   7402         MOV       A,#0x2
   \   00035B   12....       LCALL     ?DEALLOC_XSTACK8
    202              }
    203              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \                     ??pt_ZclReadGetProxyEntry_14:
   \   00035E   7441         MOV       A,#0x41
   \   000360   12....       LCALL     ?XSTACK_DISP0_8
   \   000363   E0           MOVX      A,@DPTR
   \   000364   A2E1         MOV       C,0xE0 /* A   */.1
   \   000366   5042         JNC       ??pt_ZclReadGetProxyEntry_13
    204              {
    205                groupCount += 1;
   \   000368   7401         MOV       A,#0x1
   \   00036A   12....       LCALL     ?XSTACK_DISP0_8
   \   00036D   E0           MOVX      A,@DPTR
   \   00036E   04           INC       A
   \   00036F   F0           MOVX      @DPTR,A
    206                osal_memcpy( &gpdEntry[groupCountByte], &groupCount, sizeof( uint8 ) );
   \   000370                ; Setup parameters for call to function osal_memcpy
   \   000370   78..         MOV       R0,#?V0
   \   000372   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000375   7C01         MOV       R4,#0x1
   \   000377   7D00         MOV       R5,#0x0
   \   000379   EE           MOV       A,R6
   \   00037A   FA           MOV       R2,A
   \   00037B   EF           MOV       A,R7
   \   00037C   FB           MOV       R3,A
   \   00037D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000380   7403         MOV       A,#0x3
   \   000382   12....       LCALL     ?DEALLOC_XSTACK8
    207                gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint32 ), gpdEntry, &gpdEntryLen );
   \   000385                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000385   A8..         MOV       R0,?XSP + 0
   \   000387   A9..         MOV       R1,?XSP + 1
   \   000389   88..         MOV       ?V0,R0
   \   00038B   89..         MOV       ?V1,R1
   \   00038D   78..         MOV       R0,#?V0
   \   00038F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000392   744E         MOV       A,#0x4e
   \   000394   12....       LCALL     ?XSTACK_DISP102_8
   \   000397   7904         MOV       R1,#0x4
   \   000399   7448         MOV       A,#0x48
   \   00039B   12....       LCALL     ?XSTACK_DISP0_8
   \   00039E   AA82         MOV       R2,DPL
   \   0003A0   AB83         MOV       R3,DPH
   \   0003A2   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0003A5   7402         MOV       A,#0x2
   \   0003A7   12....       LCALL     ?DEALLOC_XSTACK8
    208              }
    209            }
    210            
    211            gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_GRP_RAD], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \                     ??pt_ZclReadGetProxyEntry_13:
   \   0003AA                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0003AA   A8..         MOV       R0,?XSP + 0
   \   0003AC   A9..         MOV       R1,?XSP + 1
   \   0003AE   88..         MOV       ?V0,R0
   \   0003B0   89..         MOV       ?V1,R1
   \   0003B2   78..         MOV       R0,#?V0
   \   0003B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003B7   744E         MOV       A,#0x4e
   \   0003B9   12....       LCALL     ?XSTACK_DISP102_8
   \   0003BC   7901         MOV       R1,#0x1
   \   0003BE   744C         MOV       A,#0x4c
   \   0003C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C3   AA82         MOV       R2,DPL
   \   0003C5   AB83         MOV       R3,DPH
   \   0003C7   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0003CA   7402         MOV       A,#0x2
   \   0003CC   12....       LCALL     ?DEALLOC_XSTACK8
    212            
    213            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) || ( PROXY_TBL_GET_ENTRY_VALID( currEntry[PROXY_TBL_ENTRY_OPT] ) == 0 ) )
   \   0003CF   740B         MOV       A,#0xb
   \   0003D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D4   E0           MOVX      A,@DPTR
   \   0003D5   5418         ANL       A,#0x18
   \   0003D7   6418         XRL       A,#0x18
   \   0003D9   601D         JZ        ??pt_ZclReadGetProxyEntry_15
    214            {
    215              gp_PopulateProxyTblEntry( ( uint8* )&currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER], sizeof ( uint8 ), gpdEntry, &gpdEntryLen );
   \   0003DB                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0003DB   78..         MOV       R0,#?V0
   \   0003DD   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003E0   744E         MOV       A,#0x4e
   \   0003E2   12....       LCALL     ?XSTACK_DISP102_8
   \   0003E5   7901         MOV       R1,#0x1
   \   0003E7   744D         MOV       A,#0x4d
   \   0003E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0003EC   AA82         MOV       R2,DPL
   \   0003EE   AB83         MOV       R3,DPH
   \   0003F0   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0003F3   7402         MOV       A,#0x2
   \   0003F5   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??pt_ZclReadGetProxyEntry_15:
   \   0003F8   74A7         MOV       A,#-0x59
   \   0003FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0003FD   E0           MOVX      A,@DPTR
   \   0003FE   FE           MOV       R6,A
   \   0003FF   A3           INC       DPTR
   \   000400   E0           MOVX      A,@DPTR
   \   000401   FF           MOV       R7,A
    216            }
    217            
    218            if ( pData != NULL )
   \   000402   8E82         MOV       DPL,R6
   \   000404   8F83         MOV       DPH,R7
   \   000406   E0           MOVX      A,@DPTR
   \   000407   FA           MOV       R2,A
   \   000408   7402         MOV       A,#0x2
   \   00040A   12....       LCALL     ?XSTACK_DISP0_8
   \   00040D   E0           MOVX      A,@DPTR
   \   00040E   F8           MOV       R0,A
   \   00040F   A3           INC       DPTR
   \   000410   E0           MOVX      A,@DPTR
   \   000411   F9           MOV       R1,A
   \   000412   E8           MOV       A,R0
   \   000413   49           ORL       A,R1
   \   000414   7003         JNZ       $+5
   \   000416   02....       LJMP      ??pt_ZclReadGetProxyEntry_16 & 0xFFFF
    219            {
    220              uint8 sinkEntryLen;
    221              uint16 totalLen;
    222              
    223              sinkEntryLen = gpdEntryLen;
   \   000419   85..82       MOV       DPL,?XSP + 0
   \   00041C   85..83       MOV       DPH,?XSP + 1
   \   00041F   E0           MOVX      A,@DPTR
   \   000420   F5..         MOV       ?V3,A
    224              if ( *len != 0 )
   \   000422   EA           MOV       A,R2
   \   000423   6004         JZ        ??pt_ZclReadGetProxyEntry_17
    225              {
    226              gpdEntryLen -= sizeof ( uint16 );
   \   000425   E0           MOVX      A,@DPTR
   \   000426   24FE         ADD       A,#-0x2
   \   000428   F0           MOVX      @DPTR,A
    227              }
    228              totalLen = gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_17:
   \   000429   E0           MOVX      A,@DPTR
   \   00042A   F8           MOV       R0,A
   \   00042B   7404         MOV       A,#0x4
   \   00042D   12....       LCALL     ?XSTACK_DISP0_8
   \   000430   E8           MOV       A,R0
   \   000431   F0           MOVX      @DPTR,A
   \   000432   A3           INC       DPTR
   \   000433   E4           CLR       A
   \   000434   F0           MOVX      @DPTR,A
    229              totalLen += *len;
   \   000435   8E82         MOV       DPL,R6
   \   000437   8F83         MOV       DPH,R7
   \   000439   E0           MOVX      A,@DPTR
   \   00043A   F8           MOV       R0,A
   \   00043B   7404         MOV       A,#0x4
   \   00043D   12....       LCALL     ?XSTACK_DISP0_8
   \   000440   E0           MOVX      A,@DPTR
   \   000441   28           ADD       A,R0
   \   000442   F0           MOVX      @DPTR,A
   \   000443   A3           INC       DPTR
   \   000444   E0           MOVX      A,@DPTR
   \   000445   3400         ADDC      A,#0x0
   \   000447   F0           MOVX      @DPTR,A
    230              osal_memcpy( pData, &totalLen, sizeof ( uint16 ) );
   \   000448                ; Setup parameters for call to function osal_memcpy
   \   000448   7404         MOV       A,#0x4
   \   00044A   12....       LCALL     ?XSTACK_DISP100_8
   \   00044D   88..         MOV       ?V0,R0
   \   00044F   89..         MOV       ?V1,R1
   \   000451   78..         MOV       R0,#?V0
   \   000453   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000456   7C02         MOV       R4,#0x2
   \   000458   7D00         MOV       R5,#0x0
   \   00045A   7405         MOV       A,#0x5
   \   00045C   12....       LCALL     ?XSTACK_DISP0_8
   \   00045F   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000462   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000465   7403         MOV       A,#0x3
   \   000467   12....       LCALL     ?DEALLOC_XSTACK8
    231              if ( *len == 0 )
   \   00046A   8E82         MOV       DPL,R6
   \   00046C   8F83         MOV       DPH,R7
   \   00046E   E0           MOVX      A,@DPTR
   \   00046F   7018         JNZ       ??pt_ZclReadGetProxyEntry_18
    232              {
    233                pData += sizeof ( uint16 );
   \   000471   7402         MOV       A,#0x2
   \   000473   12....       LCALL     ?XSTACK_DISP0_8
   \   000476   E0           MOVX      A,@DPTR
   \   000477   2402         ADD       A,#0x2
   \   000479   F8           MOV       R0,A
   \   00047A   A3           INC       DPTR
   \   00047B   E0           MOVX      A,@DPTR
   \   00047C   3400         ADDC      A,#0x0
   \   00047E   F9           MOV       R1,A
   \   00047F   7402         MOV       A,#0x2
   \   000481   12....       LCALL     ?XSTACK_DISP0_8
   \   000484   E8           MOV       A,R0
   \   000485   F0           MOVX      @DPTR,A
   \   000486   A3           INC       DPTR
   \   000487   E9           MOV       A,R1
   \   000488   F0           MOVX      @DPTR,A
    234              }
    235              gpdEntryLen += sizeof ( uint16 );
   \                     ??pt_ZclReadGetProxyEntry_18:
   \   000489   85..82       MOV       DPL,?XSP + 0
   \   00048C   85..83       MOV       DPH,?XSP + 1
   \   00048F   E0           MOVX      A,@DPTR
   \   000490   2402         ADD       A,#0x2
   \   000492   F0           MOVX      @DPTR,A
    236              
    237              pData += *len;
    238              osal_memcpy( pData, gpdEntry, sinkEntryLen );
   \   000493                ; Setup parameters for call to function osal_memcpy
   \   000493   744C         MOV       A,#0x4c
   \   000495   12....       LCALL     ?XSTACK_DISP100_8
   \   000498   88..         MOV       ?V0,R0
   \   00049A   89..         MOV       ?V1,R1
   \   00049C   78..         MOV       R0,#?V0
   \   00049E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0004A1   AC..         MOV       R4,?V3
   \   0004A3   7D00         MOV       R5,#0x0
   \   0004A5   8E82         MOV       DPL,R6
   \   0004A7   8F83         MOV       DPH,R7
   \   0004A9   E0           MOVX      A,@DPTR
   \   0004AA   F8           MOV       R0,A
   \   0004AB   7405         MOV       A,#0x5
   \   0004AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0004B0   E0           MOVX      A,@DPTR
   \   0004B1   28           ADD       A,R0
   \   0004B2   FA           MOV       R2,A
   \   0004B3   A3           INC       DPTR
   \   0004B4   E0           MOVX      A,@DPTR
   \   0004B5   3400         ADDC      A,#0x0
   \   0004B7   FB           MOV       R3,A
   \   0004B8   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0004BB   7403         MOV       A,#0x3
   \   0004BD   12....       LCALL     ?DEALLOC_XSTACK8
    239              if ( *len != 0 )
   \   0004C0   8E82         MOV       DPL,R6
   \   0004C2   8F83         MOV       DPH,R7
   \   0004C4   E0           MOVX      A,@DPTR
   \   0004C5   6019         JZ        ??pt_ZclReadGetProxyEntry_19
    240              {
    241                *len = totalLen;
   \   0004C7   7404         MOV       A,#0x4
   \   0004C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0004CC   E0           MOVX      A,@DPTR
   \   0004CD   8E82         MOV       DPL,R6
   \   0004CF   8F83         MOV       DPH,R7
   \   0004D1   801B         SJMP      ??pt_ZclReadGetProxyEntry_20
    242                return status;
    243              }
    244              *len += gpdEntryLen;
    245              return status;
    246            }
    247            else
    248            {
    249              if ( *len == 0 )
   \                     ??pt_ZclReadGetProxyEntry_16:
   \   0004D3   EA           MOV       A,R2
   \   0004D4   700A         JNZ       ??pt_ZclReadGetProxyEntry_19
    250              {
    251                gpdEntryLen += sizeof ( uint16 );
   \   0004D6   85..82       MOV       DPL,?XSP + 0
   \   0004D9   85..83       MOV       DPH,?XSP + 1
   \   0004DC   E0           MOVX      A,@DPTR
   \   0004DD   2402         ADD       A,#0x2
   \   0004DF   F0           MOVX      @DPTR,A
    252              }
    253              *len += gpdEntryLen;
   \                     ??pt_ZclReadGetProxyEntry_19:
   \   0004E0   85..82       MOV       DPL,?XSP + 0
   \   0004E3   85..83       MOV       DPH,?XSP + 1
   \   0004E6   E0           MOVX      A,@DPTR
   \   0004E7   F8           MOV       R0,A
   \   0004E8   8E82         MOV       DPL,R6
   \   0004EA   8F83         MOV       DPH,R7
   \   0004EC   E0           MOVX      A,@DPTR
   \   0004ED   28           ADD       A,R0
   \                     ??pt_ZclReadGetProxyEntry_20:
   \   0004EE   F0           MOVX      @DPTR,A
    254              return status;
   \   0004EF   A9..         MOV       R1,?V7
   \                     ??pt_ZclReadGetProxyEntry_2:
   \   0004F1   7497         MOV       A,#-0x69
    255            }
   \   0004F3   02....       LJMP      ?Subroutine0 & 0xFFFF
    256          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E4           CLR       A
   \   000001   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000004   F8           MOV       R0,A
   \   000005   04           INC       A
   \   000006   F0           MOVX      @DPTR,A
   \   000007   744C         MOV       A,#0x4c
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine10_0
   \   000003                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E582         MOV       A,DPL
   \   000002   28           ADD       A,R0
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   3583         ADDC      A,DPH
   \   000007   FB           MOV       R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    257          
    258          /*********************************************************************
    259           * @fn      zclGpp_ReadWriteAttrCB
    260           *
    261           * @brief   Handle Diagnostics attributes.
    262           *
    263           * @param   clusterId - cluster that attribute belongs to
    264           * @param   attrId - attribute to be read or written
    265           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
    266           * @param   pValue - pointer to attribute value, OTA endian
    267           * @param   pLen - length of attribute value read, native endian
    268           *
    269           * @return  status
    270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    271          ZStatus_t zclGpp_ReadWriteAttrCB( uint16 clusterId, uint16 attrId, uint8 oper,
   \                     zclGpp_ReadWriteAttrCB:
    272                                                   uint8 *pValue, uint16 *pLen )
    273          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V1,R1
    274            ZStatus_t status = ZSuccess;
   \   000007   7900         MOV       R1,#0x0
    275            uint16 proxyTableIndex;
    276            uint8 i;
    277          
    278            switch ( oper )
   \   000009   E5..         MOV       A,?V1
   \   00000B   6008         JZ        ??zclGpp_ReadWriteAttrCB_0
   \   00000D   14           DEC       A
   \   00000E   6005         JZ        ??zclGpp_ReadWriteAttrCB_0
   \   000010   14           DEC       A
   \   000011   604A         JZ        ??zclGpp_ReadWriteAttrCB_1
   \   000013   804A         SJMP      ??zclGpp_ReadWriteAttrCB_2
    279            {
    280              case ZCL_OPER_LEN:
    281              case ZCL_OPER_READ:
    282                if ( attrId == ATTRID_GP_PROXY_TABLE )
   \                     ??zclGpp_ReadWriteAttrCB_0:
   \   000015   7411         MOV       A,#0x11
   \   000017   6C           XRL       A,R4
   \   000018   4D           ORL       A,R5
   \   000019   7044         JNZ       ??zclGpp_ReadWriteAttrCB_2
    283                { 
    284                  for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00001B   75..00       MOV       ?V0,#0x0
   \   00001E   740C         MOV       A,#0xc
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FE           MOV       R6,A
   \   000025   A3           INC       DPTR
   \   000026   E0           MOVX      A,@DPTR
   \   000027   FF           MOV       R7,A
   \   000028   740E         MOV       A,#0xe
   \   00002A   12....       LCALL     ?XSTACK_DISP0_8
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V2,A
   \   000030   A3           INC       DPTR
   \   000031   E0           MOVX      A,@DPTR
   \   000032   F5..         MOV       ?V3,A
    285                  {
    286                    proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
    287                    
    288                    status = pt_ZclReadGetProxyEntry ( proxyTableIndex, pValue, (uint8*)pLen );
   \                     ??zclGpp_ReadWriteAttrCB_3:
   \   000034                ; Setup parameters for call to function pt_ZclReadGetProxyEntry
   \   000034   78..         MOV       R0,#?V2
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   EE           MOV       A,R6
   \   00003A   FC           MOV       R4,A
   \   00003B   EF           MOV       A,R7
   \   00003C   FD           MOV       R5,A
   \   00003D   E5..         MOV       A,?V0
   \   00003F   2410         ADD       A,#0x10
   \   000041   FA           MOV       R2,A
   \   000042   E4           CLR       A
   \   000043   3403         ADDC      A,#0x3
   \   000045   FB           MOV       R3,A
   \   000046   12....       LCALL     `??pt_ZclReadGetProxyEntry::?relay`; Banked call to: pt_ZclReadGetProxyEntry
   \   000049   7402         MOV       A,#0x2
   \   00004B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004E   E9           MOV       A,R1
   \   00004F   F9           MOV       R1,A
    289                    if ( status != ZSuccess )
   \   000050   700B         JNZ       ??zclGpp_ReadWriteAttrCB_1
    290                    {
    291                      status = ZFailure;
    292                      break;
    293                    }
    294                  }
   \   000052   05..         INC       ?V0
   \   000054   E5..         MOV       A,?V0
   \   000056   C3           CLR       C
   \   000057   9406         SUBB      A,#0x6
   \   000059   5004         JNC       ??zclGpp_ReadWriteAttrCB_2
   \   00005B   80D7         SJMP      ??zclGpp_ReadWriteAttrCB_3
    295                  
    296                }
    297                break;
    298          
    299              case ZCL_OPER_WRITE:
    300                status = ZFailure;
   \                     ??zclGpp_ReadWriteAttrCB_1:
   \   00005D   7901         MOV       R1,#0x1
    301                break;
    302            }
    303          
    304            return ( status );
   \                     ??zclGpp_ReadWriteAttrCB_2:
   \   00005F                REQUIRE ?Subroutine1
   \   00005F                ; // Fall through to label ?Subroutine1
    305          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    306          
    307           /*********************************************************************
    308           * @fn          gp_pairingSetProxyTblOptions
    309           *
    310           * @brief       Function to fill the options pramenter in a Proxy Table entry
    311           *              from a GP Pairing Command
    312           *
    313           * @param       pBitField - pointer to the bit field.
    314           *              bit       - position of the bit to set in the given bitfield.
    315           *
    316           * @return      
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          static uint16 gp_pairingSetProxyTblOptions ( uint32 pairingOpt )
   \                     gp_pairingSetProxyTblOptions:
    319          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
   \   00000E   8C..         MOV       ?V6,R4
   \   000010   8D..         MOV       ?V7,R5
    320            uint8  proxyOpt[2] = {0x00, 0x00};
   \   000012   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   000015   AC..         MOV       R4,?XSP + 0
   \   000017   AD..         MOV       R5,?XSP + 1
   \   000019   7402         MOV       A,#0x2
   \   00001B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    321            uint16 opt = 0; 
    322            
    323            PAIRING_PROXY_TBL_SET_APPLICATION_ID(( uint8* )&proxyOpt[0], pairingOpt);
    324            PROXY_TBL_SET_ENTRY_ACTIVE( &proxyOpt[0] );
    325            PROXY_TBL_SET_ENTRY_VALID( &proxyOpt[0] );
   \   00001E   EA           MOV       A,R2
   \   00001F   5407         ANL       A,#0x7
   \   000021   F8           MOV       R0,A
   \   000022   85..82       MOV       DPL,?XSP + 0
   \   000025   85..83       MOV       DPH,?XSP + 1
   \   000028   E0           MOVX      A,@DPTR
   \   000029   54F8         ANL       A,#0xf8
   \   00002B   48           ORL       A,R0
   \   00002C   4418         ORL       A,#0x18
   \   00002E   F0           MOVX      @DPTR,A
    326            PAIRING_PROXY_TBL_SET_MAC_SEQ_CAP(( uint16* )&proxyOpt, pairingOpt);
   \   00002F   54DF         ANL       A,#0xdf
   \   000031   FA           MOV       R2,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   FB           MOV       R3,A
   \   000035   85....       MOV       ?V0,?V4
   \   000038   85....       MOV       ?V1,?V5
   \   00003B   7403         MOV       A,#0x3
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?US_SHR
   \   000042   E5..         MOV       A,?V0
   \   000044   5420         ANL       A,#0x20
   \   000046   F8           MOV       R0,A
   \   000047   EA           MOV       A,R2
   \   000048   48           ORL       A,R0
   \   000049   F8           MOV       R0,A
   \   00004A   EB           MOV       A,R3
   \   00004B   F9           MOV       R1,A
   \   00004C   85..82       MOV       DPL,?XSP + 0
   \   00004F   85..83       MOV       DPH,?XSP + 1
   \   000052   E8           MOV       A,R0
   \   000053   F0           MOVX      @DPTR,A
   \   000054   A3           INC       DPTR
   \   000055   E9           MOV       A,R1
   \   000056   F0           MOVX      @DPTR,A
    327            
    328            if ( GP_IS_COMMUNICATION_MODE_LIGHT_UNICAST( pairingOpt ) )
   \   000057   E5..         MOV       A,?V4
   \   000059   C4           SWAP      A
   \   00005A   13           RRC       A
   \   00005B   5407         ANL       A,#0x7
   \   00005D   5403         ANL       A,#0x3
   \   00005F   F9           MOV       R1,A
   \   000060   7403         MOV       A,#0x3
   \   000062   69           XRL       A,R1
   \   000063   85..82       MOV       DPL,?XSP + 0
   \   000066   85..83       MOV       DPH,?XSP + 1
   \   000069   7017         JNZ       ??gp_pairingSetProxyTblOptions_0
    329            {
    330              PROXY_TBL_SET_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   D2E6         SETB      0xE0 /* A   */.6
   \   00006E   F0           MOVX      @DPTR,A
    331            }
    332            else
    333            {
    334              PROXY_TBL_CLR_LIGHTWIGHT_UNICAST( &proxyOpt[0] );
    335            }
    336            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( pairingOpt ) )
    337            {
    338              PROXY_TBL_SET_DGROUP( &proxyOpt[0] );
    339            }
    340            else
    341            {
    342              PROXY_TBL_CLR_DGROUP( &proxyOpt[0] );
   \                     ??gp_pairingSetProxyTblOptions_1:
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   C2E7         CLR       0xE0 /* A   */.7
   \   000072   F0           MOVX      @DPTR,A
    343            }
    344            if ( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt ) )
   \   000073   7402         MOV       A,#0x2
   \   000075   69           XRL       A,R1
   \   000076   7017         JNZ       ??gp_pairingSetProxyTblOptions_2
    345            {
    346              PROXY_TBL_SET_CGROUP( &proxyOpt[1] );
   \   000078   7401         MOV       A,#0x1
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   D2E0         SETB      0xE0 /* A   */.0
   \   000080   8015         SJMP      ??gp_pairingSetProxyTblOptions_3
    347            }
   \                     ??gp_pairingSetProxyTblOptions_0:
   \   000082   E0           MOVX      A,@DPTR
   \   000083   C2E6         CLR       0xE0 /* A   */.6
   \   000085   F0           MOVX      @DPTR,A
   \   000086   7401         MOV       A,#0x1
   \   000088   69           XRL       A,R1
   \   000089   70E4         JNZ       ??gp_pairingSetProxyTblOptions_1
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   D2E7         SETB      0xE0 /* A   */.7
   \   00008E   F0           MOVX      @DPTR,A
    348            else
    349            {
    350              PROXY_TBL_CLR_CGROUP( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_2:
   \   00008F   7401         MOV       A,#0x1
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   E0           MOVX      A,@DPTR
   \   000095   C2E0         CLR       0xE0 /* A   */.0
   \                     ??gp_pairingSetProxyTblOptions_3:
   \   000097   F0           MOVX      @DPTR,A
    351            }
    352            
    353            // FALSE by default
    354            PROXY_TBL_CLR_FIRST_TO_FORWARD( &proxyOpt[1] );
    355            
    356            // The InRange sub-field, if set to 0b1, indicates that this GPD is in range 
    357            // of this proxy. The default value is FALSE
    358            PROXY_TBL_CLR_IN_RANGE( &proxyOpt[1] );
   \   000098   E0           MOVX      A,@DPTR
   \   000099   54F9         ANL       A,#0xf9
   \   00009B   F0           MOVX      @DPTR,A
    359            // The GPDfixed sub-field, if set to 0b1, indicates portability capabilities 
    360            if ( GP_GET_GPD_FIXED_BIT( pairingOpt ) )
   \   00009C   85....       MOV       ?V0,?V4
   \   00009F   E5..         MOV       A,?V0
   \   0000A1   5480         ANL       A,#0x80
   \   0000A3   6005         JZ        ??gp_pairingSetProxyTblOptions_4
    361            {
    362              PROXY_TBL_SET_GPD_FIXED( &proxyOpt[1] );
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   D2E3         SETB      0xE0 /* A   */.3
   \   0000A8   8003         SJMP      ??gp_pairingSetProxyTblOptions_5
    363            }
    364            else
    365            {
    366              PROXY_TBL_CLR_GPD_FIXED( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_4:
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   C2E3         CLR       0xE0 /* A   */.3
   \                     ??gp_pairingSetProxyTblOptions_5:
   \   0000AD   F0           MOVX      @DPTR,A
    367            }
    368            
    369            if ( GP_IS_COMMUNICATION_MODE_FULL_UNICAST( pairingOpt ) )
   \   0000AE   E9           MOV       A,R1
   \   0000AF   7005         JNZ       ??gp_pairingSetProxyTblOptions_6
    370            {
    371              PROXY_TBL_SET_HAS_ALL_ROUTES( &proxyOpt[1] );
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   D2E4         SETB      0xE0 /* A   */.4
   \   0000B4   8003         SJMP      ??gp_pairingSetProxyTblOptions_7
    372            }
    373            else
    374            {
    375              PROXY_TBL_CLR_HAS_ALL_ROUTES( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_6:
   \   0000B6   E0           MOVX      A,@DPTR
   \   0000B7   C2E4         CLR       0xE0 /* A   */.4
   \                     ??gp_pairingSetProxyTblOptions_7:
   \   0000B9   F0           MOVX      @DPTR,A
    376            }
    377            if ( (GP_ALIAS ( pairingOpt )) && (!GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( pairingOpt )) )
   \   0000BA   85....       MOV       ?V1,?V5
   \   0000BD   85....       MOV       ?V2,?V6
   \   0000C0   85....       MOV       ?V3,?V7
   \   0000C3   90....       MOV       DPTR,#__Constant_10000
   \   0000C6   78..         MOV       R0,#?V0
   \   0000C8   12....       LCALL     ?L_AND_X
   \   0000CB   E5..         MOV       A,?V0
   \   0000CD   45..         ORL       A,?V1
   \   0000CF   45..         ORL       A,?V2
   \   0000D1   45..         ORL       A,?V3
   \   0000D3   600F         JZ        ??gp_pairingSetProxyTblOptions_8
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   69           XRL       A,R1
   \   0000D8   600A         JZ        ??gp_pairingSetProxyTblOptions_8
    378            {
    379              PROXY_TBL_SET_ASSIGNED_ALIAS( &proxyOpt[1] );
   \   0000DA   7401         MOV       A,#0x1
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   E0           MOVX      A,@DPTR
   \   0000E0   D2E5         SETB      0xE0 /* A   */.5
   \   0000E2   8008         SJMP      ??gp_pairingSetProxyTblOptions_9
    380            }
    381            else
    382            {
    383              PROXY_TBL_CLR_ASSIGNED_ALIAS( &proxyOpt[1]);
   \                     ??gp_pairingSetProxyTblOptions_8:
   \   0000E4   7401         MOV       A,#0x1
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   C2E5         CLR       0xE0 /* A   */.5
   \                     ??gp_pairingSetProxyTblOptions_9:
   \   0000EC   F0           MOVX      @DPTR,A
    384            }
    385            if ( GP_GET_SEC_LEVEL( pairingOpt ) > 1 )
   \   0000ED   7409         MOV       A,#0x9
   \   0000EF   78..         MOV       R0,#?V4
   \   0000F1   12....       LCALL     ?US_SHR
   \   0000F4   E5..         MOV       A,?V4
   \   0000F6   5403         ANL       A,#0x3
   \   0000F8   C3           CLR       C
   \   0000F9   9402         SUBB      A,#0x2
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   4004         JC        ??gp_pairingSetProxyTblOptions_10
    386            {
    387              PROXY_TBL_SET_SEC_USE( &proxyOpt[1] );
   \   0000FE   D2E6         SETB      0xE0 /* A   */.6
   \   000100   8002         SJMP      ??gp_pairingSetProxyTblOptions_11
    388            }
    389            else
    390            {
    391              PROXY_TBL_CLR_SEC_USE( &proxyOpt[1] );
   \                     ??gp_pairingSetProxyTblOptions_10:
   \   000102   C2E6         CLR       0xE0 /* A   */.6
   \                     ??gp_pairingSetProxyTblOptions_11:
   \   000104   F0           MOVX      @DPTR,A
    392            }
    393            PROXY_TBL_SET_OPT_EXT( &proxyOpt[1] );
    394            PROXY_TBL_CLR_OPT_EXT( &proxyOpt[1] );
   \   000105   E0           MOVX      A,@DPTR
   \   000106   C2E7         CLR       0xE0 /* A   */.7
   \   000108   12....       LCALL     ?Subroutine8 & 0xFFFF
    395            
    396            opt |= ( ( proxyOpt[0] ) & 0x00FF );
    397            opt |= ( ( ( proxyOpt[1] ) <<  8 ) & 0xFF00 );
    398              
    399            return opt;
   \                     ??CrossCallReturnLabel_17:
   \   00010B   FA           MOV       R2,A
   \   00010C   7401         MOV       A,#0x1
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   E0           MOVX      A,@DPTR
   \   000112   FB           MOV       R3,A
   \   000113   7402         MOV       A,#0x2
   \   000115   02....       LJMP      ?Subroutine0 & 0xFFFF
    400          }
    401          
    402          /*********************************************************************
    403           * @fn          gp_PairingUpdateProxyTlb
    404           *
    405           * @brief       General function fill the proxy table vector
    406           *
    407           * @param       
    408           *
    409           * @return      
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          void gp_PairingUpdateProxyTlb( gpPairingCmd_t* payload )
   \                     gp_PairingUpdateProxyTlb:
    412          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 73
   \   000005   74B7         MOV       A,#-0x49
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    413            uint8  entryVector[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_3`
   \   000011   7408         MOV       A,#0x8
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   7441         MOV       A,#0x41
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    414            uint8  entryLen = 0;
   \   00001B   85..82       MOV       DPL,?XSP + 0
   \   00001E   85..83       MOV       DPH,?XSP + 1
   \   000021   F0           MOVX      @DPTR,A
    415            uint8  addSink;
    416            uint8  newSinkGroup = 0;
    417            uint16 entryOptions = 0;
   \   000022   7403         MOV       A,#0x3
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   F0           MOVX      @DPTR,A
    418            uint8  securityOpt = 0;
   \   00002B   7402         MOV       A,#0x2
   \   00002D   12....       LCALL     ?XSTACK_DISP0_8
   \   000030   E4           CLR       A
   \   000031   F0           MOVX      @DPTR,A
    419            uint8  searchCounter = 0x0A;
   \   000032   04           INC       A
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   740A         MOV       A,#0xa
   \   000038   F0           MOVX      @DPTR,A
    420            uint16 invalidAlias = 0xFFFF;
   \   000039   7406         MOV       A,#0x6
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   74FF         MOV       A,#-0x1
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   F0           MOVX      @DPTR,A
    421            
    422            addSink = GP_ADD_SINK( payload->options );
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?L_MOV_X
   \   00004C   E5..         MOV       A,?V0
   \   00004E   13           RRC       A
   \   00004F   13           RRC       A
   \   000050   13           RRC       A
   \   000051   541F         ANL       A,#0x1f
   \   000053   5401         ANL       A,#0x1
   \   000055   C0E0         PUSH      A
   \   000057   7405         MOV       A,#0x5
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   D0E0         POP       A
   \   00005E   F0           MOVX      @DPTR,A
    423            
    424            entryOptions = gp_pairingSetProxyTblOptions( payload->options );
   \   00005F                ; Setup parameters for call to function gp_pairingSetProxyTblOptions
   \   00005F   AA..         MOV       R2,?V0
   \   000061   AB..         MOV       R3,?V1
   \   000063   AC..         MOV       R4,?V2
   \   000065   AD..         MOV       R5,?V3
   \   000067   12....       LCALL     `??gp_pairingSetProxyTblOptions::?relay`; Banked call to: gp_pairingSetProxyTblOptions
   \   00006A   7403         MOV       A,#0x3
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   EA           MOV       A,R2
   \   000070   F0           MOVX      @DPTR,A
   \   000071   A3           INC       DPTR
   \   000072   EB           MOV       A,R3
   \   000073   12....       LCALL     ?Subroutine3 & 0xFFFF
    425            gp_PopulateProxyTblEntry( ( uint8* )&entryOptions, sizeof( entryOptions ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_0:
   \   000076   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000079   740A         MOV       A,#0xa
   \   00007B   12....       LCALL     ?XSTACK_DISP102_8
   \   00007E   7902         MOV       R1,#0x2
   \   000080   7405         MOV       A,#0x5
   \   000082   12....       LCALL     ?XSTACK_DISP101_8
   \   000085   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000088   7402         MOV       A,#0x2
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008D   8E82         MOV       DPL,R6
   \   00008F   8F83         MOV       DPH,R7
   \   000091   78..         MOV       R0,#?V0
   \   000093   12....       LCALL     ?L_MOV_X
   \   000096   E5..         MOV       A,?V0
   \   000098   5407         ANL       A,#0x7
   \   00009A   F8           MOV       R0,A
   \   00009B   7018         JNZ       ??gp_PairingUpdateProxyTlb_0
    426              
    427            // Options bitfield
    428            // If Application Id bitfield is 0b000
    429            if( GP_IS_APPLICATION_ID_GPD( payload->options ) )
    430            {        
    431              // Populate GPD ID
    432              entryLen += sizeof( uint32 );
   \   00009D   85..82       MOV       DPL,?XSP + 0
   \   0000A0   85..83       MOV       DPH,?XSP + 1
   \   0000A3   E0           MOVX      A,@DPTR
   \   0000A4   2404         ADD       A,#0x4
   \   0000A6   12....       LCALL     ?Subroutine3 & 0xFFFF
    433              gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdId, sizeof( payload->gpdId ), entryVector, &entryLen );
    434            }
   \                     ??CrossCallReturnLabel_1:
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AC   740A         MOV       A,#0xa
   \   0000AE   12....       LCALL     ?XSTACK_DISP102_8
   \   0000B1   7904         MOV       R1,#0x4
   \   0000B3   8019         SJMP      ??gp_PairingUpdateProxyTlb_1
    435            // If Application Id bitfield is 0b010
    436            else if( GP_IS_APPLICATION_ID_IEEE( payload->options ) )
   \                     ??gp_PairingUpdateProxyTlb_0:
   \   0000B5   7402         MOV       A,#0x2
   \   0000B7   68           XRL       A,R0
   \   0000B8   7022         JNZ       ??gp_PairingUpdateProxyTlb_2
    437            {   
    438              gp_PopulateProxyTblEntry( payload->gpdIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0000BA                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000BA   A8..         MOV       R0,?XSP + 0
   \   0000BC   A9..         MOV       R1,?XSP + 1
   \   0000BE   88..         MOV       ?V0,R0
   \   0000C0   89..         MOV       ?V1,R1
   \   0000C2   78..         MOV       R0,#?V0
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000C7   740A         MOV       A,#0xa
   \   0000C9   12....       LCALL     ?XSTACK_DISP102_8
   \   0000CC   7908         MOV       R1,#0x8
   \                     ??gp_PairingUpdateProxyTlb_1:
   \   0000CE   EE           MOV       A,R6
   \   0000CF   29           ADD       A,R1
   \   0000D0   FA           MOV       R2,A
   \   0000D1   E4           CLR       A
   \   0000D2   3F           ADDC      A,R7
   \   0000D3   FB           MOV       R3,A
   \   0000D4   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000D7   7402         MOV       A,#0x2
   \   0000D9   12....       LCALL     ?DEALLOC_XSTACK8
    439            }
    440            
    441             gp_PopulateProxyTblEntry( ( uint8* )&payload->ep, sizeof( payload->ep ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_2:
   \   0000DC                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0000DC   A8..         MOV       R0,?XSP + 0
   \   0000DE   A9..         MOV       R1,?XSP + 1
   \   0000E0   88..         MOV       ?V0,R0
   \   0000E2   89..         MOV       ?V1,R1
   \   0000E4   78..         MOV       R0,#?V0
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E9   740A         MOV       A,#0xa
   \   0000EB   12....       LCALL     ?XSTACK_DISP102_8
   \   0000EE   7901         MOV       R1,#0x1
   \   0000F0   EE           MOV       A,R6
   \   0000F1   2410         ADD       A,#0x10
   \   0000F3   FA           MOV       R2,A
   \   0000F4   E4           CLR       A
   \   0000F5   3F           ADDC      A,R7
   \   0000F6   FB           MOV       R3,A
   \   0000F7   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0000FA   7402         MOV       A,#0x2
   \   0000FC   12....       LCALL     ?DEALLOC_XSTACK8
    442          
    443            if( !GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) )
   \   0000FF   EE           MOV       A,R6
   \   000100   2432         ADD       A,#0x32
   \   000102   F5..         MOV       ?V6,A
   \   000104   E4           CLR       A
   \   000105   3F           ADDC      A,R7
   \   000106   F5..         MOV       ?V7,A
   \   000108   8E82         MOV       DPL,R6
   \   00010A   8F83         MOV       DPH,R7
   \   00010C   78..         MOV       R0,#?V0
   \   00010E   12....       LCALL     ?L_MOV_X
   \   000111   E5..         MOV       A,?V0
   \   000113   C4           SWAP      A
   \   000114   13           RRC       A
   \   000115   5407         ANL       A,#0x7
   \   000117   5403         ANL       A,#0x3
   \   000119   6402         XRL       A,#0x2
   \   00011B   A8..         MOV       R0,?XSP + 0
   \   00011D   A9..         MOV       R1,?XSP + 1
   \   00011F   88..         MOV       ?V0,R0
   \   000121   89..         MOV       ?V1,R1
   \   000123   78..         MOV       R0,#?V0
   \   000125   6010         JZ        ??gp_PairingUpdateProxyTlb_3
    444            {
    445              gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \   000127                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000127   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012A   740A         MOV       A,#0xa
   \   00012C   12....       LCALL     ?XSTACK_DISP102_8
   \   00012F   7902         MOV       R1,#0x2
   \   000131   AA..         MOV       R2,?V6
   \   000133   AB..         MOV       R3,?V7
   \   000135   800F         SJMP      ??gp_PairingUpdateProxyTlb_4
    446            }
    447            else
    448            {
    449              gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof( uint16 ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_3:
   \   000137                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013A   740A         MOV       A,#0xa
   \   00013C   12....       LCALL     ?XSTACK_DISP102_8
   \   00013F   7902         MOV       R1,#0x2
   \   000141   7408         MOV       A,#0x8
   \   000143   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??gp_PairingUpdateProxyTlb_4:
   \   000146   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000149   7402         MOV       A,#0x2
   \   00014B   12....       LCALL     ?DEALLOC_XSTACK8
    450            }
    451          
    452          
    453            //Security options
    454            securityOpt |= GP_GET_SEC_LEVEL( payload->options );
    455            securityOpt |= GP_GET_SEC_KEY_TYPE (payload->options ) << GP_OPT_SEC_LEVEL_LEN;
   \   00014E   8E82         MOV       DPL,R6
   \   000150   8F83         MOV       DPH,R7
   \   000152   78..         MOV       R0,#?V0
   \   000154   12....       LCALL     ?L_MOV_X
   \   000157   85....       MOV       ?V4,?V0
   \   00015A   85....       MOV       ?V5,?V1
   \   00015D   740B         MOV       A,#0xb
   \   00015F   78..         MOV       R0,#?V4
   \   000161   12....       LCALL     ?US_SHR
   \   000164   E5..         MOV       A,?V4
   \   000166   33           RLC       A
   \   000167   33           RLC       A
   \   000168   54FC         ANL       A,#0xfc
   \   00016A   541C         ANL       A,#0x1c
   \   00016C   F9           MOV       R1,A
   \   00016D   7409         MOV       A,#0x9
   \   00016F   78..         MOV       R0,#?V0
   \   000171   12....       LCALL     ?US_SHR
   \   000174   E5..         MOV       A,?V0
   \   000176   5403         ANL       A,#0x3
   \   000178   49           ORL       A,R1
   \   000179   F8           MOV       R0,A
   \   00017A   7402         MOV       A,#0x2
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   E0           MOVX      A,@DPTR
   \   000180   48           ORL       A,R0
   \   000181   F0           MOVX      @DPTR,A
    456            osal_memcpy( &entryVector[entryLen], &securityOpt, sizeof ( uint8 ) );
   \   000182                ; Setup parameters for call to function osal_memcpy
   \   000182   7402         MOV       A,#0x2
   \   000184   12....       LCALL     ?XSTACK_DISP100_8
   \   000187   88..         MOV       ?V0,R0
   \   000189   89..         MOV       ?V1,R1
   \   00018B   75..00       MOV       ?V2,#0x0
   \   00018E   78..         MOV       R0,#?V0
   \   000190   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000193   7C01         MOV       R4,#0x1
   \   000195   7D00         MOV       R5,#0x0
   \   000197   7403         MOV       A,#0x3
   \   000199   12....       LCALL     ?XSTACK_DISP0_8
   \   00019C   E0           MOVX      A,@DPTR
   \   00019D   F8           MOV       R0,A
   \   00019E   740B         MOV       A,#0xb
   \   0001A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A3   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0001A6   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001A9   7403         MOV       A,#0x3
   \   0001AB   12....       LCALL     ?DEALLOC_XSTACK8
    457            entryLen += sizeof ( uint8 );
   \   0001AE   85..82       MOV       DPL,?XSP + 0
   \   0001B1   85..83       MOV       DPH,?XSP + 1
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   04           INC       A
   \   0001B6   12....       LCALL     ?Subroutine3 & 0xFFFF
    458          
    459            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdSecCounter, sizeof( payload->gpdSecCounter ), entryVector, &entryLen );
   \                     ??CrossCallReturnLabel_2:
   \   0001B9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BC   740A         MOV       A,#0xa
   \   0001BE   12....       LCALL     ?XSTACK_DISP102_8
   \   0001C1   7904         MOV       R1,#0x4
   \   0001C3   EE           MOV       A,R6
   \   0001C4   241E         ADD       A,#0x1e
   \   0001C6   FA           MOV       R2,A
   \   0001C7   E4           CLR       A
   \   0001C8   3F           ADDC      A,R7
   \   0001C9   FB           MOV       R3,A
   \   0001CA   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001CD   7402         MOV       A,#0x2
   \   0001CF   12....       LCALL     ?DEALLOC_XSTACK8
    460            gp_PopulateProxyTblEntry( ( uint8* )&payload->gpdKey, SEC_KEY_LEN, entryVector, &entryLen );
   \   0001D2                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001D2   78..         MOV       R0,#?V0
   \   0001D4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001D7   740A         MOV       A,#0xa
   \   0001D9   12....       LCALL     ?XSTACK_DISP102_8
   \   0001DC   7910         MOV       R1,#0x10
   \   0001DE   EE           MOV       A,R6
   \   0001DF   2422         ADD       A,#0x22
   \   0001E1   FA           MOV       R2,A
   \   0001E2   E4           CLR       A
   \   0001E3   3F           ADDC      A,R7
   \   0001E4   FB           MOV       R3,A
   \   0001E5   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0001E8   7402         MOV       A,#0x2
   \   0001EA   12....       LCALL     ?DEALLOC_XSTACK8
    461            
    462            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   0001ED   EE           MOV       A,R6
   \   0001EE   2411         ADD       A,#0x11
   \   0001F0   F5..         MOV       ?V0,A
   \   0001F2   E4           CLR       A
   \   0001F3   3F           ADDC      A,R7
   \   0001F4   F5..         MOV       ?V1,A
   \   0001F6                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0001F6   A8..         MOV       R0,?XSP + 0
   \   0001F8   A9..         MOV       R1,?XSP + 1
   \   0001FA   88..         MOV       ?V2,R0
   \   0001FC   89..         MOV       ?V3,R1
   \   0001FE   78..         MOV       R0,#?V2
   \   000200   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000203   740A         MOV       A,#0xa
   \   000205   12....       LCALL     ?XSTACK_DISP102_8
   \   000208   7908         MOV       R1,#0x8
   \   00020A   AA..         MOV       R2,?V0
   \   00020C   AB..         MOV       R3,?V1
   \   00020E   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000211   7402         MOV       A,#0x2
   \   000213   12....       LCALL     ?DEALLOC_XSTACK8
    463            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   000216   EE           MOV       A,R6
   \   000217   2419         ADD       A,#0x19
   \   000219   F5..         MOV       ?V2,A
   \   00021B   E4           CLR       A
   \   00021C   3F           ADDC      A,R7
   \   00021D   F5..         MOV       ?V3,A
   \   00021F                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00021F   A8..         MOV       R0,?XSP + 0
   \   000221   A9..         MOV       R1,?XSP + 1
   \   000223   88..         MOV       ?V4,R0
   \   000225   89..         MOV       ?V5,R1
   \   000227   78..         MOV       R0,#?V4
   \   000229   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00022C   740A         MOV       A,#0xa
   \   00022E   12....       LCALL     ?XSTACK_DISP102_8
   \   000231   7902         MOV       R1,#0x2
   \   000233   AA..         MOV       R2,?V2
   \   000235   AB..         MOV       R3,?V3
   \   000237   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00023A   7402         MOV       A,#0x2
   \   00023C   12....       LCALL     ?DEALLOC_XSTACK8
    464            // to add the invalid entries
    465            osal_memset ( &payload->sinkIEEE, 0xFF, Z_EXTADDR_LEN );
   \   00023F                ; Setup parameters for call to function osal_memset
   \   00023F   7C08         MOV       R4,#0x8
   \   000241   7D00         MOV       R5,#0x0
   \   000243   79FF         MOV       R1,#-0x1
   \   000245   AA..         MOV       R2,?V0
   \   000247   AB..         MOV       R3,?V1
   \   000249   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    466            payload->sinkNwkAddr = 0xFFFF;
   \   00024C   85..82       MOV       DPL,?V2
   \   00024F   85..83       MOV       DPH,?V3
   \   000252   74FF         MOV       A,#-0x1
   \   000254   F0           MOVX      @DPTR,A
   \   000255   A3           INC       DPTR
   \   000256   F0           MOVX      @DPTR,A
    467            gp_PopulateProxyTblEntry( payload->sinkIEEE, Z_EXTADDR_LEN, entryVector, &entryLen );
   \   000257                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000257   78..         MOV       R0,#?V4
   \   000259   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00025C   740A         MOV       A,#0xa
   \   00025E   12....       LCALL     ?XSTACK_DISP102_8
   \   000261   7908         MOV       R1,#0x8
   \   000263   AA..         MOV       R2,?V0
   \   000265   AB..         MOV       R3,?V1
   \   000267   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00026A   7402         MOV       A,#0x2
   \   00026C   12....       LCALL     ?DEALLOC_XSTACK8
    468            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkNwkAddr, sizeof( payload->sinkNwkAddr ), entryVector, &entryLen );
   \   00026F                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00026F   A8..         MOV       R0,?XSP + 0
   \   000271   A9..         MOV       R1,?XSP + 1
   \   000273   88..         MOV       ?V0,R0
   \   000275   89..         MOV       ?V1,R1
   \   000277   78..         MOV       R0,#?V0
   \   000279   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00027C   740A         MOV       A,#0xa
   \   00027E   12....       LCALL     ?XSTACK_DISP102_8
   \   000281   7902         MOV       R1,#0x2
   \   000283   AA..         MOV       R2,?V2
   \   000285   AB..         MOV       R3,?V3
   \   000287   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00028A   7402         MOV       A,#0x2
   \   00028C   12....       LCALL     ?DEALLOC_XSTACK8
    469            
    470            newSinkGroup = PROXY_TBL_GET_DGROUP( entryOptions & 0x00FF );
    471            newSinkGroup |= PROXY_TBL_GET_CGROUP( ( entryOptions & 0xFF00 ) >> 8 );
    472            osal_memset( &entryVector[entryLen], newSinkGroup, sizeof ( uint8 ) );
   \   00028F                ; Setup parameters for call to function osal_memset
   \   00028F   7C01         MOV       R4,#0x1
   \   000291   7D00         MOV       R5,#0x0
   \   000293   7403         MOV       A,#0x3
   \   000295   12....       LCALL     ?XSTACK_DISP0_8
   \   000298   A3           INC       DPTR
   \   000299   E0           MOVX      A,@DPTR
   \   00029A   5401         ANL       A,#0x1
   \   00029C   FA           MOV       R2,A
   \   00029D   7403         MOV       A,#0x3
   \   00029F   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A2   E0           MOVX      A,@DPTR
   \   0002A3   33           RLC       A
   \   0002A4   33           RLC       A
   \   0002A5   5401         ANL       A,#0x1
   \   0002A7   4A           ORL       A,R2
   \   0002A8   F9           MOV       R1,A
   \   0002A9   85..82       MOV       DPL,?XSP + 0
   \   0002AC   85..83       MOV       DPH,?XSP + 1
   \   0002AF   E0           MOVX      A,@DPTR
   \   0002B0   FA           MOV       R2,A
   \   0002B1   7408         MOV       A,#0x8
   \   0002B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B6   E582         MOV       A,DPL
   \   0002B8   2A           ADD       A,R2
   \   0002B9   FA           MOV       R2,A
   \   0002BA   E4           CLR       A
   \   0002BB   3583         ADDC      A,DPH
   \   0002BD   FB           MOV       R3,A
   \   0002BE   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    473            entryLen++;
   \   0002C1   85..82       MOV       DPL,?XSP + 0
   \   0002C4   85..83       MOV       DPH,?XSP + 1
   \   0002C7   E0           MOVX      A,@DPTR
   \   0002C8   04           INC       A
   \   0002C9   F0           MOVX      @DPTR,A
    474            
    475            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   0002CA   EE           MOV       A,R6
   \   0002CB   241B         ADD       A,#0x1b
   \   0002CD   F5..         MOV       ?V4,A
   \   0002CF   E4           CLR       A
   \   0002D0   3F           ADDC      A,R7
   \   0002D1   F5..         MOV       ?V5,A
   \   0002D3                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   0002D3   78..         MOV       R0,#?V0
   \   0002D5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002D8   740A         MOV       A,#0xa
   \   0002DA   12....       LCALL     ?XSTACK_DISP102_8
   \   0002DD   7902         MOV       R1,#0x2
   \   0002DF   AA..         MOV       R2,?V4
   \   0002E1   AB..         MOV       R3,?V5
   \   0002E3   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   0002E6   7402         MOV       A,#0x2
   \   0002E8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002EB   8E82         MOV       DPL,R6
   \   0002ED   8F83         MOV       DPH,R7
   \   0002EF   78..         MOV       R0,#?V0
   \   0002F1   12....       LCALL     ?L_MOV_X
   \   0002F4   E5..         MOV       A,?V0
   \   0002F6   C4           SWAP      A
   \   0002F7   13           RRC       A
   \   0002F8   5407         ANL       A,#0x7
   \   0002FA   5403         ANL       A,#0x3
   \   0002FC   F8           MOV       R0,A
   \   0002FD   7402         MOV       A,#0x2
   \   0002FF   68           XRL       A,R0
   \   000300   6005         JZ        ??gp_PairingUpdateProxyTlb_5
   \   000302   7401         MOV       A,#0x1
   \   000304   68           XRL       A,R0
   \   000305   701A         JNZ       ??gp_PairingUpdateProxyTlb_6
    476            if( GP_IS_COMMUNICATION_MODE_GRPCAST_GROUP_ID( payload->options ) || GP_IS_COMMUNICATION_MODE_GRPCAST_DGROUP_ID( payload->options ) )
    477            {
    478              gp_PopulateProxyTblEntry( ( uint8* )&payload->assignedAlias, sizeof( payload->assignedAlias ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_5:
   \   000307                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000307   A8..         MOV       R0,?XSP + 0
   \   000309   A9..         MOV       R1,?XSP + 1
   \   00030B   88..         MOV       ?V0,R0
   \   00030D   89..         MOV       ?V1,R1
   \   00030F   78..         MOV       R0,#?V0
   \   000311   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000314   740A         MOV       A,#0xa
   \   000316   12....       LCALL     ?XSTACK_DISP102_8
   \   000319   7902         MOV       R1,#0x2
   \   00031B   AA..         MOV       R2,?V6
   \   00031D   AB..         MOV       R3,?V7
   \   00031F   8019         SJMP      ??gp_PairingUpdateProxyTlb_7
    479            }
    480            else
    481            {
    482              gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \                     ??gp_PairingUpdateProxyTlb_6:
   \   000321                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000321   A8..         MOV       R0,?XSP + 0
   \   000323   A9..         MOV       R1,?XSP + 1
   \   000325   88..         MOV       ?V0,R0
   \   000327   89..         MOV       ?V1,R1
   \   000329   78..         MOV       R0,#?V0
   \   00032B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00032E   740A         MOV       A,#0xa
   \   000330   12....       LCALL     ?XSTACK_DISP102_8
   \   000333   7902         MOV       R1,#0x2
   \   000335   7408         MOV       A,#0x8
   \   000337   12....       LCALL     ?XSTACK_DISP101_8
   \                     ??gp_PairingUpdateProxyTlb_7:
   \   00033A   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   00033D   7402         MOV       A,#0x2
   \   00033F   12....       LCALL     ?DEALLOC_XSTACK8
    483            }
    484            // to add the invalid entries
    485            payload->sinkGroupID = 0xFFFF;
   \   000342   85..82       MOV       DPL,?V4
   \   000345   85..83       MOV       DPH,?V5
   \   000348   74FF         MOV       A,#-0x1
   \   00034A   F0           MOVX      @DPTR,A
   \   00034B   A3           INC       DPTR
   \   00034C   F0           MOVX      @DPTR,A
    486            gp_PopulateProxyTblEntry( ( uint8* )&payload->sinkGroupID, sizeof( payload->sinkGroupID ), entryVector, &entryLen );
   \   00034D                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00034D   78..         MOV       R0,#?V0
   \   00034F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000352   740A         MOV       A,#0xa
   \   000354   12....       LCALL     ?XSTACK_DISP102_8
   \   000357   7902         MOV       R1,#0x2
   \   000359   AA..         MOV       R2,?V4
   \   00035B   AB..         MOV       R3,?V5
   \   00035D   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000360   7402         MOV       A,#0x2
   \   000362   12....       LCALL     ?DEALLOC_XSTACK8
    487            gp_PopulateProxyTblEntry( ( uint8* )&invalidAlias, sizeof ( uint16 ), entryVector, &entryLen );
   \   000365                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000365   78..         MOV       R0,#?V0
   \   000367   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00036A   740A         MOV       A,#0xa
   \   00036C   12....       LCALL     ?XSTACK_DISP102_8
   \   00036F   7902         MOV       R1,#0x2
   \   000371   7408         MOV       A,#0x8
   \   000373   12....       LCALL     ?XSTACK_DISP101_8
   \   000376   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000379   7402         MOV       A,#0x2
   \   00037B   12....       LCALL     ?DEALLOC_XSTACK8
    488          
    489            
    490            gp_PopulateProxyTblEntry( &payload->forwardingRadius, sizeof( payload->forwardingRadius ), entryVector, &entryLen );
   \   00037E                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   00037E   78..         MOV       R0,#?V0
   \   000380   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000383   740A         MOV       A,#0xa
   \   000385   12....       LCALL     ?XSTACK_DISP102_8
   \   000388   7901         MOV       R1,#0x1
   \   00038A   EE           MOV       A,R6
   \   00038B   2434         ADD       A,#0x34
   \   00038D   FA           MOV       R2,A
   \   00038E   E4           CLR       A
   \   00038F   3F           ADDC      A,R7
   \   000390   FB           MOV       R3,A
   \   000391   12....       LCALL     `??gp_PopulateProxyTblEntry::?relay`; Banked call to: gp_PopulateProxyTblEntry
   \   000394   7402         MOV       A,#0x2
   \   000396   12....       LCALL     ?DEALLOC_XSTACK8
    491           
    492            if ( ( PROXY_TBL_GET_ENTRY_ACTIVE( entryVector[0] ) == 0 ) && ( PROXY_TBL_GET_ENTRY_VALID( entryVector[0] ) == 0) )
   \   000399   85..82       MOV       DPL,?XSP + 0
   \   00039C   85..83       MOV       DPH,?XSP + 1
   \   00039F   E0           MOVX      A,@DPTR
   \   0003A0   F8           MOV       R0,A
   \   0003A1   7408         MOV       A,#0x8
   \   0003A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A6   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0003A9   7401         MOV       A,#0x1
   \   0003AB   12....       LCALL     ?XSTACK_DISP100_8
   \   0003AE   88..         MOV       ?V0,R0
   \   0003B0   89..         MOV       ?V1,R1
   \   0003B2   75..00       MOV       ?V2,#0x0
   \   0003B5   E0           MOVX      A,@DPTR
   \   0003B6   5418         ANL       A,#0x18
   \   0003B8   6008         JZ        ??gp_PairingUpdateProxyTlb_8
    493            {
    494              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   0003BA                ; Setup parameters for call to function osal_memcpy
    495            }
    496            else
    497            {
    498              searchCounter = 0xFF;
   \   0003BA   7401         MOV       A,#0x1
   \   0003BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0003BF   74FF         MOV       A,#-0x1
   \   0003C1   F0           MOVX      @DPTR,A
    499              osal_memcpy( &entryVector[entryLen], &searchCounter, sizeof ( uint8 ) );
   \   0003C2                ; Setup parameters for call to function osal_memcpy
   \                     ??gp_PairingUpdateProxyTlb_8:
   \   0003C2   78..         MOV       R0,#?V0
   \   0003C4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003C7   7C01         MOV       R4,#0x1
   \   0003C9   7D00         MOV       R5,#0x0
   \   0003CB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003CE   7403         MOV       A,#0x3
   \   0003D0   12....       LCALL     ?DEALLOC_XSTACK8
    500            }
    501            // Update the proxy table
    502            gp_UpdateProxyTlb( entryVector, addSink );
   \   0003D3                ; Setup parameters for call to function gp_UpdateProxyTlb
   \   0003D3   7405         MOV       A,#0x5
   \   0003D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D8   E0           MOVX      A,@DPTR
   \   0003D9   F9           MOV       R1,A
   \   0003DA   7408         MOV       A,#0x8
   \   0003DC   12....       LCALL     ?XSTACK_DISP101_8
   \   0003DF   12....       LCALL     `??gp_UpdateProxyTlb::?relay`; Banked call to: gp_UpdateProxyTlb
    503          }
   \   0003E2   7449         MOV       A,#0x49
   \   0003E4                REQUIRE ?Subroutine0
   \   0003E4                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001                ; Setup parameters for call to function gp_PopulateProxyTblEntry
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET
    504          
    505          /*********************************************************************
    506           * @fn          gp_UpdateProxyTlb
    507           *
    508           * @brief       To update the proxy table NV vectors
    509           *
    510           * @param       pNpEntryew - New entry array to be added
    511           *
    512           * @return
    513           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    514          uint8 gp_UpdateProxyTlb( uint8* pEntry, uint8 addSink )
   \                     gp_UpdateProxyTlb:
    515          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 261
   \   000005   7582FB       MOV       DPL,#-0x5
   \   000008   7583FE       MOV       DPH,#-0x2
   \   00000B   12....       LCALL     ?ADD_XSTACK_DISP0_16
   \   00000E   E9           MOV       A,R1
   \   00000F   85..82       MOV       DPL,?XSP + 0
   \   000012   F0           MOVX      @DPTR,A
    516            uint8 i;
    517            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000013   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_4`
   \   000016   7442         MOV       A,#0x42
   \   000018   12....       LCALL     ?XSTACK_DISP102_8
   \   00001B   7441         MOV       A,#0x41
   \   00001D   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    518            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000020   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_5`
   \   000023   04           INC       A
   \   000024   12....       LCALL     ?XSTACK_DISP102_8
   \   000027   7441         MOV       A,#0x41
   \   000029   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    519            uint16 proxyTableIndex;
    520            uint8 status;
    521            
    522            // Copy the new entry pointer to array
    523            osal_memcpy( &newEntry, pEntry, PROXY_TBL_ENTRY_LEN );
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   8A..         MOV       ?V0,R2
   \   00002E   8B..         MOV       ?V1,R3
   \   000030   F5..         MOV       ?V2,A
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000037   7C41         MOV       R4,#0x41
   \   000039   7D00         MOV       R5,#0x0
   \   00003B   7445         MOV       A,#0x45
   \   00003D   12....       LCALL     ?XSTACK_DISP101_8
   \   000040   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000043   7403         MOV       A,#0x3
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
    524          
    525            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   000048   75..00       MOV       ?V3,#0x0
    526            {
    527              proxyTableIndex = ZCD_NV_PROXY_TABLE_START + i;
   \                     ??gp_UpdateProxyTlb_0:
   \   00004B   E5..         MOV       A,?V3
   \   00004D   2410         ADD       A,#0x10
   \   00004F   FE           MOV       R6,A
   \   000050   E4           CLR       A
   \   000051   3403         ADDC      A,#0x3
   \   000053   FF           MOV       R7,A
    528              status = gp_getProxyTableByIndex( proxyTableIndex, currEntry );
   \   000054                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000054   7401         MOV       A,#0x1
   \   000056   12....       LCALL     ?XSTACK_DISP102_8
   \   000059   EE           MOV       A,R6
   \   00005A   FA           MOV       R2,A
   \   00005B   EF           MOV       A,R7
   \   00005C   FB           MOV       R3,A
   \   00005D   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000060   E9           MOV       A,R1
   \   000061   F5..         MOV       ?V7,A
    529          
    530              if ( status == NV_OPER_FAILED )
   \   000063   740A         MOV       A,#0xa
   \   000065   65..         XRL       A,?V7
   \   000067   7003         JNZ       $+5
   \   000069   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    531              {
    532                // FAIL
    533                return status;
    534              }
    535              
    536              // if the entry is empty
    537              if ( ( status == NV_INVALID_DATA ) && ( addSink == TRUE ) )
   \   00006C   740D         MOV       A,#0xd
   \   00006E   65..         XRL       A,?V7
   \   000070   6003         JZ        $+5
   \   000072   02....       LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
   \   000075   85..82       MOV       DPL,?XSP + 0
   \   000078   85..83       MOV       DPH,?XSP + 1
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   6401         XRL       A,#0x1
   \   00007E   6003         JZ        $+5
   \   000080   02....       LJMP      ??gp_UpdateProxyTlb_2 & 0xFFFF
    538              {
    539                // Save new entry
    540                status = osal_nv_write( proxyTableIndex, 0,
    541                                     PROXY_TBL_ENTRY_LEN, newEntry );
   \   000083                ; Setup parameters for call to function osal_nv_write
   \   000083   7442         MOV       A,#0x42
   \   000085   12....       LCALL     ?XSTACK_DISP100_8
   \   000088   88..         MOV       ?V0,R0
   \   00008A   89..         MOV       ?V1,R1
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000091   75..41       MOV       ?V0,#0x41
   \   000094   75..00       MOV       ?V1,#0x0
   \   000097   78..         MOV       R0,#?V0
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009C   7C00         MOV       R4,#0x0
   \   00009E   7D00         MOV       R5,#0x0
   \   0000A0   EE           MOV       A,R6
   \   0000A1   FA           MOV       R2,A
   \   0000A2   EF           MOV       A,R7
   \   0000A3   FB           MOV       R3,A
   \   0000A4   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000A7   7404         MOV       A,#0x4
   \   0000A9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000AC   E9           MOV       A,R1
   \   0000AD   F5..         MOV       ?V7,A
    542                
    543                if ( osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    544                     osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    545                     osal_memcmp( &_NIB.nwkDevAddress, &newEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   0000AF   75....       MOV       ?V0,#(_NIB + 20) & 0xff
   \   0000B2   75....       MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
   \   0000B5                ; Setup parameters for call to function osal_memcmp
   \   0000B5   744D         MOV       A,#0x4d
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   A982         MOV       R1,DPL
   \   0000BC   AA83         MOV       R2,DPH
   \   0000BE   89..         MOV       ?V4,R1
   \   0000C0   8A..         MOV       ?V5,R2
   \   0000C2   75..00       MOV       ?V6,#0x0
   \   0000C5   78..         MOV       R0,#?V4
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CA   7C02         MOV       R4,#0x2
   \   0000CC   7D00         MOV       R5,#0x0
   \   0000CE   A9..         MOV       R1,?V0
   \   0000D0   AA..         MOV       R2,?V1
   \   0000D2   AB..         MOV       R3,?V2
   \   0000D4   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000D7   7403         MOV       A,#0x3
   \   0000D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV       A,R1
   \   0000DD   6003         JZ        $+5
   \   0000DF   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   0000E2                ; Setup parameters for call to function osal_memcmp
   \   0000E2   7479         MOV       A,#0x79
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   A982         MOV       R1,DPL
   \   0000E9   AA83         MOV       R2,DPH
   \   0000EB   89..         MOV       ?V4,R1
   \   0000ED   8A..         MOV       ?V5,R2
   \   0000EF   78..         MOV       R0,#?V4
   \   0000F1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F4   7C02         MOV       R4,#0x2
   \   0000F6   7D00         MOV       R5,#0x0
   \   0000F8   A9..         MOV       R1,?V0
   \   0000FA   AA..         MOV       R2,?V1
   \   0000FC   AB..         MOV       R3,?V2
   \   0000FE   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000101   7403         MOV       A,#0x3
   \   000103   12....       LCALL     ?DEALLOC_XSTACK8
   \   000106   E9           MOV       A,R1
   \   000107   6003         JZ        $+5
   \   000109   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   00010C                ; Setup parameters for call to function osal_memcmp
   \   00010C   747D         MOV       A,#0x7d
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   A982         MOV       R1,DPL
   \   000113   AA83         MOV       R2,DPH
   \   000115   89..         MOV       ?V4,R1
   \   000117   8A..         MOV       ?V5,R2
   \   000119   78..         MOV       R0,#?V4
   \   00011B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011E   7C02         MOV       R4,#0x2
   \   000120   7D00         MOV       R5,#0x0
   \   000122   A9..         MOV       R1,?V0
   \   000124   AA..         MOV       R2,?V1
   \   000126   AB..         MOV       R3,?V2
   \   000128   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00012B   7403         MOV       A,#0x3
   \   00012D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000130   E9           MOV       A,R1
   \   000131   6003         JZ        $+5
   \   000133   02....       LJMP      ??gp_UpdateProxyTlb_3 & 0xFFFF
   \   000136   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    546                {
    547                  NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
    548                }
    549                return status;
    550              }
    551              
    552              if ( pt_lookForGpd( proxyTableIndex, newEntry ) )
   \                     ??gp_UpdateProxyTlb_2:
   \   000139   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_11`
   \   00013C   74C4         MOV       A,#-0x3c
   \   00013E   12....       LCALL     ?XSTACK_DISP102_8
   \   000141   7441         MOV       A,#0x41
   \   000143   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000146   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_12`
   \   000149   7483         MOV       A,#-0x7d
   \   00014B   12....       LCALL     ?XSTACK_DISP102_8
   \   00014E   7441         MOV       A,#0x41
   \   000150   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   \   000153                ; Setup parameters for call to function osal_memcpy
   \   000153   7442         MOV       A,#0x42
   \   000155   12....       LCALL     ?XSTACK_DISP100_8
   \   000158   88..         MOV       ?V0,R0
   \   00015A   89..         MOV       ?V1,R1
   \   00015C   78..         MOV       R0,#?V0
   \   00015E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000161   7C41         MOV       R4,#0x41
   \   000163   7D00         MOV       R5,#0x0
   \   000165   74C7         MOV       A,#-0x39
   \   000167   12....       LCALL     ?XSTACK_DISP101_8
   \   00016A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00016D   7403         MOV       A,#0x3
   \   00016F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000172                ; Setup parameters for call to function osal_nv_read
   \   000172   7483         MOV       A,#-0x7d
   \   000174   12....       LCALL     ?XSTACK_DISP100_8
   \   000177   88..         MOV       ?V0,R0
   \   000179   89..         MOV       ?V1,R1
   \   00017B   78..         MOV       R0,#?V0
   \   00017D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000180   75..41       MOV       ?V0,#0x41
   \   000183   75..00       MOV       ?V1,#0x0
   \   000186   78..         MOV       R0,#?V0
   \   000188   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018B   7C00         MOV       R4,#0x0
   \   00018D   7D00         MOV       R5,#0x0
   \   00018F   EE           MOV       A,R6
   \   000190   FA           MOV       R2,A
   \   000191   EF           MOV       A,R7
   \   000192   FB           MOV       R3,A
   \   000193   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000196   7404         MOV       A,#0x4
   \   000198   12....       LCALL     ?DEALLOC_XSTACK8
   \   00019B   E9           MOV       A,R1
   \   00019C   7040         JNZ       ??gp_UpdateProxyTlb_4
   \   00019E   74C4         MOV       A,#-0x3c
   \   0001A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A3   E0           MOVX      A,@DPTR
   \   0001A4   5407         ANL       A,#0x7
   \   0001A6   F8           MOV       R0,A
   \   0001A7   7483         MOV       A,#-0x7d
   \   0001A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AC   E0           MOVX      A,@DPTR
   \   0001AD   5407         ANL       A,#0x7
   \   0001AF   68           XRL       A,R0
   \   0001B0   702C         JNZ       ??gp_UpdateProxyTlb_4
   \   0001B2                ; Setup parameters for call to function osal_memcmp
   \   0001B2   7485         MOV       A,#-0x7b
   \   0001B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B7   A982         MOV       R1,DPL
   \   0001B9   AA83         MOV       R2,DPH
   \   0001BB   89..         MOV       ?V0,R1
   \   0001BD   8A..         MOV       ?V1,R2
   \   0001BF   78..         MOV       R0,#?V0
   \   0001C1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001C4   7C08         MOV       R4,#0x8
   \   0001C6   7D00         MOV       R5,#0x0
   \   0001C8   74C9         MOV       A,#-0x37
   \   0001CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CD   A982         MOV       R1,DPL
   \   0001CF   AA83         MOV       R2,DPH
   \   0001D1   7B00         MOV       R3,#0x0
   \   0001D3   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001D6   7403         MOV       A,#0x3
   \   0001D8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001DB   E9           MOV       A,R1
   \   0001DC   7018         JNZ       ??gp_UpdateProxyTlb_5
    553              {
    554                // Entry found
    555                break;
    556              }
    557              
    558              if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
   \                     ??gp_UpdateProxyTlb_4:
   \   0001DE   E5..         MOV       A,?V3
   \   0001E0   C3           CLR       C
   \   0001E1   9405         SUBB      A,#0x5
   \   0001E3   4005         JC        ??gp_UpdateProxyTlb_6
    559              {
    560                // No space for new entries
    561                return FAILURE;
   \   0001E5   7901         MOV       R1,#0x1
   \   0001E7   02....       LJMP      ??gp_UpdateProxyTlb_7 & 0xFFFF
    562              }
    563            }
   \                     ??gp_UpdateProxyTlb_6:
   \   0001EA   05..         INC       ?V3
   \   0001EC   E5..         MOV       A,?V3
   \   0001EE   C3           CLR       C
   \   0001EF   9406         SUBB      A,#0x6
   \   0001F1   5003         JNC       $+5
   \   0001F3   02....       LJMP      ??gp_UpdateProxyTlb_0 & 0xFFFF
    564            
    565            // Remove the entry
    566            if ( addSink == FALSE )
   \                     ??gp_UpdateProxyTlb_5:
   \   0001F6   85..82       MOV       DPL,?XSP + 0
   \   0001F9   85..83       MOV       DPH,?XSP + 1
   \   0001FC   E0           MOVX      A,@DPTR
   \   0001FD   7037         JNZ       ??gp_UpdateProxyTlb_8
    567            {
    568              gp_ResetProxyBasicTblEntry( currEntry );
   \   0001FF                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   0001FF   7401         MOV       A,#0x1
   \   000201   12....       LCALL     ?XSTACK_DISP101_8
   \   000204   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
    569              
    570              status = osal_nv_write( proxyTableIndex, 0,
    571                               PROXY_TBL_ENTRY_LEN, currEntry );
   \   000207                ; Setup parameters for call to function osal_nv_write
   \   000207   7401         MOV       A,#0x1
   \   000209   12....       LCALL     ?XSTACK_DISP100_8
   \   00020C   88..         MOV       ?V0,R0
   \   00020E   89..         MOV       ?V1,R1
   \   000210   78..         MOV       R0,#?V0
   \   000212   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000215   75..41       MOV       ?V0,#0x41
   \   000218   75..00       MOV       ?V1,#0x0
   \   00021B   78..         MOV       R0,#?V0
   \   00021D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000220   7C00         MOV       R4,#0x0
   \   000222   7D00         MOV       R5,#0x0
   \   000224   EE           MOV       A,R6
   \   000225   FA           MOV       R2,A
   \   000226   EF           MOV       A,R7
   \   000227   FB           MOV       R3,A
   \   000228   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00022B   7404         MOV       A,#0x4
   \   00022D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000230   E9           MOV       A,R1
   \   000231   F5..         MOV       ?V7,A
   \   000233   02....       LJMP      ??gp_UpdateProxyTlb_1 & 0xFFFF
    572              return status;
    573            }
    574          
    575            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( newEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??gp_UpdateProxyTlb_8:
   \   000236   7442         MOV       A,#0x42
   \   000238   12....       LCALL     ?XSTACK_DISP0_8
   \   00023B   E0           MOVX      A,@DPTR
   \   00023C   A2E6         MOV       C,0xE0 /* A   */.6
   \   00023E   4003         JC        $+5
   \   000240   02....       LJMP      ??gp_UpdateProxyTlb_9 & 0xFFFF
    576            {
    577              if ( ( !pt_updateLightweightUnicastSink( newEntry, currEntry, addSink ) ) )
   \   000243                ; Setup parameters for call to function pt_updateLightweightUnicastSink
   \   000243   85..82       MOV       DPL,?XSP + 0
   \   000246   85..83       MOV       DPH,?XSP + 1
   \   000249   E0           MOVX      A,@DPTR
   \   00024A   F9           MOV       R1,A
   \   00024B   7401         MOV       A,#0x1
   \   00024D   12....       LCALL     ?XSTACK_DISP102_8
   \   000250   7442         MOV       A,#0x42
   \   000252   12....       LCALL     ?XSTACK_DISP101_8
   \   000255   12....       LCALL     `??pt_updateLightweightUnicastSink::?relay`; Banked call to: pt_updateLightweightUnicastSink
   \   000258   E9           MOV       A,R1
   \   000259   7003         JNZ       $+5
   \   00025B   02....       LJMP      ??gp_UpdateProxyTlb_10 & 0xFFFF
    578              {
    579                // The entry is full
    580                return NV_BAD_ITEM_LEN;
    581              }
    582            }
    583            else if ( PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
    584            {
    585              if ( ( !pt_addSinkGroup( newEntry, currEntry ) ) )
    586              {
    587                // The entry is full
    588                return NV_BAD_ITEM_LEN;
    589              }
    590            }
    591          
    592            if ( pt_getAlias( newEntry ) )
   \                     ??gp_UpdateProxyTlb_11:
   \   00025E   7443         MOV       A,#0x43
   \   000260   12....       LCALL     ?XSTACK_DISP0_8
   \   000263   E0           MOVX      A,@DPTR
   \   000264   A2E5         MOV       C,0xE0 /* A   */.5
   \   000266   5027         JNC       ??gp_UpdateProxyTlb_12
    593            {
    594              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_ALIAS], &newEntry[PROXY_TBL_ENTRY_ALIAS], sizeof ( uint16 ) );
   \   000268                ; Setup parameters for call to function osal_memcpy
   \   000268   744D         MOV       A,#0x4d
   \   00026A   12....       LCALL     ?XSTACK_DISP0_8
   \   00026D   A982         MOV       R1,DPL
   \   00026F   AA83         MOV       R2,DPH
   \   000271   89..         MOV       ?V0,R1
   \   000273   8A..         MOV       ?V1,R2
   \   000275   78..         MOV       R0,#?V0
   \   000277   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00027A   7C02         MOV       R4,#0x2
   \   00027C   7D00         MOV       R5,#0x0
   \   00027E   740F         MOV       A,#0xf
   \   000280   12....       LCALL     ?XSTACK_DISP0_8
   \   000283   AA82         MOV       R2,DPL
   \   000285   AB83         MOV       R3,DPH
   \   000287   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00028A   7403         MOV       A,#0x3
   \   00028C   12....       LCALL     ?DEALLOC_XSTACK8
    595            }
    596              
    597            if ( pt_getSecurity( newEntry ) )
   \                     ??gp_UpdateProxyTlb_12:
   \   00028F   7443         MOV       A,#0x43
   \   000291   12....       LCALL     ?XSTACK_DISP0_8
   \   000294   E0           MOVX      A,@DPTR
   \   000295   A2E6         MOV       C,0xE0 /* A   */.6
   \   000297   5057         JNC       ??gp_UpdateProxyTlb_13
    598            {
    599              PROXY_TBL_SET_SEC_USE( &currEntry[PROXY_TBL_ENTRY_OPT + 1] );
   \   000299   7402         MOV       A,#0x2
   \   00029B   12....       LCALL     ?XSTACK_DISP0_8
   \   00029E   E0           MOVX      A,@DPTR
   \   00029F   D2E6         SETB      0xE0 /* A   */.6
   \   0002A1   F0           MOVX      @DPTR,A
    600              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_OPT], &newEntry[PROXY_TBL_ENTRY_SEC_OPT], sizeof ( uint8 ) );
   \   0002A2                ; Setup parameters for call to function osal_memcpy
   \   0002A2   744F         MOV       A,#0x4f
   \   0002A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A7   A982         MOV       R1,DPL
   \   0002A9   AA83         MOV       R2,DPH
   \   0002AB   89..         MOV       ?V0,R1
   \   0002AD   8A..         MOV       ?V1,R2
   \   0002AF   78..         MOV       R0,#?V0
   \   0002B1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002B4   7C01         MOV       R4,#0x1
   \   0002B6   7D00         MOV       R5,#0x0
   \   0002B8   7411         MOV       A,#0x11
   \   0002BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BD   AA82         MOV       R2,DPL
   \   0002BF   AB83         MOV       R3,DPH
   \   0002C1   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002C4   7403         MOV       A,#0x3
   \   0002C6   12....       LCALL     ?DEALLOC_XSTACK8
    601              osal_memcpy( &currEntry[PROXY_TBL_ENTRY_GPD_KEY], &newEntry[PROXY_TBL_ENTRY_GPD_KEY], SEC_KEY_LEN );
   \   0002C9                ; Setup parameters for call to function osal_memcpy
   \   0002C9   7454         MOV       A,#0x54
   \   0002CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0002CE   A982         MOV       R1,DPL
   \   0002D0   AA83         MOV       R2,DPH
   \   0002D2   89..         MOV       ?V0,R1
   \   0002D4   8A..         MOV       ?V1,R2
   \   0002D6   78..         MOV       R0,#?V0
   \   0002D8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002DB   7C10         MOV       R4,#0x10
   \   0002DD   7D00         MOV       R5,#0x0
   \   0002DF   7416         MOV       A,#0x16
   \   0002E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E4   AA82         MOV       R2,DPL
   \   0002E6   AB83         MOV       R3,DPH
   \   0002E8   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002EB   7403         MOV       A,#0x3
   \   0002ED   12....       LCALL     ?DEALLOC_XSTACK8
    602            }
    603                   
    604            if ( pt_getSecFrameCounterCapabilities( newEntry ) )
   \                     ??gp_UpdateProxyTlb_13:
   \   0002F0   7442         MOV       A,#0x42
   \   0002F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F5   E0           MOVX      A,@DPTR
   \   0002F6   A2E5         MOV       C,0xE0 /* A   */.5
   \   0002F8   5009         JNC       ??gp_UpdateProxyTlb_14
    605            {
    606              PROXY_TBL_SET_SEC_CAP( &currEntry[PROXY_TBL_ENTRY_OPT] );
   \   0002FA   7401         MOV       A,#0x1
   \   0002FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002FF   E0           MOVX      A,@DPTR
   \   000300   D2E5         SETB      0xE0 /* A   */.5
   \   000302   F0           MOVX      @DPTR,A
    607            }
    608            
    609            osal_memcpy( &currEntry[PROXY_TBL_ENTRY_SEC_FRAME], &newEntry[PROXY_TBL_ENTRY_SEC_FRAME], sizeof ( uint32 ) );
   \                     ??gp_UpdateProxyTlb_14:
   \   000303                ; Setup parameters for call to function osal_memcpy
   \   000303   7450         MOV       A,#0x50
   \   000305   12....       LCALL     ?XSTACK_DISP0_8
   \   000308   A982         MOV       R1,DPL
   \   00030A   AA83         MOV       R2,DPH
   \   00030C   89..         MOV       ?V0,R1
   \   00030E   8A..         MOV       ?V1,R2
   \   000310   78..         MOV       R0,#?V0
   \   000312   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000315   7C04         MOV       R4,#0x4
   \   000317   7D00         MOV       R5,#0x0
   \   000319   7412         MOV       A,#0x12
   \   00031B   12....       LCALL     ?XSTACK_DISP0_8
   \   00031E   AA82         MOV       R2,DPL
   \   000320   AB83         MOV       R3,DPH
   \   000322   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000325   7403         MOV       A,#0x3
   \   000327   12....       LCALL     ?DEALLOC_XSTACK8
    610          
    611            currEntry[PROXY_TBL_ENTRY_GRP_RAD] = newEntry[PROXY_TBL_ENTRY_GRP_RAD];
   \   00032A   7481         MOV       A,#-0x7f
   \   00032C   12....       LCALL     ?XSTACK_DISP0_8
   \   00032F   E0           MOVX      A,@DPTR
   \   000330   C0E0         PUSH      A
   \   000332   7440         MOV       A,#0x40
   \   000334   12....       LCALL     ?XSTACK_DISP0_8
   \   000337   D0E0         POP       A
   \   000339   F0           MOVX      @DPTR,A
    612              
    613            currEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER] = newEntry[PROXY_TBL_ENTRY_SEARCH_COUNTER];
   \   00033A   7482         MOV       A,#-0x7e
   \   00033C   12....       LCALL     ?XSTACK_DISP0_8
   \   00033F   E0           MOVX      A,@DPTR
   \   000340   C0E0         PUSH      A
   \   000342   7441         MOV       A,#0x41
   \   000344   12....       LCALL     ?XSTACK_DISP0_8
   \   000347   D0E0         POP       A
   \   000349   F0           MOVX      @DPTR,A
    614             
    615            status = osal_nv_write( proxyTableIndex, 0,
    616                               PROXY_TBL_ENTRY_LEN, currEntry );
   \   00034A                ; Setup parameters for call to function osal_nv_write
   \   00034A   7401         MOV       A,#0x1
   \   00034C   12....       LCALL     ?XSTACK_DISP100_8
   \   00034F   88..         MOV       ?V0,R0
   \   000351   89..         MOV       ?V1,R1
   \   000353   78..         MOV       R0,#?V0
   \   000355   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000358   75..41       MOV       ?V0,#0x41
   \   00035B   75..00       MOV       ?V1,#0x0
   \   00035E   78..         MOV       R0,#?V0
   \   000360   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000363   7C00         MOV       R4,#0x0
   \   000365   7D00         MOV       R5,#0x0
   \   000367   EE           MOV       A,R6
   \   000368   FA           MOV       R2,A
   \   000369   EF           MOV       A,R7
   \   00036A   FB           MOV       R3,A
   \   00036B   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00036E   7404         MOV       A,#0x4
   \   000370   12....       LCALL     ?DEALLOC_XSTACK8
   \   000373   E9           MOV       A,R1
   \   000374   F5..         MOV       ?V7,A
    617            
    618            if ( osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    619                 osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    620                 osal_memcmp( &_NIB.nwkDevAddress, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   000376   75....       MOV       ?V0,#(_NIB + 20) & 0xff
   \   000379   75....       MOV       ?V1,#((_NIB + 20) >> 8) & 0xff
   \   00037C                ; Setup parameters for call to function osal_memcmp
   \   00037C   740C         MOV       A,#0xc
   \   00037E   12....       LCALL     ?XSTACK_DISP0_8
   \   000381   A982         MOV       R1,DPL
   \   000383   AA83         MOV       R2,DPH
   \   000385   89..         MOV       ?V4,R1
   \   000387   8A..         MOV       ?V5,R2
   \   000389   75..00       MOV       ?V6,#0x0
   \   00038C   78..         MOV       R0,#?V4
   \   00038E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000391   7C02         MOV       R4,#0x2
   \   000393   7D00         MOV       R5,#0x0
   \   000395   A9..         MOV       R1,?V0
   \   000397   AA..         MOV       R2,?V1
   \   000399   AB..         MOV       R3,?V2
   \   00039B   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00039E   7403         MOV       A,#0x3
   \   0003A0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003A3   E9           MOV       A,R1
   \   0003A4   704E         JNZ       ??gp_UpdateProxyTlb_3
   \   0003A6                ; Setup parameters for call to function osal_memcmp
   \   0003A6   7438         MOV       A,#0x38
   \   0003A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0003AB   A982         MOV       R1,DPL
   \   0003AD   AA83         MOV       R2,DPH
   \   0003AF   89..         MOV       ?V4,R1
   \   0003B1   8A..         MOV       ?V5,R2
   \   0003B3   78..         MOV       R0,#?V4
   \   0003B5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003B8   7C02         MOV       R4,#0x2
   \   0003BA   7D00         MOV       R5,#0x0
   \   0003BC   A9..         MOV       R1,?V0
   \   0003BE   AA..         MOV       R2,?V1
   \   0003C0   AB..         MOV       R3,?V2
   \   0003C2   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0003C5   7403         MOV       A,#0x3
   \   0003C7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003CA   E9           MOV       A,R1
   \   0003CB   7027         JNZ       ??gp_UpdateProxyTlb_3
   \   0003CD                ; Setup parameters for call to function osal_memcmp
   \   0003CD   743C         MOV       A,#0x3c
   \   0003CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D2   A982         MOV       R1,DPL
   \   0003D4   AA83         MOV       R2,DPH
   \   0003D6   89..         MOV       ?V4,R1
   \   0003D8   8A..         MOV       ?V5,R2
   \   0003DA   78..         MOV       R0,#?V4
   \   0003DC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003DF   7C02         MOV       R4,#0x2
   \   0003E1   7D00         MOV       R5,#0x0
   \   0003E3   A9..         MOV       R1,?V0
   \   0003E5   AA..         MOV       R2,?V1
   \   0003E7   AB..         MOV       R3,?V2
   \   0003E9   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0003EC   7403         MOV       A,#0x3
   \   0003EE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003F1   E9           MOV       A,R1
   \   0003F2   600B         JZ        ??gp_UpdateProxyTlb_1
    621            {
    622              NLME_ReportAddressConflict( _NIB.nwkDevAddress, TRUE );  
   \                     ??gp_UpdateProxyTlb_3:
   \   0003F4                ; Setup parameters for call to function NLME_ReportAddressConflict
   \   0003F4   7901         MOV       R1,#0x1
   \   0003F6   90....       MOV       DPTR,#_NIB + 20
   \   0003F9   12....       LCALL     ?Subroutine9 & 0xFFFF
    623            }
   \                     ??CrossCallReturnLabel_19:
   \   0003FC   12....       LCALL     `??NLME_ReportAddressConflict::?relay`; Banked call to: NLME_ReportAddressConflict
    624            
    625            return status;
   \                     ??gp_UpdateProxyTlb_1:
   \   0003FF   A9..         MOV       R1,?V7
   \                     ??gp_UpdateProxyTlb_7:
   \   000401   758205       MOV       DPL,#0x5
   \   000404   758301       MOV       DPH,#0x1
   \   000407   12....       LCALL     ?ADD_XSTACK_DISP0_16
   \   00040A   02....       LJMP      ??Subroutine10_0 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_9:
   \   00040D   7443         MOV       A,#0x43
   \   00040F   12....       LCALL     ?XSTACK_DISP0_8
   \   000412   E0           MOVX      A,@DPTR
   \   000413   A2E0         MOV       C,0xE0 /* A   */.0
   \   000415   4003         JC        $+5
   \   000417   02....       LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
   \   00041A                ; Setup parameters for call to function pt_addSinkGroup
   \   00041A   7401         MOV       A,#0x1
   \   00041C   12....       LCALL     ?XSTACK_DISP102_8
   \   00041F   7442         MOV       A,#0x42
   \   000421   12....       LCALL     ?XSTACK_DISP101_8
   \   000424   12....       LCALL     `??pt_addSinkGroup::?relay`; Banked call to: pt_addSinkGroup
   \   000427   E9           MOV       A,R1
   \   000428   6003         JZ        $+5
   \   00042A   02....       LJMP      ??gp_UpdateProxyTlb_11 & 0xFFFF
   \                     ??gp_UpdateProxyTlb_10:
   \   00042D   790C         MOV       R1,#0xc
   \   00042F   80D0         SJMP      ??gp_UpdateProxyTlb_7
    626          }
    627          
    628          /*********************************************************************
    629           * @fn          gp_CheckAnnouncedDevice
    630           *
    631           * @brief       General function to check if it has the announced device 
    632           *              listed in the SinkAddressList and look for address conflict
    633           *              resolution.
    634           *
    635           * @param       
    636           *
    637           * @return      
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          uint8 gp_CheckAnnouncedDevice ( uint8 *sinkIEEE, uint16 sinkNwkAddr )
   \                     gp_CheckAnnouncedDevice:
    640          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 69
   \   000005   74BB         MOV       A,#-0x45
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
   \   000014   85..82       MOV       DPL,?XSP + 0
   \   000017   85..83       MOV       DPH,?XSP + 1
   \   00001A   EC           MOV       A,R4
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   ED           MOV       A,R5
   \   00001E   F0           MOVX      @DPTR,A
    641            uint8 i;
    642            uint8 status;
    643            uint8 annceDelay;
    644            uint8 ProxyTableEntry[PROXY_TBL_ENTRY_LEN];
    645          
    646            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00001F   7E00         MOV       R6,#0x0
   \   000021   A8..         MOV       R0,?XSP + 0
   \   000023   A9..         MOV       R1,?XSP + 1
   \   000025   88..         MOV       ?V0,R0
   \   000027   89..         MOV       ?V1,R1
   \   000029   8E..         MOV       ?V2,R6
    647            {
    648              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), ProxyTableEntry );
   \                     ??gp_CheckAnnouncedDevice_0:
   \   00002B                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   00002B   7404         MOV       A,#0x4
   \   00002D   12....       LCALL     ?XSTACK_DISP102_8
   \   000030   EE           MOV       A,R6
   \   000031   2410         ADD       A,#0x10
   \   000033   FA           MOV       R2,A
   \   000034   E4           CLR       A
   \   000035   3403         ADDC      A,#0x3
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   00003B   E9           MOV       A,R1
   \   00003C   F8           MOV       R0,A
    649          
    650              if ( status == NV_OPER_FAILED )
   \   00003D   740A         MOV       A,#0xa
   \   00003F   68           XRL       A,R0
   \   000040   7005         JNZ       ??gp_CheckAnnouncedDevice_1
    651              {
    652                // FAIL
    653          
    654                return ZFailure;
   \   000042   7901         MOV       R1,#0x1
   \   000044   02....       LJMP      ??gp_CheckAnnouncedDevice_2 & 0xFFFF
    655              }
    656              
    657              // if the entry is empty
    658              if ( status == NV_INVALID_DATA )
   \                     ??gp_CheckAnnouncedDevice_1:
   \   000047   740D         MOV       A,#0xd
   \   000049   68           XRL       A,R0
   \   00004A   7003         JNZ       $+5
   \   00004C   02....       LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
    659              {
    660                continue;
    661              }
    662              
    663              // Compare for nwk alias address conflict
    664              if ( osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_ALIAS], sizeof( uint16 ) )        ||
    665                   osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof( uint16 ) ) ||
    666                   osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof( uint16 ) )   )
   \   00004F                ; Setup parameters for call to function osal_memcmp
   \   00004F   740F         MOV       A,#0xf
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   A982         MOV       R1,DPL
   \   000056   AA83         MOV       R2,DPH
   \   000058   89..         MOV       ?V4,R1
   \   00005A   8A..         MOV       ?V5,R2
   \   00005C   75..00       MOV       ?V6,#0x0
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000064   7C02         MOV       R4,#0x2
   \   000066   7D00         MOV       R5,#0x0
   \   000068   A9..         MOV       R1,?V0
   \   00006A   AA..         MOV       R2,?V1
   \   00006C   AB..         MOV       R3,?V2
   \   00006E   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000071   7403         MOV       A,#0x3
   \   000073   12....       LCALL     ?DEALLOC_XSTACK8
   \   000076   E9           MOV       A,R1
   \   000077   704E         JNZ       ??gp_CheckAnnouncedDevice_4
   \   000079                ; Setup parameters for call to function osal_memcmp
   \   000079   743B         MOV       A,#0x3b
   \   00007B   12....       LCALL     ?XSTACK_DISP0_8
   \   00007E   A982         MOV       R1,DPL
   \   000080   AA83         MOV       R2,DPH
   \   000082   89..         MOV       ?V4,R1
   \   000084   8A..         MOV       ?V5,R2
   \   000086   78..         MOV       R0,#?V4
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008B   7C02         MOV       R4,#0x2
   \   00008D   7D00         MOV       R5,#0x0
   \   00008F   A9..         MOV       R1,?V0
   \   000091   AA..         MOV       R2,?V1
   \   000093   AB..         MOV       R3,?V2
   \   000095   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000098   7403         MOV       A,#0x3
   \   00009A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009D   E9           MOV       A,R1
   \   00009E   7027         JNZ       ??gp_CheckAnnouncedDevice_4
   \   0000A0                ; Setup parameters for call to function osal_memcmp
   \   0000A0   743F         MOV       A,#0x3f
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   A982         MOV       R1,DPL
   \   0000A7   AA83         MOV       R2,DPH
   \   0000A9   89..         MOV       ?V4,R1
   \   0000AB   8A..         MOV       ?V5,R2
   \   0000AD   78..         MOV       R0,#?V4
   \   0000AF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B2   7C02         MOV       R4,#0x2
   \   0000B4   7D00         MOV       R5,#0x0
   \   0000B6   A9..         MOV       R1,?V0
   \   0000B8   AA..         MOV       R2,?V1
   \   0000BA   AB..         MOV       R3,?V2
   \   0000BC   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000BF   7403         MOV       A,#0x3
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV       A,R1
   \   0000C5   6077         JZ        ??gp_CheckAnnouncedDevice_5
    667              {
    668                // Do address conflict resolution
    669                NLME_SendNetworkStatus( NWK_BROADCAST_SHORTADDR_DEVRXON,
    670                                   sinkNwkAddr, NWKSTAT_ADDRESS_CONFLICT, TRUE );
   \                     ??gp_CheckAnnouncedDevice_4:
   \   0000C7                ; Setup parameters for call to function NLME_SendNetworkStatus
   \   0000C7   75..01       MOV       ?V3,#0x1
   \   0000CA   78..         MOV       R0,#?V3
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CF   790D         MOV       R1,#0xd
   \   0000D1   7401         MOV       A,#0x1
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   FC           MOV       R4,A
   \   0000D8   A3           INC       DPTR
   \   0000D9   E0           MOVX      A,@DPTR
   \   0000DA   FD           MOV       R5,A
   \   0000DB   7AFD         MOV       R2,#-0x3
   \   0000DD   7BFF         MOV       R3,#-0x1
   \   0000DF   12....       LCALL     `??NLME_SendNetworkStatus::?relay`; Banked call to: NLME_SendNetworkStatus
   \   0000E2   7401         MOV       A,#0x1
   \   0000E4   12....       LCALL     ?DEALLOC_XSTACK8
    671                
    672                aliasConflictAnnce.nwkAddr = sinkNwkAddr;
   \   0000E7   85..82       MOV       DPL,?XSP + 0
   \   0000EA   85..83       MOV       DPH,?XSP + 1
   \   0000ED   E0           MOVX      A,@DPTR
   \   0000EE   F8           MOV       R0,A
   \   0000EF   A3           INC       DPTR
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   F9           MOV       R1,A
   \   0000F2   90....       MOV       DPTR,#aliasConflictAnnce
   \   0000F5   E8           MOV       A,R0
   \   0000F6   F0           MOVX      @DPTR,A
   \   0000F7   A3           INC       DPTR
   \   0000F8   E9           MOV       A,R1
   \   0000F9   F0           MOVX      @DPTR,A
    673                osal_memset( aliasConflictAnnce.extAddr, 0xFF, Z_EXTADDR_LEN );
   \   0000FA                ; Setup parameters for call to function osal_memset
   \   0000FA   7C08         MOV       R4,#0x8
   \   0000FC   7D00         MOV       R5,#0x0
   \   0000FE   79FF         MOV       R1,#-0x1
   \   000100   7A..         MOV       R2,#(aliasConflictAnnce + 2) & 0xff
   \   000102   7B..         MOV       R3,#((aliasConflictAnnce + 2) >> 8) & 0xff
   \   000104   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    674                aliasConflictAnnce.capabilities = 0;
   \   000107   90....       MOV       DPTR,#aliasConflictAnnce + 10
   \   00010A   E4           CLR       A
   \   00010B   F0           MOVX      @DPTR,A
    675                
    676                annceDelay = ( osal_rand()/650 ) + 5; // ( 65535/650 = 100 ) + 5 
   \   00010C                ; Setup parameters for call to function osal_rand
   \   00010C   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   00010F   8A..         MOV       ?V4,R2
   \   000111   8B..         MOV       ?V5,R3
   \   000113   A8..         MOV       R0,?V4
   \   000115   A9..         MOV       R1,?V5
    677                // where:
    678                // 100 is Dmax
    679                // 5   is Dmin
    680                osal_start_timerEx( gp_TaskID, GP_PROXY_ALIAS_CONFLICT_TIMEOUT, annceDelay );
   \   000117                ; Setup parameters for call to function osal_start_timerEx
   \   000117   7A8A         MOV       R2,#-0x76
   \   000119   7B02         MOV       R3,#0x2
   \   00011B   12....       LCALL     ?US_DIV_MOD
   \   00011E   E8           MOV       A,R0
   \   00011F   2405         ADD       A,#0x5
   \   000121   F5..         MOV       ?V4,A
   \   000123   E4           CLR       A
   \   000124   F5..         MOV       ?V5,A
   \   000126   F5..         MOV       ?V7,A
   \   000128   78..         MOV       R0,#?V4
   \   00012A   12....       LCALL     ?PUSH_XSTACK_I_FOUR
   \   00012D   7A10         MOV       R2,#0x10
   \   00012F   7B00         MOV       R3,#0x0
   \   000131   90....       MOV       DPTR,#gp_TaskID
   \   000134   E0           MOVX      A,@DPTR
   \   000135   F9           MOV       R1,A
   \   000136   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000139   7404         MOV       A,#0x4
   \   00013B   12....       LCALL     ?DEALLOC_XSTACK8
    681              }
    682          
    683              if( sinkIEEE )
   \                     ??gp_CheckAnnouncedDevice_5:
   \   00013E   7402         MOV       A,#0x2
   \   000140   12....       LCALL     ?XSTACK_DISP0_8
   \   000143   E0           MOVX      A,@DPTR
   \   000144   F8           MOV       R0,A
   \   000145   A3           INC       DPTR
   \   000146   E0           MOVX      A,@DPTR
   \   000147   F9           MOV       R1,A
   \   000148   E8           MOV       A,R0
   \   000149   49           ORL       A,R1
   \   00014A   7003         JNZ       $+5
   \   00014C   02....       LJMP      ??gp_CheckAnnouncedDevice_3 & 0xFFFF
    684              {
    685                //Check if one of the Sink IEEE is the same
    686                if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \   00014F                ; Setup parameters for call to function osal_memcmp
   \   00014F   7426         MOV       A,#0x26
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   A982         MOV       R1,DPL
   \   000156   AA83         MOV       R2,DPH
   \   000158   89..         MOV       ?V4,R1
   \   00015A   8A..         MOV       ?V5,R2
   \   00015C   78..         MOV       R0,#?V4
   \   00015E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000161   7C08         MOV       R4,#0x8
   \   000163   7D00         MOV       R5,#0x0
   \   000165   7405         MOV       A,#0x5
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00016D   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000170   7403         MOV       A,#0x3
   \   000172   12....       LCALL     ?DEALLOC_XSTACK8
   \   000175   E9           MOV       A,R1
   \   000176   6034         JZ        ??gp_CheckAnnouncedDevice_6
    687                {
    688                  // If Nwk address is different, then update the new address
    689                  if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   000178                ; Setup parameters for call to function osal_memcmp
   \   000178   742E         MOV       A,#0x2e
   \   00017A   12....       LCALL     ?XSTACK_DISP0_8
   \   00017D   A982         MOV       R1,DPL
   \   00017F   AA83         MOV       R2,DPH
   \   000181   89..         MOV       ?V4,R1
   \   000183   8A..         MOV       ?V5,R2
   \   000185   78..         MOV       R0,#?V4
   \   000187   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00018A   7C02         MOV       R4,#0x2
   \   00018C   7D00         MOV       R5,#0x0
   \   00018E   A9..         MOV       R1,?V0
   \   000190   AA..         MOV       R2,?V1
   \   000192   AB..         MOV       R3,?V2
   \   000194   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000197   7403         MOV       A,#0x3
   \   000199   12....       LCALL     ?DEALLOC_XSTACK8
   \   00019C   E9           MOV       A,R1
   \   00019D   7077         JNZ       ??gp_CheckAnnouncedDevice_3
    690                  {
    691                    osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   00019F                ; Setup parameters for call to function osal_memcpy
   \   00019F   78..         MOV       R0,#?V0
   \   0001A1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001A4   7C02         MOV       R4,#0x2
   \   0001A6   7D00         MOV       R5,#0x0
   \   0001A8   7431         MOV       A,#0x31
   \   0001AA   805B         SJMP      ??gp_CheckAnnouncedDevice_7
    692                  }
    693                }
    694                else if ( osal_memcmp( sinkIEEE, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], Z_EXTADDR_LEN ) )
   \                     ??gp_CheckAnnouncedDevice_6:
   \   0001AC                ; Setup parameters for call to function osal_memcmp
   \   0001AC   7430         MOV       A,#0x30
   \   0001AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B1   A982         MOV       R1,DPL
   \   0001B3   AA83         MOV       R2,DPH
   \   0001B5   89..         MOV       ?V4,R1
   \   0001B7   8A..         MOV       ?V5,R2
   \   0001B9   78..         MOV       R0,#?V4
   \   0001BB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001BE   7C08         MOV       R4,#0x8
   \   0001C0   7D00         MOV       R5,#0x0
   \   0001C2   7405         MOV       A,#0x5
   \   0001C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C7   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0001CA   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001CD   7403         MOV       A,#0x3
   \   0001CF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D2   E9           MOV       A,R1
   \   0001D3   6041         JZ        ??gp_CheckAnnouncedDevice_3
    695                {
    696                  // If Nwk address is different, then update the new address
    697                  if ( !osal_memcmp( &sinkNwkAddr, &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof( uint16 ) ) )
   \   0001D5                ; Setup parameters for call to function osal_memcmp
   \   0001D5   7438         MOV       A,#0x38
   \   0001D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001DA   A982         MOV       R1,DPL
   \   0001DC   AA83         MOV       R2,DPH
   \   0001DE   89..         MOV       ?V4,R1
   \   0001E0   8A..         MOV       ?V5,R2
   \   0001E2   78..         MOV       R0,#?V4
   \   0001E4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001E7   7C02         MOV       R4,#0x2
   \   0001E9   7D00         MOV       R5,#0x0
   \   0001EB   A9..         MOV       R1,?V0
   \   0001ED   AA..         MOV       R2,?V1
   \   0001EF   AB..         MOV       R3,?V2
   \   0001F1   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001F4   7403         MOV       A,#0x3
   \   0001F6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001F9   E9           MOV       A,R1
   \   0001FA   701A         JNZ       ??gp_CheckAnnouncedDevice_3
    698                  {
    699                    osal_memcpy( &ProxyTableEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], &sinkNwkAddr, sizeof( uint16 ) );
   \   0001FC                ; Setup parameters for call to function osal_memcpy
   \   0001FC   78..         MOV       R0,#?V0
   \   0001FE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000201   7C02         MOV       R4,#0x2
   \   000203   7D00         MOV       R5,#0x0
   \   000205   743B         MOV       A,#0x3b
   \                     ??gp_CheckAnnouncedDevice_7:
   \   000207   12....       LCALL     ?XSTACK_DISP0_8
   \   00020A   AA82         MOV       R2,DPL
   \   00020C   AB83         MOV       R3,DPH
   \   00020E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000211   7403         MOV       A,#0x3
   \   000213   12....       LCALL     ?DEALLOC_XSTACK8
    700                  }
    701                }
    702              }
    703            }
   \                     ??gp_CheckAnnouncedDevice_3:
   \   000216   0E           INC       R6
   \   000217   EE           MOV       A,R6
   \   000218   C3           CLR       C
   \   000219   9406         SUBB      A,#0x6
   \   00021B   5003         JNC       $+5
   \   00021D   02....       LJMP      ??gp_CheckAnnouncedDevice_0 & 0xFFFF
    704              
    705            return ZSuccess;
   \   000220   7900         MOV       R1,#0x0
   \                     ??gp_CheckAnnouncedDevice_2:
   \   000222   7445         MOV       A,#0x45
   \   000224   02....       LJMP      ?Subroutine0 & 0xFFFF
    706          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   A982         MOV       R1,DPL
   \   00000A   AA83         MOV       R2,DPH
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   22           RET
    707          
    708           /*********************************************************************
    709           * PRIVATE FUNCTIONS
    710           *********************************************************************/
    711          
    712          /*********************************************************************
    713           * @fn          gp_PopulateProxyTblEntry
    714           *
    715           * @brief       Populate the given item data
    716           *
    717           * @param       pData - Pointer to the new data
    718           *              size - size of the new data
    719           *              pTblEntryVector - Pointer to the new vector
    720           *              vectorLen - Position in the vector to write the data
    721           *
    722           * @return
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          static void gp_PopulateProxyTblEntry( uint8* pData, uint8 size, uint8* pTblEntryVector, uint8* vectorLen )
   \                     gp_PopulateProxyTblEntry:
    725          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   89..         MOV       ?V3,R1
   \   00000B   EC           MOV       A,R4
   \   00000C   FA           MOV       R2,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FB           MOV       R3,A
   \   00000F   740C         MOV       A,#0xc
   \   000011   12....       LCALL     ?XSTACK_DISP0_8
   \   000014   E0           MOVX      A,@DPTR
   \   000015   FE           MOV       R6,A
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   FF           MOV       R7,A
    726            pTblEntryVector += *(uint8*)vectorLen;
    727            
    728            osal_memcpy( pTblEntryVector, pData, size );
   \   000019                ; Setup parameters for call to function osal_memcpy
   \   000019   75..00       MOV       ?V2,#0x0
   \   00001C   78..         MOV       R0,#?V0
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000021   AC..         MOV       R4,?V3
   \   000023   7D00         MOV       R5,#0x0
   \   000025   8E82         MOV       DPL,R6
   \   000027   8F83         MOV       DPH,R7
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F8           MOV       R0,A
   \   00002B   EA           MOV       A,R2
   \   00002C   28           ADD       A,R0
   \   00002D   FA           MOV       R2,A
   \   00002E   E4           CLR       A
   \   00002F   3B           ADDC      A,R3
   \   000030   FB           MOV       R3,A
   \   000031   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000034   7403         MOV       A,#0x3
   \   000036   12....       LCALL     ?DEALLOC_XSTACK8
    729            *(uint8*)vectorLen += size;
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   25..         ADD       A,?V3
   \   000040   F0           MOVX      @DPTR,A
    730          }
   \   000041   02....       LJMP      ?Subroutine1 & 0xFFFF
    731          
    732          /*********************************************************************
    733           * @fn          pt_getAlias
    734           *
    735           * @brief       Get Bit to update assigned alias field or not
    736           *
    737           * @param       pNew - New entry array to be added
    738           *
    739           * @return      newAlias - TRUE if assigned alias bit is set
    740           */
    741          static uint8 pt_getAlias( uint8* pNew )
    742          {
    743            bool newAlias;
    744            
    745            newAlias = PROXY_TBL_GET_ASSIGNED_ALIAS( pNew[PROXY_TBL_ENTRY_OPT + 1] );
    746            
    747            return newAlias;
    748          }
    749          
    750          /*********************************************************************
    751           * @fn          pt_getSecurity
    752           *
    753           * @brief       Get Bit to update security options field or not
    754           *
    755           * @param       pNew - New entry array to be added
    756           *
    757           * @return      secUse - TRUE if security use bit is set
    758           */
    759          static uint8 pt_getSecurity( uint8* pNew )
    760          {
    761            bool secUse;
    762            
    763            secUse = PROXY_TBL_GET_SEC_USE( pNew[PROXY_TBL_ENTRY_OPT + 1] );
    764          
    765            return secUse;
    766          }
    767          
    768          /*********************************************************************
    769           * @fn          pt_getSecFrameCounterCapabilities
    770           *
    771           * @brief       Get Bit to update security frame counter capabilities
    772           *
    773           * @param       pNew - New entry array to be added
    774           *
    775           * @return      secCap - TRUE if security frame counter capabilities bit is set
    776           */
    777          static uint8 pt_getSecFrameCounterCapabilities( uint8* pNew )
    778          {
    779            bool secCap;
    780            
    781            secCap = PROXY_TBL_GET_SEC_CAP( pNew[PROXY_TBL_ENTRY_OPT] );
    782            
    783            return secCap;
    784          }
    785          
    786          /*********************************************************************
    787           * @fn          pt_updateLightweightUnicastSink
    788           *
    789           * @brief       To add new sink entry
    790           *
    791           * @param       pNew - New entry array to be added
    792           *              pCurr - The current entry array in the proxy table
    793           *
    794           * @return      TRUE new entry added, FALSE if not
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          static uint8 pt_updateLightweightUnicastSink( uint8* pNew, uint8* pCurr, uint8 addSink )
   \                     pt_updateLightweightUnicastSink:
    797          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 151
   \   000005   7469         MOV       A,#0x69
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7406         MOV       A,#0x6
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EC           MOV       A,R4
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   ED           MOV       A,R5
   \   000013   F0           MOVX      @DPTR,A
   \   000014   E9           MOV       A,R1
   \   000015   FE           MOV       R6,A
    798            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000016   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_6`
   \   000019   7456         MOV       A,#0x56
   \   00001B   12....       LCALL     ?XSTACK_DISP102_8
   \   00001E   7441         MOV       A,#0x41
   \   000020   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    799            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000023   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_7`
   \   000026   7415         MOV       A,#0x15
   \   000028   12....       LCALL     ?XSTACK_DISP102_8
   \   00002B   7441         MOV       A,#0x41
   \   00002D   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    800            uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000030   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_8`
   \   000033   740B         MOV       A,#0xb
   \   000035   12....       LCALL     ?XSTACK_DISP102_8
   \   000038   740A         MOV       A,#0xa
   \   00003A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    801            
    802            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   00003D                ; Setup parameters for call to function osal_memcpy
   \   00003D   8A..         MOV       ?V0,R2
   \   00003F   8B..         MOV       ?V1,R3
   \   000041   F5..         MOV       ?V2,A
   \   000043   78..         MOV       R0,#?V0
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000048   7C41         MOV       R4,#0x41
   \   00004A   7D00         MOV       R5,#0x0
   \   00004C   7459         MOV       A,#0x59
   \   00004E   12....       LCALL     ?XSTACK_DISP101_8
   \   000051   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000054   7403         MOV       A,#0x3
   \   000056   12....       LCALL     ?DEALLOC_XSTACK8
    803            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   000059                ; Setup parameters for call to function osal_memcpy
   \   000059   7406         MOV       A,#0x6
   \   00005B   12....       LCALL     ?XSTACK_DISP0_8
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F5..         MOV       ?V0,A
   \   000061   A3           INC       DPTR
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F5..         MOV       ?V1,A
   \   000065   78..         MOV       R0,#?V0
   \   000067   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006A   7C41         MOV       R4,#0x41
   \   00006C   7D00         MOV       R5,#0x0
   \   00006E   7418         MOV       A,#0x18
   \   000070   12....       LCALL     ?XSTACK_DISP101_8
   \   000073   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000076   7403         MOV       A,#0x3
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
    804            
    805            
    806            // if addSink is TRUE then add the sink to current entry
    807            if ( addSink ) 
   \   00007B   7441         MOV       A,#0x41
   \   00007D   12....       LCALL     ?XSTACK_DISP0_8
   \   000080   A982         MOV       R1,DPL
   \   000082   AA83         MOV       R2,DPH
   \   000084   7403         MOV       A,#0x3
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   E9           MOV       A,R1
   \   00008A   F0           MOVX      @DPTR,A
   \   00008B   A3           INC       DPTR
   \   00008C   EA           MOV       A,R2
   \   00008D   F0           MOVX      @DPTR,A
   \   00008E   A3           INC       DPTR
   \   00008F   E4           CLR       A
   \   000090   F0           MOVX      @DPTR,A
   \   000091   7437         MOV       A,#0x37
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   A982         MOV       R1,DPL
   \   000098   AA83         MOV       R2,DPH
   \   00009A   7408         MOV       A,#0x8
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   E9           MOV       A,R1
   \   0000A0   F0           MOVX      @DPTR,A
   \   0000A1   A3           INC       DPTR
   \   0000A2   EA           MOV       A,R2
   \   0000A3   F0           MOVX      @DPTR,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E4           CLR       A
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   7478         MOV       A,#0x78
   \   0000A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AC   A982         MOV       R1,DPL
   \   0000AE   AA83         MOV       R2,DPH
   \   0000B0   89..         MOV       ?V0,R1
   \   0000B2   8A..         MOV       ?V1,R2
   \   0000B4   740B         MOV       A,#0xb
   \   0000B6   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B9   85..82       MOV       DPL,?XSP + 0
   \   0000BC   85..83       MOV       DPH,?XSP + 1
   \   0000BF   E8           MOV       A,R0
   \   0000C0   F0           MOVX      @DPTR,A
   \   0000C1   A3           INC       DPTR
   \   0000C2   E9           MOV       A,R1
   \   0000C3   F0           MOVX      @DPTR,A
   \   0000C4   A3           INC       DPTR
   \   0000C5   E4           CLR       A
   \   0000C6   F0           MOVX      @DPTR,A
   \   0000C7   EE           MOV       A,R6
   \   0000C8   78..         MOV       R0,#?V0
   \   0000CA   6062         JZ        ??pt_updateLightweightUnicastSink_0
    808            {
    809              // if the incomming Sink entry is different to the current entry
    810              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000CC                ; Setup parameters for call to function osal_memcmp
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CF   7C0A         MOV       R4,#0xa
   \   0000D1   7D00         MOV       R5,#0x0
   \   0000D3   740B         MOV       A,#0xb
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000DB   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000DE   7403         MOV       A,#0x3
   \   0000E0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E3   E9           MOV       A,R1
   \   0000E4   6003         JZ        $+5
   \   0000E6   02....       LJMP      ??pt_updateLightweightUnicastSink_1 & 0xFFFF
    811              {
    812                // add the sink entry in the next slot if empty
    813                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   0000E9                ; Setup parameters for call to function osal_memcmp
   \   0000E9   7403         MOV       A,#0x3
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \   0000F1   7C0A         MOV       R4,#0xa
   \   0000F3   7D00         MOV       R5,#0x0
   \   0000F5   7403         MOV       A,#0x3
   \   0000F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000FD   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000100   7403         MOV       A,#0x3
   \   000102   12....       LCALL     ?DEALLOC_XSTACK8
   \   000105   E9           MOV       A,R1
   \   000106   78..         MOV       R0,#?V0
   \   000108   6006         JZ        ??pt_updateLightweightUnicastSink_2
    814                {
    815                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN );
   \   00010A                ; Setup parameters for call to function osal_memcpy
   \   00010A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00010D   02....       LJMP      ??pt_updateLightweightUnicastSink_3 & 0xFFFF
    816                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    817                  return TRUE;
    818                }
    819              }
    820              else 
    821              {
    822                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    823               return TRUE;
    824              }
    825              // if the incomming Sink entry is different to the current entry
    826              if ( !osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??pt_updateLightweightUnicastSink_2:
   \   000110                ; Setup parameters for call to function osal_memcmp
   \   000110   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000113   7C0A         MOV       R4,#0xa
   \   000115   7D00         MOV       R5,#0x0
   \   000117   7406         MOV       A,#0x6
   \   000119   12....       LCALL     ?XSTACK_DISP0_8
   \   00011C   12....       LCALL     ?Subroutine5 & 0xFFFF
    827              {
    828                return FALSE;
    829              }
    830            }
   \                     ??CrossCallReturnLabel_7:
   \   00011F   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000122   7403         MOV       A,#0x3
   \   000124   12....       LCALL     ?DEALLOC_XSTACK8
    831            else
    832            {
    833              // if the incomming Sink entry is the same to the current entry
    834              if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    835              {
    836                // Move the next sink entry to current
    837                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN );
    838                // Invalidate the sink entry
    839                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    840                
    841                // if the sink entry is empty then remove the proxy table entry
    842                if ( osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    843                {
    844                  gp_ResetProxyBasicTblEntry( currEntry );
    845                }
    846                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    847                return TRUE;
    848              }
    849              // if the incomming Sink entry is the same to the current entry
    850              else if ( osal_memcmp( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
    851              {
    852                // Invalidate the sink entry
    853                osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], freeSinkEntry, LSINK_ADDR_LEN );
    854                osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    855                return TRUE;
    856              }
    857            }
    858            return FALSE;
   \                     ??pt_updateLightweightUnicastSink_4:
   \   000127   7900         MOV       R1,#0x0
   \                     ??pt_updateLightweightUnicastSink_5:
   \   000129   7497         MOV       A,#-0x69
   \   00012B   02....       LJMP      ?Subroutine2 & 0xFFFF
   \                     ??pt_updateLightweightUnicastSink_0:
   \   00012E                ; Setup parameters for call to function osal_memcmp
   \   00012E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000131   7C0A         MOV       R4,#0xa
   \   000133   7D00         MOV       R5,#0x0
   \   000135   740B         MOV       A,#0xb
   \   000137   12....       LCALL     ?XSTACK_DISP0_8
   \   00013A   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00013D   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000140   7403         MOV       A,#0x3
   \   000142   12....       LCALL     ?DEALLOC_XSTACK8
   \   000145   E9           MOV       A,R1
   \   000146   7003         JNZ       $+5
   \   000148   02....       LJMP      ??pt_updateLightweightUnicastSink_6 & 0xFFFF
   \   00014B                ; Setup parameters for call to function osal_memcpy
   \   00014B   7403         MOV       A,#0x3
   \   00014D   12....       LCALL     ?XSTACK_DISP0_8
   \   000150   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \   000153   7C0A         MOV       R4,#0xa
   \   000155   7D00         MOV       R5,#0x0
   \   000157   743A         MOV       A,#0x3a
   \   000159   12....       LCALL     ?XSTACK_DISP0_8
   \   00015C   AA82         MOV       R2,DPL
   \   00015E   AB83         MOV       R3,DPH
   \   000160   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000163   7403         MOV       A,#0x3
   \   000165   12....       LCALL     ?DEALLOC_XSTACK8
   \   000168                ; Setup parameters for call to function osal_memcpy
   \   000168   85..82       MOV       DPL,?XSP + 0
   \   00016B   85..83       MOV       DPH,?XSP + 1
   \   00016E   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \   000171   7C0A         MOV       R4,#0xa
   \   000173   7D00         MOV       R5,#0x0
   \   000175   7444         MOV       A,#0x44
   \   000177   12....       LCALL     ?XSTACK_DISP0_8
   \   00017A   AA82         MOV       R2,DPL
   \   00017C   AB83         MOV       R3,DPH
   \   00017E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000181   7403         MOV       A,#0x3
   \   000183   12....       LCALL     ?DEALLOC_XSTACK8
   \   000186                ; Setup parameters for call to function osal_memcmp
   \   000186   7408         MOV       A,#0x8
   \   000188   12....       LCALL     ?XSTACK_DISP0_8
   \   00018B   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \   00018E   7C0A         MOV       R4,#0xa
   \   000190   7D00         MOV       R5,#0x0
   \   000192   7403         MOV       A,#0x3
   \   000194   12....       LCALL     ?XSTACK_DISP0_8
   \   000197   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00019A   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00019D   7403         MOV       A,#0x3
   \   00019F   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A2   E9           MOV       A,R1
   \   0001A3   6008         JZ        ??pt_updateLightweightUnicastSink_1
   \   0001A5                ; Setup parameters for call to function gp_ResetProxyBasicTblEntry
   \   0001A5   7415         MOV       A,#0x15
   \   0001A7   12....       LCALL     ?XSTACK_DISP101_8
   \   0001AA   12....       LCALL     `??gp_ResetProxyBasicTblEntry::?relay`; Banked call to: gp_ResetProxyBasicTblEntry
   \                     ??pt_updateLightweightUnicastSink_1:
   \   0001AD                ; Setup parameters for call to function osal_memcpy
   \   0001AD   7415         MOV       A,#0x15
   \   0001AF   12....       LCALL     ?XSTACK_DISP100_8
   \   0001B2   88..         MOV       ?V0,R0
   \   0001B4   89..         MOV       ?V1,R1
   \   0001B6   78..         MOV       R0,#?V0
   \   0001B8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001BB   7C41         MOV       R4,#0x41
   \   0001BD   7D00         MOV       R5,#0x0
   \   0001BF   7409         MOV       A,#0x9
   \   0001C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C4   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0001C7   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001CA   7403         MOV       A,#0x3
   \   0001CC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CF   7901         MOV       R1,#0x1
   \   0001D1   02....       LJMP      ??pt_updateLightweightUnicastSink_5 & 0xFFFF
   \                     ??pt_updateLightweightUnicastSink_6:
   \   0001D4                ; Setup parameters for call to function osal_memcmp
   \   0001D4   78..         MOV       R0,#?V0
   \   0001D6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001D9   7C0A         MOV       R4,#0xa
   \   0001DB   7D00         MOV       R5,#0x0
   \   0001DD   7406         MOV       A,#0x6
   \   0001DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E2   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0001E5   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001E8   7403         MOV       A,#0x3
   \   0001EA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001ED   E9           MOV       A,R1
   \   0001EE   7003         JNZ       $+5
   \   0001F0   02....       LJMP      ??pt_updateLightweightUnicastSink_4 & 0xFFFF
   \   0001F3                ; Setup parameters for call to function osal_memcpy
   \   0001F3   85..82       MOV       DPL,?XSP + 0
   \   0001F6   85..83       MOV       DPH,?XSP + 1
   \   0001F9   12....       LCALL     ?PUSH_XSTACK8_X_THREE
   \                     ??pt_updateLightweightUnicastSink_3:
   \   0001FC   7C0A         MOV       R4,#0xa
   \   0001FE   7D00         MOV       R5,#0x0
   \   000200   7444         MOV       A,#0x44
   \   000202   12....       LCALL     ?XSTACK_DISP0_8
   \   000205   AA82         MOV       R2,DPL
   \   000207   AB83         MOV       R3,DPH
   \   000209   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00020C   7403         MOV       A,#0x3
   \   00020E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000211   809A         SJMP      ??pt_updateLightweightUnicastSink_1
    859          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F9           MOV       R1,A
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA
    860          
    861          /*********************************************************************
    862           * @fn          pt_addSinkGroup
    863           *
    864           * @brief       To add new sink group entry
    865           *
    866           * @param       pNew - New entry array to be added
    867           *              pCurr - The current entry array in the proxy table
    868           *
    869           * @return      TRUE new entry added, FALSE if not
    870           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    871          static uint8 pt_addSinkGroup( uint8* pNew, uint8* pCurr )
   \                     pt_addSinkGroup:
    872          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 130
   \   000005   747E         MOV       A,#0x7e
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EC           MOV       A,R4
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
    873            bool newSinkGroup;
    874            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00000E   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_9`
   \   000011   7441         MOV       A,#0x41
   \   000013   12....       LCALL     ?XSTACK_DISP102_8
   \   000016   7441         MOV       A,#0x41
   \   000018   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    875            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00001B   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_10`
   \   00001E   AC..         MOV       R4,?XSP + 0
   \   000020   AD..         MOV       R5,?XSP + 1
   \   000022   7441         MOV       A,#0x41
   \   000024   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    876            
    877            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
   \   000027                ; Setup parameters for call to function osal_memcpy
   \   000027   8A..         MOV       ?V0,R2
   \   000029   8B..         MOV       ?V1,R3
   \   00002B   F5..         MOV       ?V2,A
   \   00002D   78..         MOV       R0,#?V0
   \   00002F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000032   7C41         MOV       R4,#0x41
   \   000034   7D00         MOV       R5,#0x0
   \   000036   7444         MOV       A,#0x44
   \   000038   12....       LCALL     ?XSTACK_DISP101_8
   \   00003B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003E   7403         MOV       A,#0x3
   \   000040   12....       LCALL     ?DEALLOC_XSTACK8
    878            osal_memcpy( &currEntry, pCurr, PROXY_TBL_ENTRY_LEN );
   \   000043                ; Setup parameters for call to function osal_memcpy
   \   000043   8E..         MOV       ?V0,R6
   \   000045   8F..         MOV       ?V1,R7
   \   000047   78..         MOV       R0,#?V0
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00004C   7C41         MOV       R4,#0x41
   \   00004E   7D00         MOV       R5,#0x0
   \   000050   7403         MOV       A,#0x3
   \   000052   12....       LCALL     ?XSTACK_DISP101_8
   \   000055   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000058   7403         MOV       A,#0x3
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
    879            
    880            newSinkGroup = PROXY_TBL_GET_DGROUP( newEntry[PROXY_TBL_ENTRY_OPT] );
    881            newSinkGroup = PROXY_TBL_GET_CGROUP( newEntry[PROXY_TBL_ENTRY_OPT + 1] );
    882            
    883            if ( newSinkGroup )
    884            {
    885              if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \   00005D   7442         MOV       A,#0x42
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   E0           MOVX      A,@DPTR
   \   000063   A2E0         MOV       C,0xE0 /* A   */.0
   \   000065   4003         JC        $+5
   \   000067   02....       LJMP      ??pt_addSinkGroup_0 & 0xFFFF
   \   00006A   7436         MOV       A,#0x36
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   E0           MOVX      A,@DPTR
   \   000070   A2E1         MOV       C,0xE0 /* A   */.1
   \   000072   5003         JNC       $+5
   \   000074   02....       LJMP      ??pt_addSinkGroup_0 & 0xFFFF
    886              {
    887                if ( !GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \   000077   7478         MOV       A,#0x78
   \   000079   12....       LCALL     ?XSTACK_DISP0_8
   \   00007C   A982         MOV       R1,DPL
   \   00007E   AA83         MOV       R2,DPH
   \   000080   7B00         MOV       R3,#0x0
   \   000082   AC..         MOV       R4,?XSP + 0
   \   000084   AD..         MOV       R5,?XSP + 1
   \   000086   8C..         MOV       ?V0,R4
   \   000088   8D..         MOV       ?V1,R5
   \   00008A   7436         MOV       A,#0x36
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   A2E0         MOV       C,0xE0 /* A   */.0
   \   000092   89..         MOV       ?V4,R1
   \   000094   8A..         MOV       ?V5,R2
   \   000096   8B..         MOV       ?V6,R3
   \   000098   78..         MOV       R0,#?V4
   \   00009A   4022         JC        ??pt_addSinkGroup_1
    888                {
    889                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
   \   00009C                ; Setup parameters for call to function osal_memcpy
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00009F   7C04         MOV       R4,#0x4
   \   0000A1   7D00         MOV       R5,#0x0
   \   0000A3   743A         MOV       A,#0x3a
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   AA82         MOV       R2,DPL
   \   0000AA   AB83         MOV       R3,DPH
   \   0000AC   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AF   7403         MOV       A,#0x3
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
    890                  SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT );
   \   0000B4   7436         MOV       A,#0x36
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   D2E0         SETB      0xE0 /* A   */.0
   \   0000BC   8020         SJMP      ??pt_addSinkGroup_2
    891                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
    892                  return TRUE;
    893                }
    894                else
    895                {
    896                  osal_memcpy( &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], &newEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint32 ) );
   \                     ??pt_addSinkGroup_1:
   \   0000BE                ; Setup parameters for call to function osal_memcpy
   \   0000BE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C1   7C04         MOV       R4,#0x4
   \   0000C3   7D00         MOV       R5,#0x0
   \   0000C5   743E         MOV       A,#0x3e
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   AA82         MOV       R2,DPL
   \   0000CC   AB83         MOV       R3,DPH
   \   0000CE   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D1   7403         MOV       A,#0x3
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
    897                  SET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT );
   \   0000D6   7436         MOV       A,#0x36
   \   0000D8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX      A,@DPTR
   \   0000DC   D2E1         SETB      0xE0 /* A   */.1
   \                     ??pt_addSinkGroup_2:
   \   0000DE   F0           MOVX      @DPTR,A
    898                  osal_memcpy( pCurr, &currEntry, PROXY_TBL_ENTRY_LEN );
   \   0000DF                ; Setup parameters for call to function osal_memcpy
   \   0000DF   78..         MOV       R0,#?V0
   \   0000E1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E4   7C41         MOV       R4,#0x41
   \   0000E6   7D00         MOV       R5,#0x0
   \   0000E8   EE           MOV       A,R6
   \   0000E9   FA           MOV       R2,A
   \   0000EA   EF           MOV       A,R7
   \   0000EB   FB           MOV       R3,A
   \   0000EC   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EF   7403         MOV       A,#0x3
   \   0000F1   12....       LCALL     ?DEALLOC_XSTACK8
    899                  return TRUE;
   \   0000F4   7901         MOV       R1,#0x1
   \   0000F6   8002         SJMP      ??pt_addSinkGroup_3
    900                }
    901              }
    902            }
    903            return FALSE;
   \                     ??pt_addSinkGroup_0:
   \   0000F8   7900         MOV       R1,#0x0
   \                     ??pt_addSinkGroup_3:
   \   0000FA   7482         MOV       A,#-0x7e
   \   0000FC                REQUIRE ?Subroutine2
   \   0000FC                ; // Fall through to label ?Subroutine2
    904          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_ZclReadGetProxyEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_ZclReadGetProxyEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGpp_ReadWriteAttrCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGpp_ReadWriteAttrCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_pairingSetProxyTblOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_pairingSetProxyTblOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PairingUpdateProxyTlb::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PairingUpdateProxyTlb

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_UpdateProxyTlb::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_UpdateProxyTlb

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CheckAnnouncedDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CheckAnnouncedDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_PopulateProxyTblEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_PopulateProxyTblEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_updateLightweightUnicastSink::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_updateLightweightUnicastSink

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??pt_addSinkGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    pt_addSinkGroup

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_2`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_3`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_4`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_5`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_6`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_7`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_8`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_9`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_10`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_11`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_12`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10000:
   \   000000   00000100     DD 65536
    905          
    906          /*********************************************************************
    907           * @fn          pt_lookForGpd
    908           *
    909           * @brief       To see if the GPD id is in this NV entry
    910           *
    911           * @param       currProxyEntryId - NV ID of the proxy table
    912           *              pNew - New tabble entry array to be added
    913           *
    914           * @return      TRUE if the GPD has an entry in current NV vector
    915           */
    916          static uint8 pt_lookForGpd( uint16 currProxyEntryId, uint8* pNew )
    917          {
    918            uint8 rtrn;
    919          
    920            uint8 newEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
    921            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
    922          
    923            osal_memcpy( &newEntry, pNew, PROXY_TBL_ENTRY_LEN );
    924            
    925            rtrn = osal_nv_read( currProxyEntryId, 0,
    926                                       PROXY_TBL_ENTRY_LEN, currEntry );
    927            
    928            if ( rtrn != SUCCESS )
    929            {
    930              return FALSE;
    931            }
    932          
    933            if ( PROXY_TBL_COMP_APPLICTION_ID( newEntry[PROXY_TBL_ENTRY_OPT], currEntry[PROXY_TBL_ENTRY_OPT] ) )
    934            {
    935              if ( osal_memcmp( &newEntry[PROXY_TBL_ENTRY_GPD_ID], &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
    936              {
    937              return TRUE;
    938              }
    939            }
    940            return FALSE;
    941          }
    942          
    943          #endif
    944          /*********************************************************************
    945          *********************************************************************/
    946          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     89   gp_CheckAnnouncedDevice
        0     86   -> NLME_SendNetworkStatus
        0     85   -> gp_getProxyTableByIndex
        0     88   -> osal_memcmp
        0     88   -> osal_memcpy
        0     85   -> osal_memset
        0     85   -> osal_rand
        0     89   -> osal_start_timerEx
      1     92   gp_PairingUpdateProxyTlb
        0     91   -> gp_PopulateProxyTblEntry
        0     89   -> gp_UpdateProxyTlb
        0     89   -> gp_pairingSetProxyTblOptions
        0     92   -> osal_memcpy
        0     89   -> osal_memset
      0    184   gp_PopulateProxyTblEntry
        0     15   -> osal_memcpy
      1    370   gp_UpdateProxyTlb
        0    277   -> NLME_ReportAddressConflict
        0    277   -> gp_ResetProxyBasicTblEntry
        0    277   -> gp_getProxyTableByIndex
        0    280   -> osal_memcmp
        0    280   -> osal_memcpy
        0    281   -> osal_nv_read
        0    281   -> osal_nv_write
        0    277   -> pt_addSinkGroup
        0    277   -> pt_updateLightweightUnicastSink
      1    107   gp_pairingSetProxyTblOptions
      1    184   pt_ZclReadGetProxyEntry
        0    169   -> gp_PopulateProxyTblEntry
        0    167   -> gp_getProxyTableByIndex
        0    170   -> osal_memcmp
        0    170   -> osal_memcpy
      0    425   pt_addSinkGroup
        0    148   -> osal_memcpy
      0    446   pt_updateLightweightUnicastSink
        0    166   -> gp_ResetProxyBasicTblEntry
        0    169   -> osal_memcmp
        0    169   -> osal_memcpy
      0     18   zclGpp_ReadWriteAttrCB
        0     14   -> pt_ZclReadGetProxyEntry


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_1
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_10
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_11
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_12
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_2
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_3
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_4
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_5
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_6
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_7
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,_8
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_9
       5  ??Subroutine10_0
       3  ?Subroutine0
       5  ?Subroutine1
       8  ?Subroutine2
      12  ?Subroutine3
      10  ?Subroutine4
       7  ?Subroutine5
      15  ?Subroutine6
       9  ?Subroutine7
       9  ?Subroutine8
       6  ?Subroutine9
       4  __Constant_10000
      11  aliasConflictAnnce
     551  gp_CheckAnnouncedDevice
       6  gp_CheckAnnouncedDevice::?relay
     996  gp_PairingUpdateProxyTlb
       6  gp_PairingUpdateProxyTlb::?relay
      68  gp_PopulateProxyTblEntry
       6  gp_PopulateProxyTblEntry::?relay
    1073  gp_UpdateProxyTlb
       6  gp_UpdateProxyTlb::?relay
     280  gp_pairingSetProxyTblOptions
       6  gp_pairingSetProxyTblOptions::?relay
    1270  pt_ZclReadGetProxyEntry
       6  pt_ZclReadGetProxyEntry::?relay
     252  pt_addSinkGroup
       6  pt_addSinkGroup::?relay
     531  pt_updateLightweightUnicastSink
       6  pt_updateLightweightUnicastSink::?relay
      95  zclGpp_ReadWriteAttrCB
       6  zclGpp_ReadWriteAttrCB::?relay

 
 5 205 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
   741 bytes in segment XDATA_ROM_C
    11 bytes in segment XDATA_Z
 
    54 bytes of CODE     memory
   737 bytes of CONST    memory (+ 4 bytes shared)
 5 205 bytes of HUGECODE memory
    11 bytes of XDATA    memory

Errors: none
Warnings: none
