///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              22/Nov/2023  15:42:43
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\fuzzing-coordinator-response-collection\Components\stack\nwk\nwk_globals.c
//    Command line       =  
//        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWAA16.tmp
//        (D:\fuzzing-coordinator-response-collection\Components\stack\nwk\nwk_globals.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
//        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
//        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
//        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        -lA
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
//        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
//        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\nwk_globals.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME nwk_globals

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??NIB_init::?relay`
        FUNCTION `??NIB_init::?relay`,0203H
        PUBLIC `??nwk_Status::?relay`
        FUNCTION `??nwk_Status::?relay`,0203H
        PUBLIC `??nwk_adjustDelay::?relay`
        FUNCTION `??nwk_adjustDelay::?relay`,0203H
        PUBLIC `??nwk_globals_init::?relay`
        FUNCTION `??nwk_globals_init::?relay`,0203H
        PUBLIC AssociatedDevList
        PUBLIC BindingTable
        PUBLIC Cskip
        PUBLIC CskipChldrn
        PUBLIC CskipRtrs
        PUBLIC NIB_init
        FUNCTION NIB_init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bcastHoldAckMask
        PUBLIC bcastHoldHandle
        PUBLIC bcastTable
        PUBLIC defaultKey
        PUBLIC defaultTCLinkKey
        PUBLIC gAPS_MAX_GROUPS
        PUBLIC gBIND_REC_SIZE
        PUBLIC gDEFAULT_ROUTE_REQUEST_RADIUS
        PUBLIC gDEF_NWK_RADIUS
        PUBLIC gGOOD_LINK_COST
        PUBLIC gLINK_DOWN_TRIGGER
        PUBLIC gLINK_STATUS_JITTER_MASK
        PUBLIC gMAX_BCAST
        PUBLIC gMAX_BINDING_CLUSTER_IDS
        PUBLIC gMAX_BROADCAST_QUEUED
        PUBLIC gMAX_NEIGHBOR_ENTRIES
        PUBLIC gMAX_NOT_MYCHILD_DEVICES
        PUBLIC gMAX_NWK_FRAMECOUNTER_CHANGES
        PUBLIC gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES
        PUBLIC gMAX_PASSIVE_ACK_CNT
        PUBLIC gMAX_RREQ_ENTRIES
        PUBLIC gMAX_RTG_ENTRIES
        PUBLIC gMAX_RTG_SRC_ENTRIES
        PUBLIC gMAX_SOURCE_ROUTE
        PUBLIC gMIN_TREE_LQI
        PUBLIC gMTO_ROUTE_EXPIRY_TIME
        PUBLIC gMTO_RREQ_LIMIT_TIME
        PUBLIC gNWK_CONFLICTED_ADDR_EXPIRY_TIME
        PUBLIC gNWK_FREQ_AGILITY_ALL_MAC_ERRS
        PUBLIC gNWK_INDIRECT_CNT_RTG_TMR
        PUBLIC gNWK_INDIRECT_MSG_MAX_ALL
        PUBLIC gNWK_INDIRECT_MSG_MAX_PER
        PUBLIC gNWK_MAX_BINDING_ENTRIES
        PUBLIC gNWK_MAX_DATABUFS_CONFIRMED
        PUBLIC gNWK_MAX_DATABUFS_SCHEDULED
        PUBLIC gNWK_MAX_DATABUFS_TOTAL
        PUBLIC gNWK_MAX_DATABUFS_WAITING
        PUBLIC gNWK_MAX_DEVICE_LIST
        PUBLIC gNWK_MAX_SLEEPING_END_DEVICES
        PUBLIC gNWK_MIN_ENDDEVICE_CHILDREN
        PUBLIC gNWK_MIN_ROUTER_CHILDREN
        PUBLIC gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
        PUBLIC neighborTable
        PUBLIC notMyChildList
        PUBLIC nwk_Status
        FUNCTION nwk_Status,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC nwk_adjustDelay
        FUNCTION nwk_adjustDelay,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC nwk_globals_init
        FUNCTION nwk_globals_init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC rtDiscTable
        PUBLIC rtgSrcRelayList
        PUBLIC rtgSrcTable
        PUBLIC rtgTable
        PUBLIC timeoutValue
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AddrMgrInit         SYMBOL "AddrMgrInit"
`??AddrMgrInit::?relay` SYMBOL "?relay", AddrMgrInit
NLME_SetUpdateID    SYMBOL "NLME_SetUpdateID"
`??NLME_SetUpdateID::?relay` SYMBOL "?relay", NLME_SetUpdateID
NwkFreqAgilityInit  SYMBOL "NwkFreqAgilityInit"
`??NwkFreqAgilityInit::?relay` SYMBOL "?relay", NwkFreqAgilityInit
NwkInitChildAging   SYMBOL "NwkInitChildAging"
`??NwkInitChildAging::?relay` SYMBOL "?relay", NwkInitChildAging
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
NIB_init            SYMBOL "NIB_init"
`??NIB_init::?relay` SYMBOL "?relay", NIB_init
nwk_Status          SYMBOL "nwk_Status"
`??nwk_Status::?relay` SYMBOL "?relay", nwk_Status
nwk_adjustDelay     SYMBOL "nwk_adjustDelay"
`??nwk_adjustDelay::?relay` SYMBOL "?relay", nwk_adjustDelay
nwk_globals_init    SYMBOL "nwk_globals_init"
`??nwk_globals_init::?relay` SYMBOL "?relay", nwk_globals_init

        EXTERN `??AddrMgrInit::?relay`
        FUNCTION `??AddrMgrInit::?relay`,00H
        EXTERN `??NLME_SetUpdateID::?relay`
        FUNCTION `??NLME_SetUpdateID::?relay`,00H
        EXTERN `??NwkFreqAgilityInit::?relay`
        FUNCTION `??NwkFreqAgilityInit::?relay`,00H
        EXTERN `??NwkInitChildAging::?relay`
        FUNCTION `??NwkInitChildAging::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN AddrMgrInit
        FUNCTION AddrMgrInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetUpdateID
        FUNCTION NLME_SetUpdateID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NwkFreqAgilityInit
        FUNCTION NwkFreqAgilityInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NwkInitChildAging
        FUNCTION NwkInitChildAging,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN _NIB
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgBcastDeliveryTime
        EXTERN zgChildAgingEnable
        EXTERN zgConcentratorDiscoveryTime
        EXTERN zgConcentratorEnable
        EXTERN zgConcentratorRadius
        EXTERN zgExtendedPANID
        EXTERN zgIndirectMsgTimeout
        EXTERN zgMaxBcastRetires
        EXTERN zgPassiveAckTimeout
        EXTERN zgRouteDiscoveryTime
        EXTERN zgRouteExpiryTime

// D:\fuzzing-coordinator-response-collection\Components\stack\nwk\nwk_globals.c
//    1 /**************************************************************************************************
//    2   Filename:       nwk_globals.c
//    3   Revised:        $Date: 2015-01-08 16:32:12 -0800 (Thu, 08 Jan 2015) $
//    4   Revision:       $Revision: 41678 $
//    5 
//    6   Description:    User definable Network Parameters.
//    7 
//    8 
//    9   Copyright 2004-2015 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "OSAL_Nv.h"
//   46 #include "AddrMgr.h"
//   47 #include "AssocList.h"
//   48 #include "BindingTable.h"
//   49 #include "nwk_util.h"
//   50 #include "nwk_globals.h"
//   51 #include "APS.h"
//   52 #include "ssp.h"
//   53 #include "rtg.h"
//   54 #include "ZDConfig.h"
//   55 #include "ZGlobals.h"
//   56 #include "ZDApp.h"
//   57 #include "ZDSecMgr.h"
//   58 
//   59 #if defined ( LCD_SUPPORTED )
//   60   #include "OnBoard.h"
//   61 #endif
//   62 
//   63 /* HAL */
//   64 #include "hal_lcd.h"
//   65 
//   66 /*********************************************************************
//   67  * MACROS
//   68  */
//   69 
//   70 /*********************************************************************
//   71  * CONSTANTS
//   72  */
//   73 // Maximums for the data buffer queue
//   74 #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
//   75 #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
//   76 #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
//   77 #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
//   78 
//   79 // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
//   80 // A known shortcoming is that when a message is enqueued as "hold" for a
//   81 // sleeping device, the timer tick may have counted down to 1, so that msg
//   82 // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
//   83 // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
//   84 // So the hold time will vary within this interval:
//   85 // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
//   86 //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
//   87 
//   88  #define NWK_INDIRECT_CNT_RTG_TMR    60
//   89 // To hold msg for sleeping end devices for 30 secs:
//   90 // #define CNT_RTG_TIMER            1
//   91 // #define NWK_INDIRECT_MSG_TIMEOUT 30
//   92 // To hold msg for sleeping end devices for 30 mins:
//   93 // #define CNT_RTG_TIMER            60
//   94 // #define NWK_INDIRECT_MSG_TIMEOUT 30
//   95 // To hold msg for sleeping end devices for 30 days:
//   96 // #define CNT_RTG_TIMER            60
//   97 // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
//   98 // Maximum msgs to hold per associated device.
//   99 #define NWK_INDIRECT_MSG_MAX_PER    3
//  100 // Maximum total msgs to hold for all associated devices.
//  101 #define NWK_INDIRECT_MSG_MAX_ALL    \ 
//  102                             (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
//  103 
//  104 /*********************************************************************
//  105  * TYPEDEFS
//  106  */
//  107 
//  108 /*********************************************************************
//  109  * NWK GLOBAL VARIABLES
//  110  */
//  111 
//  112 // Variables for MAX list size

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  113 CONST deviceTableIndex_t gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
gNWK_MAX_DEVICE_LIST:
        DB 4
//  114 
//  115 // Variables for MAX Sleeping End Devices

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  116 CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
gNWK_MAX_SLEEPING_END_DEVICES:
        DB 3
//  117 
//  118 // Variables for MAX data buffer levels

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  119 CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
gNWK_MAX_DATABUFS_WAITING:
        DB 8

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  120 CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
gNWK_MAX_DATABUFS_SCHEDULED:
        DB 5

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  121 CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
gNWK_MAX_DATABUFS_CONFIRMED:
        DB 5

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  122 CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
gNWK_MAX_DATABUFS_TOTAL:
        DB 12
//  123 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  124 CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
gNWK_INDIRECT_CNT_RTG_TMR:
        DB 60

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  125 CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
gNWK_INDIRECT_MSG_MAX_PER:
        DB 3

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  126 CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
gNWK_INDIRECT_MSG_MAX_ALL:
        DB 9
//  127 
//  128 // change this if using a different stack profile...
//  129 // Cskip array

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  130 uint16 *Cskip;
Cskip:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  131 
//  132 #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  133   uint8 CskipRtrs[1] = {0};
CskipRtrs:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  134   uint8 CskipChldrn[1] = {0};
CskipChldrn:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  135 #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
//  136   uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
//  137   uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
//  138 #elif ( STACK_PROFILE_ID == GENERIC_STAR )
//  139   uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  140   uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  141 #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
//  142   uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  143   uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
//  144 #endif // STACK_PROFILE_ID
//  145 
//  146 // Minimum lqi value that is required for association

        RSEG XDATA_I:XDATA:NOROOT(0)
//  147 uint8 gMIN_TREE_LQI = MIN_LQI_COST_3;
gMIN_TREE_LQI:
        DATA8
        DS 1
        REQUIRE `?<Initializer for gMIN_TREE_LQI>`
        REQUIRE __INIT_XDATA_I
//  148 
//  149 // Statically defined Associated Device List

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
AssociatedDevList:
        DS 112
        REQUIRE __INIT_XDATA_Z
//  151 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  152 CONST uint8 gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES = MAX_NWK_SEC_MATERIAL_TABLE_ENTRIES;
gMAX_NWK_SEC_MATERIAL_TABLE_ENTRIES:
        DB 2
//  153 
//  154 #if defined ( ZIGBEEPRO )

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  155   CONST uint16 gNWK_MIN_ROUTER_CHILDREN = NWK_MIN_ROUTER_CHILDREN;
gNWK_MIN_ROUTER_CHILDREN:
        DW 0

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  156   CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = NWK_MIN_ENDDEVICE_CHILDREN;
gNWK_MIN_ENDDEVICE_CHILDREN:
        DW 0
//  157 #else
//  158   CONST uint16 gNWK_MIN_ROUTER_CHILDREN = 0;
//  159   CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = 0;
//  160 #endif
//  161 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  162 CONFIG_ITEM rtgTableIndex_t gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
gMAX_RTG_ENTRIES:
        DB 40

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  163 CONFIG_ITEM srcRtgTableIndex_t gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
gMAX_RTG_SRC_ENTRIES:
        DB 12

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  164 CONFIG_ITEM rreqTableIndex_t gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
gMAX_RREQ_ENTRIES:
        DB 8
//  165 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  166 CONFIG_ITEM neighborTableIndex_t gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
gMAX_NEIGHBOR_ENTRIES:
        DB 3
//  167 
//  168  // Table of neighboring nodes (not including child nodes)

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
neighborTable:
        DS 69
        REQUIRE __INIT_XDATA_Z
//  170 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  171 CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
gMAX_SOURCE_ROUTE:
        DB 12
//  172 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  173 CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
gMAX_BROADCAST_QUEUED:
        DB 10
//  174 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  175 CONST uint8 gLINK_DOWN_TRIGGER = LINK_DOWN_TRIGGER;
gLINK_DOWN_TRIGGER:
        DB 3
//  176 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  177 CONST uint8 gGOOD_LINK_COST = GOOD_LINK_COST;
gGOOD_LINK_COST:
        DB 3
//  178 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  179 CONST uint8 gMAX_PASSIVE_ACK_CNT = MAX_PASSIVE_ACK_CNT;
gMAX_PASSIVE_ACK_CNT:
        DB 8
//  180 
//  181 // Routing table

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  182 rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
rtgTable:
        DS 280
        REQUIRE __INIT_XDATA_Z
//  183 
//  184 #if defined ( ZIGBEEPRO ) || defined ( ZBIT )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  185   rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
rtgSrcTable:
        DS 72
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  186   uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
rtgSrcRelayList:
        DS 24
        REQUIRE __INIT_XDATA_Z
//  187 #endif
//  188 
//  189 // Table of current RREQ packets in the network

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  190 rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
rtDiscTable:
        DS 64
        REQUIRE __INIT_XDATA_Z
//  191 
//  192 // Table of data broadcast packets currently in circulation.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  193 bcastEntry_t bcastTable[MAX_BCAST];
bcastTable:
        DS 72
        REQUIRE __INIT_XDATA_Z
//  194 
//  195 // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  196 uint8 bcastHoldHandle[MAX_BCAST];
bcastHoldHandle:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  197 uint32 bcastHoldAckMask[MAX_BCAST];
bcastHoldAckMask:
        DS 36
        REQUIRE __INIT_XDATA_Z
//  198 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  199 CONFIG_ITEM bcastTableIndex_t gMAX_BCAST = MAX_BCAST;
gMAX_BCAST:
        DB 9
//  200 
//  201 // For tree addressing, this switch allows the allocation of a
//  202 // router address to an end device when end device address are
//  203 // all used up.  If this option is enabled, address space
//  204 // could be limited.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  205 CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
        DB 0
//  206 
//  207 #if defined ( ZIGBEEPRO ) || defined ( ZBIT )
//  208 // number of link status periods after the last received address conflict report
//  209 // (network status command)

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  210 CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
gNWK_CONFLICTED_ADDR_EXPIRY_TIME:
        DB 4
//  211 #endif
//  212 
//  213 #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZBIT )

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  214 CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
gNWK_FREQ_AGILITY_ALL_MAC_ERRS:
        DB 0
//  215 #endif
//  216 
//  217 // The time limited to one MTO RReq (Concentrator Announce) in milliseconds.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  218 CONST uint16 gMTO_RREQ_LIMIT_TIME = MTO_RREQ_LIMIT_TIME;
gMTO_RREQ_LIMIT_TIME:
        DW 1000
//  219 
//  220 // The number of seconds a MTO routing entry will last.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  221 CONST uint8 gMTO_ROUTE_EXPIRY_TIME = MTO_ROUTE_EXPIRY_TIME;
gMTO_ROUTE_EXPIRY_TIME:
        DB 255
//  222 
//  223 // Route Discovery Request Default Radius

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  224 CONST uint8 gDEFAULT_ROUTE_REQUEST_RADIUS = DEFAULT_ROUTE_REQUEST_RADIUS;
gDEFAULT_ROUTE_REQUEST_RADIUS:
        DB 30
//  225 
//  226 // Network message radius

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  227 CONST uint8 gDEF_NWK_RADIUS = DEF_NWK_RADIUS;
gDEF_NWK_RADIUS:
        DB 30
//  228 
//  229 #if ( ZSTACK_ROUTER_BUILD ) || defined ( ZBIT )

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  230 CONST uint16 gLINK_STATUS_JITTER_MASK = LINK_STATUS_JITTER_MASK;
gLINK_STATUS_JITTER_MASK:
        DW 127
//  231 #endif
//  232 
//  233 // Maximum number of devices either aged out or not recognized as child

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  234 CONST uint8 gMAX_NOT_MYCHILD_DEVICES = MAX_NOT_MYCHILD_DEVICES;
gMAX_NOT_MYCHILD_DEVICES:
        DB 5
//  235 
//  236 // Child table Management timeout values

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  237 CONST uint32 timeoutValue[15] =
timeoutValue:
        DATA32
        DD 10
        DD 2
        DD 4
        DD 8
        DD 16
        DD 32
        DD 64
        DD 128
        DD 256
        DD 512
        DD 1024
        DD 2048
        DD 4096
        DD 8192
        DD 16384
//  238 {   10, // 0	10 seconds
//  239      2, // 1	2 minutes
//  240      4, // 2	4 minutes
//  241      8, // 3	8 minutes
//  242     16, // 4	16 minutes
//  243     32, // 5	32 minutes
//  244     64, // 6	64 minutes
//  245    128, // 7	128 minutes
//  246    256, // 8	256 minutes
//  247    512, // 9	512 minutes
//  248   1024, // 10	1024 minutes
//  249   2048, // 11	2048 minutes
//  250   4096, // 12	4096 minutes
//  251   8192, // 13	8192 minutes
//  252  16384 // 14	16384 minutes
//  253 };
//  254 
//  255 // This table stores devices that have been aged out by the Child Aging Table
//  256 // mechanism or have never been a child of this device

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  257 nwkNotMyChild_t notMyChildList[MAX_NOT_MYCHILD_DEVICES];
notMyChildList:
        DS 20
        REQUIRE __INIT_XDATA_Z
//  258 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA32
//  259 CONST uint32 gMAX_NWK_FRAMECOUNTER_CHANGES = MAX_NWK_FRAMECOUNTER_CHANGES;
gMAX_NWK_FRAMECOUNTER_CHANGES:
        DD 1000
//  260 
//  261 #if defined ( FEATURE_MNP )
//  262   uint8 gMAX_MNP_QUEUED = MAX_MNP_QUEUED;
//  263 #endif
//  264 
//  265 /*********************************************************************
//  266  * APS GLOBAL VARIABLES
//  267  */
//  268 
//  269 // The Maximum number of binding records
//  270 // This number is defined in f8wConfig.cfg - change it there.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  271 CONFIG_ITEM bindTableIndex_t gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
gNWK_MAX_BINDING_ENTRIES:
        DB 4
//  272 
//  273 #if defined ( REFLECTOR )
//  274   // The Maximum number of cluster IDs in a binding record
//  275   // This number is defined in f8wConfig.cfg - change it there.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  276   CONFIG_ITEM uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
gMAX_BINDING_CLUSTER_IDS:
        DB 4
//  277 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA16
//  278   CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
gBIND_REC_SIZE:
        DW 14
//  279 
//  280   // Binding Table

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  281   BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
BindingTable:
        DS 56
        REQUIRE __INIT_XDATA_Z
//  282 #endif
//  283 
//  284 // Maximum number allowed in the groups table.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  285 CONFIG_ITEM uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
gAPS_MAX_GROUPS:
        DB 16
//  286 
//  287 // APS End Device Broadcast Table
//  288 #if ( ZG_BUILD_ENDDEVICE_TYPE )
//  289   apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
//  290   uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
//  291 #endif
//  292 
//  293 /*********************************************************************
//  294  * SECURITY GLOBAL VARIABLES
//  295  */
//  296 
//  297 // This is the default pre-configured key,
//  298 // change this to make a unique key
//  299 // SEC_KEY_LEN is defined in ssp.h.
//  300 
//  301 
//  302 #if (ZG_BUILD_JOINING_TYPE)  
//  303 //Distributed key is only used by devices with joining capabilities (router and ZED)
//  304 CONFIG_ITEM uint8 distributedDefaultKey[SEC_KEY_LEN] = DISTRIBUTED_GLOBAL_LINK_KEY;
//  305 #endif
//  306 
//  307 #if defined ( DEFAULT_KEY )

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  308 CONFIG_ITEM uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;
defaultKey:
        DB 0
        DB 1
        DB 2
        DB 3
        DB 4
        DB 5
        DB 6
        DB 7
        DB 8
        DB 9
        DB 10
        DB 11
        DB 12
        DB 13
        DB 14
        DB 15
//  309 #else
//  310 CONST uint8 defaultKey[SEC_KEY_LEN] =
//  311 {
//  312 #if defined ( APP_TP ) || defined ( APP_TP2 )
//  313   // Key for ZigBee Conformance Testing
//  314   0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
//  315   0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
//  316 #else
//  317   // Key for In-House Testing
//  318   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
//  319   0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
//  320 #endif
//  321 };
//  322 #endif
//  323 
//  324 // This is the default pre-configured Trust Center Link key,
//  325 // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  326 CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] = DEFAULT_TC_LINK_KEY;
defaultTCLinkKey:
        DB 90
        DB 105
        DB 103
        DB 66
        DB 101
        DB 101
        DB 65
        DB 108
        DB 108
        DB 105
        DB 97
        DB 110
        DB 99
        DB 101
        DB 48
        DB 57
//  327 
//  328 /*********************************************************************
//  329  * STATUS STRINGS
//  330  */
//  331 #if defined ( LCD_SUPPORTED )
//  332   const char PingStr[]         = "Ping Rcvd from";
//  333   const char AssocCnfStr[]     = "Assoc Cnf";
//  334   const char SuccessStr[]      = "Success";
//  335   const char EndDeviceStr[]    = "EndDevice:";
//  336   const char ParentStr[]       = "Parent:";
//  337   const char ZigbeeCoordStr[]  = "ZigBee Coord";
//  338   const char NetworkIDStr[]    = "Network ID:";
//  339   const char RouterStr[]       = "Router:";
//  340   const char OrphanRspStr[]    = "Orphan Response";
//  341   const char SentStr[]         = "Sent";
//  342   const char FailedStr[]       = "Failed";
//  343   const char AssocRspFailStr[] = "Assoc Rsp fail";
//  344   const char AssocIndStr[]     = "Assoc Ind";
//  345   const char AssocCnfFailStr[] = "Assoc Cnf fail";
//  346   const char EnergyLevelStr[]  = "Energy Level";
//  347   const char ScanFailedStr[]   = "Scan Failed";
//  348 #endif
//  349 
//  350 /*********************************************************************
//  351  * @fn       nwk_globals_init()
//  352  *
//  353  * @brief
//  354  *
//  355  *   Initialize nwk layer globals.  These are the system defaults and
//  356  *   should be changed by the user here.  The default definitions are
//  357  *   defined in nwk.h or NLMEDE.h.
//  358  *
//  359  * @param   none
//  360  *
//  361  * @return  none
//  362  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  363 void nwk_globals_init( void )
nwk_globals_init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function nwk_globals_init
        CODE
//  364 {
        FUNCALL nwk_globals_init, AddrMgrInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_globals_init, NwkFreqAgilityInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL nwk_globals_init, NwkInitChildAging
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  365   AddrMgrInit( NWK_MAX_ADDRESSES );
        ; Setup parameters for call to function AddrMgrInit
        MOV       R2,#0x10
        MOV       R3,#0x0
        LCALL     `??AddrMgrInit::?relay`; Banked call to: AddrMgrInit
//  366 
//  367 #if !defined ( ZIGBEEPRO )
//  368   if ( ZSTACK_ROUTER_BUILD )
//  369   {
//  370     // Initialize the Cskip Table
//  371     Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
//  372     RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
//  373   }
//  374 #endif
//  375 
//  376 #if defined ( ZIGBEE_FREQ_AGILITY )
//  377   NwkFreqAgilityInit();
        ; Setup parameters for call to function NwkFreqAgilityInit
        LCALL     `??NwkFreqAgilityInit::?relay`; Banked call to: NwkFreqAgilityInit
//  378 #endif
//  379 
//  380   if ( ( ZSTACK_ROUTER_BUILD ) && ( zgChildAgingEnable == TRUE ) )
        MOV       DPTR,#zgChildAgingEnable
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??nwk_globals_init_0
//  381   {
//  382     // Set the function pointers for the Child Aging feature
//  383     NwkInitChildAging();
        ; Setup parameters for call to function NwkInitChildAging
        LCALL     `??NwkInitChildAging::?relay`; Banked call to: NwkInitChildAging
//  384   }
//  385 }
??nwk_globals_init_0:
        POP       DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP       DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP      ?BRET
          CFI EndBlock cfiBlock0
//  386 
//  387 /*********************************************************************
//  388  * @fn       NIB_init()
//  389  *
//  390  * @brief
//  391  *
//  392  *   Initialize attribute values in NIB
//  393  *
//  394  * @param   none
//  395  *
//  396  * @return  none
//  397  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  398 void NIB_init()
NIB_init:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function NIB_init
        CODE
//  399 {
        FUNCALL NIB_init, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL NIB_init, NLME_SetUpdateID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  400   _NIB.SequenceNum = LO_UINT16(osal_rand());
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        MOV       A,R2
        MOV       DPTR,#_NIB
        MOVX      @DPTR,A
//  401 
//  402   _NIB.nwkProtocolVersion = ZB_PROT_VERS;
        MOV       DPTR,#_NIB + 17
        MOV       A,#0x2
        MOVX      @DPTR,A
//  403   _NIB.MaxDepth = MAX_NODE_DEPTH;
        MOV       DPTR,#_NIB + 4
        MOV       A,#0x14
        MOVX      @DPTR,A
//  404 
//  405 #if ( NWK_MODE == NWK_MODE_MESH )
//  406   _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
        MOV       DPTR,#_NIB + 40
        MOV       A,#0xf
        MOVX      @DPTR,A
//  407   _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
        INC       DPTR
        MOVX      @DPTR,A
//  408 #endif
//  409 
//  410   // BROADCAST SETTINGS:
//  411   // *******************
//  412   //   Broadcast Delivery Time
//  413   //     - set to multiples of 100ms
//  414   //     - should be 500ms more than the retry time
//  415   //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
//  416   //   Passive Ack Timeout
//  417   //     - set to multiples of 100ms
//  418   _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
        MOV       DPTR,#zgBcastDeliveryTime
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 7
        MOVX      @DPTR,A
//  419   _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
        MOV       DPTR,#zgPassiveAckTimeout
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 1
        MOVX      @DPTR,A
//  420   _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
        MOV       DPTR,#zgMaxBcastRetires
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 2
        MOVX      @DPTR,A
//  421 
//  422   _NIB.ReportConstantCost = 0;
        MOV       DPTR,#_NIB + 8
        CLR       A
        MOVX      @DPTR,A
//  423   _NIB.RouteDiscRetries = 0;
        INC       DPTR
        MOVX      @DPTR,A
//  424   _NIB.SecureAllFrames = USE_NWK_SECURITY;
        MOV       DPTR,#_NIB + 11
        INC       A
        MOVX      @DPTR,A
//  425   _NIB.nwkAllFresh = NWK_ALL_FRESH;
        MOV       DPTR,#_NIB + 104
        MOVX      @DPTR,A
//  426 
//  427   if ( ZG_SECURE_ENABLED )
//  428   {
//  429     _NIB.SecurityLevel = SECURITY_LEVEL;
        MOV       DPTR,#_NIB + 12
        MOV       A,#0x5
        MOVX      @DPTR,A
//  430   }
//  431   else
//  432   {
//  433     _NIB.SecurityLevel = 0;
//  434   }
//  435 
//  436   _NIB.SymLink = TRUE;
        INC       DPTR
        MOV       A,#0x1
        MOVX      @DPTR,A
//  437 
//  438   _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
        MOV       DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 14
        MOVX      @DPTR,A
//  439 
//  440   _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
        MOV       DPTR,#zgIndirectMsgTimeout
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 15
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  441 
//  442   _NIB.RouteDiscoveryTime = zgRouteDiscoveryTime;
        MOV       DPTR,#zgRouteDiscoveryTime
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 18
        MOVX      @DPTR,A
//  443   _NIB.RouteExpiryTime = zgRouteExpiryTime;
        MOV       DPTR,#zgRouteExpiryTime
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 19
        LCALL     ?Subroutine1 & 0xFFFF
//  444 
//  445   _NIB.nwkDevAddress = INVALID_NODE_ADDR;
//  446   _NIB.nwkLogicalChannel = 0;
??CrossCallReturnLabel_0:
        INC       DPTR
        CLR       A
        LCALL     ?Subroutine1 & 0xFFFF
//  447   _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
//  448   osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x8
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       R2,#(_NIB + 25) & 0xff
        MOV       R3,#((_NIB + 25) >> 8) & 0xff
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
//  449   _NIB.nwkPanId = INVALID_NODE_ADDR;
        MOV       DPTR,#_NIB + 33
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
//  450 
//  451   osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV       R4,#zgExtendedPANID & 0xff
        MOV       R5,#(zgExtendedPANID >> 8) & 0xff
        MOV       R2,#(_NIB + 53) & 0xff
        MOV       R3,#((_NIB + 53) >> 8) & 0xff
        LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
//  452 
//  453   _NIB.nwkKeyLoaded = FALSE;
        MOV       DPTR,#_NIB + 61
        CLR       A
        MOVX      @DPTR,A
//  454 
//  455   _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD;
        MOV       DPTR,#_NIB + 98
        MOV       A,#0xf
        MOVX      @DPTR,A
//  456   _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
        INC       DPTR
        MOV       A,#0x3
        MOVX      @DPTR,A
//  457 
//  458   //MTO and source routing
//  459   _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
        MOV       DPTR,#zgConcentratorDiscoveryTime
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 102
        MOVX      @DPTR,A
//  460   _NIB.nwkIsConcentrator = zgConcentratorEnable;
        MOV       DPTR,#zgConcentratorEnable
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 101
        MOVX      @DPTR,A
//  461   _NIB.nwkConcentratorRadius = zgConcentratorRadius;
        MOV       DPTR,#zgConcentratorRadius
        MOVX      A,@DPTR
        MOV       DPTR,#_NIB + 103
        MOVX      @DPTR,A
//  462 
//  463 #if defined ( ZIGBEEPRO )
//  464   _NIB.nwkUseMultiCast = MULTICAST_ENABLED;
        MOV       DPTR,#_NIB + 100
        CLR       A
        MOVX      @DPTR,A
//  465 #else
//  466   _NIB.nwkUseMultiCast = FALSE;
//  467 #endif
//  468 
//  469 #if defined ( NV_RESTORE )
//  470   if ( osal_nv_read( ZCD_NV_NWKMGR_ADDR, 0, sizeof( _NIB.nwkManagerAddr ),
//  471                      &_NIB.nwkManagerAddr ) != SUCCESS )
        ; Setup parameters for call to function osal_nv_read
        MOV       ?V0,#(_NIB + 105) & 0xff
        MOV       ?V1,#((_NIB + 105) >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#-0x77
        MOV       R3,#0x0
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV       A,R1
        JZ        ??NIB_init_0
//  472 #endif
//  473   {
//  474     _NIB.nwkManagerAddr = 0x0000;
        MOV       DPTR,#_NIB + 105
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  475   }
//  476 
//  477   NLME_SetUpdateID( 0 );
??NIB_init_0:
        ; Setup parameters for call to function NLME_SetUpdateID
        MOV       R1,#0x0
        LCALL     `??NLME_SetUpdateID::?relay`; Banked call to: NLME_SetUpdateID
//  478   _NIB.nwkTotalTransmissions = 0;
        MOV       DPTR,#_NIB + 107
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  479 }
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function NIB_init
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function NIB_init
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#-0x2
        MOVX      @DPTR,A
        INC       DPTR
        INC       A
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
//  480 
//  481 /*********************************************************************
//  482  * @fn       nwk_Status()
//  483  *
//  484  * @brief
//  485  *
//  486  *   Status report.
//  487  *
//  488  * @param   statusCode
//  489  * @param   statusValue
//  490  *
//  491  * @return  none
//  492  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  493 void nwk_Status( uint16 statusCode, uint16 statusValue )
nwk_Status:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function nwk_Status
        CODE
//  494 {
        ; Saved register size: 0
        ; Auto size: 0
//  495 #if defined ( SERIAL_DEBUG_SUPPORTED ) || (defined ( LEGACY_LCD_DEBUG ) && defined (LCD_SUPPORTED))
//  496   switch ( statusCode )
//  497   {
//  498     case NWK_STATUS_COORD_ADDR:
//  499       if ( ZSTACK_ROUTER_BUILD )
//  500       {
//  501         
//  502       if ( _NIB.nwkDevAddress == NWK_PAN_COORD_ADDR )
//  503       {
//  504         HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_DEBUG_LINE_1 );
//  505       }
//  506       if ( (_NIB.nwkDevAddress != NWK_PAN_COORD_ADDR) &&
//  507            (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
//  508       {
//  509         HalLcdWriteStringValue( (char*)RouterStr, _NIB.nwkDevAddress, 16, HAL_LCD_DEBUG_LINE_1 );
//  510       }
//  511       
//  512         HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_DEBUG_LINE_2 );
//  513         BuzzerControl( BUZZER_BLIP );
//  514       }
//  515       break;
//  516 
//  517     case NWK_STATUS_ROUTER_ADDR:
//  518       if ( ZSTACK_ROUTER_BUILD )
//  519       {
//  520         HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_DEBUG_LINE_1 );
//  521       }
//  522       break;
//  523 
//  524     case NWK_STATUS_ORPHAN_RSP:
//  525       if ( ZSTACK_ROUTER_BUILD )
//  526       {
//  527         if ( statusValue == ZSuccess )
//  528           HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
//  529         else
//  530           HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
//  531       }
//  532       break;
//  533 
//  534     case NWK_ERROR_ASSOC_RSP:
//  535       if ( ZSTACK_ROUTER_BUILD )
//  536       {
//  537         HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_DEBUG_LINE_1 );
//  538         HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_DEBUG_LINE_2 );
//  539       }
//  540       break;
//  541 
//  542     case NWK_STATUS_ED_ADDR:
//  543       if ( ZSTACK_END_DEVICE_BUILD )
//  544       {
//  545         HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_DEBUG_LINE_1 );
//  546       }
//  547       break;
//  548 
//  549     case NWK_STATUS_PARENT_ADDR:
//  550             HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_DEBUG_LINE_2 );
//  551       break;
//  552 
//  553     case NWK_STATUS_ASSOC_CNF:
//  554       HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
//  555       break;
//  556 
//  557     case NWK_ERROR_ASSOC_CNF_DENIED:
//  558       HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_DEBUG_LINE_1 );
//  559       HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_DEBUG_LINE_2 );
//  560       break;
//  561 
//  562     case NWK_ERROR_ENERGY_SCAN_FAILED:
//  563       HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
//  564       break;
//  565   }
//  566 #endif
//  567 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock6
//  568 
//  569 /*********************************************************************
//  570  * @fn      nwk_adjustDelay()
//  571  *
//  572  * @brief   Adjust the retransmit delay. Modify this function to
//  573  *          change the default delay behavior.
//  574  *
//  575  * @param   existingDelay - default delay
//  576  * @param   confirmStatus - data confirm status
//  577  * @param   bufOptions - network buffer options
//  578  *
//  579  * @return  delay value - this number is the number of
//  580  *          network event ticks (~2ms).
//  581  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  582 uint16 nwk_adjustDelay( uint16 existingDelay, uint8 confirmStatus, uint16 bufOptions )
nwk_adjustDelay:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function nwk_adjustDelay
        CODE
//  583 {
        FUNCALL nwk_adjustDelay, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  584   uint16 result = existingDelay;
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
//  585   uint16 mask = 0;       // Random mask
//  586   uint16 startValue = 0; // Start value
//  587 
//  588   switch ( confirmStatus )
        MOV       A,R6
        ADD       A,#0x1f
        JZ        ??nwk_adjustDelay_0
        ADD       A,#-0x10
        JNZ       ??nwk_adjustDelay_1
//  589   {
//  590     case ZMacTransactionOverFlow:
//  591     case ZMacChannelAccessFailure:
//  592       if ( bufOptions & (HANDLE_DELAY | HANDLE_HI_DELAY) )
??nwk_adjustDelay_0:
        MOV       A,R4
        ANL       A,#0x30
        JZ        ??nwk_adjustDelay_1
//  593       {
//  594         // Delay 4 - 18 ms
//  595         mask = 0x0007;
//  596         startValue = 2;
//  597       }
//  598       break;
//  599 
//  600     case ZNwkNoRoute:
//  601     case ZMAC_NO_RESOURCES:
//  602     case ZMacNoACK:
//  603     default:
//  604       // leave default delay
//  605       mask = 0;
//  606       startValue = 0;
//  607       break;
//  608   }
//  609 
//  610   if ( (mask > 0) && (startValue > 0) )
//  611   {
//  612     result = (osal_rand() & mask) + startValue;
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        MOV       A,R2
        ANL       A,#0x7
        MOV       R1,#0x0
        ADD       A,#0x2
        MOV       R0,A
        JNC       ??nwk_adjustDelay_1
        INC       R1
//  613   }
//  614 
//  615   return ( result );
??nwk_adjustDelay_1:
        MOV       A,R0
        MOV       R2,A
        MOV       A,R1
        MOV       R3,A
        SJMP      ?Subroutine0
//  616 }
          CFI EndBlock cfiBlock7

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for gMIN_TREE_LQI>`:
        DATA8
        DB 6

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??nwk_globals_init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    nwk_globals_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??NIB_init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    NIB_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??nwk_Status::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    nwk_Status

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??nwk_adjustDelay::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    nwk_adjustDelay

        END
//  617 
//  618 /*********************************************************************
//  619 *********************************************************************/
// 
// 356 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
// 136 bytes in segment CODE_C
//   1 byte  in segment XDATA_I
//   1 byte  in segment XDATA_ID
// 818 bytes in segment XDATA_Z
// 
// 161 bytes of CODE     memory
// 356 bytes of HUGECODE memory
// 819 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
