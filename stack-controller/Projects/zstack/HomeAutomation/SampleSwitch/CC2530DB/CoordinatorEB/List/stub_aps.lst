###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               22/Nov/2023  15:42:44
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\fuzzing-coordinator-response-collection\Components\stack\nwk\stub_aps.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWACEE.tmp
#        (D:\fuzzing-coordinator-response-collection\Components\stack\nwk\stub_aps.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
#        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
#        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
#        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
#        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\stub_aps.lst
#    Object file        =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\stub_aps.r51
#
###############################################################################

D:\fuzzing-coordinator-response-collection\Components\stack\nwk\stub_aps.c
      1          /**************************************************************************************************
      2            Filename:       stub_aps.c
      3            Revised:        $Date: 2014-03-26 10:01:05 -0700 (Wed, 26 Mar 2014) $
      4            Revision:       $Revision: 37899 $
      5          
      6            Description:    Stub APS processing functions
      7          
      8          
      9            Copyright 2008 - 2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "OSAL.h"
     44          #include "mac_spec.h"
     45          #include "nwk_util.h"
     46          #include "AF.h"
     47          
     48          #include "stub_aps.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          // Stub NWK header length
     59          #define STUB_NWK_HDR_LEN                2
     60          
     61          // Start of the Stub APS header in the Inter-PAN frame
     62          #define STUB_APS_HDR_FRAME_CTRL         STUB_NWK_HDR_LEN
     63          
     64          // Stub APS event identifiers
     65          #define CHANNEL_CHANGE_EVT              0x0001
     66          
     67          #define CHANNEL_CHANGE_RETRY_TIMEOUT    100
     68          
     69          /*********************************************************************
     70           * TYPEDEFS
     71           */
     72          typedef struct
     73          {
     74            zAddrType_t addr;
     75            uint16 panId;
     76          } pan_t;
     77          
     78          /*********************************************************************
     79           * GLOBAL VARIABLES
     80           */
     81          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          uint8 StubAPS_TaskID = 0xFF;    // Task ID for internal task/event processing
   \                     StubAPS_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for StubAPS_TaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
     83          
     84          /*********************************************************************
     85           * EXTERNAL VARIABLES
     86           */
     87          
     88          
     89          /*********************************************************************
     90           * EXTERNAL FUNCTIONS
     91           */
     92          
     93          
     94          /*********************************************************************
     95           * LOCAL VARIABLES
     96           */
     97          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          static uint8 newChannel;
   \                     newChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          static uint8 channelChangeInProgress = FALSE;
   \                     channelChangeInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    100          
    101          // Application info

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          static uint8 appTaskID = 0xFF;  // Application task id
   \                     appTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for appTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 appEndPoint = 0;   // Application endpoint
   \                     appEndPoint:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          
    105          
    106          /*********************************************************************
    107           * LOCAL FUNCTIONS
    108           */
    109          
    110          static void StubNWK_ParseMsg( uint8 *buf, uint8 bufLength, NLDE_FrameFormat_t *snff );
    111          static void StubAPS_ParseMsg( NLDE_FrameFormat_t *snff, aps_FrameFormat_t *saff );
    112          static void StubNWK_BuildMsg( uint8 *nwkHdr );
    113          static void StubAPS_BuildMsg( uint8 *apsHdr, uint8 frmCtrl, uint16 groupID, APSDE_DataReq_t *req );
    114          static ZStatus_t StubAPS_BuildFrameControl( uint8 *frmCtrl, zAddrType_t *dstAddr,
    115                                                      uint16 *groupID, APSDE_DataReq_t *req );
    116          static ZStatus_t StubAPS_SetNewChannel( uint8 channel );
    117          static void StubAPS_NotifyApp( uint8 status );
    118          
    119          uint8 StubAPS_ZMacCallback( uint8 *msgPtr );
    120          
    121          /*********************************************************************
    122           * @fn      StubAPS_Init()
    123           *
    124           * @brief   Initialize stub APS layer
    125           *
    126           * @param   task_id - Task identifier for the desired task
    127           *
    128           * @return  none
    129           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    130          void StubAPS_Init( uint8 task_id )
   \                     StubAPS_Init:
    131          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    132            StubAPS_TaskID = task_id;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#StubAPS_TaskID
   \   000008   F0           MOVX      @DPTR,A
    133          
    134            // register with ZMAC
    135            pZMac_AppCallback = StubAPS_ZMacCallback;
   \   000009   90....       MOV       DPTR,#pZMac_AppCallback
   \   00000C   74..         MOV       A,#`??StubAPS_ZMacCallback::?relay` & 0xff
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   74..         MOV       A,#(`??StubAPS_ZMacCallback::?relay` >> 8) & 0xff
   \   000012   F0           MOVX      @DPTR,A
    136          
    137          } /* StubAPS_Init() */
   \   000013   02....       LJMP      ??Subroutine18_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    138          
    139          /*********************************************************************
    140           * @fn      StubAPS_ProcessEvent()
    141           *
    142           * @brief   Main event loop for Stub APS task. This function should be called
    143           *          at periodic intervals when event occur.
    144           *
    145           * @param   task_id - Task ID
    146           * @param   events  - Bitmap of events
    147           *
    148           * @return  none
    149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          UINT16 StubAPS_ProcessEvent( uint8 task_id, uint16 events )
   \                     StubAPS_ProcessEvent:
    151          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    152            (void)task_id; // Intentionally unreferenced parameter
    153          
    154            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   7056         JNZ       ??StubAPS_ProcessEvent_0
    155            {
    156              osal_event_hdr_t *msg_ptr;
    157          
    158              while ( (msg_ptr = (osal_event_hdr_t *)osal_msg_receive( StubAPS_TaskID )) != NULL )
    159              {
    160                if ( msg_ptr->event == MAC_MCPS_DATA_CNF )
    161                {
    162                  INTERP_DataConfirm( (ZMacDataCnf_t *)msg_ptr );
    163                }
    164                else if ( msg_ptr->event == MAC_MCPS_DATA_IND )
    165                {
    166                  INTERP_DataIndication( (macMcpsDataInd_t *)msg_ptr );
    167                }
    168          
    169                osal_msg_deallocate( (uint8 *)msg_ptr );
    170              }
    171          
    172              // Return unproccessed events
    173              return ( events ^ SYS_EVENT_MSG );
    174            }
    175          
    176            if ( events & CHANNEL_CHANGE_EVT )
   \   000012   EE           MOV       A,R6
   \   000013   A2E0         MOV       C,0xE0 /* A   */.0
   \   000015   507A         JNC       ??StubAPS_ProcessEvent_1
    177            {
    178              // try to change to the new channel
    179              ZStatus_t status = StubAPS_SetNewChannel( newChannel );
   \   000017                ; Setup parameters for call to function StubAPS_SetNewChannel
   \   000017   90....       MOV       DPTR,#newChannel
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??StubAPS_SetNewChannel::?relay`; Banked call to: StubAPS_SetNewChannel
   \   00001F   E9           MOV       A,R1
   \   000020   F5..         MOV       ?V0,A
    180              if ( status != ZSuccess )
   \   000022   6010         JZ        ??StubAPS_ProcessEvent_2
    181              {
    182                // turn MAC receiver back on
    183                uint8 rxOnIdle = true;
   \   000024   12....       LCALL     ?Subroutine3 & 0xFFFF
    184                ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_15:
   \   000027   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    185          
    186                // set NWK task to run
    187                nwk_setStateIdle( FALSE );
   \   00002A                ; Setup parameters for call to function nwk_setStateIdle
   \   00002A   7900         MOV       R1,#0x0
   \   00002C   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    188          
    189                channelChangeInProgress = FALSE;
   \   00002F   90....       MOV       DPTR,#channelChangeInProgress
   \   000032   E4           CLR       A
   \   000033   F0           MOVX      @DPTR,A
    190              }
    191          
    192              // notify the application
    193              StubAPS_NotifyApp( status );
   \                     ??StubAPS_ProcessEvent_2:
   \   000034                ; Setup parameters for call to function osal_msg_allocate
   \   000034   7A02         MOV       R2,#0x2
   \   000036   7B00         MOV       R3,#0x0
   \   000038   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00003B   EA           MOV       A,R2
   \   00003C   4B           ORL       A,R3
   \   00003D   6013         JZ        ??StubAPS_ProcessEvent_3
   \   00003F   8A82         MOV       DPL,R2
   \   000041   8B83         MOV       DPH,R3
   \   000043   7433         MOV       A,#0x33
   \   000045   F0           MOVX      @DPTR,A
   \   000046   A3           INC       DPTR
   \   000047   E5..         MOV       A,?V0
   \   000049   F0           MOVX      @DPTR,A
   \   00004A                ; Setup parameters for call to function osal_msg_send
   \   00004A   90....       MOV       DPTR,#appTaskID
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    194          
    195              return ( events ^ CHANNEL_CHANGE_EVT );
   \                     ??StubAPS_ProcessEvent_3:
   \   000052   EE           MOV       A,R6
   \   000053   6401         XRL       A,#0x1
   \   000055   FA           MOV       R2,A
   \   000056   EF           MOV       A,R7
   \   000057   8035         SJMP      ??StubAPS_ProcessEvent_4
    196            }
   \                     ??StubAPS_ProcessEvent_5:
   \   000059   740D         MOV       A,#0xd
   \   00005B   68           XRL       A,R0
   \   00005C   7003         JNZ       ??StubAPS_ProcessEvent_6
   \   00005E                ; Setup parameters for call to function INTERP_DataIndication
   \   00005E   12....       LCALL     `??INTERP_DataIndication::?relay`; Banked call to: INTERP_DataIndication
   \                     ??StubAPS_ProcessEvent_6:
   \   000061                ; Setup parameters for call to function osal_msg_deallocate
   \   000061   AA..         MOV       R2,?V0
   \   000063   AB..         MOV       R3,?V1
   \   000065   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??StubAPS_ProcessEvent_0:
   \   000068                ; Setup parameters for call to function osal_msg_receive
   \   000068   90....       MOV       DPTR,#StubAPS_TaskID
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   F9           MOV       R1,A
   \   00006D   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000070   8A..         MOV       ?V0,R2
   \   000072   8B..         MOV       ?V1,R3
   \   000074   EA           MOV       A,R2
   \   000075   45..         ORL       A,?V1
   \   000077   6010         JZ        ??StubAPS_ProcessEvent_7
   \   000079   8A82         MOV       DPL,R2
   \   00007B   8B83         MOV       DPH,R3
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   F8           MOV       R0,A
   \   00007F   740C         MOV       A,#0xc
   \   000081   68           XRL       A,R0
   \   000082   70D5         JNZ       ??StubAPS_ProcessEvent_5
   \   000084                ; Setup parameters for call to function INTERP_DataConfirm
   \   000084   12....       LCALL     `??INTERP_DataConfirm::?relay`; Banked call to: INTERP_DataConfirm
   \   000087   80D8         SJMP      ??StubAPS_ProcessEvent_6
   \                     ??StubAPS_ProcessEvent_7:
   \   000089   EE           MOV       A,R6
   \   00008A   FA           MOV       R2,A
   \   00008B   EF           MOV       A,R7
   \   00008C   6480         XRL       A,#0x80
   \                     ??StubAPS_ProcessEvent_4:
   \   00008E   FB           MOV       R3,A
   \   00008F   8004         SJMP      ??StubAPS_ProcessEvent_8
    197          
    198            // If reach here, the events are unknown
    199            // Discard or make more handlers
    200            return 0;
   \                     ??StubAPS_ProcessEvent_1:
   \   000091   7A00         MOV       R2,#0x0
   \   000093   7B00         MOV       R3,#0x0
   \                     ??StubAPS_ProcessEvent_8:
   \   000095   7401         MOV       A,#0x1
   \   000097                REQUIRE ?Subroutine1
   \   000097                ; // Fall through to label ?Subroutine1
    201          
    202          } /* StubAPS_ProcessEvent() */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F04         MOV       R7,#0x4
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   7401         MOV       A,#0x1
   \   000008                REQUIRE ??Subroutine13_0
   \   000008                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001   AA..         MOV       R2,?XSP + 0
   \   000003   AB..         MOV       R3,?XSP + 1
   \   000005   7952         MOV       R1,#0x52
   \   000007   22           RET
    203          
    204          
    205          /*********************************************************************
    206           * @fn          StubNWK_ParseMsg
    207           *
    208           * @brief       Call this function to parse an incoming Stub NWK frame.
    209           *
    210           * @param       buf - pointer incoming message buffer
    211           * @param       bufLength - length of incoming message
    212           * @param       snff  - pointer Frame Format Parameters
    213           *
    214           * @return      pointer to network packet, NULL if error
    215           */
    216          static void StubNWK_ParseMsg( uint8 *buf, uint8 bufLength, NLDE_FrameFormat_t *snff )
    217          {
    218            uint16 fc;
    219          
    220            osal_memset( snff, 0, sizeof(NLDE_FrameFormat_t) );
    221          
    222            snff->bufLength = bufLength;
    223          
    224            // get the frame control
    225            fc = BUILD_UINT16( buf[NWK_HDR_FRAME_CTRL_LSB], buf[NWK_HDR_FRAME_CTRL_MSB] );
    226          
    227            // parse the frame control
    228            NLDE_ParseFrameControl( fc, snff );
    229          
    230            snff->hdrLen = STUB_NWK_HDR_LEN;
    231          
    232            // Stub NWK payload
    233            snff->nsdu = buf + snff->hdrLen;
    234            snff->nsduLength = snff->bufLength - snff->hdrLen;
    235          
    236          } /* StubNWK_ParseMsg */
    237          
    238          /*********************************************************************
    239           * @fn          StubAPS_ParseMsg
    240           *
    241           * @brief       Call this function to parse an incoming Stub APS frame.
    242           *
    243           * @param       naff  - pointer Stub NWK Frame Format Parameters
    244           * @param       saff  - pointer Stub APS Format Parameters
    245           *
    246           * @return      none
    247           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    248          static void StubAPS_ParseMsg( NLDE_FrameFormat_t *snff, aps_FrameFormat_t *saff )
   \                     StubAPS_ParseMsg:
    249          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    250            uint8 fcb;
    251            uint8 *asdu;
    252          
    253            osal_memset( saff, 0, sizeof(aps_FrameFormat_t) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C17         MOV       R4,#0x17
   \   00000F   7D00         MOV       R5,#0x0
   \   000011   7900         MOV       R1,#0x0
   \   000013   EE           MOV       A,R6
   \   000014   FA           MOV       R2,A
   \   000015   EF           MOV       A,R7
   \   000016   FB           MOV       R3,A
   \   000017   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    254          
    255            saff->asduLength = snff->nsduLength;
   \   00001A   EE           MOV       A,R6
   \   00001B   2410         ADD       A,#0x10
   \   00001D   FA           MOV       R2,A
   \   00001E   E4           CLR       A
   \   00001F   3F           ADDC      A,R7
   \   000020   FB           MOV       R3,A
   \   000021   E5..         MOV       A,?V0
   \   000023   2417         ADD       A,#0x17
   \   000025   FC           MOV       R4,A
   \   000026   E4           CLR       A
   \   000027   35..         ADDC      A,?V1
   \   000029   FD           MOV       R5,A
   \   00002A   8C82         MOV       DPL,R4
   \   00002C   8D83         MOV       DPH,R5
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   8A82         MOV       DPL,R2
   \   000031   8B83         MOV       DPH,R3
   \   000033   F0           MOVX      @DPTR,A
    256            asdu = snff->nsdu;
   \   000034   E5..         MOV       A,?V0
   \   000036   241D         ADD       A,#0x1d
   \   000038   F5..         MOV       ?V2,A
   \   00003A   E4           CLR       A
   \   00003B   35..         ADDC      A,?V1
   \   00003D   F5..         MOV       ?V3,A
   \   00003F   85..82       MOV       DPL,?V2
   \   000042   12....       LCALL     ?Subroutine8 & 0xFFFF
    257            saff->macDestAddr = snff->macDstAddr;
   \                     ??CrossCallReturnLabel_26:
   \   000045   E5..         MOV       A,?V0
   \   000047   240D         ADD       A,#0xd
   \   000049   F582         MOV       DPL,A
   \   00004B   E4           CLR       A
   \   00004C   35..         ADDC      A,?V1
   \   00004E   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000051   8E82         MOV       DPL,R6
   \   000053   8F83         MOV       DPH,R7
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   E5..         MOV       A,?V0
   \   000061   F0           MOVX      @DPTR,A
   \   000062   A3           INC       DPTR
   \   000063   E5..         MOV       A,?V1
   \   000065   F0           MOVX      @DPTR,A
    258          
    259            // First byte is Frame Control.
    260            saff->FrmCtrl = *asdu++;
   \   000066   8882         MOV       DPL,R0
   \   000068   8983         MOV       DPH,R1
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   F5..         MOV       ?V0,A
   \   00006D   8E82         MOV       DPL,R6
   \   00006F   8F83         MOV       DPH,R7
   \   000071   F0           MOVX      @DPTR,A
   \   000072   8882         MOV       DPL,R0
   \   000074   8983         MOV       DPH,R1
   \   000076   A3           INC       DPTR
   \   000077   A882         MOV       R0,DPL
   \   000079   A983         MOV       R1,DPH
    261          
    262            fcb = saff->FrmCtrl & APS_FRAME_TYPE_MASK;
    263            if ( fcb == STUB_APS_FRAME )
   \   00007B   7403         MOV       A,#0x3
   \   00007D   55..         ANL       A,?V0
   \   00007F   6403         XRL       A,#0x3
   \   000081   703F         JNZ       ??StubAPS_ParseMsg_0
    264            {
    265              fcb = saff->FrmCtrl & APS_DELIVERYMODE_MASK;
   \   000083   740C         MOV       A,#0xc
   \   000085   55..         ANL       A,?V0
   \   000087   F5..         MOV       ?V0,A
    266              if ( fcb == APS_FC_DM_BROADCAST )
   \   000089   EE           MOV       A,R6
   \   00008A   240C         ADD       A,#0xc
   \   00008C   F582         MOV       DPL,A
   \   00008E   E4           CLR       A
   \   00008F   3F           ADDC      A,R7
   \   000090   F583         MOV       DPH,A
   \   000092   7408         MOV       A,#0x8
   \   000094   65..         XRL       A,?V0
   \   000096   7005         JNZ       ??StubAPS_ParseMsg_1
    267                saff->wasBroadcast = true;
   \   000098   7401         MOV       A,#0x1
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   8011         SJMP      ??StubAPS_ParseMsg_2
    268              else
    269                saff->wasBroadcast = false;
   \                     ??StubAPS_ParseMsg_1:
   \   00009D   E4           CLR       A
   \   00009E   F0           MOVX      @DPTR,A
    270          
    271              if ( fcb == APS_FC_DM_GROUP )
   \   00009F   740C         MOV       A,#0xc
   \   0000A1   65..         XRL       A,?V0
   \   0000A3   7009         JNZ       ??StubAPS_ParseMsg_2
    272              {
    273                saff->GroupID = BUILD_UINT16( asdu[0], asdu[1] );
   \   0000A5   12....       LCALL     ?Subroutine7 & 0xFFFF
    274                asdu += sizeof( uint16 );
    275              }
   \                     ??CrossCallReturnLabel_4:
   \   0000A8   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0000AB   5001         JNC       ??StubAPS_ParseMsg_2
   \   0000AD   09           INC       R1
    276          
    277              // Pull out the Cluster ID
    278              saff->ClusterID = BUILD_UINT16( asdu[0], asdu[1] );
   \                     ??StubAPS_ParseMsg_2:
   \   0000AE   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000B1   12....       LCALL     ?Subroutine4 & 0xFFFF
    279              asdu += sizeof( uint16 );
   \                     ??CrossCallReturnLabel_29:
   \   0000B4   5001         JNC       ??StubAPS_ParseMsg_3
   \   0000B6   09           INC       R1
    280          
    281              // Pull out the profile ID
    282              saff->ProfileID = BUILD_UINT16( asdu[0], asdu[1] );
   \                     ??StubAPS_ParseMsg_3:
   \   0000B7   12....       LCALL     ?Subroutine7 & 0xFFFF
    283              asdu += 2;
    284            }
   \                     ??CrossCallReturnLabel_6:
   \   0000BA   A3           INC       DPTR
   \   0000BB   A3           INC       DPTR
   \   0000BC   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000BF   5001         JNC       ??StubAPS_ParseMsg_0
   \   0000C1   09           INC       R1
    285          
    286            saff->asdu = asdu;
   \                     ??StubAPS_ParseMsg_0:
   \   0000C2   EE           MOV       A,R6
   \   0000C3   240E         ADD       A,#0xe
   \   0000C5   F582         MOV       DPL,A
   \   0000C7   E4           CLR       A
   \   0000C8   3F           ADDC      A,R7
   \   0000C9   F583         MOV       DPH,A
   \   0000CB   E8           MOV       A,R0
   \   0000CC   F0           MOVX      @DPTR,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   E9           MOV       A,R1
   \   0000CF   F0           MOVX      @DPTR,A
    287            saff->asduLength -= (uint8) (asdu - snff->nsdu);
   \   0000D0   85..82       MOV       DPL,?V2
   \   0000D3   85..83       MOV       DPH,?V3
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   F5..         MOV       ?V0,A
   \   0000D9   8A82         MOV       DPL,R2
   \   0000DB   8B83         MOV       DPH,R3
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   C3           CLR       C
   \   0000DF   98           SUBB      A,R0
   \   0000E0   25..         ADD       A,?V0
   \   0000E2   F8           MOV       R0,A
   \   0000E3   F0           MOVX      @DPTR,A
    288            saff->apsHdrLen = snff->nsduLength - saff->asduLength;
   \   0000E4   8C82         MOV       DPL,R4
   \   0000E6   8D83         MOV       DPH,R5
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   C3           CLR       C
   \   0000EA   98           SUBB      A,R0
   \   0000EB   C0E0         PUSH      A
   \   0000ED   EE           MOV       A,R6
   \   0000EE   240D         ADD       A,#0xd
   \   0000F0   F582         MOV       DPL,A
   \   0000F2   E4           CLR       A
   \   0000F3   3F           ADDC      A,R7
   \   0000F4   F583         MOV       DPH,A
   \   0000F6   D0E0         POP       A
   \   0000F8   F0           MOVX      @DPTR,A
    289          
    290          } /* StubAPS_ParseMsg */
   \   0000F9   7F06         MOV       R7,#0x6
   \   0000FB   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine14_0
   \   000002                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine15_0
   \   000002                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V4,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V1,A
   \   00000B   E5..         MOV       A,?V4
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine16_0
   \   000002                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   E5..         MOV       A,?V1
   \   000008   F0           MOVX      @DPTR,A
   \   000009   E8           MOV       A,R0
   \   00000A   2402         ADD       A,#0x2
   \   00000C   F8           MOV       R0,A
   \   00000D   22           RET
    291          
    292          /******************************************************************************
    293           * @fn          StubAPS_BuildFrameControl
    294           *
    295           * @brief       This function builds Stub APS Frame Control and the destination
    296           *              address parameter for the MCPS-DATA Request.
    297           *
    298           * @param       frmCtrl - frame control
    299           * @param       dstAddr - destination address for MCPS-DATA Request
    300           * @param       groupID - group id
    301           * @param       req - APSDE_DataReq_t
    302           *
    303           * @return      ZStatus_t
    304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          static ZStatus_t StubAPS_BuildFrameControl( uint8 *frmCtrl, zAddrType_t *dstAddr,
   \                     StubAPS_BuildFrameControl:
    306                                                      uint16 *groupID, APSDE_DataReq_t *req )
    307          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   F8           MOV       R0,A
   \   000007   EB           MOV       A,R3
   \   000008   F9           MOV       R1,A
   \   000009   EC           MOV       A,R4
   \   00000A   FA           MOV       R2,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FB           MOV       R3,A
   \   00000D   740D         MOV       A,#0xd
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?Subroutine10 & 0xFFFF
    308            // Security
    309            if ( req->txOptions & APS_TX_OPTIONS_SECURITY_ENABLE )
   \                     ??CrossCallReturnLabel_7:
   \   000015   EC           MOV       A,R4
   \   000016   2415         ADD       A,#0x15
   \   000018   F582         MOV       DPL,A
   \   00001A   E4           CLR       A
   \   00001B   3D           ADDC      A,R5
   \   00001C   F583         MOV       DPH,A
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   540D         ANL       A,#0xd
   \   000021   700E         JNZ       ??StubAPS_BuildFrameControl_0
    310              return ( ZApsNotSupported );
    311          
    312            // Ack request
    313            if ( req->txOptions & APS_TX_OPTIONS_ACK )
    314              return ( ZApsNotSupported );
    315          
    316             // Fragmentation
    317            if ( req->txOptions & APS_TX_OPTIONS_PERMIT_FRAGMENT )
    318              return ( ZApsNotSupported );
    319          
    320            // set delivery mode
    321            if ( req->dstAddr.addrMode == AddrNotPresent )
   \   000023   EC           MOV       A,R4
   \   000024   2408         ADD       A,#0x8
   \   000026   FE           MOV       R6,A
   \   000027   E4           CLR       A
   \   000028   3D           ADDC      A,R5
   \   000029   FF           MOV       R7,A
   \   00002A   8E82         MOV       DPL,R6
   \   00002C   8F83         MOV       DPH,R7
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   7005         JNZ       ??StubAPS_BuildFrameControl_1
    322              return ( ZApsNotSupported ); // No REFLECTOR
   \                     ??StubAPS_BuildFrameControl_0:
   \   000031   79B6         MOV       R1,#-0x4a
   \   000033   02....       LJMP      ??StubAPS_BuildFrameControl_2 & 0xFFFF
    323          
    324            // set frame type
    325            *frmCtrl = STUB_APS_FRAME;
   \                     ??StubAPS_BuildFrameControl_1:
   \   000036   8882         MOV       DPL,R0
   \   000038   8983         MOV       DPH,R1
   \   00003A   7403         MOV       A,#0x3
   \   00003C   F0           MOVX      @DPTR,A
    326          
    327            // set DstAddrMode of MCPS-DATA Request to DstAddrMode of INTERP-Data Request
    328            dstAddr->addrMode = req->dstAddr.addrMode;
   \   00003D   EA           MOV       A,R2
   \   00003E   2408         ADD       A,#0x8
   \   000040   F5..         MOV       ?V0,A
   \   000042   E4           CLR       A
   \   000043   3B           ADDC      A,R3
   \   000044   F5..         MOV       ?V1,A
   \   000046   8E82         MOV       DPL,R6
   \   000048   8F83         MOV       DPH,R7
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   85..82       MOV       DPL,?V0
   \   00004E   85..83       MOV       DPH,?V1
   \   000051   F0           MOVX      @DPTR,A
    329          
    330            // set DstAddr of MCPS-DATA Request to DstAddr of INTERP-Data Request
    331            if ( req->dstAddr.addrMode == AddrBroadcast )
   \   000052   8E82         MOV       DPL,R6
   \   000054   8F83         MOV       DPH,R7
   \   000056   E0           MOVX      A,@DPTR
   \   000057   FE           MOV       R6,A
   \   000058   740F         MOV       A,#0xf
   \   00005A   6E           XRL       A,R6
   \   00005B   700C         JNZ       ??StubAPS_BuildFrameControl_3
    332            {
    333              *frmCtrl |= APS_FC_DM_BROADCAST;
   \   00005D   8882         MOV       DPL,R0
   \   00005F   8983         MOV       DPH,R1
   \   000061   E0           MOVX      A,@DPTR
   \   000062   D2E3         SETB      0xE0 /* A   */.3
   \   000064   12....       LCALL     ?Subroutine6 & 0xFFFF
    334          
    335              // set DstAddrMode of MCPS-DATA Request to short address
    336              dstAddr->addrMode = Addr16Bit;
    337              dstAddr->addr.shortAddr = req->dstAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_2:
   \   000067   8005         SJMP      ??StubAPS_BuildFrameControl_4
    338            }
    339            else if ( req->dstAddr.addrMode == Addr16Bit )
   \                     ??StubAPS_BuildFrameControl_3:
   \   000069   7402         MOV       A,#0x2
   \   00006B   6E           XRL       A,R6
   \   00006C   700D         JNZ       ??StubAPS_BuildFrameControl_5
    340            {
    341              *frmCtrl |= APS_FC_DM_UNICAST;
    342              dstAddr->addr.shortAddr = req->dstAddr.addr.shortAddr;
   \                     ??StubAPS_BuildFrameControl_4:
   \   00006E   8C82         MOV       DPL,R4
   \   000070   8D83         MOV       DPH,R5
    343            }
   \   000072   12....       LCALL     ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000075   8A82         MOV       DPL,R2
   \   000077   8B83         MOV       DPH,R3
   \   000079   8036         SJMP      ??StubAPS_BuildFrameControl_6
    344            else if ( req->dstAddr.addrMode == Addr64Bit )
   \                     ??StubAPS_BuildFrameControl_5:
   \   00007B   7403         MOV       A,#0x3
   \   00007D   6E           XRL       A,R6
   \   00007E   7005         JNZ       ??StubAPS_BuildFrameControl_7
    345            {
    346              *frmCtrl |= APS_FC_DM_UNICAST;
    347              osal_cpyExtAddr( dstAddr->addr.extAddr, req->dstAddr.addr.extAddr );
   \   000080                ; Setup parameters for call to function sAddrExtCpy
   \   000080   12....       LCALL     `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000083   8031         SJMP      ??StubAPS_BuildFrameControl_8
    348            }
    349            else if ( req->dstAddr.addrMode == AddrGroup )
   \                     ??StubAPS_BuildFrameControl_7:
   \   000085   7401         MOV       A,#0x1
   \   000087   6E           XRL       A,R6
   \   000088   702C         JNZ       ??StubAPS_BuildFrameControl_8
    350            {
    351              *frmCtrl |= APS_FC_DM_GROUP;
   \   00008A   8882         MOV       DPL,R0
   \   00008C   8983         MOV       DPH,R1
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   440C         ORL       A,#0xc
   \   000091   12....       LCALL     ?Subroutine6 & 0xFFFF
    352          
    353              // set DstAddrMode of MCPS-DATA Request to short address
    354              dstAddr->addrMode = Addr16Bit;
    355          
    356              // set DstAddr of MCPS-DATA Request to 0xFFFF
    357              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
   \                     ??CrossCallReturnLabel_3:
   \   000094   8A82         MOV       DPL,R2
   \   000096   8B83         MOV       DPH,R3
   \   000098   74FF         MOV       A,#-0x1
   \   00009A   F0           MOVX      @DPTR,A
   \   00009B   A3           INC       DPTR
   \   00009C   F0           MOVX      @DPTR,A
    358          
    359              // set Group ID to DstAddr of INTERP-Data Request
    360              *groupID = req->dstAddr.addr.shortAddr;
   \   00009D   8C82         MOV       DPL,R4
   \   00009F   8D83         MOV       DPH,R5
   \   0000A1   12....       LCALL     ??Subroutine15_0 & 0xFFFF
    361            }
   \                     ??CrossCallReturnLabel_24:
   \   0000A4   740B         MOV       A,#0xb
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   E0           MOVX      A,@DPTR
   \   0000AA   FA           MOV       R2,A
   \   0000AB   A3           INC       DPTR
   \   0000AC   E0           MOVX      A,@DPTR
   \   0000AD   F583         MOV       DPH,A
   \   0000AF   8A82         MOV       DPL,R2
   \                     ??StubAPS_BuildFrameControl_6:
   \   0000B1   E8           MOV       A,R0
   \   0000B2   F0           MOVX      @DPTR,A
   \   0000B3   A3           INC       DPTR
   \   0000B4   E9           MOV       A,R1
   \   0000B5   F0           MOVX      @DPTR,A
    362          
    363            return ( ZSuccess );
   \                     ??StubAPS_BuildFrameControl_8:
   \   0000B6   7900         MOV       R1,#0x0
   \                     ??StubAPS_BuildFrameControl_2:
   \   0000B8   80..         SJMP      ??Subroutine17_0
    364          
    365          } /* StubAPS_BuildFrameControl */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   7402         MOV       A,#0x2
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   7F03         MOV       R7,#0x3
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET
    366          
    367          /******************************************************************************
    368           * @fn          StubNWK_BuildMsg
    369           *
    370           * @brief       This function builds a Stub NWK frame.
    371           *
    372           * @param       nwkHdr - stub NWK header
    373           *
    374           * @return      none
    375           */
    376          static void StubNWK_BuildMsg( uint8 *nwkHdr )
    377          {
    378            uint16 frmCtrl = 0;
    379            uint8  protoVer = NLME_GetProtocolVersion();
    380          
    381            // frame type
    382            frmCtrl |= (STUB_NWK_FRAME_TYPE << NWK_FC_FRAME_TYPE);
    383          
    384            // protocol version
    385            frmCtrl |= (protoVer << NWK_FC_PROT_VERSION);
    386          
    387            // set Stub NWK header
    388            *nwkHdr++ = LO_UINT16( frmCtrl );
    389            *nwkHdr++ = HI_UINT16( frmCtrl );
    390          
    391          } /* StubNWK_BuildMsg */
    392          
    393          /******************************************************************************
    394           * @fn          StubAPS_BuildMsg
    395           *
    396           * @brief       This function builds a Stub APS frame.
    397           *
    398           * @param       apsHdr - stub APS header
    399           * @param       frmCtrl - stub APS frame control
    400           * @param       groupID - group id
    401           * @param       req - APSDE_DataReq_t
    402           *
    403           * @return      none
    404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    405          static void StubAPS_BuildMsg( uint8 *apsHdr, uint8 frmCtrl, uint16 groupID, APSDE_DataReq_t *req )
   \                     StubAPS_BuildMsg:
    406          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    407            // add frame type
    408            *apsHdr++ = frmCtrl;
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   AA82         MOV       R2,DPL
   \   00000F   AB83         MOV       R3,DPH
    409          
    410            // add Group ID
    411            if ( ( frmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_GROUP )
   \   000011   740C         MOV       A,#0xc
   \   000013   5E           ANL       A,R6
   \   000014   640C         XRL       A,#0xc
   \   000016   700C         JNZ       ??StubAPS_BuildMsg_0
    412            {
    413              *apsHdr++ = LO_UINT16( groupID );
   \   000018   EC           MOV       A,R4
   \   000019   F0           MOVX      @DPTR,A
    414              *apsHdr++ = HI_UINT16( groupID );
   \   00001A   ED           MOV       A,R5
   \   00001B   A3           INC       DPTR
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   EA           MOV       A,R2
   \   00001E   2402         ADD       A,#0x2
   \   000020   FA           MOV       R2,A
   \   000021   5001         JNC       ??StubAPS_BuildMsg_0
   \   000023   0B           INC       R3
   \                     ??StubAPS_BuildMsg_0:
   \   000024   740B         MOV       A,#0xb
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
    415            }
   \   000029   12....       LCALL     ?Subroutine10 & 0xFFFF
    416          
    417            // add clusterID
    418            *apsHdr++ = LO_UINT16( req->clusterID );
   \                     ??CrossCallReturnLabel_8:
   \   00002C   EC           MOV       A,R4
   \   00002D   240D         ADD       A,#0xd
   \   00002F   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000032   12....       LCALL     ?Subroutine5 & 0xFFFF
    419            *apsHdr++ = HI_UINT16( req->clusterID );
   \                     ??CrossCallReturnLabel_0:
   \   000035   F0           MOVX      @DPTR,A
    420          
    421            // add profile ID
    422            *apsHdr++ = LO_UINT16( req->profileID );
   \   000036   EC           MOV       A,R4
   \   000037   240F         ADD       A,#0xf
   \   000039   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   12....       LCALL     ?Subroutine5 & 0xFFFF
    423            *apsHdr++ = HI_UINT16( req->profileID );
   \                     ??CrossCallReturnLabel_1:
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   F0           MOVX      @DPTR,A
    424          
    425            // copy ASDU data into frame
    426            osal_memcpy ( apsHdr, req->asdu, req->asduLen );
   \   000044                ; Setup parameters for call to function osal_memcpy
   \   000044   EC           MOV       A,R4
   \   000045   2413         ADD       A,#0x13
   \   000047   F582         MOV       DPL,A
   \   000049   E4           CLR       A
   \   00004A   3D           ADDC      A,R5
   \   00004B   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00004E   75..00       MOV       ?V2,#0x0
   \   000051   78..         MOV       R0,#?V0
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000056   EC           MOV       A,R4
   \   000057   2411         ADD       A,#0x11
   \   000059   F582         MOV       DPL,A
   \   00005B   E4           CLR       A
   \   00005C   3D           ADDC      A,R5
   \   00005D   F583         MOV       DPH,A
   \   00005F   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000062   EA           MOV       A,R2
   \   000063   2404         ADD       A,#0x4
   \   000065   FA           MOV       R2,A
   \   000066   5001         JNC       ??StubAPS_BuildMsg_1
   \   000068   0B           INC       R3
   \                     ??StubAPS_BuildMsg_1:
   \   000069   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006C   7403         MOV       A,#0x3
   \   00006E                REQUIRE ?Subroutine2
   \   00006E                ; // Fall through to label ?Subroutine2
    427          
    428          } /* StubAPS_BuildMsg */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine17_0
   \   000003                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F8           MOV       R0,A
   \   000001   E4           CLR       A
   \   000002   3D           ADDC      A,R5
   \   000003   F9           MOV       R1,A
   \   000004   8882         MOV       DPL,R0
   \   000006   8983         MOV       DPH,R1
   \   000008   E0           MOVX      A,@DPTR
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   8A82         MOV       DPL,R2
   \   000009   8B83         MOV       DPH,R3
   \   00000B   A3           INC       DPTR
   \   00000C   22           RET
    429          
    430          /******************************************************************************
    431           * @fn          StubAPS_setNewChannel
    432           *
    433           * @brief       This function changes the device's channel.
    434           *
    435           * @param       none
    436           *
    437           * @return      ZStatus_t
    438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    439          static ZStatus_t StubAPS_SetNewChannel( uint8 channel )
   \                     StubAPS_SetNewChannel:
    440          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV       A,#-0x2
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
   \   000009   7401         MOV       A,#0x1
   \   00000B   12....       LCALL     ?XSTACK_DISP0_8
   \   00000E   E9           MOV       A,R1
   \   00000F   F0           MOVX      @DPTR,A
    441            uint8 rxOnIdle;
    442          
    443            // make sure MAC has nothing to transmit
    444            if ( ( nwkDB_CountTypes( NWK_DATABUF_SENT ) == 0 ) && ZMacStateIdle() )
   \   000010                ; Setup parameters for call to function nwkDB_CountTypes
   \   000010   7902         MOV       R1,#0x2
   \   000012   12....       LCALL     `??nwkDB_CountTypes::?relay`; Banked call to: nwkDB_CountTypes
   \   000015   E9           MOV       A,R1
   \   000016   701E         JNZ       ??StubAPS_SetNewChannel_0
   \   000018                ; Setup parameters for call to function ZMacStateIdle
   \   000018   12....       LCALL     `??ZMacStateIdle::?relay`; Banked call to: ZMacStateIdle
   \   00001B   E9           MOV       A,R1
   \   00001C   6018         JZ        ??StubAPS_SetNewChannel_0
    445            {
    446              // set the new channel
    447              ZMacSetReq( ZMacChannel, &channel );
   \   00001E                ; Setup parameters for call to function ZMacSetReq
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP101_8
   \   000023   79E1         MOV       R1,#-0x1f
   \   000025   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    448          
    449              // turn MAC receiver back on
    450              rxOnIdle = true;
   \   000028   12....       LCALL     ?Subroutine3 & 0xFFFF
    451              ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_16:
   \   00002B   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    452          
    453              channelChangeInProgress = FALSE;
   \   00002E   90....       MOV       DPTR,#channelChangeInProgress
   \   000031   E4           CLR       A
   \   000032   F0           MOVX      @DPTR,A
    454          
    455              return ( ZSuccess );
   \   000033   F9           MOV       R1,A
   \   000034   8002         SJMP      ??StubAPS_SetNewChannel_1
    456            }
    457          
    458            return ( ZFailure );
   \                     ??StubAPS_SetNewChannel_0:
   \   000036   7901         MOV       R1,#0x1
   \                     ??StubAPS_SetNewChannel_1:
   \   000038   02....       LJMP      ?Subroutine0 & 0xFFFF
    459          
    460          } /* StubAPS_setNewChannel */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7402         MOV       A,#0x2
   \   000002   12....       LCALL     ?DEALLOC_XSTACK8
   \   000005                REQUIRE ??Subroutine18_0
   \   000005                ; // Fall through to label ??Subroutine18_0
    461          
    462          
    463          /******************************************************************************
    464           * @fn          StubAPS_NotifyApp
    465           *
    466           * @brief       This function sends an OSAL message to the Application task.
    467           *
    468           * @param       status - command status
    469           *
    470           * @return      none
    471           */
    472          static void StubAPS_NotifyApp( uint8 status )
    473          {
    474            osal_event_hdr_t *msgPtr;
    475          
    476            // Notify the application task
    477            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( sizeof(osal_event_hdr_t) );
    478            if ( msgPtr )
    479            {
    480              msgPtr->event = SAPS_CHANNEL_CHANGE;
    481              msgPtr->status = status;
    482          
    483              osal_msg_send( appTaskID, (uint8 *)msgPtr );
    484            }
    485          
    486          } /* StubAPS_NotifyApp */
    487          
    488          /******************************************************************************
    489           *
    490           *  External APIs provided to the Application.
    491           */
    492          
    493          /******************************************************************************
    494           * @fn          StubAPS_SetInterPanChannel
    495           *
    496           * @brief       This function changes the device's channel for inter-PAN communication.
    497           *
    498           * @param       channel - new channel
    499           *
    500           * @return      ZStatus_t
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          ZStatus_t StubAPS_SetInterPanChannel( uint8 channel )
   \                     StubAPS_SetInterPanChannel:
    503          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    504            uint8 currChannel;
    505            uint8 rxOnIdle;
    506          
    507            if ( channelChangeInProgress )
   \   00000C   90....       MOV       DPTR,#channelChangeInProgress
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   6004         JZ        ??StubAPS_SetInterPanChannel_0
    508              return ( ZFailure );
   \   000012   7901         MOV       R1,#0x1
   \   000014   8054         SJMP      ??StubAPS_SetInterPanChannel_1
    509          
    510            ZMacGetReq( ZMacChannel, &currChannel );
   \                     ??StubAPS_SetInterPanChannel_0:
   \   000016                ; Setup parameters for call to function ZMacGetReq
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP101_8
   \   00001B   79E1         MOV       R1,#-0x1f
   \   00001D   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    511            if ( currChannel == channel )
   \   000020   7401         MOV       A,#0x1
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   E0           MOVX      A,@DPTR
   \   000026   6E           XRL       A,R6
   \   000027   601F         JZ        ??StubAPS_SetInterPanChannel_2
    512            {
    513              // inter PANs communication within the same channel
    514              return ( ZSuccess );
    515            }
    516          
    517            // go into channel transition state
    518            channelChangeInProgress = TRUE;
   \   000029   90....       MOV       DPTR,#channelChangeInProgress
   \   00002C   7401         MOV       A,#0x1
   \   00002E   F0           MOVX      @DPTR,A
    519          
    520            // set NWK task to idle
    521            nwk_setStateIdle( TRUE );
   \   00002F                ; Setup parameters for call to function nwk_setStateIdle
   \   00002F   F9           MOV       R1,A
   \   000030   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    522          
    523            // turn MAC receiver off
    524            rxOnIdle = false;
   \   000033   85..82       MOV       DPL,?XSP + 0
   \   000036   85..83       MOV       DPH,?XSP + 1
   \   000039   E4           CLR       A
   \   00003A   12....       LCALL     ??Subroutine13_0 & 0xFFFF
    525            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_18:
   \   00003D   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    526          
    527            // try to change to the new channel
    528            if ( StubAPS_SetNewChannel( channel ) == ZSuccess )
   \   000040                ; Setup parameters for call to function StubAPS_SetNewChannel
   \   000040   EE           MOV       A,R6
   \   000041   F9           MOV       R1,A
   \   000042   12....       LCALL     `??StubAPS_SetNewChannel::?relay`; Banked call to: StubAPS_SetNewChannel
   \   000045   E9           MOV       A,R1
   \   000046   7004         JNZ       ??StubAPS_SetInterPanChannel_3
    529              return ( ZSuccess );
   \                     ??StubAPS_SetInterPanChannel_2:
   \   000048   7900         MOV       R1,#0x0
   \   00004A   801E         SJMP      ??StubAPS_SetInterPanChannel_1
    530          
    531            // save the new channel for retry
    532            newChannel = channel;
   \                     ??StubAPS_SetInterPanChannel_3:
   \   00004C   EE           MOV       A,R6
   \   00004D   90....       MOV       DPTR,#newChannel
   \   000050   F0           MOVX      @DPTR,A
    533          
    534            // ask StubAPS task to retry it later
    535            osal_start_timerEx( StubAPS_TaskID, CHANNEL_CHANGE_EVT, CHANNEL_CHANGE_RETRY_TIMEOUT );
   \   000051                ; Setup parameters for call to function osal_start_timerEx
   \   000051   90....       MOV       DPTR,#__Constant_64
   \   000054   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000057   7A01         MOV       R2,#0x1
   \   000059   7B00         MOV       R3,#0x0
   \   00005B   90....       MOV       DPTR,#StubAPS_TaskID
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   F9           MOV       R1,A
   \   000060   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000063   7404         MOV       A,#0x4
   \   000065   12....       LCALL     ?DEALLOC_XSTACK8
    536          
    537            return ( ZApsNotAllowed );
   \   000068   79BA         MOV       R1,#-0x46
   \                     ??StubAPS_SetInterPanChannel_1:
   \   00006A   7402         MOV       A,#0x2
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00006F   7F01         MOV       R7,#0x1
   \   000071   02....       LJMP      ?BANKED_LEAVE_XDATA
    538          
    539          } /* StubAPS_SetInterPanChannel */
    540          
    541          /******************************************************************************
    542           * @fn          StubAPS_SetIntraPanChannel
    543           *
    544           * @brief       This function sets the device's channel back to the NIB channel.
    545           *
    546           * @param       none
    547           *
    548           * @return      ZStatus_t
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          ZStatus_t StubAPS_SetIntraPanChannel( void )
   \                     StubAPS_SetIntraPanChannel:
    551          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV       A,#-0x2
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
    552            uint8 currChannel;
    553            uint8 rxOnIdle;
    554          
    555            if ( channelChangeInProgress )
   \   000009   90....       MOV       DPTR,#channelChangeInProgress
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   6004         JZ        ??StubAPS_SetIntraPanChannel_0
    556              return ( ZFailure );
   \   00000F   7901         MOV       R1,#0x1
   \   000011   8049         SJMP      ??StubAPS_SetIntraPanChannel_1
    557          
    558            ZMacGetReq( ZMacChannel, &currChannel );
   \                     ??StubAPS_SetIntraPanChannel_0:
   \   000013                ; Setup parameters for call to function ZMacGetReq
   \   000013   7401         MOV       A,#0x1
   \   000015   12....       LCALL     ?XSTACK_DISP101_8
   \   000018   79E1         MOV       R1,#-0x1f
   \   00001A   12....       LCALL     `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    559            if ( currChannel == _NIB.nwkLogicalChannel )
   \   00001D   7401         MOV       A,#0x1
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   E0           MOVX      A,@DPTR
   \   000023   F8           MOV       R0,A
   \   000024   90....       MOV       DPTR,#_NIB + 22
   \   000027   E0           MOVX      A,@DPTR
   \   000028   68           XRL       A,R0
   \   000029   7004         JNZ       ??StubAPS_SetIntraPanChannel_2
    560              return ( ZSuccess );
   \   00002B   7900         MOV       R1,#0x0
   \   00002D   802D         SJMP      ??StubAPS_SetIntraPanChannel_1
    561          
    562            channelChangeInProgress = TRUE;
   \                     ??StubAPS_SetIntraPanChannel_2:
   \   00002F   90....       MOV       DPTR,#channelChangeInProgress
   \   000032   7401         MOV       A,#0x1
   \   000034   F0           MOVX      @DPTR,A
    563          
    564            // turn MAC receiver off
    565            rxOnIdle = false;
   \   000035   85..82       MOV       DPL,?XSP + 0
   \   000038   85..83       MOV       DPH,?XSP + 1
   \   00003B   E4           CLR       A
   \   00003C   12....       LCALL     ??Subroutine13_0 & 0xFFFF
    566            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_19:
   \   00003F   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    567          
    568            // set the NIB channel
    569            ZMacSetReq( ZMacChannel, &(_NIB.nwkLogicalChannel) );
   \   000042                ; Setup parameters for call to function ZMacSetReq
   \   000042   7A..         MOV       R2,#(_NIB + 22) & 0xff
   \   000044   7B..         MOV       R3,#((_NIB + 22) >> 8) & 0xff
   \   000046   79E1         MOV       R1,#-0x1f
   \   000048   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    570          
    571            // turn MAC receiver back on
    572            rxOnIdle = true;
   \   00004B   12....       LCALL     ?Subroutine3 & 0xFFFF
    573            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \                     ??CrossCallReturnLabel_17:
   \   00004E   12....       LCALL     `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    574          
    575            // set NWK task to run
    576            nwk_setStateIdle( FALSE );
   \   000051                ; Setup parameters for call to function nwk_setStateIdle
   \   000051   7900         MOV       R1,#0x0
   \   000053   12....       LCALL     `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    577          
    578            channelChangeInProgress = FALSE;
   \   000056   90....       MOV       DPTR,#channelChangeInProgress
   \   000059   E4           CLR       A
   \   00005A   F0           MOVX      @DPTR,A
    579          
    580            return ( ZSuccess );
   \   00005B   F9           MOV       R1,A
   \                     ??StubAPS_SetIntraPanChannel_1:
   \   00005C   80..         SJMP      ?Subroutine0
    581          
    582          } /* StubAPS_SetIntraPanChannel */
    583          
    584          /******************************************************************************
    585           * @fn          StubAPS_InterPan
    586           *
    587           * @brief       This function checks to see if a PAN is an Inter-PAN.
    588           *
    589           * @param       panId - PAN ID
    590           * @param       endPoint - endpoint
    591           *
    592           * @return      TRUE if PAN is Inter-PAN, FALSE otherwise
    593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    594          uint8 StubAPS_InterPan( uint16 panId, uint8 endPoint )
   \                     StubAPS_InterPan:
    595          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   \   000001   F8           MOV       R0,A
    596            (void)panId; // Intentionally unreferenced parameter
    597          
    598            // No need to check the MAC/NIB Channels or Source/Destination PAN IDs
    599            // since it's possible to send Inter-PAN messages within the same network.
    600            if ( endPoint == STUBAPS_INTER_PAN_EP )
   \   000002   74FE         MOV       A,#-0x2
   \   000004   68           XRL       A,R0
   \   000005   7004         JNZ       ??StubAPS_InterPan_0
    601            {
    602              // Inter-PAN endpoint
    603              return ( TRUE );
   \   000007   7901         MOV       R1,#0x1
   \   000009   8002         SJMP      ??StubAPS_InterPan_1
    604            }
    605          
    606            return ( FALSE );
   \                     ??StubAPS_InterPan_0:
   \   00000B   7900         MOV       R1,#0x0
   \                     ??StubAPS_InterPan_1:
   \   00000D   02....       LJMP      ?BRET
    607          
    608          } /* StubAPS_InterPan */
    609          
    610          /******************************************************************************
    611           * @fn          StubAPS_RegisterApp
    612           *
    613           * @brief       This function registers the Application with the Stub APS layer.
    614           *
    615           *              NOTE: Since Stub APS messages don't include the application
    616           *                    endpoint, the application has to register its endpoint
    617           *                    with Stub APS.
    618           *
    619           * @param       epDesc - application's endpoint descriptor
    620           *
    621           * @return      none
    622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          void StubAPS_RegisterApp( endPointDesc_t *epDesc )
   \                     StubAPS_RegisterApp:
    624          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    625            appTaskID = *epDesc->task_id;
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   90....       MOV       DPTR,#appTaskID
   \   00000F   F0           MOVX      @DPTR,A
    626            appEndPoint = epDesc->endPoint;
   \   000010   8A82         MOV       DPL,R2
   \   000012   8B83         MOV       DPH,R3
   \   000014   E0           MOVX      A,@DPTR
   \   000015   90....       MOV       DPTR,#appEndPoint
   \   000018   F0           MOVX      @DPTR,A
    627          
    628          } /* StubAPS_RegisterApp */
   \   000019   80..         SJMP      ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F583         MOV       DPH,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   22           RET
    629          
    630          /******************************************************************************
    631           * @fn          StubAPS_ZMacCallback
    632           *
    633           * @brief       This function accepts an inter-PAN message from ZMac.
    634           *
    635           * @param       msgPtr - received message
    636           *
    637           * @return      TRUE if message is processed. FALSE otherwise.
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          uint8 StubAPS_ZMacCallback( uint8 *msgPtr )
   \                     StubAPS_ZMacCallback:
    640          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    641            uint16 nwk_fc;
    642            uint8  aps_fc;
    643            uint8  frameType;
    644            uint8 *buf = NULL;
    645            uint8  event = ((osal_event_hdr_t *)msgPtr)->event;
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F8           MOV       R0,A
    646          
    647            if ( event == MAC_MCPS_DATA_IND )
   \   00000A   740D         MOV       A,#0xd
   \   00000C   68           XRL       A,R0
   \   00000D   6009         JZ        ??CrossCallReturnLabel_12
    648            {
    649              buf = ((macMcpsDataInd_t *)msgPtr)->msdu.p;
    650            }
    651            else if ( event == MAC_MCPS_DATA_CNF )
   \   00000F   740C         MOV       A,#0xc
   \   000011   68           XRL       A,R0
   \   000012   702F         JNZ       ??StubAPS_ZMacCallback_0
    652            {
    653              buf = ((macMcpsDataCnf_t *)msgPtr)->pDataReq->msdu.p;
   \   000014   A3           INC       DPTR
   \   000015   12....       LCALL     ?Subroutine11 & 0xFFFF
    654            }
   \                     ??CrossCallReturnLabel_12:
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   12....       LCALL     ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
    655          
    656            if ( buf )
   \   000021   E582         MOV       A,DPL
   \   000023   4583         ORL       A,DPH
   \   000025   601C         JZ        ??StubAPS_ZMacCallback_0
    657            {
    658              // get the NWK frame control
    659              nwk_fc = BUILD_UINT16( buf[NWK_HDR_FRAME_CTRL_LSB], buf[NWK_HDR_FRAME_CTRL_MSB] );
    660          
    661              // frame type
    662              frameType = (uint8)((nwk_fc >> NWK_FC_FRAME_TYPE) & NWK_FC_FRAME_TYPE_MASK);
    663          
    664              // check if incoming frame is of the right type
    665              if ( frameType != STUB_NWK_FRAME_TYPE )
   \   000027   E0           MOVX      A,@DPTR
   \   000028   5403         ANL       A,#0x3
   \   00002A   6403         XRL       A,#0x3
   \   00002C   7015         JNZ       ??StubAPS_ZMacCallback_0
    666              {
    667                // message doesn't belong to Stub APS
    668                return ( FALSE );
    669              }
    670          
    671              // get the APS frame control
    672              aps_fc = buf[STUB_APS_HDR_FRAME_CTRL];
    673          
    674              // frame type
    675              frameType = aps_fc & APS_FRAME_TYPE_MASK;
    676          
    677              // check if incoming frame is of the right type
    678              if ( frameType != STUB_APS_FRAME )
   \   00002E   A3           INC       DPTR
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   5403         ANL       A,#0x3
   \   000033   6403         XRL       A,#0x3
   \   000035   700C         JNZ       ??StubAPS_ZMacCallback_0
    679              {
    680                // message doesn't belong to Stub APS
    681                return ( FALSE );
    682              }
    683          
    684              // message belongs to Stub APS
    685              osal_msg_send( StubAPS_TaskID, (uint8 *)msgPtr );
   \   000037                ; Setup parameters for call to function osal_msg_send
   \   000037   90....       MOV       DPTR,#StubAPS_TaskID
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   F9           MOV       R1,A
   \   00003C   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    686          
    687              return ( TRUE );
   \   00003F   7901         MOV       R1,#0x1
   \   000041   8002         SJMP      ??StubAPS_ZMacCallback_1
    688            }
    689          
    690            // message doesn't belong to Stub APS
    691            return ( FALSE );
   \                     ??StubAPS_ZMacCallback_0:
   \   000043   7900         MOV       R1,#0x0
   \                     ??StubAPS_ZMacCallback_1:
   \   000045   80..         SJMP      ??Subroutine18_0
    692          
    693          } /* StubAPS_ZMacCallback */
    694          
    695          /******************************************************************************
    696           *
    697           *  Stub APS Inter-PAN interface INTERP and its callbacks.
    698           */
    699          
    700          /******************************************************************************
    701           * @fn          INTERP_DataReq
    702           *
    703           * @brief       This function requests the transfer of data from the next
    704           *              higher layer to a single peer entity.
    705           *
    706           * @param       req - APSDE_DataReq_t
    707           *
    708           * @return      ZStatus_t
    709           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    710          ZStatus_t INTERP_DataReq( APSDE_DataReq_t *req )
   \                     INTERP_DataReq:
    711          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 36
   \   000005   74DC         MOV       A,#-0x24
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
    712            uint8 apsFrmCtrl;
    713            uint16 groupID = 0;
   \   00000E   7401         MOV       A,#0x1
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   E4           CLR       A
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   F0           MOVX      @DPTR,A
    714            uint8 *buf;
    715            uint8 hdrLen;
    716            ZMacDataReq_t dataReq;
    717            ZStatus_t status;
    718          
    719            if ( channelChangeInProgress || !StubAPS_InterPan( req->dstPanId, req->dstEP ) )
   \   000017   90....       MOV       DPTR,#channelChangeInProgress
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   7013         JNZ       ??INTERP_DataReq_0
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   64FE         XRL       A,#0xfe
   \   00002E   6005         JZ        ??INTERP_DataReq_1
    720              return ( ZFailure );
   \                     ??INTERP_DataReq_0:
   \   000030   7901         MOV       R1,#0x1
   \   000032   02....       LJMP      ??INTERP_DataReq_2 & 0xFFFF
    721          
    722            osal_memset( &dataReq, 0, sizeof( ZMacDataReq_t ) );
   \                     ??INTERP_DataReq_1:
   \   000035                ; Setup parameters for call to function osal_memset
   \   000035   7C21         MOV       R4,#0x21
   \   000037   7D00         MOV       R5,#0x0
   \   000039   7900         MOV       R1,#0x0
   \   00003B   7403         MOV       A,#0x3
   \   00003D   12....       LCALL     ?XSTACK_DISP101_8
   \   000040   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    723          
    724            // Build Stub APS header
    725            status = StubAPS_BuildFrameControl( &apsFrmCtrl, &(dataReq.DstAddr), &groupID, req );
   \   000043                ; Setup parameters for call to function StubAPS_BuildFrameControl
   \   000043   78..         MOV       R0,#?V0
   \   000045   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000048   7403         MOV       A,#0x3
   \   00004A   12....       LCALL     ?XSTACK_DISP100_8
   \   00004D   88..         MOV       ?V2,R0
   \   00004F   89..         MOV       ?V3,R1
   \   000051   78..         MOV       R0,#?V2
   \   000053   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000056   7407         MOV       A,#0x7
   \   000058   12....       LCALL     ?XSTACK_DISP102_8
   \   00005B   7404         MOV       A,#0x4
   \   00005D   12....       LCALL     ?XSTACK_DISP101_8
   \   000060   12....       LCALL     `??StubAPS_BuildFrameControl::?relay`; Banked call to: StubAPS_BuildFrameControl
   \   000063   7404         MOV       A,#0x4
   \   000065   12....       LCALL     ?DEALLOC_XSTACK8
   \   000068   E9           MOV       A,R1
   \   000069   F5..         MOV       ?V2,A
    726            if ( status != ZSuccess )
   \   00006B   6003         JZ        $+5
   \   00006D   02....       LJMP      ??INTERP_DataReq_3 & 0xFFFF
    727              return ( status );
    728          
    729            // set default Stub APS header length
    730            hdrLen = APS_FRAME_CTRL_FIELD_LEN;
   \   000070   7801         MOV       R0,#0x1
    731          
    732            // add group ID length
    733            if ( ( apsFrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_GROUP )
   \   000072   85..82       MOV       DPL,?XSP + 0
   \   000075   85..83       MOV       DPH,?XSP + 1
   \   000078   E0           MOVX      A,@DPTR
   \   000079   540C         ANL       A,#0xc
   \   00007B   640C         XRL       A,#0xc
   \   00007D   7002         JNZ       ??INTERP_DataReq_4
    734              hdrLen += APS_GROUP_ID_FIELD_LEN;
   \   00007F   7803         MOV       R0,#0x3
    735          
    736            // add cluster ID length
    737            hdrLen += APS_CLUSTERID_FIELD_LEN;
    738          
    739            // add profile ID length
    740            hdrLen += APS_PROFILEID_FIELD_LEN;
    741          
    742            // add default Stub NWK header length
    743            hdrLen += STUB_NWK_HDR_LEN;
    744          
    745            // calculate MSDU length
    746            dataReq.msduLength = hdrLen + req->asduLen;
   \                     ??INTERP_DataReq_4:
   \   000081   E5..         MOV       A,?V0
   \   000083   2411         ADD       A,#0x11
   \   000085   F582         MOV       DPL,A
   \   000087   E4           CLR       A
   \   000088   35..         ADDC      A,?V1
   \   00008A   F583         MOV       DPH,A
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   28           ADD       A,R0
   \   00008E   2406         ADD       A,#0x6
   \   000090   F8           MOV       R0,A
   \   000091   7421         MOV       A,#0x21
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   E8           MOV       A,R0
   \   000097   F0           MOVX      @DPTR,A
    747          
    748            // allocate buffer
    749            buf = osal_mem_alloc( dataReq.msduLength );
   \   000098                ; Setup parameters for call to function osal_mem_alloc
   \   000098   FA           MOV       R2,A
   \   000099   7B00         MOV       R3,#0x0
   \   00009B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00009E   8A..         MOV       ?V2,R2
   \   0000A0   8B..         MOV       ?V3,R3
   \   0000A2   AE..         MOV       R6,?V2
   \   0000A4   AF..         MOV       R7,?V3
    750            if ( buf != NULL )
   \   0000A6   EE           MOV       A,R6
   \   0000A7   4F           ORL       A,R7
   \   0000A8   7003         JNZ       $+5
   \   0000AA   02....       LJMP      ??INTERP_DataReq_5 & 0xFFFF
    751            {
    752              dataReq.msdu = buf;
   \   0000AD   7422         MOV       A,#0x22
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   EE           MOV       A,R6
   \   0000B3   F0           MOVX      @DPTR,A
   \   0000B4   A3           INC       DPTR
   \   0000B5   EF           MOV       A,R7
   \   0000B6   F0           MOVX      @DPTR,A
    753          
    754              // Add Stub APS header and data
    755              StubAPS_BuildMsg( &buf[STUB_APS_HDR_FRAME_CTRL], apsFrmCtrl, groupID, req );
   \   0000B7                ; Setup parameters for call to function StubAPS_BuildMsg
   \   0000B7   78..         MOV       R0,#?V0
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BC   7403         MOV       A,#0x3
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000C4   7402         MOV       A,#0x2
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   E0           MOVX      A,@DPTR
   \   0000CA   F9           MOV       R1,A
   \   0000CB   EE           MOV       A,R6
   \   0000CC   2402         ADD       A,#0x2
   \   0000CE   FA           MOV       R2,A
   \   0000CF   E4           CLR       A
   \   0000D0   3F           ADDC      A,R7
   \   0000D1   FB           MOV       R3,A
   \   0000D2   12....       LCALL     `??StubAPS_BuildMsg::?relay`; Banked call to: StubAPS_BuildMsg
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
    756          
    757              // Add Stub NWK header
    758              StubNWK_BuildMsg( buf );
   \   0000DA                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   0000DA   12....       LCALL     `??NLME_GetProtocolVersion::?relay`; Banked call to: NLME_GetProtocolVersion
   \   0000DD   E9           MOV       A,R1
   \   0000DE   F5..         MOV       ?V2,A
   \   0000E0   75..00       MOV       ?V3,#0x0
   \   0000E3   7402         MOV       A,#0x2
   \   0000E5   78..         MOV       R0,#?V2
   \   0000E7   12....       LCALL     ?S_SHL
   \   0000EA   E5..         MOV       A,?V2
   \   0000EC   4403         ORL       A,#0x3
   \   0000EE   8E82         MOV       DPL,R6
   \   0000F0   8F83         MOV       DPH,R7
   \   0000F2   F0           MOVX      @DPTR,A
   \   0000F3   E5..         MOV       A,?V3
   \   0000F5   A3           INC       DPTR
   \   0000F6   F0           MOVX      @DPTR,A
    759          
    760              // Set ZMac data request
    761              dataReq.DstPANId = req->dstPanId;
    762              dataReq.SrcAddrMode = Addr64Bit;
    763              dataReq.Handle = req->transID;
    764          
    765              if ( ( apsFrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_UNICAST )
    766                dataReq.TxOptions = NWK_TXOPTIONS_ACK;
    767              else
    768                dataReq.TxOptions = 0;
    769          
    770              // send the frame
    771              status = ZMacDataReq( &dataReq );
    772          
    773              // free the frame
    774              osal_mem_free( buf );
    775            }
   \   0000F7   E5..         MOV       A,?V0
   \   0000F9   240B         ADD       A,#0xb
   \   0000FB   F582         MOV       DPL,A
   \   0000FD   E4           CLR       A
   \   0000FE   35..         ADDC      A,?V1
   \   000100   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000103   740C         MOV       A,#0xc
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   E8           MOV       A,R0
   \   000109   F0           MOVX      @DPTR,A
   \   00010A   A3           INC       DPTR
   \   00010B   E9           MOV       A,R1
   \   00010C   F0           MOVX      @DPTR,A
   \   00010D   740E         MOV       A,#0xe
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   7403         MOV       A,#0x3
   \   000114   F0           MOVX      @DPTR,A
   \   000115   E5..         MOV       A,?V0
   \   000117   2417         ADD       A,#0x17
   \   000119   F582         MOV       DPL,A
   \   00011B   E4           CLR       A
   \   00011C   35..         ADDC      A,?V1
   \   00011E   F583         MOV       DPH,A
   \   000120   E0           MOVX      A,@DPTR
   \   000121   C0E0         PUSH      A
   \   000123   740F         MOV       A,#0xf
   \   000125   12....       LCALL     ?XSTACK_DISP0_8
   \   000128   D0E0         POP       A
   \   00012A   F0           MOVX      @DPTR,A
   \   00012B   85..82       MOV       DPL,?XSP + 0
   \   00012E   85..83       MOV       DPH,?XSP + 1
   \   000131   E0           MOVX      A,@DPTR
   \   000132   540C         ANL       A,#0xc
   \   000134   700C         JNZ       ??INTERP_DataReq_6
   \   000136   7410         MOV       A,#0x10
   \   000138   12....       LCALL     ?XSTACK_DISP0_8
   \   00013B   7401         MOV       A,#0x1
   \   00013D   F0           MOVX      @DPTR,A
   \   00013E   A3           INC       DPTR
   \   00013F   E4           CLR       A
   \   000140   8008         SJMP      ??INTERP_DataReq_7
   \                     ??INTERP_DataReq_6:
   \   000142   7410         MOV       A,#0x10
   \   000144   12....       LCALL     ?XSTACK_DISP0_8
   \   000147   E4           CLR       A
   \   000148   F0           MOVX      @DPTR,A
   \   000149   A3           INC       DPTR
   \                     ??INTERP_DataReq_7:
   \   00014A   F0           MOVX      @DPTR,A
   \   00014B                ; Setup parameters for call to function ZMacDataReq
   \   00014B   7403         MOV       A,#0x3
   \   00014D   12....       LCALL     ?XSTACK_DISP101_8
   \   000150   12....       LCALL     `??ZMacDataReq::?relay`; Banked call to: ZMacDataReq
   \   000153   E9           MOV       A,R1
   \   000154   F5..         MOV       ?V2,A
   \   000156                ; Setup parameters for call to function osal_mem_free
   \   000156   EE           MOV       A,R6
   \   000157   FA           MOV       R2,A
   \   000158   EF           MOV       A,R7
   \   000159   FB           MOV       R3,A
   \   00015A   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00015D   8003         SJMP      ??INTERP_DataReq_3
    776            else
    777            {
    778              // flag a memory error
    779              status = ZMemError;
   \                     ??INTERP_DataReq_5:
   \   00015F   75..10       MOV       ?V2,#0x10
    780            }
    781          
    782            return ( status );
   \                     ??INTERP_DataReq_3:
   \   000162   A9..         MOV       R1,?V2
   \                     ??INTERP_DataReq_2:
   \   000164   7424         MOV       A,#0x24
   \   000166   02....       LJMP      ?Subroutine1 & 0xFFFF
    783          
    784          } /* INTERP_DataReq */
    785          
    786          /******************************************************************************
    787           * @fn          INTERP_DataReqMTU
    788           *
    789           * @brief       This function requests the MTU (Max Transport Unit) of the
    790           *              Inter-PAN Data Service.
    791           *
    792           * @param       none
    793           *
    794           * @return      uint8 - MTU
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          uint8 INTERP_DataReqMTU( void )
   \                     INTERP_DataReqMTU:
    797          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    798            uint8 mtu;
    799            uint8 hdrLen;
    800          
    801            // Use maximum header size for Stub APS header
    802            hdrLen = APS_FRAME_CTRL_FIELD_LEN +
    803                     APS_GROUP_ID_FIELD_LEN   +
    804                     APS_CLUSTERID_FIELD_LEN  +
    805                     APS_PROFILEID_FIELD_LEN;
    806          
    807            mtu = MAC_A_MAX_FRAME_SIZE - STUB_NWK_HDR_LEN - hdrLen;
    808          
    809            return ( mtu );
   \   000000   795D         MOV       R1,#0x5d
   \   000002   02....       LJMP      ?BRET
    810          
    811          } /* INTERP_DataReqMTU */
    812          
    813          /****************************************************************************
    814           * @fn          INTERP_DataConfirm
    815           *
    816           * @brief       This function processes the data confirm from the MAC layer.
    817           *
    818           * @param       dataCnf - data confirm primitive
    819           *
    820           * @return      none
    821           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    822          void INTERP_DataConfirm( ZMacDataCnf_t *dataCnf )
   \                     INTERP_DataConfirm:
    823          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV       A,R2
   \   000005   F8           MOV       R0,A
   \   000006   EB           MOV       A,R3
   \   000007   F9           MOV       R1,A
    824            afDataConfirm( appEndPoint, dataCnf->msduHandle, dataCnf->hdr.Status );
   \   000008                ; Setup parameters for call to function afDataConfirm
   \   000008   8882         MOV       DPL,R0
   \   00000A   8983         MOV       DPH,R1
   \   00000C   A3           INC       DPTR
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   FB           MOV       R3,A
   \   00000F   8882         MOV       DPL,R0
   \   000011   8983         MOV       DPH,R1
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   FA           MOV       R2,A
   \   000017   90....       MOV       DPTR,#appEndPoint
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   12....       LCALL     `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    825          
    826          } /* INTERP_DataConfirm */
   \   00001F   02....       LJMP      ??Subroutine18_0 & 0xFFFF
    827          
    828          /****************************************************************************
    829           * @fn          INTERP_DataIndication
    830           *
    831           * @brief       This function indicates the transfer of a data SPDU (MSDU)
    832           *              from the MAC layer to the local application layer entity.
    833           *
    834           * @param       dataInd - data indicate primitive
    835           *
    836           * @return      none
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          void INTERP_DataIndication( macMcpsDataInd_t *dataInd )
   \                     INTERP_DataIndication:
    839          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 73
   \   000005   74B7         MOV       A,#-0x49
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    840            NLDE_FrameFormat_t snff;
    841            aps_FrameFormat_t saff;
    842            zAddrType_t srcAddr;
    843            NLDE_Signal_t sig;
    844          
    845            // parse the Stub NWK header
    846            StubNWK_ParseMsg( dataInd->msdu.p, dataInd->msdu.len, &snff );
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F5..         MOV       ?V2,A
   \   000019   8E82         MOV       DPL,R6
   \   00001B   8F83         MOV       DPH,R7
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   12....       LCALL     ??Subroutine14_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000022                ; Setup parameters for call to function osal_memset
   \   000022   7C26         MOV       R4,#0x26
   \   000024   7D00         MOV       R5,#0x0
   \   000026   7900         MOV       R1,#0x0
   \   000028   7403         MOV       A,#0x3
   \   00002A   12....       LCALL     ?XSTACK_DISP101_8
   \   00002D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   \   000030   7403         MOV       A,#0x3
   \   000032   12....       LCALL     ?XSTACK_DISP0_8
   \   000035   E5..         MOV       A,?V2
   \   000037   F0           MOVX      @DPTR,A
   \   000038                ; Setup parameters for call to function NLDE_ParseFrameControl
   \   000038   7403         MOV       A,#0x3
   \   00003A   12....       LCALL     ?XSTACK_DISP102_8
   \   00003D   85..82       MOV       DPL,?V0
   \   000040   85..83       MOV       DPH,?V1
   \   000043   E0           MOVX      A,@DPTR
   \   000044   FA           MOV       R2,A
   \   000045   A3           INC       DPTR
   \   000046   E0           MOVX      A,@DPTR
   \   000047   F8           MOV       R0,A
   \   000048   E4           CLR       A
   \   000049   C8           XCH       A,R0
   \   00004A   F9           MOV       R1,A
   \   00004B   EA           MOV       A,R2
   \   00004C   28           ADD       A,R0
   \   00004D   E4           CLR       A
   \   00004E   39           ADDC      A,R1
   \   00004F   FB           MOV       R3,A
   \   000050   12....       LCALL     `??NLDE_ParseFrameControl::?relay`; Banked call to: NLDE_ParseFrameControl
   \   000053   7404         MOV       A,#0x4
   \   000055   12....       LCALL     ?XSTACK_DISP0_8
   \   000058   7402         MOV       A,#0x2
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   E5..         MOV       A,?V0
   \   00005D   2402         ADD       A,#0x2
   \   00005F   F8           MOV       R0,A
   \   000060   E4           CLR       A
   \   000061   35..         ADDC      A,?V1
   \   000063   F9           MOV       R1,A
   \   000064   7420         MOV       A,#0x20
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   E8           MOV       A,R0
   \   00006A   F0           MOVX      @DPTR,A
   \   00006B   A3           INC       DPTR
   \   00006C   E9           MOV       A,R1
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   7403         MOV       A,#0x3
   \   000070   12....       LCALL     ?XSTACK_DISP0_8
   \   000073   E0           MOVX      A,@DPTR
   \   000074   24FE         ADD       A,#-0x2
   \   000076   C0E0         PUSH      A
   \   000078   741A         MOV       A,#0x1a
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   D0E0         POP       A
   \   00007F   F0           MOVX      @DPTR,A
    847          
    848            // Fill in MAC destination address
    849            snff.macDstAddr = dataInd->mac.dstAddr.addr.shortAddr;
   \   000080   EE           MOV       A,R6
   \   000081   241C         ADD       A,#0x1c
   \   000083   F582         MOV       DPL,A
   \   000085   E4           CLR       A
   \   000086   3F           ADDC      A,R7
   \   000087   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00008A   7410         MOV       A,#0x10
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   E8           MOV       A,R0
   \   000090   F0           MOVX      @DPTR,A
   \   000091   A3           INC       DPTR
   \   000092   E9           MOV       A,R1
   \   000093   F0           MOVX      @DPTR,A
    850          
    851            // fill in MAC source address (Stub NWK frame doesn't have address fields)
    852            osal_copyAddress( &srcAddr, (zAddrType_t *)&(dataInd->mac.srcAddr) );
   \   000094                ; Setup parameters for call to function sAddrCpy
   \   000094   EE           MOV       A,R6
   \   000095   2413         ADD       A,#0x13
   \   000097   FC           MOV       R4,A
   \   000098   E4           CLR       A
   \   000099   3F           ADDC      A,R7
   \   00009A   FD           MOV       R5,A
   \   00009B   7440         MOV       A,#0x40
   \   00009D   12....       LCALL     ?XSTACK_DISP101_8
   \   0000A0   12....       LCALL     `??sAddrCpy::?relay`; Banked call to: sAddrCpy
    853          
    854            // check if incoming frame is of the right type
    855            if ( snff.frameType != STUB_NWK_FRAME_TYPE )
   \   0000A3   7405         MOV       A,#0x5
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   E0           MOVX      A,@DPTR
   \   0000A9   6403         XRL       A,#0x3
   \   0000AB   6003         JZ        $+5
   \   0000AD   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    856              return;
    857          
    858            // check if incoming frame is of the right version
    859            if ( snff.protocolVersion != NLME_GetProtocolVersion() )
   \   0000B0                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   0000B0   12....       LCALL     `??NLME_GetProtocolVersion::?relay`; Banked call to: NLME_GetProtocolVersion
   \   0000B3   E9           MOV       A,R1
   \   0000B4   F8           MOV       R0,A
   \   0000B5   7406         MOV       A,#0x6
   \   0000B7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   68           XRL       A,R0
   \   0000BC   6003         JZ        $+5
   \   0000BE   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    860              return;
    861          
    862            // check if the remaining sun-fields are zero
    863            if ( ( snff.discoverRoute != 0 ) || ( snff.multicast != 0 )   ||
    864                 ( snff.secure != 0 )        || ( snff.srcRouteSet != 0 ) ||
    865                 ( snff.dstExtAddrSet != 0 ) || ( snff.srcExtAddrSet != 0 ) )
   \   0000C1   7407         MOV       A,#0x7
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   7028         JNZ       ??INTERP_DataIndication_1
   \   0000C9   7408         MOV       A,#0x8
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   7020         JNZ       ??INTERP_DataIndication_1
   \   0000D1   7409         MOV       A,#0x9
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   7018         JNZ       ??INTERP_DataIndication_1
   \   0000D9   741B         MOV       A,#0x1b
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   E0           MOVX      A,@DPTR
   \   0000DF   7010         JNZ       ??INTERP_DataIndication_1
   \   0000E1   740A         MOV       A,#0xa
   \   0000E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E6   E0           MOVX      A,@DPTR
   \   0000E7   7008         JNZ       ??INTERP_DataIndication_1
   \   0000E9   740B         MOV       A,#0xb
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   6003         JZ        ??INTERP_DataIndication_2
    866            {
    867              return;
   \                     ??INTERP_DataIndication_1:
   \   0000F1   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    868            }
    869          
    870            // parse the Stub APS header
    871            StubAPS_ParseMsg( &snff, &saff );
   \                     ??INTERP_DataIndication_2:
   \   0000F4                ; Setup parameters for call to function StubAPS_ParseMsg
   \   0000F4   7429         MOV       A,#0x29
   \   0000F6   12....       LCALL     ?XSTACK_DISP102_8
   \   0000F9   7403         MOV       A,#0x3
   \   0000FB   12....       LCALL     ?XSTACK_DISP101_8
   \   0000FE   12....       LCALL     `??StubAPS_ParseMsg::?relay`; Banked call to: StubAPS_ParseMsg
    872          
    873            // check if incoming frame is of the right type
    874            if ( ( saff.FrmCtrl & APS_FRAME_TYPE_MASK ) != STUB_APS_FRAME )
   \   000101   7429         MOV       A,#0x29
   \   000103   12....       LCALL     ?XSTACK_DISP0_8
   \   000106   E0           MOVX      A,@DPTR
   \   000107   5403         ANL       A,#0x3
   \   000109   6403         XRL       A,#0x3
   \   00010B   6003         JZ        $+5
   \   00010D   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    875              return;
    876          
    877            // check if delivery mode is of the right type
    878            if ( ( saff.FrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_INDIRECT )
   \   000110   E0           MOVX      A,@DPTR
   \   000111   540C         ANL       A,#0xc
   \   000113   6404         XRL       A,#0x4
   \   000115   7003         JNZ       $+5
   \   000117   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    879              return;
    880          
    881            // check if incoming frame is unsecured
    882            if ( saff.FrmCtrl & APS_FC_SECURITY )
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   A2E5         MOV       C,0xE0 /* A   */.5
   \   00011D   5003         JNC       $+5
   \   00011F   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    883              return;
    884          
    885            // check if there's no extended header
    886            if ( saff.FrmCtrl & APS_FC_EXTENDED )
   \   000122   A2E7         MOV       C,0xE0 /* A   */.7
   \   000124   5003         JNC       $+5
   \   000126   02....       LJMP      ??INTERP_DataIndication_0 & 0xFFFF
    887                return;
    888          
    889            // Set the endpoints
    890            saff.DstEndPoint = appEndPoint;
   \   000129   90....       MOV       DPTR,#appEndPoint
   \   00012C   E0           MOVX      A,@DPTR
   \   00012D   C0E0         PUSH      A
   \   00012F   742B         MOV       A,#0x2b
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   D0E0         POP       A
   \   000136   F0           MOVX      @DPTR,A
    891            saff.SrcEndPoint = STUBAPS_INTER_PAN_EP;
   \   000137   742C         MOV       A,#0x2c
   \   000139   12....       LCALL     ?XSTACK_DISP0_8
   \   00013C   74FE         MOV       A,#-0x2
   \   00013E   F0           MOVX      @DPTR,A
    892          
    893            // Set the signal strength information
    894            sig.LinkQuality = dataInd->mac.mpduLinkQuality;
   \   00013F   EE           MOV       A,R6
   \   000140   242F         ADD       A,#0x2f
   \   000142   F582         MOV       DPL,A
   \   000144   E4           CLR       A
   \   000145   3F           ADDC      A,R7
   \   000146   F583         MOV       DPH,A
   \   000148   E0           MOVX      A,@DPTR
   \   000149   85..82       MOV       DPL,?XSP + 0
   \   00014C   85..83       MOV       DPH,?XSP + 1
   \   00014F   F0           MOVX      @DPTR,A
    895            sig.correlation = dataInd->mac.correlation;
   \   000150   EE           MOV       A,R6
   \   000151   2430         ADD       A,#0x30
   \   000153   F582         MOV       DPL,A
   \   000155   E4           CLR       A
   \   000156   3F           ADDC      A,R7
   \   000157   F583         MOV       DPH,A
   \   000159   E0           MOVX      A,@DPTR
   \   00015A   C0E0         PUSH      A
   \   00015C   7401         MOV       A,#0x1
   \   00015E   12....       LCALL     ?XSTACK_DISP0_8
   \   000161   D0E0         POP       A
   \   000163   F0           MOVX      @DPTR,A
    896            sig.rssi = dataInd->mac.rssi;
   \   000164   EE           MOV       A,R6
   \   000165   2431         ADD       A,#0x31
   \   000167   F582         MOV       DPL,A
   \   000169   E4           CLR       A
   \   00016A   3F           ADDC      A,R7
   \   00016B   F583         MOV       DPH,A
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   C0E0         PUSH      A
   \   000170   7402         MOV       A,#0x2
   \   000172   12....       LCALL     ?XSTACK_DISP0_8
   \   000175   D0E0         POP       A
   \   000177   F0           MOVX      @DPTR,A
    897          
    898            APSDE_DataIndication( &saff, &srcAddr, dataInd->mac.srcPanId,
    899                                  &sig, snff.broadcastId, FALSE, dataInd->mac.timestamp, 0 );
   \   000178                ; Setup parameters for call to function APSDE_DataIndication
   \   000178   75..00       MOV       ?V0,#0x0
   \   00017B   78..         MOV       R0,#?V0
   \   00017D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000180   EE           MOV       A,R6
   \   000181   2425         ADD       A,#0x25
   \   000183   F582         MOV       DPL,A
   \   000185   E4           CLR       A
   \   000186   3F           ADDC      A,R7
   \   000187   F583         MOV       DPH,A
   \   000189   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00018C   78..         MOV       R0,#?V0
   \   00018E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000191   7406         MOV       A,#0x6
   \   000193   12....       LCALL     ?XSTACK_DISP100_8
   \   000196   88..         MOV       ?V0,R0
   \   000198   89..         MOV       ?V1,R1
   \   00019A   78..         MOV       R0,#?V0
   \   00019C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019F   EE           MOV       A,R6
   \   0001A0   242B         ADD       A,#0x2b
   \   0001A2   F582         MOV       DPL,A
   \   0001A4   E4           CLR       A
   \   0001A5   3F           ADDC      A,R7
   \   0001A6   F583         MOV       DPH,A
   \   0001A8   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001AB   741F         MOV       A,#0x1f
   \   0001AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B0   E0           MOVX      A,@DPTR
   \   0001B1   F9           MOV       R1,A
   \   0001B2   744A         MOV       A,#0x4a
   \   0001B4   12....       LCALL     ?XSTACK_DISP102_8
   \   0001B7   7433         MOV       A,#0x33
   \   0001B9   12....       LCALL     ?XSTACK_DISP101_8
   \   0001BC   12....       LCALL     `??APSDE_DataIndication::?relay`; Banked call to: APSDE_DataIndication
   \   0001BF   740A         MOV       A,#0xa
   \   0001C1   12....       LCALL     ?DEALLOC_XSTACK8
    900          
    901          } /* INTERP_DataIndication */
   \                     ??INTERP_DataIndication_0:
   \   0001C4   7449         MOV       A,#0x49
   \   0001C6   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for StubAPS_TaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for appTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_ParseMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_ParseMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_BuildFrameControl::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_BuildFrameControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_BuildMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_BuildMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_SetNewChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_SetNewChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_SetInterPanChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_SetInterPanChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_SetIntraPanChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_SetIntraPanChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_InterPan::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_InterPan

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_RegisterApp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_RegisterApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_ZMacCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_ZMacCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INTERP_DataReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INTERP_DataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INTERP_DataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INTERP_DataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataIndication
    902          
    903          
    904          /*********************************************************************
    905          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     13   INTERP_DataConfirm
        2      0   -> afDataConfirm
      1    107   INTERP_DataIndication
        0     94   -> APSDE_DataIndication
        0     84   -> NLDE_ParseFrameControl
        0     84   -> NLME_GetProtocolVersion
        0     84   -> StubAPS_ParseMsg
        0     84   -> osal_memset
        0     84   -> sAddrCpy
      1     52   INTERP_DataReq
        0     48   -> NLME_GetProtocolVersion
        0     52   -> StubAPS_BuildFrameControl
        0     50   -> StubAPS_BuildMsg
        0     48   -> ZMacDataReq
        0     48   -> osal_mem_alloc
        0     48   -> osal_mem_free
        0     48   -> osal_memset
      0      0   INTERP_DataReqMTU
      1     63   StubAPS_BuildFrameControl
        0     11   -> sAddrExtCpy
      1     64   StubAPS_BuildMsg
        0     14   -> osal_memcpy
      2      0   StubAPS_Init
      0      0   StubAPS_InterPan
      1     98   StubAPS_ParseMsg
        0     14   -> osal_memset
      1     13   StubAPS_ProcessEvent
        0     13   -> INTERP_DataConfirm
        0     13   -> INTERP_DataIndication
        0     13   -> StubAPS_SetNewChannel
        0     13   -> ZMacSetReq
        0     13   -> nwk_setStateIdle
        0     13   -> osal_msg_allocate
        0     13   -> osal_msg_deallocate
        0     13   -> osal_msg_receive
        0     13   -> osal_msg_send
      2      0   StubAPS_RegisterApp
      0     15   StubAPS_SetInterPanChannel
        0     11   -> StubAPS_SetNewChannel
        0     11   -> ZMacGetReq
        0     11   -> ZMacSetReq
        0     11   -> nwk_setStateIdle
        0     15   -> osal_start_timerEx
      2      2   StubAPS_SetIntraPanChannel
        2      2   -> ZMacGetReq
        2      2   -> ZMacSetReq
        2      2   -> nwk_setStateIdle
      3     15   StubAPS_SetNewChannel
        2      2   -> ZMacSetReq
        2      2   -> ZMacStateIdle
        2      2   -> nwkDB_CountTypes
      2      0   StubAPS_ZMacCallback
        2      0   -> osal_msg_send


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for StubAPS_TaskID>
       1  ?<Initializer for appTaskID>
       8  ??Subroutine13_0
       8  ??Subroutine14_0
       6  ??Subroutine15_0
      14  ??Subroutine16_0
       5  ??Subroutine17_0
       7  ??Subroutine18_0
       5  ?Subroutine0
       8  ?Subroutine1
       6  ?Subroutine10
      11  ?Subroutine11
      14  ?Subroutine12
       3  ?Subroutine2
       8  ?Subroutine3
       2  ?Subroutine4
      13  ?Subroutine5
      11  ?Subroutine6
      18  ?Subroutine7
       2  ?Subroutine8
       2  ?Subroutine9
      34  INTERP_DataConfirm
       6  INTERP_DataConfirm::?relay
     457  INTERP_DataIndication
       6  INTERP_DataIndication::?relay
     361  INTERP_DataReq
       6  INTERP_DataReq::?relay
       5  INTERP_DataReqMTU
       6  INTERP_DataReqMTU::?relay
     186  StubAPS_BuildFrameControl
       6  StubAPS_BuildFrameControl::?relay
     110  StubAPS_BuildMsg
       6  StubAPS_BuildMsg::?relay
      22  StubAPS_Init
       6  StubAPS_Init::?relay
      16  StubAPS_InterPan
       6  StubAPS_InterPan::?relay
     254  StubAPS_ParseMsg
       6  StubAPS_ParseMsg::?relay
     151  StubAPS_ProcessEvent
       6  StubAPS_ProcessEvent::?relay
      27  StubAPS_RegisterApp
       6  StubAPS_RegisterApp::?relay
     116  StubAPS_SetInterPanChannel
       6  StubAPS_SetInterPanChannel::?relay
      94  StubAPS_SetIntraPanChannel
       6  StubAPS_SetIntraPanChannel::?relay
      59  StubAPS_SetNewChannel
       6  StubAPS_SetNewChannel::?relay
       1  StubAPS_TaskID
      71  StubAPS_ZMacCallback
       6  StubAPS_ZMacCallback::?relay
       4  __Constant_64
       1  appEndPoint
       1  appTaskID
       1  channelChangeInProgress
       1  newChannel

 
 2 114 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
     3 bytes in segment XDATA_Z
 
    92 bytes of CODE     memory
     0 bytes of CONST    memory (+ 4 bytes shared)
 2 114 bytes of HUGECODE memory
     5 bytes of XDATA    memory

Errors: none
Warnings: none
