###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               22/Nov/2023  15:42:47
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\fuzzing-coordinator-response-collection\Components\stack\zcl\zcl.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWAD6D.tmp
#        (D:\fuzzing-coordinator-response-collection\Components\stack\zcl\zcl.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
#        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
#        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
#        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
#        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl.lst
#    Object file        =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\zcl.r51
#
###############################################################################

D:\fuzzing-coordinator-response-collection\Components\stack\zcl\zcl.c
      1          /**************************************************************************************************
      2            Filename:       zcl.c
      3            Revised:        $Date: 2015-09-09 11:51:49 -0700 (Wed, 09 Sep 2015) $
      4            Revision:       $Revision: 44489 $
      5          
      6            Description:    This file contains the Zigbee Cluster Library Foundation functions.
      7          
      8          
      9            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "AF.h"
     45          #include "APS.h"
     46          #include "zcl.h"
     47          #include "zcl_general.h"
     48          #include <stdio.h>
     49          
     50          #if defined ( INTER_PAN )
     51            #include "stub_aps.h"
     52          #endif
     53             
     54          #ifdef BDB_REPORTING
     55            #include "bdb_Reporting.h"
     56          #endif
     57          #include "bdb_interface.h"
     58          
     59          #include "zcl_green_power.h"
     60          
     61             
     62          /*********************************************************************
     63           * MACROS
     64           */
     65          /*** Frame Control ***/
     66          #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
     67          #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
     68          #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
     69          #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
     70          
     71          /*** Attribute Access Control ***/
     72          #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
     73          #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
     74          #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
     75          #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
     76          #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
     77          #define zcl_AccessClient( a )         ( (a) & ACCESS_CLIENT )
     78          
     79          #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
     80          #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
     81          
     82          #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \
     83                                                  (zclHdr).fc.manuSpecific == 0          && \
     84                                                  (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
     85          
     86          // Commands that have corresponding responses (ZCL_CMD_WRITE_NO_RSP, does not have response, but must not send default response)
     87          #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \
     88                                                  (cmd) == ZCL_CMD_WRITE                  || \
     89                                                  (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \
     90                                                  (cmd) == ZCL_CMD_WRITE_NO_RSP           || \
     91                                                  (cmd) == ZCL_CMD_CONFIG_REPORT          || \
     92                                                  (cmd) == ZCL_CMD_READ_REPORT_CFG        || \
     93                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \
     94                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \
     95                                                  (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \
     96                                                  (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \
     97                                                  (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
     98          #define  ZCL_VALID_MIN_HEADER_LEN  3
     99          
    100          /*********************************************************************
    101           * CONSTANTS
    102           */
    103          
    104          /*********************************************************************
    105           * TYPEDEFS
    106           */
    107          typedef struct zclLibPlugin
    108          {
    109            struct zclLibPlugin *next;
    110            uint16              startClusterID;    // starting cluster ID
    111            uint16              endClusterID;      // ending cluster ID
    112            zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
    113          } zclLibPlugin_t;
    114          
    115          // Command record list
    116          typedef struct zclCmdRecsList
    117          {
    118            struct zclCmdRecsList *pNext;
    119            uint8                 endpoint;
    120            uint8                 numCommands;
    121            CONST zclCommandRec_t *pCmdRecs;
    122          } zclCmdRecsList_t;
    123          
    124          
    125          // Cluster option list item
    126          typedef struct zclClusterOptionList
    127          {
    128            struct zclClusterOptionList *next;
    129            uint8                       endpoint;   // Used to link it into the endpoint descriptor
    130            uint8                       numOptions; // Number of the following records
    131            zclOptionRec_t              *options;   // option records
    132          } zclClusterOptionList;
    133          
    134          typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
    135          typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
    136          
    137          typedef struct
    138          {
    139            zclParseInProfileCmd_t   pfnParseInProfile;
    140            zclProcessInProfileCmd_t pfnProcessInProfile;
    141          } zclCmdItems_t;
    142          
    143          
    144          // List record for external handler for unhandled ZCL Foundation commands/rsps
    145          typedef struct zclExternalFoundationHandlerList
    146          {
    147              struct zclExternalFoundationHandlerList *next;
    148              uint8 zcl_ExternalTaskID;
    149              uint8 zcl_ExternalEndPoint;
    150          } zclExternalFoundationHandlerList;
    151          
    152          
    153          /*********************************************************************
    154           * GLOBAL VARIABLES
    155           */
    156          
    157          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    158            uint8 zcl_TaskID;
   \                     zcl_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    159          #endif
    160          
    161          // The Application should register its attribute data validation function

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
   \                     zcl_ValidateAttrDataCB:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    163          
    164          // ZCL Sequence number
    165          //uint8 zcl_SeqNum = 0x00;  //Not longer used, refer to bdb_getZCLFrameCounter() in bdb_interface.h

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          uint8 zcl_InSeqNum = 0x00;
   \                     zcl_InSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    167          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    168          uint8 zcl_radius = AF_DEFAULT_RADIUS;
   \                     zcl_radius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zcl_radius>`
   \   000001                REQUIRE __INIT_XDATA_I
    169          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          static uint8 savedZCLTransSeqNum = 0;
   \                     savedZCLTransSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    171          
    172          /*********************************************************************
    173           * EXTERNAL VARIABLES
    174           */
    175          
    176          /*********************************************************************
    177           * EXTERNAL FUNCTIONS
    178           */
    179          
    180          /*********************************************************************
    181           * LOCAL VARIABLES
    182           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
   \                     plugins:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    184          
    185          #if defined ( ZCL_DISCOVER )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    186            static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
   \                     gpCmdList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    187          #endif
    188          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    189          static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
   \                     attrList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
   \                     clusterOptionList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    191          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
   \                     rawAFMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    193          
    194          #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    195          static zclExternalFoundationHandlerList *externalEndPointHandlerList = (zclExternalFoundationHandlerList *)NULL;
   \                     externalEndPointHandlerList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    196          #endif
    197          
    198          /*********************************************************************
    199           * LOCAL FUNCTIONS
    200           */
    201          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
    202          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
    203          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
    204          
    205          #if !defined ( ZCL_STANDALONE )
    206          static uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId );
    207          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg );
    208          #endif // !defined ( ZCL_STANDALONE )
    209          
    210          #if defined ( ZCL_DISCOVER )
    211            static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
    212          #endif
    213          
    214          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
    215          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
    216          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
    217          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
    218          
    219          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
    220          
    221          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
    222          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
    223          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
    224          #endif // ZCL_READ || ZCL_WRITE
    225          
    226          #ifdef ZCL_READ
    227          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
    228          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
    229          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
    230                                                   uint8 *pAttrData, uint16 *pDataLen );
    231          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    232          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
    233          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
    234          #endif // ZCL_READ
    235          
    236          #ifdef ZCL_WRITE
    237          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
    238                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
    239          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
    240                                                    zclAttrRec_t *pAttr, uint8 *pAttrData );
    241          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
    242          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
    243          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
    244          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
    245          #endif // ZCL_WRITE
    246          
    247          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    248          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
    249          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
    250          #endif
    251          
    252          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
    253          
    254          #ifdef ZCL_DISCOVER
    255          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
    256          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
    257          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
    258          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
    259          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
    260          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
    261          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
    262          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    263          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
    264          #endif // ZCL_DISCOVER
    265          
    266          /*********************************************************************
    267           * Parse Profile Command Function Table
    268           */
    269          

   \                                 In  segment CODE_C, align 1
    270          static CONST zclCmdItems_t zclCmdTable[] =
   \                     zclCmdTable:
   \   000000   ....         DW `??zclParseInReadCmd::?relay`
   \   000002   ....         DW `??zclProcessInReadCmd::?relay`
   \   000004   ....         DW `??zclParseInReadRspCmd::?relay`
   \   000006   ....         DW `??zcl_HandleExternal::?relay`
   \   000008   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000A   ....         DW `??zclProcessInWriteCmd::?relay`
   \   00000C   ....         DW `??zclParseInWriteCmd::?relay`
   \   00000E   ....         DW `??zclProcessInWriteUndividedCmd::?relay`
   \   000010   ....         DW `??zclParseInWriteRspCmd::?relay`
   \   000012   ....         DW `??zcl_HandleExternal::?relay`
   \   000014   ....         DW `??zclParseInWriteCmd::?relay`
   \   000016   ....         DW `??zclProcessInWriteCmd::?relay`
   \   000018   0000         DW 0H
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H
   \   000020   0000         DW 0H
   \   000022   0000         DW 0H
   \   000024   0000         DW 0H
   \   000026   0000         DW 0H
   \   000028   0000         DW 0H
   \   00002A   0000         DW 0H
   \   00002C   ....         DW `??zclParseInDefaultRspCmd::?relay`
   \   00002E   ....         DW `??zcl_HandleExternal::?relay`
   \   000030   ....         DW `??zclParseInDiscAttrsCmd::?relay`
   \   000032   ....         DW `??zclProcessInDiscAttrs::?relay`
   \   000034   ....         DW `??zclParseInDiscAttrsRspCmd::?relay`
   \   000036   ....         DW `??zcl_HandleExternal::?relay`
   \   000038   0000         DW 0H
   \   00003A   0000         DW 0H
   \   00003C   0000         DW 0H
   \   00003E   0000         DW 0H
   \   000040   0000         DW 0H
   \   000042   0000         DW 0H
   \   000044   ....         DW `??zclParseInDiscCmdsCmd::?relay`
   \   000046   ....         DW `??zclProcessInDiscCmd::?relay`
   \   000048   ....         DW `??zclParseInDiscCmdsRspCmd::?relay`
   \   00004A   ....         DW `??zcl_HandleExternal::?relay`
   \   00004C   ....         DW `??zclParseInDiscCmdsCmd::?relay`
   \   00004E   ....         DW `??zclProcessInDiscCmd::?relay`
   \   000050   ....         DW `??zclParseInDiscCmdsRspCmd::?relay`
   \   000052   ....         DW `??zcl_HandleExternal::?relay`
   \   000054   ....         DW `??zclParseInDiscAttrsCmd::?relay`
   \   000056   ....         DW `??zclProcessInDiscAttrs::?relay`
   \   000058   ....         DW `??zclParseInDiscAttrsExtRspCmd::?relay`
   \   00005A   ....         DW `??zcl_HandleExternal::?relay`
    271          {
    272          #ifdef ZCL_READ
    273            /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
    274            /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
    275          #else
    276            /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    277            /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    278          #endif // ZCL_READ
    279          
    280          #ifdef ZCL_WRITE
    281            /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    282            /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
    283            /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
    284            /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
    285          #else
    286            /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    287            /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    288            /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    289            /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    290          #endif // ZCL_WRITE
    291          
    292          #ifdef ZCL_REPORTING_DEVICE
    293              /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
    294          #else
    295              /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    296          #endif
    297          
    298          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    299              /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
    300          #else
    301              /* ZCL_CMD_CONFIG_REPORT_RSP */   { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    302          #endif
    303          
    304          #ifdef ZCL_REPORTING_DEVICE
    305              /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
    306          #else
    307              /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    308          #endif
    309          
    310          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
    311              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
    312          #else
    313              /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    314          #endif
    315          
    316          #ifdef ZCL_REPORT_DESTINATION_DEVICE
    317              /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
    318          #else
    319              /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
    320          #endif
    321          
    322            /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
    323          
    324          #ifdef ZCL_DISCOVER
    325            /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    326            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
    327            /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    328            /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    329            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
    330            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    331            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    332            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
    333            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
    334            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
    335            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
    336          #else
    337            /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
    338            /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    339            /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    340            /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    341            /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    342            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    343            /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    344            /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    345            /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    346            /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    347            /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
    348          #endif // ZCL_DISCOVER
    349          };
    350          
    351          /*********************************************************************
    352           * PUBLIC FUNCTIONS
    353           *********************************************************************/
    354          
    355          #if !defined ( ZCL_STANDALONE )
    356          /*********************************************************************
    357           * @fn          zcl_Init
    358           *
    359           * @brief       Initialization function for the zcl layer.
    360           *
    361           * @param       task_id - ZCL task id
    362           *
    363           * @return      none
    364           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    365          void zcl_Init( uint8 task_id )
   \                     zcl_Init:
    366          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    367            zcl_TaskID = task_id;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#zcl_TaskID
   \   000008   F0           MOVX      @DPTR,A
    368          }
   \   000009   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET
    369          #endif
    370          
    371          #if !defined ( ZCL_STANDALONE )
    372          /*********************************************************************
    373           * @fn          zcl_event_loop
    374           *
    375           * @brief       Event Loop Processor for zcl.
    376           *
    377           * @param       task_id - task id
    378           * @param       events - event bitmap
    379           *
    380           * @return      unprocessed events
    381           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    382          uint16 zcl_event_loop( uint8 task_id, uint16 events )
   \                     zcl_event_loop:
    383          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 76
   \   000005   74B4         MOV       A,#-0x4c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    384            uint8 *msgPtr;
    385          
    386            (void)task_id;  // Intentionally unreferenced parameter
    387          
    388            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   6049         JZ        ??zcl_event_loop_0
    389            {
    390              msgPtr = osal_msg_receive( zcl_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   800A         SJMP      ??zcl_event_loop_1
    391              while ( msgPtr != NULL )
    392              {
    393                uint8 dealloc = TRUE;
    394          
    395                if ( *msgPtr == AF_INCOMING_MSG_CMD )
    396                {
    397                  zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??zcl_event_loop_2:
   \   000014                ; Setup parameters for call to function zcl_ProcessMessageMSG
   \   000014   12....       LCALL     `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
    398                }
    399                else
    400                {
    401                  uint8 taskID;
    402                  taskID = zcl_getExternalFoundationHandler( (afIncomingMSGPacket_t *)msgPtr );
    403          
    404                  if ( taskID != TASK_NO_TASK )
    405                  {
    406                    // send it to another task to process.
    407                    osal_msg_send( taskID, msgPtr );
    408                    dealloc = FALSE;
    409                  }
    410                }
    411          
    412                // Release the memory
    413                if ( dealloc )
    414                {
    415                  osal_msg_deallocate( msgPtr );
   \                     ??zcl_event_loop_3:
   \   000017                ; Setup parameters for call to function osal_msg_deallocate
   \   000017   AA..         MOV       R2,?V0
   \   000019   AB..         MOV       R3,?V1
   \   00001B   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    416                }
    417          
    418                // Next
    419                msgPtr = osal_msg_receive( zcl_TaskID );
   \                     ??zcl_event_loop_1:
   \   00001E                ; Setup parameters for call to function osal_msg_receive
   \   00001E   90....       MOV       DPTR,#zcl_TaskID
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000026   8A..         MOV       ?V0,R2
   \   000028   8B..         MOV       ?V1,R3
   \   00002A   E5..         MOV       A,?V0
   \   00002C   45..         ORL       A,?V1
   \   00002E   6022         JZ        ??zcl_event_loop_4
   \   000030   85..82       MOV       DPL,?V0
   \   000033   85..83       MOV       DPH,?V1
   \   000036   E0           MOVX      A,@DPTR
   \   000037   641A         XRL       A,#0x1a
   \   000039   AA..         MOV       R2,?V0
   \   00003B   AB..         MOV       R3,?V1
   \   00003D   60D5         JZ        ??zcl_event_loop_2
   \   00003F                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   00003F   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000042   E9           MOV       A,R1
   \   000043   F9           MOV       R1,A
   \   000044   74FF         MOV       A,#-0x1
   \   000046   69           XRL       A,R1
   \   000047   60CE         JZ        ??zcl_event_loop_3
   \   000049                ; Setup parameters for call to function osal_msg_send
   \   000049   AA..         MOV       R2,?V0
   \   00004B   AB..         MOV       R3,?V1
   \   00004D   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000050   80CC         SJMP      ??zcl_event_loop_1
    420              }
    421          
    422              // return unprocessed events
    423              return (events ^ SYS_EVENT_MSG);
   \                     ??zcl_event_loop_4:
   \   000052   EE           MOV       A,R6
   \   000053   FA           MOV       R2,A
   \   000054   EF           MOV       A,R7
   \   000055   6480         XRL       A,#0x80
   \   000057   FB           MOV       R3,A
   \   000058   02....       LJMP      ??zcl_event_loop_5 & 0xFFFF
    424            }
    425          
    426          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
    427            if ( events & ZCL_DATABUF_SEND )
   \                     ??zcl_event_loop_0:
   \   00005B   EE           MOV       A,R6
   \   00005C   5420         ANL       A,#0x20
   \   00005E   7003         JNZ       $+5
   \   000060   02....       LJMP      ??zcl_event_loop_6 & 0xFFFF
    428            {
    429              gpNotificationMsg_t *gpNotification = NULL;
    430              gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
    431              gpd_ID_t gpd_ID;
    432              uint8 *pgpdid;
    433              uint8 entry[PROXY_TBL_ENTRY_LEN];
    434              uint8 appId;
    435              uint8 nwkSeqNum;
    436              uint8 apsSecNum;
    437              uint16 nwkAddr;
    438              
    439              gpNotification = gp_GetHeadNotificationMsg( );
   \   000063                ; Setup parameters for call to function gp_GetHeadNotificationMsg
   \   000063   12....       LCALL     `??gp_GetHeadNotificationMsg::?relay`; Banked call to: gp_GetHeadNotificationMsg
   \   000066   8A..         MOV       ?V6,R2
   \   000068   8B..         MOV       ?V7,R3
    440              
    441              if ( gpNotification == NULL )
   \   00006A   EA           MOV       A,R2
   \   00006B   45..         ORL       A,?V7
   \   00006D   7003         JNZ       $+5
   \   00006F   02....       LJMP      ??zcl_event_loop_6 & 0xFFFF
    442              {
    443                return 0;
    444              }
    445              
    446              pCmdPayloadMsgCurr = ( gpCmdPayloadMsg_t* ) gpNotification->pMsg ;
   \   000072   EA           MOV       A,R2
   \   000073   240D         ADD       A,#0xd
   \   000075   F582         MOV       DPL,A
   \   000077   E4           CLR       A
   \   000078   35..         ADDC      A,?V7
   \   00007A   F583         MOV       DPH,A
   \   00007C   12....       LCALL     ??Subroutine219_0 & 0xFFFF
    447              appId = PROXY_TBL_GET_APPLICTION_ID((uint16)*pCmdPayloadMsgCurr->pMsg);
   \                     ??CrossCallReturnLabel_494:
   \   00007F   EE           MOV       A,R6
   \   000080   2402         ADD       A,#0x2
   \   000082   F5..         MOV       ?V4,A
   \   000084   E4           CLR       A
   \   000085   3F           ADDC      A,R7
   \   000086   F5..         MOV       ?V5,A
   \   000088   85..82       MOV       DPL,?V4
   \   00008B   F583         MOV       DPH,A
   \   00008D   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   000090   5407         ANL       A,#0x7
   \   000092   F8           MOV       R0,A
    448              
    449              // To save the NIB nwk sequense number and use the GP alias nwk sequence number
    450              // for the GP notification
    451              nwkSeqNum = _NIB.SequenceNum;
   \   000093   90....       MOV       DPTR,#_NIB
   \   000096   E0           MOVX      A,@DPTR
   \   000097   F5..         MOV       ?V3,A
    452              _NIB.SequenceNum = pCmdPayloadMsgCurr->secNum;
   \   000099   8E82         MOV       DPL,R6
   \   00009B   8F83         MOV       DPH,R7
   \   00009D   E0           MOVX      A,@DPTR
   \   00009E   90....       MOV       DPTR,#_NIB
   \   0000A1   F0           MOVX      @DPTR,A
    453              
    454              // To save the NIB nwk address and use the GP alias nwk address for the GP notification
    455              nwkAddr = _NIB.nwkDevAddress;
   \   0000A2   90....       MOV       DPTR,#_NIB + 20
   \   0000A5   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   0000A8   12....       LCALL     ?Subroutine33 & 0xFFFF
    456              
    457              if( appId == GP_OPT_APP_ID_GPD )
   \                     ??CrossCallReturnLabel_459:
   \   0000AB   E8           MOV       A,R0
   \   0000AC   702F         JNZ       ??zcl_event_loop_7
    458              {
    459                pgpdid = pCmdPayloadMsgCurr->pMsg + sizeof( uint16 );
   \   0000AE   85..82       MOV       DPL,?V4
   \   0000B1   85..83       MOV       DPH,?V5
   \   0000B4   E0           MOVX      A,@DPTR
   \   0000B5   2402         ADD       A,#0x2
   \   0000B7   12....       LCALL     ?Subroutine108 & 0xFFFF
    460                
    461                osal_memcpy( &_NIB.nwkDevAddress, pgpdid, sizeof(uint16) );
   \                     ??CrossCallReturnLabel_203:
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BD   7C02         MOV       R4,#0x2
   \   0000BF   7D00         MOV       R5,#0x0
   \   0000C1   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   0000C3   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   0000C5   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C8   7403         MOV       A,#0x3
   \   0000CA   12....       LCALL     ?DEALLOC_XSTACK8
    462                gpd_ID.AppID = GP_OPT_APP_ID_GPD;
   \   0000CD   7402         MOV       A,#0x2
   \   0000CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D2   E4           CLR       A
   \   0000D3   F0           MOVX      @DPTR,A
    463                osal_memcpy( &gpd_ID.GPDId.SrcID, pgpdid, sizeof( uint32 ) );
   \   0000D4                ; Setup parameters for call to function osal_memcpy
   \   0000D4   78..         MOV       R0,#?V0
   \   0000D6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D9   7C04         MOV       R4,#0x4
   \   0000DB   803F         SJMP      ??zcl_event_loop_8
    464              }
    465              else if( appId == GP_OPT_APP_ID_IEEE )
   \                     ??zcl_event_loop_7:
   \   0000DD   7402         MOV       A,#0x2
   \   0000DF   68           XRL       A,R0
   \   0000E0   704D         JNZ       ??zcl_event_loop_9
    466              {
    467                pgpdid = pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN;
    468                
    469                osal_revmemcpy( &_NIB.nwkDevAddress,(pCmdPayloadMsgCurr->pMsg + Z_EXTADDR_LEN), sizeof(uint16) );
   \   0000E2                ; Setup parameters for call to function osal_revmemcpy
   \   0000E2   85..82       MOV       DPL,?V4
   \   0000E5   85..83       MOV       DPH,?V5
   \   0000E8   E0           MOVX      A,@DPTR
   \   0000E9   2408         ADD       A,#0x8
   \   0000EB   12....       LCALL     ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F1   7C02         MOV       R4,#0x2
   \   0000F3   7D00         MOV       R5,#0x0
   \   0000F5   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   0000F7   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   0000F9   12....       LCALL     `??osal_revmemcpy::?relay`; Banked call to: osal_revmemcpy
   \   0000FC   7403         MOV       A,#0x3
   \   0000FE   12....       LCALL     ?DEALLOC_XSTACK8
    470                
    471                gpd_ID.AppID = GP_OPT_APP_ID_IEEE;
   \   000101   7402         MOV       A,#0x2
   \   000103   12....       LCALL     ?XSTACK_DISP0_8
   \   000106   7402         MOV       A,#0x2
   \   000108   12....       LCALL     ?Subroutine40 & 0xFFFF
    472          
    473                pgpdid = pCmdPayloadMsgCurr->pMsg + sizeof( uint16 );
    474                osal_memcpy( gpd_ID.GPDId.GPDExtAddr, pgpdid, Z_EXTADDR_LEN );
    475              }
   \                     ??CrossCallReturnLabel_55:
   \   00010B   2402         ADD       A,#0x2
   \   00010D   F5..         MOV       ?V0,A
   \   00010F   A3           INC       DPTR
   \   000110   E0           MOVX      A,@DPTR
   \   000111   3400         ADDC      A,#0x0
   \   000113   F5..         MOV       ?V1,A
   \   000115   78..         MOV       R0,#?V0
   \   000117   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011A   7C08         MOV       R4,#0x8
   \                     ??zcl_event_loop_8:
   \   00011C   7D00         MOV       R5,#0x0
   \   00011E   7406         MOV       A,#0x6
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   AA82         MOV       R2,DPL
   \   000125   AB83         MOV       R3,DPH
   \   000127   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012A   7403         MOV       A,#0x3
   \   00012C   12....       LCALL     ?DEALLOC_XSTACK8
    476              
    477              gp_getProxyTableByGpId(&gpd_ID, entry, NULL);
   \                     ??zcl_event_loop_9:
   \   00012F                ; Setup parameters for call to function gp_getProxyTableByGpId
   \   00012F   E4           CLR       A
   \   000130   F5..         MOV       ?V0,A
   \   000132   F5..         MOV       ?V1,A
   \   000134   78..         MOV       R0,#?V0
   \   000136   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000139   740D         MOV       A,#0xd
   \   00013B   12....       LCALL     ?XSTACK_DISP102_8
   \   00013E   7404         MOV       A,#0x4
   \   000140   12....       LCALL     ?XSTACK_DISP101_8
   \   000143   12....       LCALL     `??gp_getProxyTableByGpId::?relay`; Banked call to: gp_getProxyTableByGpId
   \   000146   7402         MOV       A,#0x2
   \   000148   12....       LCALL     ?DEALLOC_XSTACK8
    478          
    479              if ( PROXY_TBL_GET_ASSIGNED_ALIAS( entry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \   00014B   740C         MOV       A,#0xc
   \   00014D   12....       LCALL     ?XSTACK_DISP0_8
   \   000150   E0           MOVX      A,@DPTR
   \   000151   A2E5         MOV       C,0xE0 /* A   */.5
   \   000153   502C         JNC       ??zcl_event_loop_10
    480              {
    481                _NIB.nwkDevAddress = 0;
   \   000155   90....       MOV       DPTR,#_NIB + 20
   \   000158   E4           CLR       A
   \   000159   F0           MOVX      @DPTR,A
   \   00015A   A3           INC       DPTR
   \   00015B   F0           MOVX      @DPTR,A
    482                osal_memcpy( (uint8*)&_NIB.nwkDevAddress, &entry[PROXY_TBL_ENTRY_ALIAS], sizeof(uint16));
   \   00015C                ; Setup parameters for call to function osal_memcpy
   \   00015C   7416         MOV       A,#0x16
   \   00015E   12....       LCALL     ?XSTACK_DISP0_8
   \   000161   A982         MOV       R1,DPL
   \   000163   AA83         MOV       R2,DPH
   \   000165   89..         MOV       ?V0,R1
   \   000167   8A..         MOV       ?V1,R2
   \   000169   75..00       MOV       ?V2,#0x0
   \   00016C   78..         MOV       R0,#?V0
   \   00016E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000171   7C02         MOV       R4,#0x2
   \   000173   7D00         MOV       R5,#0x0
   \   000175   7A..         MOV       R2,#(_NIB + 20) & 0xff
   \   000177   7B..         MOV       R3,#((_NIB + 20) >> 8) & 0xff
   \   000179   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00017C   7403         MOV       A,#0x3
   \   00017E   12....       LCALL     ?DEALLOC_XSTACK8
    483              }
    484              
    485              // save aps sequence number
    486              apsSecNum = APS_Counter;
   \                     ??zcl_event_loop_10:
   \   000181   90....       MOV       DPTR,#APS_Counter
   \   000184   E0           MOVX      A,@DPTR
   \   000185   F5..         MOV       ?V0,A
    487              APS_Counter = pCmdPayloadMsgCurr->secNum;
   \   000187   8E82         MOV       DPL,R6
   \   000189   8F83         MOV       DPH,R7
   \   00018B   E0           MOVX      A,@DPTR
   \   00018C   90....       MOV       DPTR,#APS_Counter
   \   00018F   F0           MOVX      @DPTR,A
    488              
    489              // Set nwk radius for zcl frame
    490              if ( entry[PROXY_TBL_ENTRY_GRP_RAD] != 0xFF)
   \   000190   744A         MOV       A,#0x4a
   \   000192   12....       LCALL     ?XSTACK_DISP0_8
   \   000195   E0           MOVX      A,@DPTR
   \   000196   F8           MOV       R0,A
   \   000197   74FF         MOV       A,#-0x1
   \   000199   68           XRL       A,R0
   \   00019A   6005         JZ        ??zcl_event_loop_11
    491              {
    492                zcl_radius =  entry[PROXY_TBL_ENTRY_GRP_RAD];
   \   00019C   E8           MOV       A,R0
   \   00019D   90....       MOV       DPTR,#zcl_radius
   \   0001A0   F0           MOVX      @DPTR,A
    493              }
    494              
    495              zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &gpNotification->addr, ZCL_CLUSTER_ID_GREEN_POWER,
    496                                    COMMAND_GP_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    497                                    TRUE, 0,  bdb_getZCLFrameCounter(), pCmdPayloadMsgCurr->lenght, pCmdPayloadMsgCurr->pMsg );
   \                     ??zcl_event_loop_11:
   \   0001A1                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   0001A1   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   0001A4   E9           MOV       A,R1
   \   0001A5   F9           MOV       R1,A
   \   0001A6                ; Setup parameters for call to function zcl_SendCommand
   \   0001A6   85..82       MOV       DPL,?V4
   \   0001A9   85..83       MOV       DPH,?V5
   \   0001AC   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001AF   8E82         MOV       DPL,R6
   \   0001B1   8F83         MOV       DPH,R7
   \   0001B3   A3           INC       DPTR
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   F5..         MOV       ?V4,A
   \   0001B7   75..00       MOV       ?V5,#0x0
   \   0001BA   78..         MOV       R0,#?V4
   \   0001BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BF   E9           MOV       A,R1
   \   0001C0   F5..         MOV       ?V1,A
   \   0001C2   78..         MOV       R0,#?V1
   \   0001C4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C7   E4           CLR       A
   \   0001C8   F5..         MOV       ?V4,A
   \   0001CA   78..         MOV       R0,#?V4
   \   0001CC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001CF   75..01       MOV       ?V1,#0x1
   \   0001D2   78..         MOV       R0,#?V1
   \   0001D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001D7   75..00       MOV       ?V1,#0x0
   \   0001DA   78..         MOV       R0,#?V1
   \   0001DC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001DF   75..01       MOV       ?V1,#0x1
   \   0001E2   78..         MOV       R0,#?V1
   \   0001E4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001E7   75..00       MOV       ?V1,#0x0
   \   0001EA   78..         MOV       R0,#?V1
   \   0001EC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001EF   7C21         MOV       R4,#0x21
   \   0001F1   7D00         MOV       R5,#0x0
   \   0001F3   AA..         MOV       R2,?V6
   \   0001F5   AB..         MOV       R3,?V7
   \   0001F7   79F2         MOV       R1,#-0xe
   \   0001F9   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0001FC   740B         MOV       A,#0xb
   \   0001FE   12....       LCALL     ?DEALLOC_XSTACK8
    498              
    499              // restore nwk radius
    500              zcl_radius = AF_DEFAULT_RADIUS;
   \   000201   90....       MOV       DPTR,#zcl_radius
   \   000204   741E         MOV       A,#0x1e
   \   000206   F0           MOVX      @DPTR,A
    501              
    502              // restore aps sequence number
    503              APS_Counter = apsSecNum;
   \   000207   E5..         MOV       A,?V0
   \   000209   90....       MOV       DPTR,#APS_Counter
   \   00020C   F0           MOVX      @DPTR,A
    504               
    505              // Restore the NIB nwk sequence number
    506              _NIB.SequenceNum = nwkSeqNum;
   \   00020D   E5..         MOV       A,?V3
   \   00020F   90....       MOV       DPTR,#_NIB
   \   000212   12....       LCALL     ??Subroutine226_0 & 0xFFFF
    507              
    508              // Restore the NIB nwk address
    509              _NIB.nwkDevAddress = nwkAddr;
   \                     ??CrossCallReturnLabel_542:
   \   000215   F9           MOV       R1,A
   \   000216   90....       MOV       DPTR,#_NIB + 20
   \   000219   12....       LCALL     ??Subroutine216_0 & 0xFFFF
    510              
    511              gp_NotificationMsgClean( gp_GetPHeadNotification ( ) );
   \                     ??CrossCallReturnLabel_468:
   \   00021C                ; Setup parameters for call to function gp_GetPHeadNotification
   \   00021C   12....       LCALL     `??gp_GetPHeadNotification::?relay`; Banked call to: gp_GetPHeadNotification
   \   00021F                ; Setup parameters for call to function gp_NotificationMsgClean
   \   00021F   12....       LCALL     `??gp_NotificationMsgClean::?relay`; Banked call to: gp_NotificationMsgClean
    512              
    513              if ( gp_GetHeadNotificationMsg ( ) != NULL )
   \   000222                ; Setup parameters for call to function gp_GetHeadNotificationMsg
   \   000222   12....       LCALL     `??gp_GetHeadNotificationMsg::?relay`; Banked call to: gp_GetHeadNotificationMsg
   \   000225   8B..         MOV       ?V1,R3
   \   000227   EA           MOV       A,R2
   \   000228   45..         ORL       A,?V1
   \   00022A   6017         JZ        ??zcl_event_loop_6
    514              {
    515                osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
   \   00022C                ; Setup parameters for call to function osal_start_timerEx
   \   00022C   90....       MOV       DPTR,#__Constant_32
   \   00022F   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000232   7A20         MOV       R2,#0x20
   \   000234   7B00         MOV       R3,#0x0
   \   000236   90....       MOV       DPTR,#zcl_TaskID
   \   000239   E0           MOVX      A,@DPTR
   \   00023A   F9           MOV       R1,A
   \   00023B   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00023E   7404         MOV       A,#0x4
   \   000240   12....       LCALL     ?DEALLOC_XSTACK8
    516              }
    517            }
    518          #endif
    519          
    520            // Discard unknown events
    521            return 0;
   \                     ??zcl_event_loop_6:
   \   000243   7A00         MOV       R2,#0x0
   \   000245   7B00         MOV       R3,#0x0
   \                     ??zcl_event_loop_5:
   \   000247   744C         MOV       A,#0x4c
   \   000249   02....       LJMP      ??Subroutine194_0 & 0xFFFF
    522          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   F5..         MOV       ?V0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   3400         ADDC      A,#0x0
   \   000006   F5..         MOV       ?V1,A
   \   000008   75..00       MOV       ?V2,#0x0
   \   00000B                ; Setup parameters for call to function osal_memcpy
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine195_0
   \   000003                ; // Fall through to label ??Subroutine195_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   7F08         MOV       R7,#0x8
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_650:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine214_0
   \   000006                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_661:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine217_0
   \   000001                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FE           MOV       R6,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FF           MOV       R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_611:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine227_0
   \   000006                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_672:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_674:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
    523          #endif
    524          
    525          #if !defined ( ZCL_STANDALONE )
    526          /*********************************************************************
    527           * @fn      zcl_registerForMsg
    528           *
    529           * @brief   The ZCL is setup to send all incoming Foundation Command/Response
    530           *          messages that aren't processed to one task (if a task is
    531           *          registered).
    532           *
    533           * @param   taskId - task Id of the Application where commands will be sent to
    534           *
    535           * @return  TRUE if task registeration successful, FALSE otherwise
    536           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          uint8 zcl_registerForMsg( uint8 taskId )
   \                     zcl_registerForMsg:
    538          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    539            return zcl_addExternalFoundationHandler( taskId, AF_BROADCAST_ENDPOINT );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   7AFF         MOV       R2,#-0x1
   \   000007   02....       LJMP      ?Subroutine2 & 0xFFFF
    540          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     `??zcl_addExternalFoundationHandler::?relay`; Banked call to: zcl_addExternalFoundationHandler
   \   000003                REQUIRE ??Subroutine198_0
   \   000003                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    541          
    542          /*********************************************************************
    543           * @fn      zcl_registerForMsgExt
    544           *
    545           * @brief   This function enables a Task to register to recieve all
    546           *          incoming Foundation Command/Response messages, for a particular
    547           *          End Point, that aren't processed by ZCL.
    548           *
    549           *          NOTE: Any Task registered for a unique end point will take
    550           *          priority over any Task registered with the AF_BROADCAST_ENDPOINT
    551           *          value.  ie. If task A registers for End Point 1, task B registers
    552           *          for AF_BROADCAST_ENDPOINT,  commands addressed to End Point 1 will be
    553           *          sent to Task A and NOT Task B.
    554           *
    555           * @param   taskId - task Id of the Application where commands will be sent to
    556           * @param   endPointId - end point Id of interest
    557           *
    558           * @return  TRUE if task registeration successful, FALSE otherwise
    559           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    560          uint8 zcl_registerForMsgExt( uint8 taskId, uint8 endPointId  )
   \                     zcl_registerForMsgExt:
    561          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    562            return ( zcl_addExternalFoundationHandler( taskId, endPointId  ) );
   \   000005                ; Setup parameters for call to function zcl_addExternalFoundationHandler
   \   000005   02....       LJMP      ?Subroutine2 & 0xFFFF
    563          }
    564          
    565          /*********************************************************************
    566           * @fn      zcl_addExternalFoundationHandler
    567           *
    568           * @brief   This function adds a record to the internal list of external
    569           *          handlers of unhandled incoming Foundation Command/Response messages.
    570           *
    571           * @param   taskId - task Id of the Application where commands will be sent to
    572           * @param   endPointId - end point Id of interest
    573           *
    574           * @return  TRUE if task registeration successful, FALSE otherwise
    575           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    576          uint8 zcl_addExternalFoundationHandler( uint8 taskId, uint8 endPointId  )
   \                     zcl_addExternalFoundationHandler:
    577          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FF           MOV       R7,A
    578            zclExternalFoundationHandlerList *pNewItem;
    579            zclExternalFoundationHandlerList *pLoop;
    580            zclExternalFoundationHandlerList *pLoopPrev;
    581          
    582            // Fill in the new endpoint registrant list
    583            pNewItem = zcl_mem_alloc( sizeof( zclExternalFoundationHandlerList ) );
   \   000009                ; Setup parameters for call to function osal_mem_alloc
   \   000009   7A04         MOV       R2,#0x4
   \   00000B   7B00         MOV       R3,#0x0
   \   00000D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   A8..         MOV       R0,?V0
   \   000016   A9..         MOV       R1,?V1
    584            if ( pNewItem == NULL )
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   6038         JZ        ??zcl_addExternalFoundationHandler_0
    585            {
    586              return ( false );
    587            }
    588          
    589            pNewItem->zcl_ExternalEndPoint = endPointId;
   \   00001C   EF           MOV       A,R7
   \   00001D   8882         MOV       DPL,R0
   \   00001F   8983         MOV       DPH,R1
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   F0           MOVX      @DPTR,A
    590            pNewItem->zcl_ExternalTaskID = taskId;
   \   000025   EE           MOV       A,R6
   \   000026   8882         MOV       DPL,R0
   \   000028   8983         MOV       DPH,R1
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   12....       LCALL     ?Subroutine35 & 0xFFFF
    591            pNewItem->next = NULL;
    592          
    593            // Add to the list
    594            if ( externalEndPointHandlerList == NULL )
   \                     ??CrossCallReturnLabel_48:
   \   00002F   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000032   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000035   7009         JNZ       ??zcl_addExternalFoundationHandler_1
    595            {
    596              externalEndPointHandlerList = pNewItem;
   \   000037   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00003A   E8           MOV       A,R0
   \   00003B   F0           MOVX      @DPTR,A
   \   00003C   A3           INC       DPTR
   \   00003D   E9           MOV       A,R1
   \   00003E   8046         SJMP      ??zcl_addExternalFoundationHandler_2
    597            }
    598            else
    599            {
    600              // make sure no one else tried to register for this endpoint
    601              pLoop = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_1:
   \   000040   E0           MOVX      A,@DPTR
   \   000041   FB           MOV       R3,A
    602              pLoopPrev = externalEndPointHandlerList;
    603          
    604              while ( pLoop != NULL )
    605              {
    606                if ( ( pLoop->zcl_ExternalEndPoint ) == endPointId )
   \                     ??zcl_addExternalFoundationHandler_3:
   \   000042   8A82         MOV       DPL,R2
   \   000044   8B83         MOV       DPH,R3
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   6F           XRL       A,R7
   \   00004B   700B         JNZ       ??zcl_addExternalFoundationHandler_4
    607                {
    608                  zcl_mem_free(pNewItem);
   \   00004D                ; Setup parameters for call to function osal_mem_free
   \   00004D   E8           MOV       A,R0
   \   00004E   FA           MOV       R2,A
   \   00004F   E9           MOV       A,R1
   \   000050   FB           MOV       R3,A
   \   000051   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    609                  return ( false );
   \                     ??zcl_addExternalFoundationHandler_0:
   \   000054   7900         MOV       R1,#0x0
   \   000056   8031         SJMP      ??zcl_addExternalFoundationHandler_5
    610                }
    611                pLoopPrev = pLoop;
   \                     ??zcl_addExternalFoundationHandler_4:
   \   000058   EA           MOV       A,R2
   \   000059   FC           MOV       R4,A
   \   00005A   EB           MOV       A,R3
   \   00005B   FD           MOV       R5,A
    612                pLoop = pLoop->next;
   \   00005C   8A82         MOV       DPL,R2
   \   00005E   8B83         MOV       DPH,R3
   \   000060   12....       LCALL     ??Subroutine189_0 & 0xFFFF
    613              }
   \                     ??CrossCallReturnLabel_318:
   \   000063   70DD         JNZ       ??zcl_addExternalFoundationHandler_3
    614          
    615              if ( endPointId == AF_BROADCAST_ENDPOINT )
   \   000065   74FF         MOV       A,#-0x1
   \   000067   6F           XRL       A,R7
   \   000068   700C         JNZ       ??zcl_addExternalFoundationHandler_6
    616              {
    617                // put new registration at the end of the list
    618                pLoopPrev->next = pNewItem;
   \   00006A   8C82         MOV       DPL,R4
   \   00006C   8D83         MOV       DPH,R5
   \   00006E   12....       LCALL     ?Subroutine41 & 0xFFFF
    619                pNewItem->next = NULL;
    620              }
   \                     ??CrossCallReturnLabel_57:
   \   000071   E4           CLR       A
   \   000072   F0           MOVX      @DPTR,A
   \   000073   A3           INC       DPTR
   \   000074   8010         SJMP      ??zcl_addExternalFoundationHandler_2
    621              else
    622              {
    623                // put new registration at the front of the list
    624                zclExternalFoundationHandlerList *temp = externalEndPointHandlerList;
   \                     ??zcl_addExternalFoundationHandler_6:
   \   000076   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000079   12....       LCALL     ??Subroutine209_0 & 0xFFFF
    625                externalEndPointHandlerList = pNewItem;
   \                     ??CrossCallReturnLabel_390:
   \   00007C   90....       MOV       DPTR,#externalEndPointHandlerList
   \   00007F   12....       LCALL     ?Subroutine41 & 0xFFFF
    626                pNewItem->next = temp;
    627              }
    628            }
   \                     ??CrossCallReturnLabel_58:
   \   000082   EA           MOV       A,R2
   \   000083   F0           MOVX      @DPTR,A
   \   000084   A3           INC       DPTR
   \   000085   EB           MOV       A,R3
   \                     ??zcl_addExternalFoundationHandler_2:
   \   000086   F0           MOVX      @DPTR,A
    629          
    630            return ( true );
   \   000087   7901         MOV       R1,#0x1
   \                     ??zcl_addExternalFoundationHandler_5:
   \   000089   02....       LJMP      ??Subroutine199_0 & 0xFFFF
    631          
    632          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000003   E4           CLR       A
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_649:
   \   000003   EA           MOV       A,R2
   \   000004   4B           ORL       A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    633          
    634          /*********************************************************************
    635           * @fn      zcl_getExternalFoundationHandler
    636           *
    637           * @brief   This function retrieves the Task ID of the task registered
    638           *          to received unhandled incoming Foundation Command/Response messages
    639           *          for a particular End Point ID.
    640           *
    641           * @param   pInMsg - recevied ZCL command
    642           *
    643           * @return  TASK ID of registered task.  If no task is reigistered, it returns
    644           *          TASK_NO_TASK.
    645           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    646          static uint8 zcl_getExternalFoundationHandler( afIncomingMSGPacket_t *pInMsg )
   \                     zcl_getExternalFoundationHandler:
    647          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    648            zclExternalFoundationHandlerList *pLoop;
    649            uint8 addressedEndPointId = pInMsg->endPoint;
   \   000004   EA           MOV       A,R2
   \   000005   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   000008   3B           ADDC      A,R3
   \   000009   F583         MOV       DPH,A
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   FA           MOV       R2,A
    650          
    651            // make sure no one else tried to register for this endpoint
    652            pLoop = externalEndPointHandlerList;
   \   00000D   90....       MOV       DPTR,#externalEndPointHandlerList
   \   000010   8004         SJMP      ??zcl_getExternalFoundationHandler_0
    653          
    654            while ( pLoop != NULL )
    655            {
    656              if ( ( ( pLoop->zcl_ExternalEndPoint ) == addressedEndPointId ) ||
    657                   ( ( pLoop->zcl_ExternalEndPoint ) == AF_BROADCAST_ENDPOINT ) )
    658              {
    659                return ( pLoop->zcl_ExternalTaskID );
    660              }
    661              pLoop = pLoop->next;
   \                     ??zcl_getExternalFoundationHandler_1:
   \   000012   8882         MOV       DPL,R0
   \   000014   8983         MOV       DPH,R1
   \                     ??zcl_getExternalFoundationHandler_0:
   \   000016   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_422:
   \   000019   601C         JZ        ??zcl_getExternalFoundationHandler_2
   \   00001B   8882         MOV       DPL,R0
   \   00001D   8983         MOV       DPH,R1
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   E0           MOVX      A,@DPTR
   \   000023   FB           MOV       R3,A
   \   000024   EA           MOV       A,R2
   \   000025   6B           XRL       A,R3
   \   000026   6005         JZ        ??zcl_getExternalFoundationHandler_3
   \   000028   74FF         MOV       A,#-0x1
   \   00002A   6B           XRL       A,R3
   \   00002B   70E5         JNZ       ??zcl_getExternalFoundationHandler_1
   \                     ??zcl_getExternalFoundationHandler_3:
   \   00002D   8882         MOV       DPL,R0
   \   00002F   8983         MOV       DPH,R1
   \   000031   A3           INC       DPTR
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   8002         SJMP      ??zcl_getExternalFoundationHandler_4
    662            }
    663          
    664            return ( TASK_NO_TASK );
   \                     ??zcl_getExternalFoundationHandler_2:
   \   000037   79FF         MOV       R1,#-0x1
   \                     ??zcl_getExternalFoundationHandler_4:
   \   000039   02....       LJMP      ?Subroutine0 & 0xFFFF
    665          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_573:
   \   000003   E8           MOV       A,R0
   \   000004   49           ORL       A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_640:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    666          #endif
    667          
    668          #if !defined ( ZCL_STANDALONE )
    669          /*********************************************************************
    670           * @fn      zcl_HandleExternal
    671           *
    672           * @brief
    673           *
    674           * @param   pInMsg - incoming message to process
    675           *
    676           * @return  TRUE
    677           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    678          uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
   \                     zcl_HandleExternal:
    679          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    680            zclIncomingMsg_t *pCmd;
    681            uint8 taskID;
    682          
    683            taskID = zcl_getExternalFoundationHandler( pInMsg->msg );
   \   000009                ; Setup parameters for call to function zcl_getExternalFoundationHandler
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000010   12....       LCALL     `??zcl_getExternalFoundationHandler::?relay`; Banked call to: zcl_getExternalFoundationHandler
   \   000013   E9           MOV       A,R1
   \   000014   F5..         MOV       ?V0,A
    684          
    685            if ( taskID == TASK_NO_TASK )
   \   000016   74FF         MOV       A,#-0x1
   \   000018   65..         XRL       A,?V0
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    686            {
    687              return ( TRUE );
    688            }
    689          
    690            pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
   \   00001F                ; Setup parameters for call to function osal_msg_allocate
   \   00001F   7A19         MOV       R2,#0x19
   \   000021   7B00         MOV       R3,#0x0
   \   000023   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    691            if ( pCmd != NULL )
   \   000026   EA           MOV       A,R2
   \   000027   4B           ORL       A,R3
   \   000028   7003         JNZ       $+5
   \   00002A   02....       LJMP      ??zcl_HandleExternal_0 & 0xFFFF
    692            {
    693              // fill in the message
    694              pCmd->hdr.event = ZCL_INCOMING_MSG;
   \   00002D   8A82         MOV       DPL,R2
   \   00002F   8B83         MOV       DPH,R3
   \   000031   7434         MOV       A,#0x34
   \   000033   12....       LCALL     ?Subroutine46 & 0xFFFF
    695              pCmd->zclHdr    = pInMsg->hdr;
   \                     ??CrossCallReturnLabel_63:
   \   000036   A3           INC       DPTR
   \   000037   EA           MOV       A,R2
   \   000038   2402         ADD       A,#0x2
   \   00003A   FC           MOV       R4,A
   \   00003B   E4           CLR       A
   \   00003C   3B           ADDC      A,R3
   \   00003D   FD           MOV       R5,A
   \   00003E   7406         MOV       A,#0x6
   \   000040   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    696              pCmd->clusterId = pInMsg->msg->clusterId;
   \   000043   8E82         MOV       DPL,R6
   \   000045   8F83         MOV       DPH,R7
   \   000047   12....       LCALL     ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   00004A   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   00004D   8A82         MOV       DPL,R2
   \   00004F   8B83         MOV       DPH,R3
   \   000051   A3           INC       DPTR
   \   000052   A3           INC       DPTR
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   12....       LCALL     ?Subroutine36 & 0xFFFF
    697              pCmd->srcAddr   = pInMsg->msg->srcAddr;
   \                     ??CrossCallReturnLabel_345:
   \   00005C   8882         MOV       DPL,R0
   \   00005E   8983         MOV       DPH,R1
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   EA           MOV       A,R2
   \   000067   240A         ADD       A,#0xa
   \   000069   FC           MOV       R4,A
   \   00006A   E4           CLR       A
   \   00006B   3B           ADDC      A,R3
   \   00006C   FD           MOV       R5,A
   \   00006D   740C         MOV       A,#0xc
   \   00006F   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    698              pCmd->endPoint  = pInMsg->msg->endPoint;
   \   000072   8E82         MOV       DPL,R6
   \   000074   8F83         MOV       DPH,R7
   \   000076   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   000079   C8           XCH       A,R0
   \   00007A   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   00007D   38           ADDC      A,R0
   \   00007E   F583         MOV       DPH,A
   \   000080   E0           MOVX      A,@DPTR
   \   000081   C0E0         PUSH      A
   \   000083   EA           MOV       A,R2
   \   000084   2416         ADD       A,#0x16
   \   000086   F582         MOV       DPL,A
   \   000088   E4           CLR       A
   \   000089   3B           ADDC      A,R3
   \   00008A   F583         MOV       DPH,A
   \   00008C   D0E0         POP       A
   \   00008E   F0           MOVX      @DPTR,A
    699              pCmd->attrCmd   = pInMsg->attrCmd;
   \   00008F   EE           MOV       A,R6
   \   000090   240C         ADD       A,#0xc
   \   000092   F8           MOV       R0,A
   \   000093   E4           CLR       A
   \   000094   3F           ADDC      A,R7
   \   000095   F9           MOV       R1,A
   \   000096   8882         MOV       DPL,R0
   \   000098   8983         MOV       DPH,R1
   \   00009A   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_505:
   \   00009D   EA           MOV       A,R2
   \   00009E   2417         ADD       A,#0x17
   \   0000A0   F582         MOV       DPL,A
   \   0000A2   E4           CLR       A
   \   0000A3   3B           ADDC      A,R3
   \   0000A4   F583         MOV       DPH,A
   \   0000A6   EC           MOV       A,R4
   \   0000A7   F0           MOVX      @DPTR,A
   \   0000A8   A3           INC       DPTR
   \   0000A9   ED           MOV       A,R5
   \   0000AA   12....       LCALL     ?Subroutine35 & 0xFFFF
    700              
    701          #ifdef BDB_REPORTING
    702              if(pCmd->zclHdr.commandID == ZCL_CMD_CONFIG_REPORT)
    703              {
    704                bdb_ProcessInConfigReportCmd(pCmd);
    705                osal_msg_deallocate((uint8*)pCmd);
    706                return TRUE;          
    707              }
    708              if(pCmd->zclHdr.commandID == ZCL_CMD_READ_REPORT_CFG)
    709              {
    710                bdb_ProcessInReadReportCfgCmd(pCmd);
    711                osal_msg_deallocate((uint8*)pCmd);
    712                return TRUE;
    713              }
    714          #endif
    715              // Application will free the attrCmd buffer
    716              pInMsg->attrCmd = NULL;
    717          
    718              /* send message through task message */
    719              osal_msg_send( taskID, (uint8 *)pCmd );
   \                     ??CrossCallReturnLabel_49:
   \   0000AD                ; Setup parameters for call to function osal_msg_send
   \   0000AD   A9..         MOV       R1,?V0
   \   0000AF   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    720            }
    721          
    722            return ( TRUE );
   \                     ??zcl_HandleExternal_0:
   \   0000B2   7901         MOV       R1,#0x1
   \   0000B4   02....       LJMP      ?Subroutine4 & 0xFFFF
    723          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   EC           MOV       A,R4
   \   000001                REQUIRE ??Subroutine192_0
   \   000001                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   ED           MOV       A,R5
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_685:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8E82         MOV       DPL,R6
   \   000003   8F83         MOV       DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine221_0
   \   000002                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine222_0
   \   000002                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET
    724          #endif
    725          
    726          
    727          /*********************************************************************
    728           * @fn          zcl_getRawAFMsg
    729           *
    730           * @brief       Call to get original unprocessed AF message
    731           *              (not parsed by ZCL).
    732           *
    733           *   NOTE:  This function can only be called during a ZCL callback function
    734           *          and the calling function must NOT change any data in the message.
    735           *
    736           * @param       none
    737           *
    738           * @return      pointer to original AF message, NULL if not processing
    739           *              AF message.
    740           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    741          afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
   \                     zcl_getRawAFMsg:
    742          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    743            return ( rawAFMsg );
   \   000004   90....       MOV       DPTR,#rawAFMsg
   \   000007   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   00000A   80..         SJMP      ?Subroutine0
    744          }
    745          
    746          /*********************************************************************
    747           * @fn          zcl_getParsedTransSeqNum
    748           *
    749           * @brief       Call to the get the transaction sequence number from
    750           *              the incoming message.
    751           *
    752           *   NOTE:  This function can only be called during a ZCL callback function
    753           *          and the calling function must NOT change any data in the message.
    754           *
    755           * @param       none
    756           *
    757           * @return      transaction sequence number.
    758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    759          uint8 zcl_getParsedTransSeqNum( void )
   \                     zcl_getParsedTransSeqNum:
    760          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    761            return ( savedZCLTransSeqNum );
   \   000004   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009                REQUIRE ?Subroutine0
   \   000009                ; // Fall through to label ?Subroutine0
    762          }
    763          
    764          /*********************************************************************
    765           * @fn          zcl_registerPlugin
    766           *
    767           * @brief       Add a Cluster Library handler
    768           *
    769           * @param       startClusterID - starting cluster ID
    770           * @param       endClusterID - ending cluster ID
    771           * @param       pfnHdlr - function pointer to incoming message handler
    772           *
    773           * @return      ZSuccess if OK
    774           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    775          ZStatus_t zcl_registerPlugin( uint16 startClusterID,
   \                     zcl_registerPlugin:
    776                    uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
    777          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    778            zclLibPlugin_t *pNewItem;
    779            zclLibPlugin_t *pLoop;
    780          
    781            // Fill in the new profile list
    782            pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A08         MOV       R2,#0x8
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    783            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerPlugin_0
    784            {
    785              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   803E         SJMP      ??CrossCallReturnLabel_32
    786            }
    787          
    788            // Fill in the plugin record.
    789            pNewItem->next = (zclLibPlugin_t *)NULL;
   \                     ??zcl_registerPlugin_0:
   \   000024   8882         MOV       DPL,R0
   \   000026   8983         MOV       DPH,R1
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   12....       LCALL     ?Subroutine149 & 0xFFFF
    790            pNewItem->startClusterID = startClusterID;
   \                     ??CrossCallReturnLabel_336:
   \   00002E   12....       LCALL     ?Subroutine23 & 0xFFFF
    791            pNewItem->endClusterID = endClusterID;
   \                     ??CrossCallReturnLabel_24:
   \   000031   12....       LCALL     ??Subroutine204_0 & 0xFFFF
    792            pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
   \                     ??CrossCallReturnLabel_383:
   \   000034   740C         MOV       A,#0xc
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   12....       LCALL     ??Subroutine214_0 & 0xFFFF
    793          
    794            // Find spot in list
    795            if (  plugins == NULL )
   \                     ??CrossCallReturnLabel_446:
   \   000043   90....       MOV       DPTR,#plugins
   \   000046   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000049   90....       MOV       DPTR,#plugins
   \   00004C   6011         JZ        ??zcl_registerPlugin_1
    796            {
    797              plugins = pNewItem;
    798            }
    799            else
    800            {
    801              // Look for end of list
    802              pLoop = plugins;
   \   00004E   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000051   8003         SJMP      ??zcl_registerPlugin_2
    803              while ( pLoop->next != NULL )
    804              {
    805                pLoop = pLoop->next;
   \                     ??zcl_registerPlugin_3:
   \   000053   EA           MOV       A,R2
   \   000054   FC           MOV       R4,A
   \   000055   EB           MOV       A,R3
    806              }
   \                     ??zcl_registerPlugin_2:
   \   000056   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000059   70F8         JNZ       ??zcl_registerPlugin_3
    807          
    808              // Put new item at end of list
    809              pLoop->next = pNewItem;
   \   00005B   8C82         MOV       DPL,R4
   \   00005D   8D83         MOV       DPH,R5
    810            }
   \                     ??zcl_registerPlugin_1:
   \   00005F   12....       LCALL     ?Subroutine27 & 0xFFFF
    811          
    812            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_32:
   \   000062   02....       LJMP      ?Subroutine4 & 0xFFFF
    813          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7900         MOV       R1,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   E5..         MOV       A,?V0
   \   000004   F0           MOVX      @DPTR,A
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   E5..         MOV       A,?V1
   \   000002                REQUIRE ??Subroutine188_0
   \   000002                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   FD           MOV       R5,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005                REQUIRE ??Subroutine189_0
   \   000005                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   8882         MOV       DPL,R0
   \   000007   8983         MOV       DPH,R1
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   EE           MOV       A,R6
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EF           MOV       A,R7
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    814          
    815          #ifdef ZCL_DISCOVER
    816          /*********************************************************************
    817           * @fn          zcl_registerCmdList
    818           *
    819           * @brief       Register a Command List with ZCL Foundation
    820           *
    821           * @param       endpoint - endpoint the attribute list belongs to
    822           * @param       newCmdList - array of command records
    823           *
    824           * @return      ZSuccess if OK
    825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    826          ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 cmdListSize, CONST zclCommandRec_t newCmdList[] )
   \                     zcl_registerCmdList:
    827          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    828            zclCmdRecsList_t *pNewItem;
    829            zclCmdRecsList_t *pLoop;
    830          
    831            // Fill in the new profile list
    832            pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A06         MOV       R2,#0x6
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    833            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerCmdList_0
    834            {
    835              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8022         SJMP      ??CrossCallReturnLabel_33
    836            }
    837          
    838            pNewItem->pNext = (zclCmdRecsList_t *)NULL;
   \                     ??zcl_registerCmdList_0:
   \   000024   12....       LCALL     ?Subroutine11 & 0xFFFF
    839            pNewItem->endpoint = endpoint;
    840            pNewItem->numCommands = cmdListSize;
    841            pNewItem->pCmdRecs = newCmdList;
    842          
    843            // Find spot in list
    844            if ( gpCmdList == NULL )
   \                     ??CrossCallReturnLabel_4:
   \   000027   90....       MOV       DPTR,#gpCmdList
   \   00002A   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   00002D   90....       MOV       DPTR,#gpCmdList
   \   000030   6011         JZ        ??zcl_registerCmdList_1
    845            {
    846              gpCmdList = pNewItem;
    847            }
    848            else
    849            {
    850              // Look for end of list
    851              pLoop = gpCmdList;
   \   000032   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000035   8003         SJMP      ??zcl_registerCmdList_2
    852              while ( pLoop->pNext != NULL )
    853              {
    854                pLoop = pLoop->pNext;
   \                     ??zcl_registerCmdList_3:
   \   000037   EA           MOV       A,R2
   \   000038   FC           MOV       R4,A
   \   000039   EB           MOV       A,R3
    855              }
   \                     ??zcl_registerCmdList_2:
   \   00003A   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   00003D   70F8         JNZ       ??zcl_registerCmdList_3
    856          
    857              // Put new item at end of list
    858              pLoop->pNext = pNewItem;
   \   00003F   8C82         MOV       DPL,R4
   \   000041   8D83         MOV       DPH,R5
    859            }
   \                     ??zcl_registerCmdList_1:
   \   000043   12....       LCALL     ?Subroutine27 & 0xFFFF
    860          
    861            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_33:
   \   000046   02....       LJMP      ?Subroutine4 & 0xFFFF
    862          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   12....       LCALL     ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000006   EE           MOV       A,R6
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   EF           MOV       A,R7
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004   E4           CLR       A
   \   000005   F0           MOVX      @DPTR,A
   \   000006   A3           INC       DPTR
   \   000007   F0           MOVX      @DPTR,A
   \   000008   8882         MOV       DPL,R0
   \   00000A   8983         MOV       DPH,R1
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   E5..         MOV       A,?V0
   \   000010   12....       LCALL     ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000013   22           RET
    863          #endif  // ZCL_DISCOVER
    864          
    865          /*********************************************************************
    866           * @fn          zcl_registerAttrList
    867           *
    868           * @brief       Register an Attribute List with ZCL Foundation
    869           *
    870           * @param       endpoint - endpoint the attribute list belongs to
    871           * @param       numAttr - number of attributes in list
    872           * @param       newAttrList - array of Attribute records.
    873           *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
    874           *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
    875           *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
    876           *
    877           * @return      ZSuccess if OK
    878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    879          ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
   \                     zcl_registerAttrList:
    880          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    881            zclAttrRecsList *pNewItem;
    882            zclAttrRecsList *pLoop;
    883          
    884            // Fill in the new profile list
    885            pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0A         MOV       R2,#0xa
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    886            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerAttrList_0
    887            {
    888              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8030         SJMP      ??CrossCallReturnLabel_34
    889            }
    890          
    891            pNewItem->next = (zclAttrRecsList *)NULL;
   \                     ??zcl_registerAttrList_0:
   \   000024   12....       LCALL     ?Subroutine145 & 0xFFFF
    892            pNewItem->endpoint = endpoint;
    893            pNewItem->pfnReadWriteCB = NULL;
   \                     ??CrossCallReturnLabel_268:
   \   000027   E4           CLR       A
   \   000028   F0           MOVX      @DPTR,A
   \   000029   A3           INC       DPTR
   \   00002A   12....       LCALL     ?Subroutine28 & 0xFFFF
    894            pNewItem->numAttributes = numAttr;
   \                     ??CrossCallReturnLabel_36:
   \   00002D   E5..         MOV       A,?V1
   \   00002F   12....       LCALL     ?Subroutine28 & 0xFFFF
    895            pNewItem->attrs = newAttrList;
   \                     ??CrossCallReturnLabel_37:
   \   000032   12....       LCALL     ?Subroutine43 & 0xFFFF
    896          
    897            // Find spot in list
    898            if ( attrList == NULL )
   \                     ??CrossCallReturnLabel_387:
   \   000035   90....       MOV       DPTR,#attrList
   \   000038   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   00003B   90....       MOV       DPTR,#attrList
   \   00003E   6011         JZ        ??zcl_registerAttrList_1
    899            {
    900              attrList = pNewItem;
    901            }
    902            else
    903            {
    904              // Look for end of list
    905              pLoop = attrList;
   \   000040   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000043   8003         SJMP      ??zcl_registerAttrList_2
    906              while ( pLoop->next != NULL )
    907              {
    908                pLoop = pLoop->next;
   \                     ??zcl_registerAttrList_3:
   \   000045   EA           MOV       A,R2
   \   000046   FC           MOV       R4,A
   \   000047   EB           MOV       A,R3
    909              }
   \                     ??zcl_registerAttrList_2:
   \   000048   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   00004B   70F8         JNZ       ??zcl_registerAttrList_3
    910          
    911              // Put new item at end of list
    912              pLoop->next = pNewItem;
   \   00004D   8C82         MOV       DPL,R4
   \   00004F   8D83         MOV       DPH,R5
    913            }
   \                     ??zcl_registerAttrList_1:
   \   000051   12....       LCALL     ?Subroutine27 & 0xFFFF
    914          
    915            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_34:
   \   000054   80..         SJMP      ?Subroutine4
    916          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine204_0
   \   000001                ; // Fall through to label ??Subroutine204_0
    917          
    918          /*********************************************************************
    919           * @fn          zcl_registerClusterOptionList
    920           *
    921           * @brief       Register a Cluster Option List with ZCL Foundation
    922           *
    923           * @param       endpoint - endpoint the option list belongs to
    924           * @param       numOption - number of options in list
    925           * @param       optionList - array of cluster option records.
    926           *
    927           *              NOTE: This API should be called to enable 'Application
    928           *                    Link Key' security and/or 'APS ACK' for a specific
    929           *                    Cluster. The 'Application Link Key' is discarded
    930           *                    if security isn't enabled on the device.
    931           *                    The default behavior is 'Network Key' when security
    932           *                    is enabled and no 'APS ACK' for the ZCL messages.
    933           *
    934           * @return      ZSuccess if OK
    935           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    936          ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
   \                     zcl_registerClusterOptionList:
    937          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   8A..         MOV       ?V1,R2
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
    938            zclClusterOptionList *pNewItem;
    939            zclClusterOptionList *pLoop;
    940          
    941            // Fill in the new profile list
    942            pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A06         MOV       R2,#0x6
   \   00000F   7B00         MOV       R3,#0x0
   \   000011   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV       ?V2,R2
   \   000016   8B..         MOV       ?V3,R3
   \   000018   A8..         MOV       R0,?V2
   \   00001A   A9..         MOV       R1,?V3
    943            if ( pNewItem == NULL )
   \   00001C   E8           MOV       A,R0
   \   00001D   49           ORL       A,R1
   \   00001E   7004         JNZ       ??zcl_registerClusterOptionList_0
    944            {
    945              return (ZMemError);
   \   000020   7910         MOV       R1,#0x10
   \   000022   8022         SJMP      ??CrossCallReturnLabel_35
    946            }
    947          
    948            pNewItem->next = (zclClusterOptionList *)NULL;
   \                     ??zcl_registerClusterOptionList_0:
   \   000024   12....       LCALL     ?Subroutine11 & 0xFFFF
    949            pNewItem->endpoint = endpoint;
    950            pNewItem->numOptions = numOption;
    951            pNewItem->options = optionList;
    952          
    953            // Find spot in list
    954            if ( clusterOptionList == NULL )
   \                     ??CrossCallReturnLabel_5:
   \   000027   90....       MOV       DPTR,#clusterOptionList
   \   00002A   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   00002D   90....       MOV       DPTR,#clusterOptionList
   \   000030   6011         JZ        ??zcl_registerClusterOptionList_1
    955            {
    956              clusterOptionList = pNewItem;
    957            }
    958            else
    959            {
    960              // Look for end of list
    961              pLoop = clusterOptionList;
   \   000032   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000035   8003         SJMP      ??zcl_registerClusterOptionList_2
    962              while ( pLoop->next != NULL )
    963              {
    964                pLoop = pLoop->next;
   \                     ??zcl_registerClusterOptionList_3:
   \   000037   EA           MOV       A,R2
   \   000038   FC           MOV       R4,A
   \   000039   EB           MOV       A,R3
    965              }
   \                     ??zcl_registerClusterOptionList_2:
   \   00003A   12....       LCALL     ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   00003D   70F8         JNZ       ??zcl_registerClusterOptionList_3
    966          
    967              // Put new item at end of list
    968              pLoop->next = pNewItem;
   \   00003F   8C82         MOV       DPL,R4
   \   000041   8D83         MOV       DPH,R5
    969            }
   \                     ??zcl_registerClusterOptionList_1:
   \   000043   12....       LCALL     ?Subroutine27 & 0xFFFF
    970          
    971            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_35:
   \   000046                REQUIRE ?Subroutine4
   \   000046                ; // Fall through to label ?Subroutine4
    972          }
    973          
    974          /*********************************************************************
    975           * @fn          zcl_registerValidateAttrData
    976           *
    977           * @brief       Add a validation function for attribute data
    978           *
    979           * @param       pfnValidateAttrData - function pointer to validate routine
    980           *
    981           * @return      ZSuccess if OK
    982           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    983          ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
   \                     zcl_registerValidateAttrData:
    984          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    985            zcl_ValidateAttrDataCB = pfnValidateAttrData;
   \   000004   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   000007   12....       LCALL     ??Subroutine214_0 & 0xFFFF
    986          
    987            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_447:
   \   00000A   7900         MOV       R1,#0x0
   \   00000C   02....       LJMP      ?Subroutine0 & 0xFFFF
    988          }
    989          
    990          /*********************************************************************
    991           * @fn          zcl_registerReadWriteCB
    992           *
    993           * @brief       Register the application's callback function to read/write
    994           *              attribute data, and authorize read/write operation.
    995           *
    996           *              Note: The pfnReadWriteCB callback function is only required
    997           *                    when the attribute data format is unknown to ZCL. The
    998           *                    callback function gets called when the pointer 'dataPtr'
    999           *                    to the attribute value is NULL in the attribute database
   1000           *                    registered with the ZCL.
   1001           *
   1002           *              Note: The pfnAuthorizeCB callback function is only required
   1003           *                    when the Read/Write operation on an attribute requires
   1004           *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
   1005           *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
   1006           *
   1007           * @param       endpoint - application's endpoint
   1008           * @param       pfnReadWriteCB - function pointer to read/write routine
   1009           * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
   1010           *
   1011           * @return      ZSuccess if successful. ZFailure, otherwise.
   1012           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1013          ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
   \                     zcl_registerReadWriteCB:
   1014                                             zclAuthorizeCB_t pfnAuthorizeCB )
   1015          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   1016            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000010   8A..         MOV       ?V4,R2
   \   000012   8B..         MOV       ?V5,R3
   \   000014   A8..         MOV       R0,?V4
   \   000016   A9..         MOV       R1,?V5
   1017          
   1018            if ( pRec != NULL )
   \   000018   E8           MOV       A,R0
   \   000019   49           ORL       A,R1
   \   00001A   600F         JZ        ??zcl_registerReadWriteCB_0
   1019            {
   1020              pRec->pfnReadWriteCB = pfnReadWriteCB;
   \   00001C   8882         MOV       DPL,R0
   \   00001E   8983         MOV       DPH,R1
   \   000020   A3           INC       DPTR
   \   000021   12....       LCALL     ?Subroutine23 & 0xFFFF
   1021              pRec->pfnAuthorizeCB = pfnAuthorizeCB;
   \                     ??CrossCallReturnLabel_25:
   \   000024   12....       LCALL     ?Subroutine43 & 0xFFFF
   1022          
   1023              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_388:
   \   000027   7900         MOV       R1,#0x0
   \   000029   8002         SJMP      ??zcl_registerReadWriteCB_1
   1024            }
   1025          
   1026            return ( ZFailure );
   \                     ??zcl_registerReadWriteCB_0:
   \   00002B   7901         MOV       R1,#0x1
   \                     ??zcl_registerReadWriteCB_1:
   \   00002D   02....       LJMP      ??Subroutine205_0 & 0xFFFF
   1027          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   7F06         MOV       R7,#0x6
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1028          
   1029          /*********************************************************************
   1030           * @fn      zcl_DeviceOperational
   1031           *
   1032           * @brief   Used to see whether or not the device can send or respond
   1033           *          to application level commands.
   1034           *
   1035           * @param   srcEP - source endpoint
   1036           * @param   clusterID - cluster ID
   1037           * @param   frameType - command type
   1038           * @param   cmd - command ID
   1039           *
   1040           * @return  TRUE if device is operational, FALSE otherwise
   1041           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1042          static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
   \                     zcl_DeviceOperational:
   1043                                              uint8 frameType, uint8 cmd, uint16 profileID )
   1044          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV       A,#-0x9
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   ED           MOV       A,R5
   \   00000D   FF           MOV       R7,A
   1045            zclAttrRec_t attrRec;
   1046            uint8 deviceEnabled = DEVICE_ENABLED; // default value
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   7401         MOV       A,#0x1
   \   000016   F0           MOVX      @DPTR,A
   1047          
   1048            (void)profileID;  // Intentionally unreferenced parameter
   1049          
   1050            // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
   1051            // cannot send or respond to application level commands, other than commands
   1052            // to read or write attributes. Note that the Identify cluster cannot be
   1053            // disabled, and remains functional regardless of this setting.
   1054            if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
   \   000017   EC           MOV       A,R4
   \   000018   7006         JNZ       ??zcl_DeviceOperational_0
   \   00001A   EF           MOV       A,R7
   \   00001B   C3           CLR       C
   \   00001C   9406         SUBB      A,#0x6
   \   00001E   4050         JC        ??zcl_DeviceOperational_1
   1055            {
   1056              return ( TRUE );
   1057            }
   1058          
   1059            if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
   \                     ??zcl_DeviceOperational_0:
   \   000020   7403         MOV       A,#0x3
   \   000022   6A           XRL       A,R2
   \   000023   4B           ORL       A,R3
   \   000024   604A         JZ        ??zcl_DeviceOperational_1
   1060            {
   1061              return ( TRUE );
   1062            }
   1063          
   1064            // Is device enabled?
   1065            if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
   1066                                 ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
   \   000026                ; Setup parameters for call to function zclFindAttrRec
   \   000026   7401         MOV       A,#0x1
   \   000028   12....       LCALL     ?XSTACK_DISP100_8
   \   00002B   88..         MOV       ?V2,R0
   \   00002D   89..         MOV       ?V3,R1
   \   00002F   78..         MOV       R0,#?V2
   \   000031   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000034   7C12         MOV       R4,#0x12
   \   000036   7D00         MOV       R5,#0x0
   \   000038   7A00         MOV       R2,#0x0
   \   00003A   7B00         MOV       R3,#0x0
   \   00003C   EE           MOV       A,R6
   \   00003D   F9           MOV       R1,A
   \   00003E   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   E9           MOV       A,R1
   \   000047   601C         JZ        ??zcl_DeviceOperational_2
   1067            {
   1068          #ifdef ZCL_READ
   1069              zclReadAttrData( &deviceEnabled, &attrRec, NULL );
   \   000049                ; Setup parameters for call to function zclReadAttrData
   \   000049   E4           CLR       A
   \   00004A   F5..         MOV       ?V2,A
   \   00004C   F5..         MOV       ?V3,A
   \   00004E   78..         MOV       R0,#?V2
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   7403         MOV       A,#0x3
   \   000055   12....       LCALL     ?XSTACK_DISP102_8
   \   000058   7402         MOV       A,#0x2
   \   00005A   12....       LCALL     ?XSTACK_DISP101_8
   \   00005D   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000060   7402         MOV       A,#0x2
   \   000062   12....       LCALL     ?DEALLOC_XSTACK8
   1070          #endif
   1071            }
   1072          
   1073            return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
   \                     ??zcl_DeviceOperational_2:
   \   000065   85..82       MOV       DPL,?XSP + 0
   \   000068   85..83       MOV       DPH,?XSP + 1
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   6401         XRL       A,#0x1
   \   00006E   7004         JNZ       ??zcl_DeviceOperational_3
   \                     ??zcl_DeviceOperational_1:
   \   000070   7901         MOV       R1,#0x1
   \   000072   8002         SJMP      ??zcl_DeviceOperational_4
   \                     ??zcl_DeviceOperational_3:
   \   000074   7900         MOV       R1,#0x0
   \                     ??zcl_DeviceOperational_4:
   \   000076   7409         MOV       A,#0x9
   \   000078   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007B   02....       LJMP      ?Subroutine4 & 0xFFFF
   1074          }
   1075          
   1076          /*********************************************************************
   1077           * @fn      zcl_SendCommand
   1078           *
   1079           * @brief   Used to send Profile and Cluster Specific Command messages.
   1080           *
   1081           *          NOTE: The calling application is responsible for incrementing
   1082           *                the Sequence Number.
   1083           *
   1084           * @param   srcEp - source endpoint
   1085           * @param   destAddr - destination address
   1086           * @param   clusterID - cluster ID
   1087           * @param   cmd - command ID
   1088           * @param   specific - whether the command is Cluster Specific
   1089           * @param   direction - client/server direction of the command
   1090           * @param   disableDefaultRsp - disable Default Response command
   1091           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1092           * @param   seqNumber - identification number for the transaction
   1093           * @param   cmdFormatLen - length of the command to be sent
   1094           * @param   cmdFormat - command to be sent
   1095           *
   1096           * @return  ZSuccess if OK
   1097           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1098          ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
   \                     zcl_SendCommand:
   1099                                     uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
   1100                                     uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
   1101                                     uint16 cmdFormatLen, uint8 *cmdFormat )
   1102          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV       A,#-0xb
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7409         MOV       A,#0x9
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   00001A   8C..         MOV       ?V4,R4
   \   00001C   8D..         MOV       ?V5,R5
   1103            endPointDesc_t *epDesc;
   1104            zclFrameHdr_t hdr;
   1105            uint8 *msgBuf;
   1106            uint16 msgLen;
   1107            uint8 *pBuf;
   1108            uint8 options;
   1109            ZStatus_t status;
   1110          
   1111            epDesc = afFindEndPointDesc( srcEP );
   \   00001E                ; Setup parameters for call to function afFindEndPointDesc
   \   00001E   85..82       MOV       DPL,?XSP + 0
   \   000021   85..83       MOV       DPH,?XSP + 1
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000029   7407         MOV       A,#0x7
   \   00002B   12....       LCALL     ?XSTACK_DISP0_8
   \   00002E   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   1112            if ( epDesc == NULL )
   \                     ??CrossCallReturnLabel_449:
   \   000031   7407         MOV       A,#0x7
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000039   7005         JNZ       ??zcl_SendCommand_0
   1113            {
   1114              return ( ZInvalidParameter ); // EMBEDDED RETURN
   \   00003B   7902         MOV       R1,#0x2
   \   00003D   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1115            }
   1116          
   1117          #if defined ( INTER_PAN )
   1118            if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
   1119            {
   1120              options = AF_TX_OPTIONS_NONE;
   1121            }
   1122            else
   1123          #endif
   1124            {
   1125              options = zclGetClusterOption( srcEP, clusterID );
   \                     ??zcl_SendCommand_0:
   \   000040                ; Setup parameters for call to function zclGetClusterOption
   \   000040   AA..         MOV       R2,?V4
   \   000042   AB..         MOV       R3,?V5
   \   000044   85..82       MOV       DPL,?XSP + 0
   \   000047   85..83       MOV       DPH,?XSP + 1
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   F9           MOV       R1,A
   \   00004C   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   00004F   E9           MOV       A,R1
   \   000050   F5..         MOV       ?V3,A
   1126          
   1127              // The cluster might not have been defined to use security but if this message
   1128              // is in response to another message that was using APS security this message
   1129              // will be sent with APS security
   1130              if ( !( options & AF_EN_SECURITY ) )
   \   000052   A2E6         MOV       C,0xE0 /* A   */.6
   \   000054   401C         JC        ??zcl_SendCommand_2
   1131              {
   1132                afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
   \   000056   90....       MOV       DPTR,#rawAFMsg
   \   000059   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   1133          
   1134                if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
   \                     ??CrossCallReturnLabel_423:
   \   00005C   6014         JZ        ??zcl_SendCommand_2
   \   00005E   E8           MOV       A,R0
   \   00005F   2419         ADD       A,#0x19
   \   000061   F582         MOV       DPL,A
   \   000063   E4           CLR       A
   \   000064   39           ADDC      A,R1
   \   000065   F583         MOV       DPH,A
   \   000067   E0           MOVX      A,@DPTR
   \   000068   6401         XRL       A,#0x1
   \   00006A   7006         JNZ       ??zcl_SendCommand_2
   1135                {
   1136                  options |= AF_EN_SECURITY;
   \   00006C   E5..         MOV       A,?V3
   \   00006E   D2E6         SETB      0xE0 /* A   */.6
   \   000070   F5..         MOV       ?V3,A
   1137                }
   1138              }
   1139            }
   1140          
   1141            zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
   \                     ??zcl_SendCommand_2:
   \   000072                ; Setup parameters for call to function osal_memset
   \   000072   7C06         MOV       R4,#0x6
   \   000074   7D00         MOV       R5,#0x0
   \   000076   7900         MOV       R1,#0x0
   \   000078   7401         MOV       A,#0x1
   \   00007A   12....       LCALL     ?XSTACK_DISP101_8
   \   00007D   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   1142          
   1143            // Not Profile wide command (like READ, WRITE)
   1144            if ( specific )
   \   000080   741C         MOV       A,#0x1c
   \   000082   12....       LCALL     ?XSTACK_DISP0_8
   \   000085   E0           MOVX      A,@DPTR
   \   000086   600D         JZ        ??zcl_SendCommand_3
   1145            {
   1146              hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
   \   000088   7401         MOV       A,#0x1
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   E0           MOVX      A,@DPTR
   \   00008E   54FC         ANL       A,#0xfc
   \   000090   F0           MOVX      @DPTR,A
   \   000091   4401         ORL       A,#0x1
   \   000093   8008         SJMP      ??zcl_SendCommand_4
   1147            }
   1148            else
   1149            {
   1150              hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
   \                     ??zcl_SendCommand_3:
   \   000095   7401         MOV       A,#0x1
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   E0           MOVX      A,@DPTR
   \   00009B   54FC         ANL       A,#0xfc
   \                     ??zcl_SendCommand_4:
   \   00009D   F0           MOVX      @DPTR,A
   1151            }
   1152          
   1153            if ( ( epDesc->simpleDesc == NULL ) ||
   1154                 ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
   1155                                          cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \   00009E   7407         MOV       A,#0x7
   \   0000A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   0000A6   12....       LCALL     ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   0000A9   6030         JZ        ??zcl_SendCommand_5
   \   0000AB   741B         MOV       A,#0x1b
   \   0000AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B0   E0           MOVX      A,@DPTR
   \   0000B1   FE           MOV       R6,A
   \   0000B2                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000B2   8882         MOV       DPL,R0
   \   0000B4   8983         MOV       DPH,R1
   \   0000B6   A3           INC       DPTR
   \   0000B7   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000BA   EE           MOV       A,R6
   \   0000BB   FD           MOV       R5,A
   \   0000BC   7403         MOV       A,#0x3
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   5403         ANL       A,#0x3
   \   0000C4   FC           MOV       R4,A
   \   0000C5   AA..         MOV       R2,?V4
   \   0000C7   AB..         MOV       R3,?V5
   \   0000C9   7402         MOV       A,#0x2
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   F9           MOV       R1,A
   \   0000D0   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   0000D3   7402         MOV       A,#0x2
   \   0000D5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D8   E9           MOV       A,R1
   \   0000D9   7005         JNZ       ??zcl_SendCommand_6
   1156            {
   1157              return ( ZFailure ); // EMBEDDED RETURN
   \                     ??zcl_SendCommand_5:
   \   0000DB   7901         MOV       R1,#0x1
   \   0000DD   02....       LJMP      ??zcl_SendCommand_1 & 0xFFFF
   1158            }
   \                     ??zcl_SendCommand_6:
   \   0000E0   741F         MOV       A,#0x1f
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   1159          
   1160            // Fill in the Maufacturer Code
   1161            if ( manuCode != 0 )
   \                     ??CrossCallReturnLabel_424:
   \   0000E8   6011         JZ        ??CrossCallReturnLabel_469
   1162            {
   1163              hdr.fc.manuSpecific = 1;
   \   0000EA   7401         MOV       A,#0x1
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   E0           MOVX      A,@DPTR
   \   0000F0   4404         ORL       A,#0x4
   \   0000F2   F0           MOVX      @DPTR,A
   1164              hdr.manuCode = manuCode;
   \   0000F3   7403         MOV       A,#0x3
   \   0000F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F8   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   1165            }
   1166          
   1167            // Set the Command Direction
   1168            if ( direction )
   \                     ??CrossCallReturnLabel_469:
   \   0000FB   741D         MOV       A,#0x1d
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   E0           MOVX      A,@DPTR
   \   000101   600A         JZ        ??zcl_SendCommand_7
   1169            {
   1170              hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   000103   7401         MOV       A,#0x1
   \   000105   12....       LCALL     ?XSTACK_DISP0_8
   \   000108   E0           MOVX      A,@DPTR
   \   000109   4408         ORL       A,#0x8
   \   00010B   8008         SJMP      ??zcl_SendCommand_8
   1171            }
   1172            else
   1173            {
   1174              hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zcl_SendCommand_7:
   \   00010D   7401         MOV       A,#0x1
   \   00010F   12....       LCALL     ?XSTACK_DISP0_8
   \   000112   E0           MOVX      A,@DPTR
   \   000113   54F7         ANL       A,#0xf7
   \                     ??zcl_SendCommand_8:
   \   000115   F0           MOVX      @DPTR,A
   1175            }
   1176          
   1177            // Set the Disable Default Response field
   1178            if ( disableDefaultRsp )
   \   000116   741E         MOV       A,#0x1e
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   600A         JZ        ??zcl_SendCommand_9
   1179            {
   1180              hdr.fc.disableDefaultRsp = 1;
   \   00011E   7401         MOV       A,#0x1
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   E0           MOVX      A,@DPTR
   \   000124   4410         ORL       A,#0x10
   \   000126   8008         SJMP      ??zcl_SendCommand_10
   1181            }
   1182            else
   1183            {
   1184              hdr.fc.disableDefaultRsp = 0;
   \                     ??zcl_SendCommand_9:
   \   000128   7401         MOV       A,#0x1
   \   00012A   12....       LCALL     ?XSTACK_DISP0_8
   \   00012D   E0           MOVX      A,@DPTR
   \   00012E   54EF         ANL       A,#0xef
   \                     ??zcl_SendCommand_10:
   \   000130   F0           MOVX      @DPTR,A
   1185            }
   1186          
   1187            // Fill in the Transaction Sequence Number
   1188            hdr.transSeqNum = seqNum;
   \   000131   7421         MOV       A,#0x21
   \   000133   12....       LCALL     ?XSTACK_DISP0_8
   \   000136   E0           MOVX      A,@DPTR
   \   000137   C0E0         PUSH      A
   \   000139   7405         MOV       A,#0x5
   \   00013B   12....       LCALL     ?XSTACK_DISP0_8
   \   00013E   D0E0         POP       A
   \   000140   F0           MOVX      @DPTR,A
   1189          
   1190            // Fill in the command
   1191            hdr.commandID = cmd;
   \   000141   7406         MOV       A,#0x6
   \   000143   12....       LCALL     ?XSTACK_DISP0_8
   \   000146   EE           MOV       A,R6
   \   000147   F0           MOVX      @DPTR,A
   1192          
   1193            // calculate the needed buffer size
   1194            msgLen = zclCalcHdrSize( &hdr );
   \   000148   7803         MOV       R0,#0x3
   \   00014A   7401         MOV       A,#0x1
   \   00014C   12....       LCALL     ?XSTACK_DISP0_8
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   5404         ANL       A,#0x4
   \   000152   6002         JZ        ??zcl_SendCommand_11
   \   000154   7805         MOV       R0,#0x5
   1195            msgLen += cmdFormatLen;
   \                     ??zcl_SendCommand_11:
   \   000156   7422         MOV       A,#0x22
   \   000158   12....       LCALL     ?XSTACK_DISP0_8
   \   00015B   E0           MOVX      A,@DPTR
   \   00015C   28           ADD       A,R0
   \   00015D   FE           MOV       R6,A
   \   00015E   A3           INC       DPTR
   \   00015F   E0           MOVX      A,@DPTR
   \   000160   3400         ADDC      A,#0x0
   \   000162   FF           MOV       R7,A
   1196          
   1197            // Allocate the buffer needed
   1198            printf("Arrived 1198!\n");
   \   000163                ; Setup parameters for call to function printf
   \   000163   7A..         MOV       R2,#`?<Constant "Arrived 1198!\\n">` & 0xff
   \   000165   7B..         MOV       R3,#(`?<Constant "Arrived 1198!\\n">` >> 8) & 0xff
   \   000167   12....       LCALL     `??printf::?relay`; Banked call to: printf
   1199            msgBuf = zcl_mem_alloc( msgLen );
   \   00016A                ; Setup parameters for call to function osal_mem_alloc
   \   00016A   EE           MOV       A,R6
   \   00016B   FA           MOV       R2,A
   \   00016C   EF           MOV       A,R7
   \   00016D   FB           MOV       R3,A
   \   00016E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000171   8A..         MOV       ?V6,R2
   \   000173   8B..         MOV       ?V7,R3
   1200            if ( msgBuf != NULL )
   \   000175   EA           MOV       A,R2
   \   000176   45..         ORL       A,?V7
   \   000178   6073         JZ        ??zcl_SendCommand_12
   1201            {
   1202              // Fill in the ZCL Header
   1203              pBuf = zclBuildHdr( &hdr, msgBuf );
   \   00017A                ; Setup parameters for call to function zclBuildHdr
   \   00017A   AC..         MOV       R4,?V6
   \   00017C   AD..         MOV       R5,?V7
   \   00017E   7401         MOV       A,#0x1
   \   000180   12....       LCALL     ?XSTACK_DISP101_8
   \   000183   12....       LCALL     `??zclBuildHdr::?relay`; Banked call to: zclBuildHdr
   1204          
   1205              // Fill in the command frame
   1206              zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
   \   000186                ; Setup parameters for call to function osal_memcpy
   \   000186   7424         MOV       A,#0x24
   \   000188   12....       LCALL     ?XSTACK_DISP0_8
   \   00018B   12....       LCALL     ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   00018E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000191   7425         MOV       A,#0x25
   \   000193   12....       LCALL     ?XSTACK_DISP0_8
   \   000196   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   000199   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00019C   7403         MOV       A,#0x3
   \   00019E   12....       LCALL     ?DEALLOC_XSTACK8
   1207          
   1208              status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
   1209                                       &APS_Counter, options, zcl_radius );
   \   0001A1                ; Setup parameters for call to function AF_DataRequest
   \   0001A1   90....       MOV       DPTR,#zcl_radius
   \   0001A4   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0001A7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001AA   75....       MOV       ?V0,#APS_Counter & 0xff
   \   0001AD   75....       MOV       ?V1,#(APS_Counter >> 8) & 0xff
   \   0001B0   78..         MOV       R0,#?V0
   \   0001B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B5   78..         MOV       R0,#?V6
   \   0001B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001BA   8E..         MOV       ?V0,R6
   \   0001BC   8F..         MOV       ?V1,R7
   \   0001BE   78..         MOV       R0,#?V0
   \   0001C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C3   78..         MOV       R0,#?V4
   \   0001C5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001C8   A9..         MOV       R1,?V3
   \   0001CA   7410         MOV       A,#0x10
   \   0001CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CF   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   0001D2   7412         MOV       A,#0x12
   \   0001D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D7   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   0001DA   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0001DD   7409         MOV       A,#0x9
   \   0001DF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E2   E9           MOV       A,R1
   \   0001E3   FE           MOV       R6,A
   1210              zcl_mem_free ( msgBuf );
   \   0001E4                ; Setup parameters for call to function osal_mem_free
   \   0001E4   AA..         MOV       R2,?V6
   \   0001E6   AB..         MOV       R3,?V7
   \   0001E8   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001EB   8002         SJMP      ??zcl_SendCommand_13
   1211            }
   1212            else
   1213            {
   1214              status = ZMemError;
   \                     ??zcl_SendCommand_12:
   \   0001ED   7E10         MOV       R6,#0x10
   1215            }
   1216          
   1217            return ( status );
   \                     ??zcl_SendCommand_13:
   \   0001EF   EE           MOV       A,R6
   \   0001F0   F9           MOV       R1,A
   \                     ??zcl_SendCommand_1:
   \   0001F1   740B         MOV       A,#0xb
   \   0001F3   02....       LJMP      ??Subroutine194_0 & 0xFFFF
   1218          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000003   75..00       MOV       ?V2,#0x0
   \   000006   78..         MOV       R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine212_0
   \   000002                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   12....       LCALL     ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_673:
   \   000003   22           RET
   1219          
   1220          #ifdef ZCL_READ
   1221          /*********************************************************************
   1222           * @fn      zcl_SendRead
   1223           *
   1224           * @brief   Send a Read command
   1225           *
   1226           * @param   srcEP - Application's endpoint
   1227           * @param   dstAddr - destination address
   1228           * @param   clusterID - cluster ID
   1229           * @param   readCmd - read command to be sent
   1230           * @param   direction - direction of the command
   1231           * @param   seqNum - transaction sequence number
   1232           *
   1233           * @return  ZSuccess if OK
   1234           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1235          ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendRead:
   1236                                  uint16 clusterID, zclReadCmd_t *readCmd,
   1237                                  uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
   1238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   00001B   89..         MOV       ?V6,R1
   \   00001D   7413         MOV       A,#0x13
   \   00001F   12....       LCALL     ?XSTACK_DISP0_8
   \   000022   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   1239            uint16 dataLen;
   1240            uint8 *buf;
   1241            uint8 *pBuf;
   1242            ZStatus_t status;
   1243          
   1244            dataLen = readCmd->numAttr * 2; // Attribute ID
   \                     ??CrossCallReturnLabel_549:
   \   000025   85..82       MOV       DPL,?V2
   \   000028   F583         MOV       DPH,A
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   25E0         ADD       A,0xE0 /* A   */
   \   00002D   FE           MOV       R6,A
   \   00002E   E4           CLR       A
   \   00002F   33           RLC       A
   \   000030   FF           MOV       R7,A
   1245          
   1246            buf = zcl_mem_alloc( dataLen );
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   EE           MOV       A,R6
   \   000032   FA           MOV       R2,A
   \   000033   EF           MOV       A,R7
   \   000034   FB           MOV       R3,A
   \   000035   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000038   8A..         MOV       ?V0,R2
   \   00003A   8B..         MOV       ?V1,R3
   1247            if ( buf != NULL )
   \   00003C   EA           MOV       A,R2
   \   00003D   45..         ORL       A,?V1
   \   00003F   7003         JNZ       $+5
   \   000041   02....       LJMP      ??zcl_SendRead_0 & 0xFFFF
   1248            {
   1249              uint8 i;
   1250          
   1251              // Load the buffer - serially
   1252              pBuf = buf;
   \   000044   A8..         MOV       R0,?V0
   \   000046   A9..         MOV       R1,?V1
   1253              for (i = 0; i < readCmd->numAttr; i++)
   \   000048   7C00         MOV       R4,#0x0
   \   00004A   8023         SJMP      ??zcl_SendRead_1
   1254              {
   1255                *pBuf++ = LO_UINT16( readCmd->attrID[i] );
   \                     ??zcl_SendRead_2:
   \   00004C   EC           MOV       A,R4
   \   00004D   25E0         ADD       A,0xE0 /* A   */
   \   00004F   FA           MOV       R2,A
   \   000050   E4           CLR       A
   \   000051   33           RLC       A
   \   000052   FB           MOV       R3,A
   \   000053   E5..         MOV       A,?V2
   \   000055   2A           ADD       A,R2
   \   000056   F582         MOV       DPL,A
   \   000058   E5..         MOV       A,?V3
   \   00005A   12....       LCALL     ?Subroutine137 & 0xFFFF
   1256                *pBuf++ = HI_UINT16( readCmd->attrID[i] );
   1257              }
   \                     ??CrossCallReturnLabel_252:
   \   00005D   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000060   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000063   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000066   F0           MOVX      @DPTR,A
   \   000067   E8           MOV       A,R0
   \   000068   2402         ADD       A,#0x2
   \   00006A   F8           MOV       R0,A
   \   00006B   5001         JNC       ??zcl_SendRead_3
   \   00006D   09           INC       R1
   \                     ??zcl_SendRead_3:
   \   00006E   0C           INC       R4
   \                     ??zcl_SendRead_1:
   \   00006F   85..82       MOV       DPL,?V2
   \   000072   85..83       MOV       DPH,?V3
   \   000075   E0           MOVX      A,@DPTR
   \   000076   FA           MOV       R2,A
   \   000077   EC           MOV       A,R4
   \   000078   C3           CLR       C
   \   000079   9A           SUBB      A,R2
   \   00007A   40D0         JC        ??zcl_SendRead_2
   1258          
   1259              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
   1260                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00007C                ; Setup parameters for call to function zcl_SendCommand
   \   00007C   78..         MOV       R0,#?V0
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   8E..         MOV       ?V2,R6
   \   000083   8F..         MOV       ?V3,R7
   \   000085   78..         MOV       R0,#?V2
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   741B         MOV       A,#0x1b
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000095   E4           CLR       A
   \   000096   F5..         MOV       ?V2,A
   \   000098   F5..         MOV       ?V3,A
   \   00009A   78..         MOV       R0,#?V2
   \   00009C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009F   741D         MOV       A,#0x1d
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AA   741D         MOV       A,#0x1d
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B5   75..00       MOV       ?V2,#0x0
   \   0000B8   78..         MOV       R0,#?V2
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BD   78..         MOV       R0,#?V2
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   740B         MOV       A,#0xb
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   0000CA   740D         MOV       A,#0xd
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   0000D2   A9..         MOV       R1,?V6
   \   0000D4   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000D7   740B         MOV       A,#0xb
   \   0000D9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV       A,R1
   \   0000DD   FE           MOV       R6,A
   1261              zcl_mem_free( buf );
   \   0000DE                ; Setup parameters for call to function osal_mem_free
   \   0000DE   AA..         MOV       R2,?V0
   \   0000E0   AB..         MOV       R3,?V1
   \   0000E2   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000E5   8002         SJMP      ??zcl_SendRead_4
   1262            }
   1263            else
   1264            {
   1265              status = ZMemError;
   \                     ??zcl_SendRead_0:
   \   0000E7   7E10         MOV       R6,#0x10
   1266            }
   1267          
   1268            return ( status );
   \                     ??zcl_SendRead_4:
   \   0000E9   EE           MOV       A,R6
   \   0000EA   F9           MOV       R1,A
   \   0000EB   7404         MOV       A,#0x4
   \   0000ED   02....       LJMP      ??Subroutine241_0 & 0xFFFF
   1269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8882         MOV       DPL,R0
   \   000003   8983         MOV       DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   3B           ADDC      A,R3
   \   000001   F583         MOV       DPH,A
   \   000003   A3           INC       DPTR
   \   000004   AA82         MOV       R2,DPL
   \   000006   AB83         MOV       R3,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V2,A
   \   000003   78..         MOV       R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine242_0
   \   000003                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   7F07         MOV       R7,#0x7
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
   1270          
   1271          /*********************************************************************
   1272           * @fn      zcl_SendReadRsp
   1273           *
   1274           * @brief   Send a Read Response command.
   1275           *
   1276           * @param   srcEP - Application's endpoint
   1277           * @param   dstAddr - destination address
   1278           * @param   clusterID - cluster ID
   1279           * @param   readRspCmd - read response command to be sent
   1280           * @param   direction - direction of the command
   1281           * @param   seqNum - transaction sequence number
   1282           *
   1283           * @return  ZSuccess if OK
   1284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1285          ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendReadRsp:
   1286                                     uint16 clusterID, zclReadRspCmd_t *readRspCmd,
   1287                                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1288          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine18 & 0xFFFF
   1289            uint8 *buf;
   1290            uint16 len = 0;
   \                     ??CrossCallReturnLabel_16:
   \   000012   7E00         MOV       R6,#0x0
   \   000014   7F00         MOV       R7,#0x0
   1291            ZStatus_t status;
   1292            uint8 i;
   1293          
   1294            // calculate the size of the command
   1295            for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000016   75..00       MOV       ?V2,#0x0
   \   000019   801A         SJMP      ??zcl_SendReadRsp_0
   1296            {
   1297              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1298          
   1299              len += 2 + 1; // Attribute ID + Status
   1300          
   1301              if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1302              {
   1303                len++; // Attribute Data Type length
   1304          
   1305                // Attribute Data length
   1306                if ( statusRec->data != NULL )
   1307                {
   1308                  len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
   1309                }
   1310                else
   1311                {
   1312                  len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
   \                     ??zcl_SendReadRsp_1:
   \   00001B                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   00001B   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   1313                }
   \                     ??CrossCallReturnLabel_509:
   \   00001E   85..82       MOV       DPL,?XSP + 0
   \   000021   85..83       MOV       DPH,?XSP + 1
   \   000024   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000027   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zcl_SendReadRsp_2:
   \   00002A   8B..         MOV       ?V1,R3
   \   00002C   EE           MOV       A,R6
   \   00002D   2A           ADD       A,R2
   \   00002E   FE           MOV       R6,A
   \   00002F   EF           MOV       A,R7
   \   000030   35..         ADDC      A,?V1
   \   000032   FF           MOV       R7,A
   \                     ??zcl_SendReadRsp_3:
   \   000033   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_0:
   \   000035   7416         MOV       A,#0x16
   \   000037   12....       LCALL     ?XSTACK_DISP0_8
   \   00003A   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   00003D   5041         JNC       ??zcl_SendReadRsp_4
   \   00003F   E5..         MOV       A,?V2
   \   000041   75F006       MOV       B,#0x6
   \   000044   A4           MUL       AB
   \   000045   F8           MOV       R0,A
   \   000046   A9F0         MOV       R1,B
   \   000048   7416         MOV       A,#0x16
   \   00004A   12....       LCALL     ?XSTACK_DISP0_8
   \   00004D   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000050   A882         MOV       R0,DPL
   \   000052   A983         MOV       R1,DPH
   \   000054   EE           MOV       A,R6
   \   000055   2403         ADD       A,#0x3
   \   000057   FE           MOV       R6,A
   \   000058   E4           CLR       A
   \   000059   3F           ADDC      A,R7
   \   00005A   FF           MOV       R7,A
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   70D3         JNZ       ??zcl_SendReadRsp_3
   \   000060   0E           INC       R6
   \   000061   EE           MOV       A,R6
   \   000062   7001         JNZ       ??zcl_SendReadRsp_5
   \   000064   0F           INC       R7
   \                     ??zcl_SendReadRsp_5:
   \   000065   8882         MOV       DPL,R0
   \   000067   8983         MOV       DPH,R1
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   000070   8882         MOV       DPL,R0
   \   000072   8983         MOV       DPH,R1
   \   000074   60A5         JZ        ??zcl_SendReadRsp_1
   \   000076                ; Setup parameters for call to function zclGetAttrDataLength
   \   000076   A3           INC       DPTR
   \   000077   A3           INC       DPTR
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   F9           MOV       R1,A
   \   00007B   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00007E   80AA         SJMP      ??zcl_SendReadRsp_2
   1314              }
   1315            }
   1316          
   1317            buf = zcl_mem_alloc( len );
   \                     ??zcl_SendReadRsp_4:
   \   000080                ; Setup parameters for call to function osal_mem_alloc
   \   000080   EE           MOV       A,R6
   \   000081   FA           MOV       R2,A
   \   000082   EF           MOV       A,R7
   \   000083   FB           MOV       R3,A
   \   000084   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000087   8A..         MOV       ?V0,R2
   \   000089   8B..         MOV       ?V1,R3
   \   00008B   8A..         MOV       ?V6,R2
   \   00008D   8B..         MOV       ?V7,R3
   1318            if ( buf != NULL )
   \   00008F   EA           MOV       A,R2
   \   000090   45..         ORL       A,?V7
   \   000092   7003         JNZ       $+5
   \   000094   02....       LJMP      ??zcl_SendReadRsp_6 & 0xFFFF
   1319            {
   1320              // Load the buffer - serially
   1321              uint8 *pBuf = buf;
   1322          
   1323              for ( i = 0; i < readRspCmd->numAttr; i++ )
   \   000097   75..00       MOV       ?V2,#0x0
   \   00009A   803C         SJMP      ??zcl_SendReadRsp_7
   1324              {
   1325                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   1326          
   1327                *pBuf++ = LO_UINT16( statusRec->attrID );
   1328                *pBuf++ = HI_UINT16( statusRec->attrID );
   1329                *pBuf++ = statusRec->status;
   1330          
   1331                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   1332                {
   1333                  *pBuf++ = statusRec->dataType;
   1334          
   1335                  if ( statusRec->data != NULL )
   1336                  {
   1337                    // Copy attribute data to the buffer to be sent out
   1338                    pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
   1339                  }
   1340                  else
   1341                  {
   1342                    uint16 dataLen;
   1343          
   1344                    // Read attribute data directly into the buffer to be sent out
   1345                    zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
   \                     ??zcl_SendReadRsp_8:
   \   00009C                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   00009C   7402         MOV       A,#0x2
   \   00009E   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A1   88..         MOV       ?V4,R0
   \   0000A3   89..         MOV       ?V5,R1
   \   0000A5   78..         MOV       R0,#?V4
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   78..         MOV       R0,#?V0
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AF   8A82         MOV       DPL,R2
   \   0000B1   8B83         MOV       DPH,R3
   \   0000B3   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   0000BC   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   0000BF   7404         MOV       A,#0x4
   \   0000C1   12....       LCALL     ?DEALLOC_XSTACK8
   1346                    pBuf += dataLen;
   \   0000C4   7402         MOV       A,#0x2
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   1347                  }
   \                     ??CrossCallReturnLabel_556:
   \   0000CC   E5..         MOV       A,?V0
   \   0000CE   28           ADD       A,R0
   \   0000CF   F5..         MOV       ?V0,A
   \   0000D1   E5..         MOV       A,?V1
   \   0000D3   39           ADDC      A,R1
   \   0000D4   F5..         MOV       ?V1,A
   \                     ??zcl_SendReadRsp_9:
   \   0000D6   05..         INC       ?V2
   \                     ??zcl_SendReadRsp_7:
   \   0000D8   7416         MOV       A,#0x16
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   12....       LCALL     ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   0000E0   507D         JNC       ??zcl_SendReadRsp_10
   \   0000E2   E5..         MOV       A,?V2
   \   0000E4   75F006       MOV       B,#0x6
   \   0000E7   A4           MUL       AB
   \   0000E8   F8           MOV       R0,A
   \   0000E9   A9F0         MOV       R1,B
   \   0000EB   7416         MOV       A,#0x16
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0000F3   85..82       MOV       DPL,?V0
   \   0000F6   85..83       MOV       DPH,?V1
   \   0000F9   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000FC   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   0000FF   F0           MOVX      @DPTR,A
   \   000100   12....       LCALL     ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000103   12....       LCALL     ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000106   A3           INC       DPTR
   \   000107   F0           MOVX      @DPTR,A
   \   000108   E5..         MOV       A,?V0
   \   00010A   2403         ADD       A,#0x3
   \   00010C   F5..         MOV       ?V0,A
   \   00010E   5002         JNC       ??zcl_SendReadRsp_11
   \   000110   05..         INC       ?V1
   \                     ??zcl_SendReadRsp_11:
   \   000112   8882         MOV       DPL,R0
   \   000114   8983         MOV       DPH,R1
   \   000116   E0           MOVX      A,@DPTR
   \   000117   70BD         JNZ       ??zcl_SendReadRsp_9
   \   000119   EA           MOV       A,R2
   \   00011A   2403         ADD       A,#0x3
   \   00011C   08           INC       R0
   \   00011D   E4           CLR       A
   \   00011E   3B           ADDC      A,R3
   \   00011F   F9           MOV       R1,A
   \   000120   8882         MOV       DPL,R0
   \   000122   8983         MOV       DPH,R1
   \   000124   E0           MOVX      A,@DPTR
   \   000125   85..82       MOV       DPL,?V0
   \   000128   85..83       MOV       DPH,?V1
   \   00012B   F0           MOVX      @DPTR,A
   \   00012C   A3           INC       DPTR
   \   00012D   8582..       MOV       ?V0,DPL
   \   000130   8583..       MOV       ?V1,DPH
   \   000133   8A82         MOV       DPL,R2
   \   000135   8B83         MOV       DPH,R3
   \   000137   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   00013A   8C82         MOV       DPL,R4
   \   00013C   8D83         MOV       DPH,R5
   \   00013E   E582         MOV       A,DPL
   \   000140   4583         ORL       A,DPH
   \   000142   7003         JNZ       $+5
   \   000144   02....       LJMP      ??zcl_SendReadRsp_8 & 0xFFFF
   \   000147                ; Setup parameters for call to function zclSerializeData
   \   000147   AC..         MOV       R4,?V0
   \   000149   AD..         MOV       R5,?V1
   \   00014B   AA82         MOV       R2,DPL
   \   00014D   AB83         MOV       R3,DPH
   \   00014F   8882         MOV       DPL,R0
   \   000151   8983         MOV       DPH,R1
   \   000153   E0           MOVX      A,@DPTR
   \   000154   F9           MOV       R1,A
   \   000155   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   000158   8A..         MOV       ?V0,R2
   \   00015A   8B..         MOV       ?V1,R3
   \   00015C   02....       LJMP      ??zcl_SendReadRsp_9 & 0xFFFF
   1348                }
   1349              } // for loop
   1350          
   1351              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
   1352                                        direction, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zcl_SendReadRsp_10:
   \   00015F                ; Setup parameters for call to function zcl_SendCommand
   \   00015F   78..         MOV       R0,#?V6
   \   000161   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000164   8E..         MOV       ?V0,R6
   \   000166   8F..         MOV       ?V1,R7
   \   000168   78..         MOV       R0,#?V0
   \   00016A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016D   741E         MOV       A,#0x1e
   \   00016F   12....       LCALL     ?XSTACK_DISP0_8
   \   000172   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000175   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000178   E4           CLR       A
   \   000179   F5..         MOV       ?V0,A
   \   00017B   F5..         MOV       ?V1,A
   \   00017D   78..         MOV       R0,#?V0
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000182   7420         MOV       A,#0x20
   \   000184   12....       LCALL     ?XSTACK_DISP0_8
   \   000187   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00018A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018D   7420         MOV       A,#0x20
   \   00018F   12....       LCALL     ?XSTACK_DISP0_8
   \   000192   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000195   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000198   75..00       MOV       ?V0,#0x0
   \   00019B   78..         MOV       R0,#?V0
   \   00019D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A0   75..01       MOV       ?V0,#0x1
   \   0001A3   78..         MOV       R0,#?V0
   \   0001A5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A8   740B         MOV       A,#0xb
   \   0001AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AD   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   0001B0   740F         MOV       A,#0xf
   \   0001B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B5   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   0001B8   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0001BB   740B         MOV       A,#0xb
   \   0001BD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C0   E9           MOV       A,R1
   \   0001C1   FE           MOV       R6,A
   1353              zcl_mem_free( buf );
   \   0001C2                ; Setup parameters for call to function osal_mem_free
   \   0001C2   AA..         MOV       R2,?V6
   \   0001C4   AB..         MOV       R3,?V7
   \   0001C6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001C9   8002         SJMP      ??zcl_SendReadRsp_12
   1354            }
   1355            else
   1356            {
   1357              status = ZMemError;
   \                     ??zcl_SendReadRsp_6:
   \   0001CB   7E10         MOV       R6,#0x10
   1358            }
   1359          
   1360            return ( status );
   \                     ??zcl_SendReadRsp_12:
   \   0001CD   EE           MOV       A,R6
   \   0001CE   F9           MOV       R1,A
   \   0001CF   02....       LJMP      ??Subroutine193_0 & 0xFFFF
   1361          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   000003   F8           MOV       R0,A
   \   000004   E5..         MOV       A,?V2
   \   000006   C3           CLR       C
   \   000007   98           SUBB      A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   000003   A9..         MOV       R1,?V3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_656:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   EC           MOV       A,R4
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   ED           MOV       A,R5
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   89..         MOV       ?V3,R1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   7406         MOV       A,#0x6
   \   000002                REQUIRE ??Subroutine194_0
   \   000002                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   EA           MOV       A,R2
   \   000001   2402         ADD       A,#0x2
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   3B           ADDC      A,R3
   \   000006   F9           MOV       R1,A
   \   000007   8882         MOV       DPL,R0
   \   000009   8983         MOV       DPH,R1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   AA82         MOV       R2,DPL
   \   000005   AB83         MOV       R3,DPH
   \   000007   E0           MOVX      A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   FA           MOV       R2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   8A82         MOV       DPL,R2
   \   000008   F583         MOV       DPH,A
   \   00000A   A3           INC       DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_574:
   \   000003   22           RET
   1362          #endif // ZCL_READ
   1363          
   1364          #ifdef ZCL_WRITE
   1365          /*********************************************************************
   1366           * @fn      sendWriteRequest
   1367           *
   1368           * @brief   Send a Write command
   1369           *
   1370           * @param   dstAddr - destination address
   1371           * @param   clusterID - cluster ID
   1372           * @param   writeCmd - write command to be sent
   1373           * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
   1374           * @param   direction - direction of the command
   1375           * @param   seqNum - transaction sequence number
   1376           *
   1377           * @return  ZSuccess if OK
   1378           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1379          ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendWriteRequest:
   1380                                          zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
   1381                                          uint8 disableDefaultRsp, uint8 seqNum )
   1382          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7403         MOV       A,#0x3
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine36 & 0xFFFF
   1383            uint8 *buf;
   1384            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_347:
   \   000020   7E00         MOV       R6,#0x0
   \   000022   7F00         MOV       R7,#0x0
   1385            ZStatus_t status;
   1386            uint8 i;
   1387          
   1388            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000024   75..00       MOV       ?V0,#0x0
   \   000027   7415         MOV       A,#0x15
   \   000029   12....       LCALL     ?XSTACK_DISP0_8
   \   00002C   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00002F   8024         SJMP      ??zcl_SendWriteRequest_0
   1389            {
   1390              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_1:
   \   000031   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000034   A882         MOV       R0,DPL
   \   000036   A983         MOV       R1,DPH
   1391          
   1392              dataLen += 2 + 1; // Attribute ID + Attribute Type
   1393          
   1394              // Attribute Data
   1395              dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
   \   000038                ; Setup parameters for call to function zclGetAttrDataLength
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   12....       LCALL     ?Subroutine66 & 0xFFFF
   1396            }
   \                     ??CrossCallReturnLabel_119:
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   F9           MOV       R1,A
   \   000040   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000043   8B..         MOV       ?V3,R3
   \   000045   EA           MOV       A,R2
   \   000046   2403         ADD       A,#0x3
   \   000048   F8           MOV       R0,A
   \   000049   E4           CLR       A
   \   00004A   35..         ADDC      A,?V3
   \   00004C   F9           MOV       R1,A
   \   00004D   EE           MOV       A,R6
   \   00004E   28           ADD       A,R0
   \   00004F   FE           MOV       R6,A
   \   000050   EF           MOV       A,R7
   \   000051   39           ADDC      A,R1
   \   000052   FF           MOV       R7,A
   \   000053   05..         INC       ?V0
   \                     ??zcl_SendWriteRequest_0:
   \   000055   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_678:
   \   000058   40D7         JC        ??zcl_SendWriteRequest_1
   1397          
   1398            buf = zcl_mem_alloc( dataLen );
   \   00005A                ; Setup parameters for call to function osal_mem_alloc
   \   00005A   EE           MOV       A,R6
   \   00005B   FA           MOV       R2,A
   \   00005C   EF           MOV       A,R7
   \   00005D   FB           MOV       R3,A
   \   00005E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000061   8A..         MOV       ?V2,R2
   \   000063   8B..         MOV       ?V3,R3
   1399            if ( buf != NULL )
   \   000065   EA           MOV       A,R2
   \   000066   45..         ORL       A,?V3
   \   000068   7003         JNZ       $+5
   \   00006A   02....       LJMP      ??zcl_SendWriteRequest_2 & 0xFFFF
   1400            {
   1401              // Load the buffer - serially
   1402              uint8 *pBuf = buf;
   1403              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   00006D   75..00       MOV       ?V0,#0x0
   \   000070   8039         SJMP      ??zcl_SendWriteRequest_3
   1404              {
   1405                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zcl_SendWriteRequest_4:
   \   000072   12....       LCALL     ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000075   8582..       MOV       ?V4,DPL
   \   000078   8583..       MOV       ?V5,DPH
   1406          
   1407                *pBuf++ = LO_UINT16( statusRec->attrID );
   \   00007B   12....       LCALL     ?Subroutine20 & 0xFFFF
   1408                *pBuf++ = HI_UINT16( statusRec->attrID );
   1409                *pBuf++ = statusRec->dataType;
   \                     ??CrossCallReturnLabel_20:
   \   00007E   E5..         MOV       A,?V4
   \   000080   2402         ADD       A,#0x2
   \   000082   F8           MOV       R0,A
   \   000083   E4           CLR       A
   \   000084   35..         ADDC      A,?V5
   \   000086   F9           MOV       R1,A
   \   000087   8882         MOV       DPL,R0
   \   000089   8983         MOV       DPH,R1
   \   00008B   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   00008E   A3           INC       DPTR
   \   00008F   F0           MOVX      @DPTR,A
   1410          
   1411                pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
   \   000090                ; Setup parameters for call to function zclSerializeData
   \   000090   EA           MOV       A,R2
   \   000091   2403         ADD       A,#0x3
   \   000093   FC           MOV       R4,A
   \   000094   E4           CLR       A
   \   000095   3B           ADDC      A,R3
   \   000096   FD           MOV       R5,A
   \   000097   85..82       MOV       DPL,?V4
   \   00009A   85..83       MOV       DPH,?V5
   \   00009D   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   1412              }
   \                     ??CrossCallReturnLabel_415:
   \   0000A0   8882         MOV       DPL,R0
   \   0000A2   8983         MOV       DPH,R1
   \   0000A4   E0           MOVX      A,@DPTR
   \   0000A5   F9           MOV       R1,A
   \   0000A6   12....       LCALL     `??zclSerializeData::?relay`; Banked call to: zclSerializeData
   \   0000A9   05..         INC       ?V0
   \                     ??zcl_SendWriteRequest_3:
   \   0000AB   12....       LCALL     ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_679:
   \   0000AE   40C2         JC        ??zcl_SendWriteRequest_4
   1413          
   1414              status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
   1415                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   0000B0                ; Setup parameters for call to function zcl_SendCommand
   \   0000B0   78..         MOV       R0,#?V2
   \   0000B2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B5   8E..         MOV       ?V0,R6
   \   0000B7   8F..         MOV       ?V1,R7
   \   0000B9   78..         MOV       R0,#?V0
   \   0000BB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BE   741E         MOV       A,#0x1e
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C9   E4           CLR       A
   \   0000CA   F5..         MOV       ?V0,A
   \   0000CC   F5..         MOV       ?V1,A
   \   0000CE   78..         MOV       R0,#?V0
   \   0000D0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D3   7420         MOV       A,#0x20
   \   0000D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000DB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DE   7420         MOV       A,#0x20
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000E6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E9   75..00       MOV       ?V0,#0x0
   \   0000EC   78..         MOV       R0,#?V0
   \   0000EE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F1   7421         MOV       A,#0x21
   \   0000F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F6   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   0000F9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FC   740C         MOV       A,#0xc
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000104   12....       LCALL     ?XSTACK_DISP0_8
   \   000107   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   F9           MOV       R1,A
   \   00010F   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000112   740B         MOV       A,#0xb
   \   000114   12....       LCALL     ?DEALLOC_XSTACK8
   \   000117   E9           MOV       A,R1
   \   000118   FE           MOV       R6,A
   1416              zcl_mem_free( buf );
   \   000119                ; Setup parameters for call to function osal_mem_free
   \   000119   AA..         MOV       R2,?V2
   \   00011B   AB..         MOV       R3,?V3
   \   00011D   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000120   8002         SJMP      ??zcl_SendWriteRequest_5
   1417            }
   1418            else
   1419            {
   1420              status = ZMemError;
   \                     ??zcl_SendWriteRequest_2:
   \   000122   7E10         MOV       R6,#0x10
   1421            }
   1422          
   1423            return ( status);
   \                     ??zcl_SendWriteRequest_5:
   \   000124                REQUIRE ?Subroutine7
   \   000124                ; // Fall through to label ?Subroutine7
   1424          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   EE           MOV       A,R6
   \   000001   F9           MOV       R1,A
   \   000002   7405         MOV       A,#0x5
   \   000004   02....       LJMP      ??Subroutine194_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   E5..         MOV       A,?V0
   \   000002   75F005       MOV       B,#0x5
   \   000005   A4           MUL       AB
   \   000006   F8           MOV       R0,A
   \   000007   A9F0         MOV       R1,B
   \   000009   E5..         MOV       A,?V6
   \   00000B   28           ADD       A,R0
   \   00000C   F582         MOV       DPL,A
   \   00000E   E5..         MOV       A,?V7
   \   000010   39           ADDC      A,R1
   \   000011   F583         MOV       DPH,A
   \   000013   A3           INC       DPTR
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   000003   740E         MOV       A,#0xe
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_648:
   \   000003   740B         MOV       A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_660:
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000003   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000006   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine208_0
   \   000002                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine209_0
   \   000001                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V4
   \   000004   85..83       MOV       DPH,?V5
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V6,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V7,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   85..82       MOV       DPL,?V6
   \   000003   85..83       MOV       DPH,?V7
   \   000006                REQUIRE ??Subroutine245_0
   \   000006                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   E5..         MOV       A,?V0
   \   000004   C3           CLR       C
   \   000005   98           SUBB      A,R0
   \   000006   22           RET
   1425          
   1426          /*********************************************************************
   1427           * @fn      zcl_SendWriteRsp
   1428           *
   1429           * @brief   Send a Write Response command
   1430           *
   1431           * @param   dstAddr - destination address
   1432           * @param   clusterID - cluster ID
   1433           * @param   wrtieRspCmd - write response command to be sent
   1434           * @param   direction - direction of the command
   1435           * @param   seqNum - transaction sequence number
   1436           *
   1437           * @return  ZSuccess if OK
   1438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1439          ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendWriteRsp:
   1440                                      uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
   1441                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1442          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7401         MOV       A,#0x1
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   00001A   8C..         MOV       ?V6,R4
   \   00001C   8D..         MOV       ?V7,R5
   \   00001E   7413         MOV       A,#0x13
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   12....       LCALL     ?Subroutine94 & 0xFFFF
   1443            uint16 dataLen;
   1444            uint8 *buf;
   1445            ZStatus_t status;
   1446          
   1447            dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
   \                     ??CrossCallReturnLabel_173:
   \   000026   E0           MOVX      A,@DPTR
   \   000027   75F003       MOV       B,#0x3
   \   00002A   A4           MUL       AB
   \   00002B   FE           MOV       R6,A
   \   00002C   AFF0         MOV       R7,B
   1448          
   1449            buf = zcl_mem_alloc( dataLen );
   \   00002E                ; Setup parameters for call to function osal_mem_alloc
   \   00002E   FA           MOV       R2,A
   \   00002F   EF           MOV       A,R7
   \   000030   FB           MOV       R3,A
   \   000031   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000034   8A..         MOV       ?V2,R2
   \   000036   8B..         MOV       ?V3,R3
   1450            if ( buf != NULL )
   \   000038   EA           MOV       A,R2
   \   000039   45..         ORL       A,?V3
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??zcl_SendWriteRsp_0 & 0xFFFF
   1451            {
   1452              // Load the buffer - serially
   1453              uint8 i;
   1454              uint8 *pBuf = buf;
   \   000040   A8..         MOV       R0,?V2
   \   000042   A9..         MOV       R1,?V3
   1455              for ( i = 0; i < writeRspCmd->numAttr; i++ )
   \   000044   7A00         MOV       R2,#0x0
   \   000046   8034         SJMP      ??zcl_SendWriteRsp_1
   1456              {
   1457                *pBuf++ = writeRspCmd->attrList[i].status;
   \                     ??zcl_SendWriteRsp_2:
   \   000048   EA           MOV       A,R2
   \   000049   75F003       MOV       B,#0x3
   \   00004C   A4           MUL       AB
   \   00004D   FC           MOV       R4,A
   \   00004E   ADF0         MOV       R5,B
   \   000050   E5..         MOV       A,?V0
   \   000052   2C           ADD       A,R4
   \   000053   FC           MOV       R4,A
   \   000054   E5..         MOV       A,?V1
   \   000056   3D           ADDC      A,R5
   \   000057   FD           MOV       R5,A
   \   000058   8C82         MOV       DPL,R4
   \   00005A   8D83         MOV       DPH,R5
   \   00005C   A3           INC       DPTR
   \   00005D   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000060   F0           MOVX      @DPTR,A
   1458                *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
   \   000061   EC           MOV       A,R4
   \   000062   2402         ADD       A,#0x2
   \   000064   FC           MOV       R4,A
   \   000065   5001         JNC       ??zcl_SendWriteRsp_3
   \   000067   0D           INC       R5
   \                     ??zcl_SendWriteRsp_3:
   \   000068   8C82         MOV       DPL,R4
   \   00006A   8D83         MOV       DPH,R5
   \   00006C   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   00006F   F0           MOVX      @DPTR,A
   1459                *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
   \   000070   8C82         MOV       DPL,R4
   \   000072   8D83         MOV       DPH,R5
   \   000074   A3           INC       DPTR
   \   000075   12....       LCALL     ?Subroutine95 & 0xFFFF
   1460              }
   \                     ??CrossCallReturnLabel_175:
   \   000078   5001         JNC       ??zcl_SendWriteRsp_4
   \   00007A   09           INC       R1
   \                     ??zcl_SendWriteRsp_4:
   \   00007B   0A           INC       R2
   \                     ??zcl_SendWriteRsp_1:
   \   00007C   85..82       MOV       DPL,?V0
   \   00007F   85..83       MOV       DPH,?V1
   \   000082   E0           MOVX      A,@DPTR
   \   000083   FB           MOV       R3,A
   \   000084   EA           MOV       A,R2
   \   000085   C3           CLR       C
   \   000086   9B           SUBB      A,R3
   \   000087   40BF         JC        ??zcl_SendWriteRsp_2
   1461          
   1462              // If there's only a single status record and its status field is set to
   1463              // SUCCESS then omit the attribute ID field.
   1464              if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   \   000089   7401         MOV       A,#0x1
   \   00008B   6B           XRL       A,R3
   \   00008C   7008         JNZ       ??zcl_SendWriteRsp_5
   \   00008E   A3           INC       DPTR
   \   00008F   E0           MOVX      A,@DPTR
   \   000090   7004         JNZ       ??zcl_SendWriteRsp_5
   1465              {
   1466                dataLen = 1;
   \   000092   7E01         MOV       R6,#0x1
   \   000094   7F00         MOV       R7,#0x0
   1467              }
   1468          
   1469              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
   1470                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \                     ??zcl_SendWriteRsp_5:
   \   000096                ; Setup parameters for call to function zcl_SendCommand
   \   000096   78..         MOV       R0,#?V2
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   8E..         MOV       ?V0,R6
   \   00009D   8F..         MOV       ?V1,R7
   \   00009F   78..         MOV       R0,#?V0
   \   0000A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A4   741B         MOV       A,#0x1b
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000AC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AF   E4           CLR       A
   \   0000B0   F5..         MOV       ?V0,A
   \   0000B2   F5..         MOV       ?V1,A
   \   0000B4   78..         MOV       R0,#?V0
   \   0000B6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B9   741D         MOV       A,#0x1d
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C4   741D         MOV       A,#0x1d
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CF   75..00       MOV       ?V0,#0x0
   \   0000D2   78..         MOV       R0,#?V0
   \   0000D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D7   75..04       MOV       ?V0,#0x4
   \   0000DA   78..         MOV       R0,#?V0
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DF   AC..         MOV       R4,?V6
   \   0000E1   AD..         MOV       R5,?V7
   \   0000E3   740C         MOV       A,#0xc
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   0000EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EE   E0           MOVX      A,@DPTR
   \   0000EF   F9           MOV       R1,A
   \   0000F0   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000F3   740B         MOV       A,#0xb
   \   0000F5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F8   E9           MOV       A,R1
   \   0000F9   FE           MOV       R6,A
   1471              zcl_mem_free( buf );
   \   0000FA                ; Setup parameters for call to function osal_mem_free
   \   0000FA   AA..         MOV       R2,?V2
   \   0000FC   AB..         MOV       R3,?V3
   \   0000FE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000101   8002         SJMP      ??zcl_SendWriteRsp_6
   1472            }
   1473            else
   1474            {
   1475              status = ZMemError;
   \                     ??zcl_SendWriteRsp_0:
   \   000103   7E10         MOV       R6,#0x10
   1476            }
   1477          
   1478            return ( status );
   \                     ??zcl_SendWriteRsp_6:
   \   000105   EE           MOV       A,R6
   \   000106   F9           MOV       R1,A
   \   000107   7403         MOV       A,#0x3
   \   000109   02....       LJMP      ??Subroutine194_0 & 0xFFFF
   1479          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V1,A
   \   000007   85..82       MOV       DPL,?V0
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000003   A3           INC       DPTR
   \   000004   F0           MOVX      @DPTR,A
   \   000005   E8           MOV       A,R0
   \   000006   2403         ADD       A,#0x3
   \   000008   F8           MOV       R0,A
   \   000009   22           RET
   1480          #endif // ZCL_WRITE
   1481          
   1482          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1483          /*********************************************************************
   1484           * @fn      zcl_SendConfigReportCmd
   1485           *
   1486           * @brief   Send a Configure Reporting command
   1487           *
   1488           * @param   dstAddr - destination address
   1489           * @param   clusterID - cluster ID
   1490           * @param   cfgReportCmd - configure reporting command to be sent
   1491           * @param   direction - direction of the command
   1492           * @param   seqNum - transaction sequence number
   1493           *
   1494           * @return  ZSuccess if OK
   1495           */
   1496          ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1497                                    uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
   1498                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1499          {
   1500            uint8 *buf;
   1501            uint16 dataLen = 0;
   1502            ZStatus_t status;
   1503            uint8 i;
   1504          
   1505            // Find out the data length
   1506            for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1507            {
   1508              zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1509          
   1510              dataLen += 1 + 2; // Direction + Attribute ID
   1511          
   1512              if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1513              {
   1514                dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1515          
   1516                // Find out the size of the Reportable Change field (for Analog data types)
   1517                if ( zclAnalogDataType( reportRec->dataType ) )
   1518                {
   1519                  dataLen += zclGetDataTypeLength( reportRec->dataType );
   1520                }
   1521              }
   1522              else
   1523              {
   1524                dataLen += 2; // Timeout Period
   1525              }
   1526            }
   1527          
   1528            buf = zcl_mem_alloc( dataLen );
   1529            if ( buf != NULL )
   1530            {
   1531              // Load the buffer - serially
   1532              uint8 *pBuf = buf;
   1533          
   1534              for ( i = 0; i < cfgReportCmd->numAttr; i++ )
   1535              {
   1536                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   1537          
   1538                *pBuf++ = reportRec->direction;
   1539                *pBuf++ = LO_UINT16( reportRec->attrID );
   1540                *pBuf++ = HI_UINT16( reportRec->attrID );
   1541          
   1542                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   1543                {
   1544                  *pBuf++ = reportRec->dataType;
   1545                  *pBuf++ = LO_UINT16( reportRec->minReportInt );
   1546                  *pBuf++ = HI_UINT16( reportRec->minReportInt );
   1547                  *pBuf++ = LO_UINT16( reportRec->maxReportInt );
   1548                  *pBuf++ = HI_UINT16( reportRec->maxReportInt );
   1549          
   1550                  if ( zclAnalogDataType( reportRec->dataType ) )
   1551                  {
   1552                    pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
   1553                  }
   1554                }
   1555                else
   1556                {
   1557                  *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
   1558                  *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
   1559                }
   1560              } // for loop
   1561          
   1562              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
   1563                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1564              zcl_mem_free( buf );
   1565            }
   1566            else
   1567            {
   1568              status = ZMemError;
   1569            }
   1570          
   1571            return ( status );
   1572          }
   1573          #endif
   1574          
   1575          #ifdef ZCL_REPORTING_DEVICE
   1576          /*********************************************************************
   1577           * @fn      zcl_SendConfigReportRspCmd
   1578           *
   1579           * @brief   Send a Configure Reporting Response command
   1580           *
   1581           * @param   dstAddr - destination address
   1582           * @param   clusterID - cluster ID
   1583           * @param   cfgReportRspCmd - configure reporting response command to be sent
   1584           * @param   direction - direction of the command
   1585           * @param   seqNum - transaction sequence number
   1586           *
   1587           * @return  ZSuccess if OK
   1588           */
   1589          ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1590                              uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
   1591                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1592          {
   1593            uint16 dataLen;
   1594            uint8 *buf;
   1595            ZStatus_t status;
   1596          
   1597            // Atrribute list (Status, Direction and Attribute ID)
   1598            dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
   1599          
   1600            buf = zcl_mem_alloc( dataLen );
   1601            if ( buf != NULL )
   1602            {
   1603              // Load the buffer - serially
   1604              uint8 *pBuf = buf;
   1605              uint8 i;
   1606          
   1607              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   1608              {
   1609                *pBuf++ = cfgReportRspCmd->attrList[i].status;
   1610                *pBuf++ = cfgReportRspCmd->attrList[i].direction;
   1611                *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1612                *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
   1613              }
   1614          
   1615              // If there's only a single status record and its status field is set to
   1616              // SUCCESS then omit the attribute ID field.
   1617              if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
   1618              {
   1619                dataLen = 1;
   1620              }
   1621          
   1622              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1623                                        ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
   1624                                        disableDefaultRsp, 0, seqNum, dataLen, buf );
   1625              zcl_mem_free( buf );
   1626            }
   1627            else
   1628            {
   1629              status = ZMemError;
   1630            }
   1631          
   1632            return ( status );
   1633          }
   1634          #endif
   1635          
   1636          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   1637          /*********************************************************************
   1638           * @fn      zcl_SendReadReportCfgCmd
   1639           *
   1640           * @brief   Send a Read Reporting Configuration command
   1641           *
   1642           * @param   dstAddr - destination address
   1643           * @param   clusterID - cluster ID
   1644           * @param   readReportCfgCmd - read reporting configuration command to be sent
   1645           * @param   direction - direction of the command
   1646           * @param   seqNum - transaction sequence number
   1647           *
   1648           * @return  ZSuccess if OK
   1649           */
   1650          ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1651                            uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
   1652                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1653          {
   1654            uint16 dataLen;
   1655            uint8 *buf;
   1656            ZStatus_t status;
   1657          
   1658            dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
   1659          
   1660            buf = zcl_mem_alloc( dataLen );
   1661            if ( buf != NULL )
   1662            {
   1663              // Load the buffer - serially
   1664              uint8 *pBuf = buf;
   1665              uint8 i;
   1666          
   1667              for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
   1668              {
   1669                *pBuf++ = readReportCfgCmd->attrList[i].direction;
   1670                *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
   1671                *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
   1672              }
   1673          
   1674              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
   1675                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1676              zcl_mem_free( buf );
   1677            }
   1678            else
   1679            {
   1680              status = ZMemError;
   1681            }
   1682          
   1683            return ( status );
   1684          }
   1685          #endif
   1686          
   1687          #ifdef ZCL_REPORTING_DEVICE
   1688          /*********************************************************************
   1689           * @fn      zcl_SendReadReportCfgRspCmd
   1690           *
   1691           * @brief   Send a Read Reporting Configuration Response command
   1692           *
   1693           * @param   dstAddr - destination address
   1694           * @param   clusterID - cluster ID
   1695           * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
   1696           * @param   direction - direction of the command
   1697           * @param   seqNum - transaction sequence number
   1698           *
   1699           * @return  ZSuccess if OK
   1700           */
   1701          ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1702                       uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
   1703                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1704          {
   1705            uint8 *buf;
   1706            uint16 dataLen = 0;
   1707            ZStatus_t status;
   1708            uint8 i;
   1709          
   1710            // Find out the data length
   1711            for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1712            {
   1713              zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1714          
   1715              dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
   1716          
   1717              if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1718              {
   1719                if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1720                {
   1721                  dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
   1722          
   1723                  // Find out the size of the Reportable Change field (for Analog data types)
   1724                  if ( zclAnalogDataType( reportRspRec->dataType ) )
   1725                  {
   1726                    dataLen += zclGetDataTypeLength( reportRspRec->dataType );
   1727                  }
   1728                }
   1729                else
   1730                {
   1731                  dataLen += 2; // Timeout Period
   1732                }
   1733              }
   1734            }
   1735          
   1736            buf = zcl_mem_alloc( dataLen );
   1737            if ( buf != NULL )
   1738            {
   1739              // Load the buffer - serially
   1740              uint8 *pBuf = buf;
   1741          
   1742              for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
   1743              {
   1744                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   1745          
   1746                *pBuf++ = reportRspRec->status;
   1747                *pBuf++ = reportRspRec->direction;
   1748                *pBuf++ = LO_UINT16( reportRspRec->attrID );
   1749                *pBuf++ = HI_UINT16( reportRspRec->attrID );
   1750          
   1751                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   1752                {
   1753                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   1754                  {
   1755                    *pBuf++ = reportRspRec->dataType;
   1756                    *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
   1757                    *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
   1758                    *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
   1759                    *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
   1760          
   1761                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   1762                    {
   1763                      pBuf = zclSerializeData( reportRspRec->dataType,
   1764                                               reportRspRec->reportableChange, pBuf );
   1765                    }
   1766                  }
   1767                  else
   1768                  {
   1769                    *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
   1770                    *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
   1771                  }
   1772                }
   1773              }
   1774          
   1775              status = zcl_SendCommand( srcEP, dstAddr, clusterID,
   1776                                        ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
   1777                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1778              zcl_mem_free( buf );
   1779            }
   1780            else
   1781            {
   1782              status = ZMemError;
   1783            }
   1784          
   1785            return ( status );
   1786          }
   1787          
   1788          /*********************************************************************
   1789           * @fn      zcl_SendReportCmd
   1790           *
   1791           * @brief   Send a Report command
   1792           *
   1793           * @param   dstAddr - destination address
   1794           * @param   clusterID - cluster ID
   1795           * @param   reportCmd - report command to be sent
   1796           * @param   direction - direction of the command
   1797           * @param   seqNum - transaction sequence number
   1798           *
   1799           * @return  ZSuccess if OK
   1800           */
   1801          ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
   1802                                       uint16 clusterID, zclReportCmd_t *reportCmd,
   1803                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1804          {
   1805            uint16 dataLen = 0;
   1806            uint8 *buf;
   1807            ZStatus_t status;
   1808            uint8 i;
   1809          
   1810            // calculate the size of the command
   1811            for ( i = 0; i < reportCmd->numAttr; i++ )
   1812            {
   1813              zclReport_t *reportRec = &(reportCmd->attrList[i]);
   1814          
   1815              dataLen += 2 + 1; // Attribute ID + data type
   1816          
   1817              // Attribute Data
   1818              dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
   1819            }
   1820          
   1821            buf = zcl_mem_alloc( dataLen );
   1822            if ( buf != NULL )
   1823            {
   1824              // Load the buffer - serially
   1825              uint8 *pBuf = buf;
   1826          
   1827              for ( i = 0; i < reportCmd->numAttr; i++ )
   1828              {
   1829                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   1830          
   1831                *pBuf++ = LO_UINT16( reportRec->attrID );
   1832                *pBuf++ = HI_UINT16( reportRec->attrID );
   1833                *pBuf++ = reportRec->dataType;
   1834          
   1835                pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
   1836              }
   1837          
   1838              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
   1839                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   1840              zcl_mem_free( buf );
   1841            }
   1842            else
   1843            {
   1844              status = ZMemError;
   1845            }
   1846          
   1847            return ( status );
   1848          }
   1849          #endif
   1850          
   1851          /*********************************************************************
   1852           * @fn      zcl_SendDefaultRspCmd
   1853           *
   1854           * @brief   Send a Default Response command
   1855           *
   1856           *          Note: The manufacturer code field should be set if this
   1857           *          command is being sent in response to a manufacturer specific
   1858           *          command.
   1859           *
   1860           * @param   dstAddr - destination address
   1861           * @param   clusterID - cluster ID
   1862           * @param   defaultRspCmd - default response command to be sent
   1863           * @param   direction - direction of the command
   1864           * @param   manuCode - manufacturer code for proprietary extensions to a profile
   1865           * @param   seqNum - transaction sequence number
   1866           *
   1867           * @return  ZSuccess if OK
   1868           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1869          ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDefaultRspCmd:
   1870                                           zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
   1871                                           uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
   1872          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740C         MOV       A,#0xc
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine15 & 0xFFFF
   1873            uint8 buf[2]; // Command ID and Status;
   1874          
   1875            // Load the buffer - serially
   1876            buf[0] = defaultRspCmd->commandID;
   1877            buf[1] = defaultRspCmd->statusCode;
   \                     ??CrossCallReturnLabel_329:
   \   000014   C0E0         PUSH      A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   D0E0         POP       A
   \   00001D   12....       LCALL     ?Subroutine29 & 0xFFFF
   1878          
   1879            return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
   1880                                      direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
   \                     ??CrossCallReturnLabel_38:
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV       ?V0,#0x2
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7416         MOV       A,#0x16
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000039   7415         MOV       A,#0x15
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000041   7416         MOV       A,#0x16
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000049   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00004C   7416         MOV       A,#0x16
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000057   75..00       MOV       ?V0,#0x0
   \   00005A   78..         MOV       R0,#?V0
   \   00005C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005F   75..0B       MOV       ?V0,#0xb
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000067   EE           MOV       A,R6
   \   000068   F9           MOV       R1,A
   \   000069   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00006C   740B         MOV       A,#0xb
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071   7402         MOV       A,#0x2
   \   000073   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A                REQUIRE ??Subroutine190_0
   \   00000A                ; // Fall through to label ??Subroutine190_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001   A8..         MOV       R0,?XSP + 0
   \   000003   A9..         MOV       R1,?XSP + 1
   \   000005   88..         MOV       ?V0,R0
   \   000007   89..         MOV       ?V1,R1
   \   000009   78..         MOV       R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine199_0
   \   000003                ; // Fall through to label ??Subroutine199_0
   1881          }
   1882          
   1883          #ifdef ZCL_DISCOVER
   1884          /*********************************************************************
   1885           * @fn      zcl_SendDiscoverCmdsCmd
   1886           *
   1887           * @brief   Send a Discover Commands command
   1888           *
   1889           * @param   dstAddr - destination address
   1890           * @param   clusterID - cluster ID
   1891           * @param   cmdType - requesting command ID
   1892           * @param   pDiscoverCmd - discover command to be sent
   1893           * @param   direction - direction of the command
   1894           * @param   seqNum - transaction sequence number
   1895           *
   1896           * @return  ZSuccess if OK
   1897           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1898          ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
   \                     zcl_SendDiscoverCmdsCmd:
   1899                                            uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
   1900                                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1901          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V2,R1
   \   00000C   8A..         MOV       ?V4,R2
   \   00000E   8B..         MOV       ?V5,R3
   \   000010   EC           MOV       A,R4
   \   000011   FE           MOV       R6,A
   \   000012   ED           MOV       A,R5
   \   000013   FF           MOV       R7,A
   \   000014   7411         MOV       A,#0x11
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ?Subroutine15 & 0xFFFF
   1902            uint8 payload[2]; // size of startCmdID and maxCmdID
   1903            ZStatus_t status;
   1904          
   1905            payload[0] = pDiscoverCmd->startCmdID;
   1906            payload[1] = pDiscoverCmd->maxCmdID;
   \                     ??CrossCallReturnLabel_330:
   \   00001C   C0E0         PUSH      A
   \   00001E   7401         MOV       A,#0x1
   \   000020   12....       LCALL     ?XSTACK_DISP0_8
   \   000023   D0E0         POP       A
   \   000025   F0           MOVX      @DPTR,A
   \   000026   7413         MOV       A,#0x13
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   F9           MOV       R1,A
   \   00002D   7414         MOV       A,#0x14
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   E0           MOVX      A,@DPTR
   \   000033   FA           MOV       R2,A
   \   000034   7415         MOV       A,#0x15
   \   000036   12....       LCALL     ?XSTACK_DISP0_8
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   FB           MOV       R3,A
   1907          
   1908            // Send message for either commands received or generated
   1909            if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   \   00003B   7410         MOV       A,#0x10
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E0           MOVX      A,@DPTR
   \   000041   6411         XRL       A,#0x11
   \   000043   AC..         MOV       R4,?XSP + 0
   \   000045   AD..         MOV       R5,?XSP + 1
   \   000047   8C..         MOV       ?V0,R4
   \   000049   8D..         MOV       ?V1,R5
   \   00004B   78..         MOV       R0,#?V0
   \   00004D   703B         JNZ       ??zcl_SendDiscoverCmdsCmd_0
   1910            {
   1911              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
   1912                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   \   00004F                ; Setup parameters for call to function zcl_SendCommand
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000052   75..02       MOV       ?V0,#0x2
   \   000055   75..00       MOV       ?V1,#0x0
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   EB           MOV       A,R3
   \   00005E   F5..         MOV       ?V0,A
   \   000060   78..         MOV       R0,#?V0
   \   000062   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000065   E4           CLR       A
   \   000066   F5..         MOV       ?V0,A
   \   000068   78..         MOV       R0,#?V0
   \   00006A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006D   EA           MOV       A,R2
   \   00006E   F5..         MOV       ?V0,A
   \   000070   78..         MOV       R0,#?V0
   \   000072   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000075   E9           MOV       A,R1
   \   000076   F5..         MOV       ?V0,A
   \   000078   78..         MOV       R0,#?V0
   \   00007A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007D   75..00       MOV       ?V0,#0x0
   \   000080   78..         MOV       R0,#?V0
   \   000082   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000085   75..11       MOV       ?V0,#0x11
   \   000088   8039         SJMP      ??zcl_SendDiscoverCmdsCmd_1
   1913            }
   1914            else  // generated
   1915            {
   1916              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
   1917                                          direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
   \                     ??zcl_SendDiscoverCmdsCmd_0:
   \   00008A                ; Setup parameters for call to function zcl_SendCommand
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   75..02       MOV       ?V0,#0x2
   \   000090   75..00       MOV       ?V1,#0x0
   \   000093   78..         MOV       R0,#?V0
   \   000095   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000098   EB           MOV       A,R3
   \   000099   F5..         MOV       ?V0,A
   \   00009B   78..         MOV       R0,#?V0
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A0   E4           CLR       A
   \   0000A1   F5..         MOV       ?V0,A
   \   0000A3   78..         MOV       R0,#?V0
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   EA           MOV       A,R2
   \   0000A9   F5..         MOV       ?V0,A
   \   0000AB   78..         MOV       R0,#?V0
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   E9           MOV       A,R1
   \   0000B1   F5..         MOV       ?V0,A
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B8   75..00       MOV       ?V0,#0x0
   \   0000BB   78..         MOV       R0,#?V0
   \   0000BD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C0   75..13       MOV       ?V0,#0x13
   \                     ??zcl_SendDiscoverCmdsCmd_1:
   \   0000C3   78..         MOV       R0,#?V0
   \   0000C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C8   EE           MOV       A,R6
   \   0000C9   FC           MOV       R4,A
   \   0000CA   EF           MOV       A,R7
   \   0000CB   FD           MOV       R5,A
   \   0000CC   AA..         MOV       R2,?V4
   \   0000CE   AB..         MOV       R3,?V5
   \   0000D0   A9..         MOV       R1,?V2
   \   0000D2   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000D5   740B         MOV       A,#0xb
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DA   E9           MOV       A,R1
   \   0000DB   F9           MOV       R1,A
   1918            }
   1919          
   1920            return ( status );
   \   0000DC   7402         MOV       A,#0x2
   \   0000DE   02....       LJMP      ?Subroutine5 & 0xFFFF
   1921          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine205_0
   \   000003                ; // Fall through to label ??Subroutine205_0
   1922          
   1923          /*********************************************************************
   1924           * @fn      zcl_SendDiscoverCmdsRspCmd
   1925           *
   1926           * @brief   Send a Discover Commands Response command
   1927           *
   1928           * @param   dstAddr - destination address
   1929           * @param   clusterID - cluster ID
   1930           * @param   pDiscoverRspCmd - response command to be sent
   1931           * @param   direction - direction of the command
   1932           * @param   seqNum - transaction sequence number
   1933           *
   1934           * @return  ZSuccess if OK
   1935           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1936          ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverCmdsRspCmd:
   1937                                                uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
   1938                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1939          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV       A,#-0x4
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000012   7414         MOV       A,#0x14
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   04           INC       A
   1940            uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
   1941            uint8 *pCmdBuf;
   1942            uint8 i;
   1943            ZStatus_t status = ZSuccess;
   \   00001E   75..00       MOV       ?V2,#0x0
   1944          
   1945            // allocate memory
   1946            pCmdBuf = zcl_mem_alloc( payloadSize );
   \   000021   FE           MOV       R6,A
   \   000022   7F00         MOV       R7,#0x0
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   FA           MOV       R2,A
   \   000025   7B00         MOV       R3,#0x0
   \   000027   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV       ?V6,R2
   \   00002C   8B..         MOV       ?V7,R3
   1947            if ( pCmdBuf != NULL )
   \   00002E   EA           MOV       A,R2
   \   00002F   45..         ORL       A,?V7
   \   000031   7003         JNZ       $+5
   \   000033   02....       LJMP      ??zcl_SendDiscoverCmdsRspCmd_0 & 0xFFFF
   1948            {
   1949              uint8 *pBuf = pCmdBuf;
   \   000036   A8..         MOV       R0,?V6
   \   000038   A9..         MOV       R1,?V7
   1950          
   1951              // Load the buffer - serially
   1952              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   00003A   12....       LCALL     ?Subroutine44 & 0xFFFF
   1953              for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
   \                     ??CrossCallReturnLabel_59:
   \   00003D   801E         SJMP      ??zcl_SendDiscoverCmdsRspCmd_1
   1954              {
   1955                *pBuf++ = pDiscoverRspCmd->pCmdID[i];
   \                     ??zcl_SendDiscoverCmdsRspCmd_2:
   \   00003F   EA           MOV       A,R2
   \   000040   FC           MOV       R4,A
   \   000041   85..82       MOV       DPL,?V0
   \   000044   85..83       MOV       DPH,?V1
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   2C           ADD       A,R4
   \   00004C   FB           MOV       R3,A
   \   00004D   A3           INC       DPTR
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   3400         ADDC      A,#0x0
   \   000051   8B82         MOV       DPL,R3
   \   000053   12....       LCALL     ?Subroutine124 & 0xFFFF
   1956              }
   \                     ??CrossCallReturnLabel_342:
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   A882         MOV       R0,DPL
   \   00005A   A983         MOV       R1,DPH
   \   00005C   0A           INC       R2
   \                     ??zcl_SendDiscoverCmdsRspCmd_1:
   \   00005D   85..82       MOV       DPL,?V0
   \   000060   85..83       MOV       DPH,?V1
   \   000063   A3           INC       DPTR
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   FB           MOV       R3,A
   \   000067   EA           MOV       A,R2
   \   000068   C3           CLR       C
   \   000069   9B           SUBB      A,R3
   \   00006A   40D3         JC        ??zcl_SendDiscoverCmdsRspCmd_2
   1957          
   1958              // Send response message for either commands received or generated
   1959              if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   \   00006C   85..82       MOV       DPL,?V0
   \   00006F   85..83       MOV       DPH,?V1
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F8           MOV       R0,A
   \   000075   7416         MOV       A,#0x16
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F9           MOV       R1,A
   \   00007C   7417         MOV       A,#0x17
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   E0           MOVX      A,@DPTR
   \   000082   FA           MOV       R2,A
   \   000083   7418         MOV       A,#0x18
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   E0           MOVX      A,@DPTR
   \   000089   FB           MOV       R3,A
   \   00008A   7411         MOV       A,#0x11
   \   00008C   68           XRL       A,R0
   \   00008D   7040         JNZ       ??zcl_SendDiscoverCmdsRspCmd_3
   1960              {
   1961                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
   1962                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   \   00008F                ; Setup parameters for call to function zcl_SendCommand
   \   00008F   85....       MOV       ?V0,?V6
   \   000092   85....       MOV       ?V1,?V7
   \   000095   78..         MOV       R0,#?V0
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009A   8E..         MOV       ?V0,R6
   \   00009C   8F..         MOV       ?V1,R7
   \   00009E   78..         MOV       R0,#?V0
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   EB           MOV       A,R3
   \   0000A4   F5..         MOV       ?V0,A
   \   0000A6   78..         MOV       R0,#?V0
   \   0000A8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AB   E4           CLR       A
   \   0000AC   F5..         MOV       ?V0,A
   \   0000AE   78..         MOV       R0,#?V0
   \   0000B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B3   EA           MOV       A,R2
   \   0000B4   F5..         MOV       ?V0,A
   \   0000B6   78..         MOV       R0,#?V0
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BB   E9           MOV       A,R1
   \   0000BC   F5..         MOV       ?V0,A
   \   0000BE   78..         MOV       R0,#?V0
   \   0000C0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C3   8F..         MOV       ?V0,R7
   \   0000C5   78..         MOV       R0,#?V0
   \   0000C7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CA   75..12       MOV       ?V0,#0x12
   \   0000CD   8043         SJMP      ??zcl_SendDiscoverCmdsRspCmd_4
   1963              }
   1964              else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
   \                     ??zcl_SendDiscoverCmdsRspCmd_3:
   \   0000CF   7413         MOV       A,#0x13
   \   0000D1   68           XRL       A,R0
   \   0000D2   705E         JNZ       ??zcl_SendDiscoverCmdsRspCmd_5
   1965              {
   1966                status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
   1967                                          direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
   \   0000D4                ; Setup parameters for call to function zcl_SendCommand
   \   0000D4   85....       MOV       ?V0,?V6
   \   0000D7   85....       MOV       ?V1,?V7
   \   0000DA   78..         MOV       R0,#?V0
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000DF   8E..         MOV       ?V0,R6
   \   0000E1   8F..         MOV       ?V1,R7
   \   0000E3   78..         MOV       R0,#?V0
   \   0000E5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E8   EB           MOV       A,R3
   \   0000E9   F5..         MOV       ?V0,A
   \   0000EB   78..         MOV       R0,#?V0
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F0   E4           CLR       A
   \   0000F1   F5..         MOV       ?V0,A
   \   0000F3   78..         MOV       R0,#?V0
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F8   EA           MOV       A,R2
   \   0000F9   F5..         MOV       ?V0,A
   \   0000FB   78..         MOV       R0,#?V0
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000100   E9           MOV       A,R1
   \   000101   F5..         MOV       ?V0,A
   \   000103   78..         MOV       R0,#?V0
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000108   8F..         MOV       ?V0,R7
   \   00010A   78..         MOV       R0,#?V0
   \   00010C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00010F   75..14       MOV       ?V0,#0x14
   \                     ??zcl_SendDiscoverCmdsRspCmd_4:
   \   000112   78..         MOV       R0,#?V0
   \   000114   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000117   740B         MOV       A,#0xb
   \   000119   12....       LCALL     ?XSTACK_DISP0_8
   1968              }
   \   00011C   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   00011F   740D         MOV       A,#0xd
   \   000121   12....       LCALL     ?XSTACK_DISP0_8
   \   000124   12....       LCALL     ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000127   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00012A   740B         MOV       A,#0xb
   \   00012C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012F   E9           MOV       A,R1
   \   000130   F5..         MOV       ?V2,A
   1969          
   1970              zcl_mem_free( pCmdBuf );
   \                     ??zcl_SendDiscoverCmdsRspCmd_5:
   \   000132                ; Setup parameters for call to function osal_mem_free
   \   000132   AA..         MOV       R2,?V6
   \   000134   AB..         MOV       R3,?V7
   \   000136   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000139   8003         SJMP      ??zcl_SendDiscoverCmdsRspCmd_6
   1971            }
   1972            else
   1973            {
   1974              status = ZMemError;
   \                     ??zcl_SendDiscoverCmdsRspCmd_0:
   \   00013B   75..10       MOV       ?V2,#0x10
   1975            }
   1976          
   1977            return ( status );
   \                     ??zcl_SendDiscoverCmdsRspCmd_6:
   \   00013E   A9..         MOV       R1,?V2
   \   000140   7404         MOV       A,#0x4
   \   000142   02....       LJMP      ??Subroutine194_0 & 0xFFFF
   1978          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   F583         MOV       DPH,A
   \   000002                REQUIRE ??Subroutine191_0
   \   000002                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   8882         MOV       DPL,R0
   \   000009   8983         MOV       DPH,R1
   \   00000B   F0           MOVX      @DPTR,A
   \   00000C   A3           INC       DPTR
   \   00000D   A882         MOV       R0,DPL
   \   00000F   A983         MOV       R1,DPH
   \   000011   7A00         MOV       R2,#0x0
   \   000013   22           RET
   1979          
   1980          /*********************************************************************
   1981           * @fn      zcl_SendDiscoverAttrsCmd
   1982           *
   1983           * @brief   Send a Discover Attributes command
   1984           *
   1985           * @param   dstAddr - destination address
   1986           * @param   clusterID - cluster ID
   1987           * @param   pDiscoverCmd - discover command to be sent
   1988           * @param   direction - direction of the command
   1989           * @param   seqNum - transaction sequence number
   1990           *
   1991           * @return  ZSuccess if OK
   1992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1993          ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsCmd:
   1994                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
   1995                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   1996          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   8A..         MOV       ?V6,R2
   \   000009   8B..         MOV       ?V7,R3
   \   00000B   EC           MOV       A,R4
   \   00000C   FE           MOV       R6,A
   \   00000D   ED           MOV       A,R5
   \   00000E   FF           MOV       R7,A
   1997            uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
   1998            uint8 *buf;
   1999            ZStatus_t status;
   2000          
   2001            buf = zcl_mem_alloc( dataLen );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   7A03         MOV       R2,#0x3
   \   000011   7B00         MOV       R3,#0x0
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV       ?V0,R2
   \   000018   8B..         MOV       ?V1,R3
   2002            if ( buf != NULL )
   \   00001A   EA           MOV       A,R2
   \   00001B   45..         ORL       A,?V1
   \   00001D   7003         JNZ       $+5
   \   00001F   02....       LJMP      ??zcl_SendDiscoverAttrsCmd_0 & 0xFFFF
   \   000022   7410         MOV       A,#0x10
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   12....       LCALL     ?Subroutine116 & 0xFFFF
   2003            {
   2004              // Load the buffer - serially
   2005              uint8 *pBuf = buf;
   2006              *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
   \                     ??CrossCallReturnLabel_219:
   \   00002A   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   00002D   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   2007              *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
   \                     ??CrossCallReturnLabel_332:
   \   000030   8A82         MOV       DPL,R2
   \   000032   8B83         MOV       DPH,R3
   \   000034   A3           INC       DPTR
   \   000035   12....       LCALL     ?Subroutine47 & 0xFFFF
   2008              *pBuf++ = pDiscoverCmd->maxAttrIDs;
   \                     ??CrossCallReturnLabel_66:
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   F0           MOVX      @DPTR,A
   2009          
   2010              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
   2011                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   00003F                ; Setup parameters for call to function zcl_SendCommand
   \   00003F   78..         MOV       R0,#?V0
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   75..03       MOV       ?V4,#0x3
   \   000047   75..00       MOV       ?V5,#0x0
   \   00004A   78..         MOV       R0,#?V4
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   7418         MOV       A,#0x18
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F5..         MOV       ?V3,A
   \   000057   78..         MOV       R0,#?V3
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005C   E4           CLR       A
   \   00005D   F5..         MOV       ?V4,A
   \   00005F   78..         MOV       R0,#?V4
   \   000061   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000064   741A         MOV       A,#0x1a
   \   000066   12....       LCALL     ?XSTACK_DISP0_8
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   F5..         MOV       ?V3,A
   \   00006C   78..         MOV       R0,#?V3
   \   00006E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000071   741A         MOV       A,#0x1a
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   E0           MOVX      A,@DPTR
   \   000077   F5..         MOV       ?V3,A
   \   000079   78..         MOV       R0,#?V3
   \   00007B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00007E   75..00       MOV       ?V3,#0x0
   \   000081   78..         MOV       R0,#?V3
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000086   75..0C       MOV       ?V3,#0xc
   \   000089   78..         MOV       R0,#?V3
   \   00008B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00008E   EE           MOV       A,R6
   \   00008F   FC           MOV       R4,A
   \   000090   EF           MOV       A,R7
   \   000091   FD           MOV       R5,A
   \   000092   AA..         MOV       R2,?V6
   \   000094   AB..         MOV       R3,?V7
   \   000096   A9..         MOV       R1,?V2
   \   000098   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   00009B   740B         MOV       A,#0xb
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV       A,R1
   \   0000A1   FE           MOV       R6,A
   2012              zcl_mem_free( buf );
   \   0000A2                ; Setup parameters for call to function osal_mem_free
   \   0000A2   AA..         MOV       R2,?V0
   \   0000A4   AB..         MOV       R3,?V1
   \   0000A6   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000A9   8002         SJMP      ??zcl_SendDiscoverAttrsCmd_1
   2013            }
   2014            else
   2015            {
   2016              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsCmd_0:
   \   0000AB   7E10         MOV       R6,#0x10
   2017            }
   2018          
   2019            return ( status );
   \                     ??zcl_SendDiscoverAttrsCmd_1:
   \   0000AD   EE           MOV       A,R6
   \   0000AE   F9           MOV       R1,A
   \   0000AF   02....       LJMP      ??Subroutine195_0 & 0xFFFF
   2020          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL     ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET
   2021          
   2022          /*********************************************************************
   2023           * @fn      zcl_SendDiscoverAttrsRspCmd
   2024           *
   2025           * @brief   Send a Discover Attributes Response command
   2026           *
   2027           * @param   dstAddr - destination address
   2028           * @param   clusterID - cluster ID
   2029           * @param   reportRspCmd - report response command to be sent
   2030           * @param   direction - direction of the command
   2031           * @param   seqNum - transaction sequence number
   2032           *
   2033           * @return  ZSuccess if OK
   2034           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2035          ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsRspCmd:
   2036                                    uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
   2037                                    uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2038          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7403         MOV       A,#0x3
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   000020   7415         MOV       A,#0x15
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000028   75F003       MOV       B,#0x3
   \   00002B   A4           MUL       AB
   \   00002C   A9F0         MOV       R1,B
   \   00002E   2401         ADD       A,#0x1
   \   000030   FE           MOV       R6,A
   \   000031   E4           CLR       A
   \   000032   39           ADDC      A,R1
   \   000033   FF           MOV       R7,A
   2039            uint16 dataLen = 1; // Discovery complete
   2040            uint8 *buf;
   2041            ZStatus_t status;
   2042          
   2043            // calculate the size of the command
   2044            dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
   2045          
   2046            buf = zcl_mem_alloc( dataLen );
   \   000034                ; Setup parameters for call to function osal_mem_alloc
   \   000034   EE           MOV       A,R6
   \   000035   FA           MOV       R2,A
   \   000036   EF           MOV       A,R7
   \   000037   FB           MOV       R3,A
   \   000038   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV       ?V2,R2
   \   00003D   8B..         MOV       ?V3,R3
   2047            if ( buf != NULL )
   \   00003F   EA           MOV       A,R2
   \   000040   45..         ORL       A,?V3
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??zcl_SendDiscoverAttrsRspCmd_0 & 0xFFFF
   2048            {
   2049              // Load the buffer - serially
   2050              uint8 i;
   2051              uint8 *pBuf = buf;
   \   000047   A8..         MOV       R0,?V2
   \   000049   A9..         MOV       R1,?V3
   2052          
   2053              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   00004B   12....       LCALL     ?Subroutine44 & 0xFFFF
   2054          
   2055              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   \                     ??CrossCallReturnLabel_60:
   \   00004E   8025         SJMP      ??zcl_SendDiscoverAttrsRspCmd_1
   2056              {
   2057                *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   \                     ??zcl_SendDiscoverAttrsRspCmd_2:
   \   000050   EA           MOV       A,R2
   \   000051   75F003       MOV       B,#0x3
   \   000054   A4           MUL       AB
   \   000055   FC           MOV       R4,A
   \   000056   ADF0         MOV       R5,B
   \   000058   E5..         MOV       A,?V0
   \   00005A   2C           ADD       A,R4
   \   00005B   FC           MOV       R4,A
   \   00005C   E5..         MOV       A,?V1
   \   00005E   3D           ADDC      A,R5
   \   00005F   12....       LCALL     ?Subroutine130 & 0xFFFF
   2058                *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
   2059                *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
   2060              }
   \                     ??CrossCallReturnLabel_241:
   \   000062   12....       LCALL     ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000065   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000068   12....       LCALL     ??Subroutine191_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   00006B   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00006E   12....       LCALL     ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000071   5001         JNC       ??zcl_SendDiscoverAttrsRspCmd_3
   \   000073   09           INC       R1
   \                     ??zcl_SendDiscoverAttrsRspCmd_3:
   \   000074   0A           INC       R2
   \                     ??zcl_SendDiscoverAttrsRspCmd_1:
   \   000075   85..82       MOV       DPL,?V0
   \   000078   85..83       MOV       DPH,?V1
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FB           MOV       R3,A
   \   00007E   EA           MOV       A,R2
   \   00007F   C3           CLR       C
   \   000080   9B           SUBB      A,R3
   \   000081   40CD         JC        ??zcl_SendDiscoverAttrsRspCmd_2
   2061          
   2062              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
   2063                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   000083                ; Setup parameters for call to function zcl_SendCommand
   \   000083   78..         MOV       R0,#?V2
   \   000085   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000088   8E..         MOV       ?V0,R6
   \   00008A   8F..         MOV       ?V1,R7
   \   00008C   78..         MOV       R0,#?V0
   \   00008E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000091   741D         MOV       A,#0x1d
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000099   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009C   E4           CLR       A
   \   00009D   F5..         MOV       ?V0,A
   \   00009F   F5..         MOV       ?V1,A
   \   0000A1   78..         MOV       R0,#?V0
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A6   741F         MOV       A,#0x1f
   \   0000A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AB   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B1   741F         MOV       A,#0x1f
   \   0000B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0000B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BC   75..00       MOV       ?V0,#0x0
   \   0000BF   78..         MOV       R0,#?V0
   \   0000C1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C4   75..0D       MOV       ?V0,#0xd
   \   0000C7   78..         MOV       R0,#?V0
   \   0000C9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000CC   740C         MOV       A,#0xc
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   E0           MOVX      A,@DPTR
   \   0000DE   F9           MOV       R1,A
   \   0000DF   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000E2   740B         MOV       A,#0xb
   \   0000E4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E7   E9           MOV       A,R1
   \   0000E8   FE           MOV       R6,A
   2064              zcl_mem_free( buf );
   \   0000E9                ; Setup parameters for call to function osal_mem_free
   \   0000E9   AA..         MOV       R2,?V2
   \   0000EB   AB..         MOV       R3,?V3
   \   0000ED   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000F0   8002         SJMP      ??zcl_SendDiscoverAttrsRspCmd_4
   2065            }
   2066            else
   2067            {
   2068              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsRspCmd_0:
   \   0000F2   7E10         MOV       R6,#0x10
   2069            }
   2070          
   2071            return ( status );
   \                     ??zcl_SendDiscoverAttrsRspCmd_4:
   \   0000F4   02....       LJMP      ?Subroutine7 & 0xFFFF
   2072          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   FD           MOV       R5,A
   \   000001   EC           MOV       A,R4
   \   000002   2402         ADD       A,#0x2
   \   000004   F5..         MOV       ?V4,A
   \   000006   E4           CLR       A
   \   000007   3D           ADDC      A,R5
   \   000008   F5..         MOV       ?V5,A
   \   00000A   85..82       MOV       DPL,?V4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL     ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   A3           INC       DPTR
   \   000001   F0           MOVX      @DPTR,A
   \   000002   8C82         MOV       DPL,R4
   \   000004   8D83         MOV       DPH,R5
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000003   22           RET
   2073          
   2074          /*********************************************************************
   2075           * @fn      zcl_SendDiscoverAttrsExt
   2076           *
   2077           * @brief   Send a Discover Attributes Extended command
   2078           *
   2079           * @param   dstAddr - destination address
   2080           * @param   clusterID - cluster ID
   2081           * @param   pDiscoverAttrsExt:
   2082           *            - startAttrID: the first attribute to be selected
   2083           *            - maxAttrIDs: maximum number of returned attributes
   2084           * @param   direction - direction of the command
   2085           * @param   seqNum - transaction sequence number
   2086           *
   2087           * @return  ZSuccess if OK
   2088           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2089          ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsExt:
   2090                                      uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
   2091                                      uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2092          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
   \   00000C   740D         MOV       A,#0xd
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   12....       LCALL     ?Subroutine15 & 0xFFFF
   2093            uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
   2094            ZStatus_t status;
   2095          
   2096            // Load the buffer - serially
   2097            buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
   2098            buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
   \                     ??CrossCallReturnLabel_331:
   \   000014   F5..         MOV       ?V0,A
   \   000016   7401         MOV       A,#0x1
   \   000018   12....       LCALL     ?XSTACK_DISP0_8
   \   00001B   E5..         MOV       A,?V0
   \   00001D   12....       LCALL     ?Subroutine47 & 0xFFFF
   2099            buf[2] = pDiscoverAttrsExt->maxAttrIDs;
   \                     ??CrossCallReturnLabel_67:
   \   000020   C0E0         PUSH      A
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   D0E0         POP       A
   \   000029   12....       LCALL     ?Subroutine29 & 0xFFFF
   2100          
   2101            status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
   2102                                      direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
   2103          
   2104            return ( status );
   \                     ??CrossCallReturnLabel_39:
   \   00002C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002F   75..03       MOV       ?V0,#0x3
   \   000032   75..00       MOV       ?V1,#0x0
   \   000035   78..         MOV       R0,#?V0
   \   000037   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003A   7415         MOV       A,#0x15
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000042   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000045   E4           CLR       A
   \   000046   F5..         MOV       ?V0,A
   \   000048   78..         MOV       R0,#?V0
   \   00004A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004D   7417         MOV       A,#0x17
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000058   7417         MOV       A,#0x17
   \   00005A   12....       LCALL     ?XSTACK_DISP0_8
   \   00005D   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000063   75..00       MOV       ?V0,#0x0
   \   000066   78..         MOV       R0,#?V0
   \   000068   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00006B   75..15       MOV       ?V0,#0x15
   \   00006E   78..         MOV       R0,#?V0
   \   000070   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000073   EE           MOV       A,R6
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000078   740B         MOV       A,#0xb
   \   00007A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00007D   7403         MOV       A,#0x3
   \   00007F   02....       LJMP      ?Subroutine3 & 0xFFFF
   2105          }
   2106          
   2107          /*********************************************************************
   2108           * @fn      zcl_SendDiscoverAttrsExtRsp
   2109           *
   2110           * @brief   Send a Discover Attributes Extended Response command
   2111           *
   2112           * @param   dstAddr - destination address
   2113           * @param   clusterID - cluster ID
   2114           * @param   pDiscoverRspCmd:
   2115           *            - discComplete: indicates whether all requested attributes returned
   2116           *            - attrID: attribute ID
   2117           *            - attrDataType: data type of the given attribute
   2118           *            - attrAccessControl: access control of the given attribute
   2119           * @param   direction - direction of the command
   2120           * @param   seqNum - transaction sequence number
   2121           *
   2122           * @return  ZSuccess if OK
   2123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2124          ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zcl_SendDiscoverAttrsExtRsp:
   2125                                                uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
   2126                                                uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
   2127          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   85..82       MOV       DPL,?XSP + 0
   \   00000E   85..83       MOV       DPH,?XSP + 1
   \   000011   F0           MOVX      @DPTR,A
   \   000012   7403         MOV       A,#0x3
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000020   7415         MOV       A,#0x15
   \   000022   12....       LCALL     ?XSTACK_DISP0_8
   \   000025   12....       LCALL     ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000028   F5..         MOV       ?V2,A
   \   00002A   75..00       MOV       ?V3,#0x0
   \   00002D   7402         MOV       A,#0x2
   \   00002F   78..         MOV       R0,#?V2
   \   000031   12....       LCALL     ?S_SHL
   \   000034   E5..         MOV       A,?V2
   \   000036   2401         ADD       A,#0x1
   \   000038   FE           MOV       R6,A
   \   000039   E4           CLR       A
   \   00003A   35..         ADDC      A,?V3
   \   00003C   FF           MOV       R7,A
   2128            uint8 *buf;
   2129            uint8 i;
   2130            uint16 dataLen = 1; // Discovery complete
   2131            ZStatus_t status;
   2132          
   2133            // calculate the size of the command
   2134            dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
   2135          
   2136            buf = zcl_mem_alloc( dataLen );
   \   00003D                ; Setup parameters for call to function osal_mem_alloc
   \   00003D   EE           MOV       A,R6
   \   00003E   FA           MOV       R2,A
   \   00003F   EF           MOV       A,R7
   \   000040   FB           MOV       R3,A
   \   000041   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000044   8A..         MOV       ?V2,R2
   \   000046   8B..         MOV       ?V3,R3
   2137            if ( buf != NULL )
   \   000048   EA           MOV       A,R2
   \   000049   45..         ORL       A,?V3
   \   00004B   7003         JNZ       $+5
   \   00004D   02....       LJMP      ??zcl_SendDiscoverAttrsExtRsp_0 & 0xFFFF
   2138            {
   2139              // Load the buffer - serially
   2140              uint8 *pBuf = buf;
   2141              *pBuf++ = pDiscoverRspCmd->discComplete;
   \   000050   85..82       MOV       DPL,?V0
   \   000053   85..83       MOV       DPH,?V1
   \   000056   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000059   A3           INC       DPTR
   \   00005A   AA82         MOV       R2,DPL
   \   00005C   AB83         MOV       R3,DPH
   2142              for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
   \   00005E   7900         MOV       R1,#0x0
   \   000060   8039         SJMP      ??zcl_SendDiscoverAttrsExtRsp_1
   2143              {
   2144                *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   \                     ??zcl_SendDiscoverAttrsExtRsp_2:
   \   000062   E9           MOV       A,R1
   \   000063   F5..         MOV       ?V4,A
   \   000065   75..00       MOV       ?V5,#0x0
   \   000068   7402         MOV       A,#0x2
   \   00006A   78..         MOV       R0,#?V4
   \   00006C   12....       LCALL     ?S_SHL
   \   00006F   E5..         MOV       A,?V0
   \   000071   25..         ADD       A,?V4
   \   000073   FC           MOV       R4,A
   \   000074   E5..         MOV       A,?V1
   \   000076   35..         ADDC      A,?V5
   \   000078   12....       LCALL     ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   00007B   F583         MOV       DPH,A
   \   00007D   12....       LCALL     ?Subroutine20 & 0xFFFF
   2145                *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
   2146                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
   \                     ??CrossCallReturnLabel_21:
   \   000080   8C82         MOV       DPL,R4
   \   000082   8D83         MOV       DPH,R5
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A3           INC       DPTR
   \   000087   12....       LCALL     ?Subroutine96 & 0xFFFF
   2147                *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
   2148              }
   \                     ??CrossCallReturnLabel_489:
   \   00008A   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00008D   12....       LCALL     ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   000090   A3           INC       DPTR
   \   000091   A3           INC       DPTR
   \   000092   F0           MOVX      @DPTR,A
   \   000093   EA           MOV       A,R2
   \   000094   2404         ADD       A,#0x4
   \   000096   FA           MOV       R2,A
   \   000097   5001         JNC       ??zcl_SendDiscoverAttrsExtRsp_3
   \   000099   0B           INC       R3
   \                     ??zcl_SendDiscoverAttrsExtRsp_3:
   \   00009A   09           INC       R1
   \                     ??zcl_SendDiscoverAttrsExtRsp_1:
   \   00009B   85..82       MOV       DPL,?V0
   \   00009E   85..83       MOV       DPH,?V1
   \   0000A1   A3           INC       DPTR
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F8           MOV       R0,A
   \   0000A4   E9           MOV       A,R1
   \   0000A5   C3           CLR       C
   \   0000A6   98           SUBB      A,R0
   \   0000A7   40B9         JC        ??zcl_SendDiscoverAttrsExtRsp_2
   2149          
   2150              status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
   2151                                        direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
   \   0000A9                ; Setup parameters for call to function zcl_SendCommand
   \   0000A9   78..         MOV       R0,#?V2
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AE   8E..         MOV       ?V0,R6
   \   0000B0   8F..         MOV       ?V1,R7
   \   0000B2   78..         MOV       R0,#?V0
   \   0000B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B7   741D         MOV       A,#0x1d
   \   0000B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   E4           CLR       A
   \   0000C3   F5..         MOV       ?V0,A
   \   0000C5   F5..         MOV       ?V1,A
   \   0000C7   78..         MOV       R0,#?V0
   \   0000C9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000CC   741F         MOV       A,#0x1f
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000D4   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D7   741F         MOV       A,#0x1f
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000DF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E2   75..00       MOV       ?V0,#0x0
   \   0000E5   78..         MOV       R0,#?V0
   \   0000E7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EA   75..16       MOV       ?V0,#0x16
   \   0000ED   78..         MOV       R0,#?V0
   \   0000EF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F2   740C         MOV       A,#0xc
   \   0000F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F7   12....       LCALL     ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   0000FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FD   12....       LCALL     ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   E0           MOVX      A,@DPTR
   \   000104   F9           MOV       R1,A
   \   000105   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000108   740B         MOV       A,#0xb
   \   00010A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010D   E9           MOV       A,R1
   \   00010E   FE           MOV       R6,A
   2152              zcl_mem_free( buf );
   \   00010F                ; Setup parameters for call to function osal_mem_free
   \   00010F   AA..         MOV       R2,?V2
   \   000111   AB..         MOV       R3,?V3
   \   000113   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000116   8002         SJMP      ??zcl_SendDiscoverAttrsExtRsp_4
   2153            }
   2154            else
   2155            {
   2156              status = ZMemError;
   \                     ??zcl_SendDiscoverAttrsExtRsp_0:
   \   000118   7E10         MOV       R6,#0x10
   2157            }
   2158          
   2159            return ( status );
   \                     ??zcl_SendDiscoverAttrsExtRsp_4:
   \   00011A   02....       LJMP      ?Subroutine7 & 0xFFFF
   2160          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL     ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine218_0
   \   000001                ; // Fall through to label ??Subroutine218_0
   2161          #endif // ZCL_DISCOVER
   2162          
   2163          /*********************************************************************
   2164           * @fn      zcl_ProcessMessageMSG
   2165           *
   2166           * @brief   Data message processor callback.  This function processes
   2167           *          any incoming data - probably from other devices.  So, based
   2168           *          on cluster ID, perform the intended action.
   2169           *
   2170           * @param   pkt - incoming message
   2171           *
   2172           * @return  zclProcMsgStatus_t
   2173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2174          zclProcMsgStatus_t zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
   \                     zcl_ProcessMessageMSG:
   2175          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV       A,#-0x15
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
   2176            endPointDesc_t *epDesc;
   2177            zclIncoming_t inMsg;
   2178            zclLibPlugin_t *pInPlugin;
   2179            zclDefaultRspCmd_t defautlRspCmd;
   2180            uint8 options;
   2181            uint8 securityEnable;
   2182            uint8 interPanMsg;
   2183            ZStatus_t status = ZFailure;
   2184            uint8 defaultResponseSent = FALSE;
   \   00000E   C2..         CLR       ?VB.0
   2185          
   2186            if ( pkt->cmd.DataLength < ZCL_VALID_MIN_HEADER_LEN  )
   \   000010   EE           MOV       A,R6
   \   000011   2420         ADD       A,#0x20
   \   000013   F5..         MOV       ?V2,A
   \   000015   E4           CLR       A
   \   000016   3F           ADDC      A,R7
   \   000017   F5..         MOV       ?V3,A
   \   000019   85..82       MOV       DPL,?V2
   \   00001C   F583         MOV       DPH,A
   \   00001E   C3           CLR       C
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   9403         SUBB      A,#0x3
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   9400         SUBB      A,#0x0
   \   000026   5005         JNC       ??zcl_ProcessMessageMSG_0
   2187            {
   2188              return ( ZCL_PROC_INVALID );   // Error, ignore the message
   \   000028   7901         MOV       R1,#0x1
   \   00002A   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2189            }
   2190          
   2191            // Initialize
   2192            rawAFMsg = (afIncomingMSGPacket_t *)pkt;
   \                     ??zcl_ProcessMessageMSG_0:
   \   00002D   90....       MOV       DPTR,#rawAFMsg
   \   000030   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   2193            inMsg.msg = pkt;
   \                     ??CrossCallReturnLabel_384:
   \   000033   7402         MOV       A,#0x2
   \   000035   12....       LCALL     ?XSTACK_DISP0_8
   \   000038   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   2194            inMsg.attrCmd = NULL;
   \                     ??CrossCallReturnLabel_385:
   \   00003B   740E         MOV       A,#0xe
   \   00003D   12....       LCALL     ?XSTACK_DISP0_8
   \   000040   E4           CLR       A
   \   000041   F0           MOVX      @DPTR,A
   \   000042   A3           INC       DPTR
   \   000043   F0           MOVX      @DPTR,A
   2195            inMsg.pData = NULL;
   \   000044   740A         MOV       A,#0xa
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   E4           CLR       A
   \   00004A   F0           MOVX      @DPTR,A
   \   00004B   A3           INC       DPTR
   \   00004C   F0           MOVX      @DPTR,A
   2196            inMsg.pDataLen = 0;
   \   00004D   740C         MOV       A,#0xc
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   E4           CLR       A
   \   000053   F0           MOVX      @DPTR,A
   \   000054   A3           INC       DPTR
   \   000055   F0           MOVX      @DPTR,A
   2197          
   2198            inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
   \   000056   EE           MOV       A,R6
   \   000057   2422         ADD       A,#0x22
   \   000059   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   00005C   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   AA82         MOV       R2,DPL
   \   000064   AB83         MOV       R3,DPH
   \   000066   12....       LCALL     `??zclParseHdr::?relay`; Banked call to: zclParseHdr
   \   000069   8A..         MOV       ?V4,R2
   \   00006B   8B..         MOV       ?V5,R3
   \   00006D   A8..         MOV       R0,?V4
   \   00006F   A9..         MOV       R1,?V5
   \   000071   740A         MOV       A,#0xa
   \   000073   12....       LCALL     ?XSTACK_DISP0_8
   \   000076   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   2199            inMsg.pDataLen = pkt->cmd.DataLength;
   2200            inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
   \                     ??CrossCallReturnLabel_470:
   \   000079   85..82       MOV       DPL,?V2
   \   00007C   85..83       MOV       DPH,?V3
   \   00007F   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000082   EA           MOV       A,R2
   \   000083   C3           CLR       C
   \   000084   98           SUBB      A,R0
   \   000085   F8           MOV       R0,A
   \   000086   EB           MOV       A,R3
   \   000087   99           SUBB      A,R1
   \   000088   F9           MOV       R1,A
   \   000089   85..82       MOV       DPL,?V0
   \   00008C   85..83       MOV       DPH,?V1
   \   00008F   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000092   740C         MOV       A,#0xc
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   2201          
   2202            // Temporary workaround to allow callback functions access to the
   2203            // transaction sequence number.  Callback functions will call
   2204            // zcl_getParsedTransSeqNum() to retrieve this number.
   2205            savedZCLTransSeqNum = inMsg.hdr.transSeqNum;
   \                     ??CrossCallReturnLabel_471:
   \   00009A   7408         MOV       A,#0x8
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   90....       MOV       DPTR,#savedZCLTransSeqNum
   \   0000A3   F0           MOVX      @DPTR,A
   2206          
   2207            // Find the wanted endpoint
   2208            epDesc = afFindEndPointDesc( pkt->endPoint );
   \   0000A4   EE           MOV       A,R6
   \   0000A5   2414         ADD       A,#0x14
   \   0000A7   12....       LCALL     ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   F9           MOV       R1,A
   \   0000AC   12....       LCALL     `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000AF   8A82         MOV       DPL,R2
   \   0000B1   8B83         MOV       DPH,R3
   2209            if ( epDesc == NULL )
   \   0000B3   E582         MOV       A,DPL
   \   0000B5   4583         ORL       A,DPH
   \   0000B7   700C         JNZ       ??zcl_ProcessMessageMSG_2
   2210            {
   2211              rawAFMsg = NULL;
   \   0000B9   90....       MOV       DPTR,#rawAFMsg
   \   0000BC   E4           CLR       A
   \   0000BD   F0           MOVX      @DPTR,A
   \   0000BE   A3           INC       DPTR
   \   0000BF   F0           MOVX      @DPTR,A
   2212              return ( ZCL_PROC_EP_NOT_FOUND );   // Error, ignore the message
   \   0000C0   7902         MOV       R1,#0x2
   \   0000C2   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2213            }
   2214          
   2215            if ( ( epDesc->simpleDesc == NULL ) ||
   2216                 ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
   2217                                          inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
   \                     ??zcl_ProcessMessageMSG_2:
   \   0000C5   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   0000C8   602B         JZ        ??zcl_ProcessMessageMSG_3
   \   0000CA   EE           MOV       A,R6
   \   0000CB   2404         ADD       A,#0x4
   \   0000CD   F5..         MOV       ?V2,A
   \   0000CF   E4           CLR       A
   \   0000D0   3F           ADDC      A,R7
   \   0000D1   F5..         MOV       ?V3,A
   \   0000D3                ; Setup parameters for call to function zcl_DeviceOperational
   \   0000D3   A3           INC       DPTR
   \   0000D4   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000D7   740B         MOV       A,#0xb
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   E0           MOVX      A,@DPTR
   \   0000DD   FD           MOV       R5,A
   \   0000DE   7406         MOV       A,#0x6
   \   0000E0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E3   E0           MOVX      A,@DPTR
   \   0000E4   5403         ANL       A,#0x3
   \   0000E6   FC           MOV       R4,A
   \   0000E7   12....       LCALL     ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   0000EA   12....       LCALL     `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
   \   0000ED   7402         MOV       A,#0x2
   \   0000EF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F2   E9           MOV       A,R1
   \   0000F3   700C         JNZ       ??zcl_ProcessMessageMSG_4
   2218            {
   2219              rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_3:
   \   0000F5   90....       MOV       DPTR,#rawAFMsg
   \   0000F8   E4           CLR       A
   \   0000F9   F0           MOVX      @DPTR,A
   \   0000FA   A3           INC       DPTR
   \   0000FB   F0           MOVX      @DPTR,A
   2220              return ( ZCL_PROC_NOT_OPERATIONAL ); // Error, ignore the message
   \   0000FC   7903         MOV       R1,#0x3
   \   0000FE   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2221            }
   2222          
   2223          #if defined ( INTER_PAN )
   2224            if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
   2225            {
   2226              // No foundation command is supported thru Inter-PAN communication.
   2227              // But the Light Link cluster uses a different Frame Control format
   2228              // for it's Inter-PAN messages, where the messages could be confused
   2229              // with the foundation commands.
   2230              if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   2231              {
   2232                rawAFMsg = NULL;
   2233                return ( ZCL_PROC_INTERPAN_FOUNDATION_CMD );
   2234              }
   2235          
   2236              interPanMsg = TRUE;
   2237              options = AF_TX_OPTIONS_NONE;
   2238            }
   2239            else
   2240          #endif
   2241            {
   2242              interPanMsg = FALSE;
   2243              options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
   \                     ??zcl_ProcessMessageMSG_4:
   \   000101                ; Setup parameters for call to function zclGetClusterOption
   \   000101   12....       LCALL     ?Subroutine62 & 0xFFFF
   2244            }
   \                     ??CrossCallReturnLabel_112:
   \   000104   12....       LCALL     `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
   \   000107   E9           MOV       A,R1
   \   000108   FC           MOV       R4,A
   2245          
   2246            // Find the appropriate plugin
   2247            pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
   \   000109   85..82       MOV       DPL,?V2
   \   00010C   85..83       MOV       DPH,?V3
   \   00010F   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000112   8A..         MOV       ?V4,R2
   \   000114   8B..         MOV       ?V5,R3
   \   000116   90....       MOV       DPTR,#plugins
   \   000119   8004         SJMP      ??zcl_ProcessMessageMSG_5
   \                     ??zcl_ProcessMessageMSG_6:
   \   00011B   8882         MOV       DPL,R0
   \   00011D   8983         MOV       DPH,R1
   \                     ??zcl_ProcessMessageMSG_5:
   \   00011F   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   000122   7003         JNZ       $+5
   \   000124   02....       LJMP      ??zcl_ProcessMessageMSG_7 & 0xFFFF
   \   000127   8882         MOV       DPL,R0
   \   000129   8983         MOV       DPH,R1
   \   00012B   A3           INC       DPTR
   \   00012C   A3           INC       DPTR
   \   00012D   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000130   C3           CLR       C
   \   000131   EA           MOV       A,R2
   \   000132   95..         SUBB      A,?V6
   \   000134   EB           MOV       A,R3
   \   000135   95..         SUBB      A,?V7
   \   000137   40E2         JC        ??zcl_ProcessMessageMSG_6
   \   000139   8882         MOV       DPL,R0
   \   00013B   8983         MOV       DPH,R1
   \   00013D   A3           INC       DPTR
   \   00013E   A3           INC       DPTR
   \   00013F   A3           INC       DPTR
   \   000140   A3           INC       DPTR
   \   000141   C3           CLR       C
   \   000142   E0           MOVX      A,@DPTR
   \   000143   95..         SUBB      A,?V4
   \   000145   A3           INC       DPTR
   \   000146   E0           MOVX      A,@DPTR
   \   000147   95..         SUBB      A,?V5
   \   000149   40D0         JC        ??zcl_ProcessMessageMSG_6
   \   00014B   88..         MOV       ?V4,R0
   \   00014D   89..         MOV       ?V5,R1
   \   00014F   7404         MOV       A,#0x4
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   E0           MOVX      A,@DPTR
   \   000155   5407         ANL       A,#0x7
   \   000157   700D         JNZ       ??zcl_ProcessMessageMSG_8
   \   000159   7409         MOV       A,#0x9
   \   00015B   12....       LCALL     ?XSTACK_DISP0_8
   \   00015E   E0           MOVX      A,@DPTR
   \   00015F   640B         XRL       A,#0xb
   \   000161   7003         JNZ       $+5
   \   000163   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   2248          
   2249            // Local and remote Security options must match except for Default Response command
   2250            if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
   2251            {
   2252              securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
   \                     ??zcl_ProcessMessageMSG_8:
   \   000166   EC           MOV       A,R4
   \   000167   A2E6         MOV       C,0xE0 /* A   */.6
   \   000169   4003         JC        $+5
   \   00016B   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   \   00016E   EE           MOV       A,R6
   \   00016F   2419         ADD       A,#0x19
   \   000171   F582         MOV       DPL,A
   \   000173   E4           CLR       A
   \   000174   3F           ADDC      A,R7
   \   000175   F583         MOV       DPH,A
   \   000177   E0           MOVX      A,@DPTR
   \   000178   6003         JZ        $+5
   \   00017A   02....       LJMP      ??zcl_ProcessMessageMSG_9 & 0xFFFF
   2253          
   2254              // Make sure that Clusters specifically defined to use security are received secure,
   2255              // any other cluster that wants to use APS security will be allowed
   2256              if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
   2257              {
   2258                if ( UNICAST_MSG( inMsg.msg ) )
   \   00017D   7402         MOV       A,#0x2
   \   00017F   12....       LCALL     ?XSTACK_DISP0_8
   \   000182   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000185   6003         JZ        $+5
   \   000187   02....       LJMP      ??zcl_ProcessMessageMSG_10 & 0xFFFF
   \   00018A   7402         MOV       A,#0x2
   \   00018C   12....       LCALL     ?XSTACK_DISP0_8
   \   00018F   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   000192   7079         JNZ       ??zcl_ProcessMessageMSG_10
   2259                {
   2260                  // Send a Default Response command back with no Application Link Key security
   2261                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
   \   000194                ; Setup parameters for call to function zclSetSecurityOption
   \   000194   7C00         MOV       R4,#0x0
   \   000196   85..82       MOV       DPL,?V0
   \   000199   85..83       MOV       DPH,?V1
   \   00019C   E0           MOVX      A,@DPTR
   \   00019D   F9           MOV       R1,A
   \   00019E   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2262          
   2263                  defautlRspCmd.statusCode = status;
   \   0001A1   7401         MOV       A,#0x1
   \   0001A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A6   7401         MOV       A,#0x1
   \   0001A8   F0           MOVX      @DPTR,A
   2264                  defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0001A9   7409         MOV       A,#0x9
   \   0001AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AE   12....       LCALL     ?Subroutine111 & 0xFFFF
   2265                  zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2266                                         inMsg.msg->clusterId, &defautlRspCmd,
   2267                                         !inMsg.hdr.fc.direction, true,
   2268                                         inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_209:
   \   0001B1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B4   E0           MOVX      A,@DPTR
   \   0001B5   F5..         MOV       ?V4,A
   \   0001B7   78..         MOV       R0,#?V4
   \   0001B9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001BC   7407         MOV       A,#0x7
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001C4   75..01       MOV       ?V4,#0x1
   \   0001C7   78..         MOV       R0,#?V4
   \   0001C9   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001CC   7408         MOV       A,#0x8
   \   0001CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D1   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   0001D4   F5..         MOV       ?V4,A
   \   0001D6   78..         MOV       R0,#?V4
   \   0001D8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001DB   7405         MOV       A,#0x5
   \   0001DD   12....       LCALL     ?XSTACK_DISP100_8
   \   0001E0   88..         MOV       ?V4,R0
   \   0001E2   89..         MOV       ?V5,R1
   \   0001E4   78..         MOV       R0,#?V4
   \   0001E6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001E9   7409         MOV       A,#0x9
   \   0001EB   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EE   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   0001F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F4   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   0001F7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FA   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   0001FD   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   000200   7407         MOV       A,#0x7
   \   000202   12....       LCALL     ?DEALLOC_XSTACK8
   2269          
   2270                  zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
   \   000205                ; Setup parameters for call to function zclSetSecurityOption
   \   000205   7C01         MOV       R4,#0x1
   \   000207   12....       LCALL     ?Subroutine62 & 0xFFFF
   2271                }
   \                     ??CrossCallReturnLabel_113:
   \   00020A   12....       LCALL     `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
   2272          
   2273                rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_10:
   \   00020D   90....       MOV       DPTR,#rawAFMsg
   \   000210   E4           CLR       A
   \   000211   F0           MOVX      @DPTR,A
   \   000212   A3           INC       DPTR
   \   000213   F0           MOVX      @DPTR,A
   2274                return ( ZCL_PROC_NOT_SECURE );   // Error, ignore the message
   \   000214   7905         MOV       R1,#0x5
   \   000216   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2275              }
   2276            }
   \                     ??zcl_ProcessMessageMSG_7:
   \   000219   75..00       MOV       ?V4,#0x0
   \   00021C   75..00       MOV       ?V5,#0x0
   2277          
   2278            // Is this a foundation type message
   2279            if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
   \                     ??zcl_ProcessMessageMSG_9:
   \   00021F   7404         MOV       A,#0x4
   \   000221   12....       LCALL     ?XSTACK_DISP0_8
   \   000224   E0           MOVX      A,@DPTR
   \   000225   F8           MOV       R0,A
   \   000226   5403         ANL       A,#0x3
   \   000228   6003         JZ        $+5
   \   00022A   02....       LJMP      ??zcl_ProcessMessageMSG_11 & 0xFFFF
   2280            {
   2281              if ( inMsg.hdr.fc.manuSpecific )
   \   00022D   E8           MOV       A,R0
   \   00022E   5404         ANL       A,#0x4
   \   000230   6005         JZ        ??zcl_ProcessMessageMSG_12
   2282              {
   2283                // We don't support any manufacturer specific command
   2284                status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
   \   000232   7E84         MOV       R6,#-0x7c
   \   000234   02....       LJMP      ??zcl_ProcessMessageMSG_13 & 0xFFFF
   2285              }
   2286              else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
   2287                        ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
   \                     ??zcl_ProcessMessageMSG_12:
   \   000237   7409         MOV       A,#0x9
   \   000239   12....       LCALL     ?XSTACK_DISP0_8
   \   00023C   E0           MOVX      A,@DPTR
   \   00023D   F8           MOV       R0,A
   \   00023E   C3           CLR       C
   \   00023F   9417         SUBB      A,#0x17
   \   000241   4003         JC        $+5
   \   000243   02....       LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
   \   000246   E8           MOV       A,R0
   \   000247   F5..         MOV       ?V2,A
   \   000249   75..00       MOV       ?V3,#0x0
   \   00024C   7402         MOV       A,#0x2
   \   00024E   78..         MOV       R0,#?V2
   \   000250   12....       LCALL     ?S_SHL
   \   000253   74..         MOV       A,#zclCmdTable & 0xff
   \   000255   25..         ADD       A,?V2
   \   000257   F582         MOV       DPL,A
   \   000259   74..         MOV       A,#(zclCmdTable >> 8) & 0xff
   \   00025B   35..         ADDC      A,?V3
   \   00025D   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000260   E8           MOV       A,R0
   \   000261   49           ORL       A,R1
   \   000262   7003         JNZ       $+5
   \   000264   02....       LJMP      ??zcl_ProcessMessageMSG_14 & 0xFFFF
   2288              {
   2289                zclParseCmd_t parseCmd;
   2290          
   2291                parseCmd.endpoint = pkt->endPoint;
   \   000267   85..82       MOV       DPL,?V0
   \   00026A   85..83       MOV       DPH,?V1
   \   00026D   E0           MOVX      A,@DPTR
   \   00026E   C0E0         PUSH      A
   \   000270   7410         MOV       A,#0x10
   \   000272   12....       LCALL     ?XSTACK_DISP0_8
   \   000275   D0E0         POP       A
   \   000277   F0           MOVX      @DPTR,A
   2292                parseCmd.dataLen = inMsg.pDataLen;
   \   000278   740C         MOV       A,#0xc
   \   00027A   12....       LCALL     ?XSTACK_DISP0_8
   \   00027D   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000280   7411         MOV       A,#0x11
   \   000282   12....       LCALL     ?XSTACK_DISP0_8
   \   000285   12....       LCALL     ??Subroutine240_0 & 0xFFFF
   2293                parseCmd.pData = inMsg.pData;
   \                     ??CrossCallReturnLabel_655:
   \   000288   12....       LCALL     ?XSTACK_DISP0_8
   \   00028B   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   00028E   7413         MOV       A,#0x13
   \   000290   12....       LCALL     ?XSTACK_DISP0_8
   \   000293   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   2294          
   2295                // Parse the command, remember that the return value is a pointer to allocated memory
   2296                inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
   \                     ??CrossCallReturnLabel_452:
   \   000296                ; Setup parameters for indirect call
   \   000296   7410         MOV       A,#0x10
   \   000298   12....       LCALL     ?XSTACK_DISP101_8
   \   00029B   8882         MOV       DPL,R0
   \   00029D   8983         MOV       DPH,R1
   \   00029F   12....       LCALL     ?CALL_IND
   \   0002A2   8A..         MOV       ?V0,R2
   \   0002A4   8B..         MOV       ?V1,R3
   \   0002A6   A8..         MOV       R0,?V0
   \   0002A8   A9..         MOV       R1,?V1
   \   0002AA   740E         MOV       A,#0xe
   \   0002AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0002AF   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   2297                if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
   \                     ??CrossCallReturnLabel_472:
   \   0002B2   E8           MOV       A,R0
   \   0002B3   49           ORL       A,R1
   \   0002B4   6046         JZ        ??zcl_ProcessMessageMSG_15
   \   0002B6   7409         MOV       A,#0x9
   \   0002B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BB   E0           MOVX      A,@DPTR
   \   0002BC   F5..         MOV       ?V0,A
   \   0002BE   75..00       MOV       ?V1,#0x0
   \   0002C1   7402         MOV       A,#0x2
   \   0002C3   78..         MOV       R0,#?V0
   \   0002C5   12....       LCALL     ?S_SHL
   \   0002C8   74..         MOV       A,#(zclCmdTable + 2) & 0xff
   \   0002CA   25..         ADD       A,?V0
   \   0002CC   F582         MOV       DPL,A
   \   0002CE   74..         MOV       A,#((zclCmdTable + 2) >> 8) & 0xff
   \   0002D0   35..         ADDC      A,?V1
   \   0002D2   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   0002D5   8882         MOV       DPL,R0
   \   0002D7   8983         MOV       DPH,R1
   \   0002D9   E582         MOV       A,DPL
   \   0002DB   4583         ORL       A,DPH
   \   0002DD   6012         JZ        ??zcl_ProcessMessageMSG_16
   2298                {
   2299                  // Process the command
   2300                  if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
   \   0002DF                ; Setup parameters for indirect call
   \   0002DF   7402         MOV       A,#0x2
   \   0002E1   12....       LCALL     ?XSTACK_DISP101_8
   \   0002E4   12....       LCALL     ?CALL_IND
   2301                  {
   2302                    // Couldn't find attribute in the table.
   2303                  }
   2304                }
   2305          
   2306                // Free the buffer
   2307                if ( inMsg.attrCmd )
   \   0002E7   740E         MOV       A,#0xe
   \   0002E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002EC   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   0002EF   600B         JZ        ??zcl_ProcessMessageMSG_15
   2308                {
   2309                  zcl_mem_free( inMsg.attrCmd );
   \                     ??zcl_ProcessMessageMSG_16:
   \   0002F1                ; Setup parameters for call to function osal_mem_free
   \   0002F1   740E         MOV       A,#0xe
   \   0002F3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F6   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   2310                }
   \                     ??CrossCallReturnLabel_399:
   \   0002F9   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2311          
   2312                if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
   \                     ??zcl_ProcessMessageMSG_15:
   \   0002FC   7409         MOV       A,#0x9
   \   0002FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000301   E0           MOVX      A,@DPTR
   \   000302   F8           MOV       R0,A
   \   000303   605C         JZ        ??zcl_ProcessMessageMSG_17
   \   000305   7402         MOV       A,#0x2
   \   000307   68           XRL       A,R0
   \   000308   6057         JZ        ??zcl_ProcessMessageMSG_17
   \   00030A   7403         MOV       A,#0x3
   \   00030C   68           XRL       A,R0
   \   00030D   6052         JZ        ??zcl_ProcessMessageMSG_17
   \   00030F   7405         MOV       A,#0x5
   \   000311   68           XRL       A,R0
   \   000312   604D         JZ        ??zcl_ProcessMessageMSG_17
   \   000314   7406         MOV       A,#0x6
   \   000316   68           XRL       A,R0
   \   000317   6048         JZ        ??zcl_ProcessMessageMSG_17
   \   000319   7408         MOV       A,#0x8
   \   00031B   68           XRL       A,R0
   \   00031C   6043         JZ        ??zcl_ProcessMessageMSG_17
   \   00031E   740C         MOV       A,#0xc
   \   000320   68           XRL       A,R0
   \   000321   603E         JZ        ??zcl_ProcessMessageMSG_17
   \   000323   7411         MOV       A,#0x11
   \   000325   68           XRL       A,R0
   \   000326   6039         JZ        ??zcl_ProcessMessageMSG_17
   \   000328   7413         MOV       A,#0x13
   \   00032A   68           XRL       A,R0
   \   00032B   6034         JZ        ??zcl_ProcessMessageMSG_17
   \   00032D   7415         MOV       A,#0x15
   \   00032F   68           XRL       A,R0
   \   000330   602F         JZ        ??zcl_ProcessMessageMSG_17
   \   000332   740B         MOV       A,#0xb
   \   000334   68           XRL       A,R0
   \   000335   602A         JZ        ??zcl_ProcessMessageMSG_17
   2313                {
   2314                  rawAFMsg = NULL;
   2315                  return ( ZCL_PROC_SUCCESS ); // We're done
   2316                }
   2317          
   2318                status = ZSuccess;
   \   000337   7E00         MOV       R6,#0x0
   \   000339   8046         SJMP      ??zcl_ProcessMessageMSG_13
   2319              }
   2320              else
   2321              {
   2322                // Unsupported message
   2323                status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
   \                     ??zcl_ProcessMessageMSG_14:
   \   00033B   7E82         MOV       R6,#-0x7e
   \   00033D   8042         SJMP      ??zcl_ProcessMessageMSG_13
   2324              }
   2325            }
   2326            else  // Not a foundation type message, so it must be specific to the cluster ID.
   2327            {
   2328              if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
   \                     ??zcl_ProcessMessageMSG_11:
   \   00033F   E5..         MOV       A,?V4
   \   000341   45..         ORL       A,?V5
   \   000343   602C         JZ        ??zcl_ProcessMessageMSG_18
   \   000345   85..82       MOV       DPL,?V4
   \   000348   85..83       MOV       DPH,?V5
   \   00034B   A3           INC       DPTR
   \   00034C   A3           INC       DPTR
   \   00034D   12....       LCALL     ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000350   601F         JZ        ??zcl_ProcessMessageMSG_18
   2329              {
   2330                // The return value of the plugin function will be
   2331                //  ZSuccess - Supported and need default response
   2332                //  ZFailure - Unsupported
   2333                //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
   2334                //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
   2335                //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
   2336                //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
   2337                status = pInPlugin->pfnIncomingHdlr( &inMsg );
   \   000352                ; Setup parameters for indirect call
   \   000352   7402         MOV       A,#0x2
   \   000354   12....       LCALL     ?XSTACK_DISP101_8
   \   000357   12....       LCALL     ?CALL_IND
   \   00035A   E9           MOV       A,R1
   \   00035B   FE           MOV       R6,A
   2338                if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
   \   00035C   74FF         MOV       A,#-0x1
   \   00035E   6E           XRL       A,R6
   \   00035F   700B         JNZ       ??zcl_ProcessMessageMSG_19
   2339                {
   2340                  rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_17:
   \   000361   90....       MOV       DPTR,#rawAFMsg
   \   000364   E4           CLR       A
   \   000365   F0           MOVX      @DPTR,A
   \   000366   A3           INC       DPTR
   \   000367   F0           MOVX      @DPTR,A
   2341                  return ( ZCL_PROC_SUCCESS ); // We're done
   \   000368   F9           MOV       R1,A
   \   000369   02....       LJMP      ??zcl_ProcessMessageMSG_1 & 0xFFFF
   2342                }
   2343              }
   2344          
   2345              if ( status == ZFailure )
   \                     ??zcl_ProcessMessageMSG_19:
   \   00036C   7401         MOV       A,#0x1
   \   00036E   6E           XRL       A,R6
   \   00036F   7010         JNZ       ??zcl_ProcessMessageMSG_13
   2346              {
   2347                // Unsupported message
   2348                if ( inMsg.hdr.fc.manuSpecific )
   \                     ??zcl_ProcessMessageMSG_18:
   \   000371   7404         MOV       A,#0x4
   \   000373   12....       LCALL     ?XSTACK_DISP0_8
   \   000376   E0           MOVX      A,@DPTR
   \   000377   5404         ANL       A,#0x4
   \   000379   6004         JZ        ??zcl_ProcessMessageMSG_20
   2349                {
   2350                  status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
   \   00037B   7E83         MOV       R6,#-0x7d
   \   00037D   8002         SJMP      ??zcl_ProcessMessageMSG_13
   2351                }
   2352                else
   2353                {
   2354                  status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??zcl_ProcessMessageMSG_20:
   \   00037F   7E81         MOV       R6,#-0x7f
   2355                }
   2356              }
   2357            }
   2358          
   2359            if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
   \                     ??zcl_ProcessMessageMSG_13:
   \   000381   7402         MOV       A,#0x2
   \   000383   12....       LCALL     ?XSTACK_DISP0_8
   \   000386   12....       LCALL     ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000389   7075         JNZ       ??zcl_ProcessMessageMSG_21
   \   00038B   7402         MOV       A,#0x2
   \   00038D   12....       LCALL     ?XSTACK_DISP0_8
   \   000390   12....       LCALL     ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000393   706B         JNZ       ??zcl_ProcessMessageMSG_21
   \   000395   7404         MOV       A,#0x4
   \   000397   12....       LCALL     ?XSTACK_DISP0_8
   \   00039A   E0           MOVX      A,@DPTR
   \   00039B   FA           MOV       R2,A
   \   00039C   5410         ANL       A,#0x10
   \   00039E   7060         JNZ       ??zcl_ProcessMessageMSG_21
   2360            {
   2361              // Send a Default Response command back
   2362              defautlRspCmd.statusCode = status;
   \   0003A0   7401         MOV       A,#0x1
   \   0003A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A5   EE           MOV       A,R6
   \   0003A6   F0           MOVX      @DPTR,A
   2363              defautlRspCmd.commandID = inMsg.hdr.commandID;
   \   0003A7   7409         MOV       A,#0x9
   \   0003A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0003AC   12....       LCALL     ?Subroutine111 & 0xFFFF
   2364              zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
   2365                                     inMsg.msg->clusterId, &defautlRspCmd,
   2366                                     !inMsg.hdr.fc.direction, true,
   2367                                     inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_210:
   \   0003AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B2   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0003B5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003B8   7407         MOV       A,#0x7
   \   0003BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0003BD   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0003C0   75..01       MOV       ?V0,#0x1
   \   0003C3   78..         MOV       R0,#?V0
   \   0003C5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003C8   EA           MOV       A,R2
   \   0003C9   13           RRC       A
   \   0003CA   13           RRC       A
   \   0003CB   13           RRC       A
   \   0003CC   541F         ANL       A,#0x1f
   \   0003CE   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   0003D1   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003D4   7405         MOV       A,#0x5
   \   0003D6   12....       LCALL     ?XSTACK_DISP100_8
   \   0003D9   88..         MOV       ?V0,R0
   \   0003DB   89..         MOV       ?V1,R1
   \   0003DD   78..         MOV       R0,#?V0
   \   0003DF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003E2   7409         MOV       A,#0x9
   \   0003E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0003E7   12....       LCALL     ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   0003EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0003ED   12....       LCALL     ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   0003F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0003F3   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0003F6   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   0003F9   7407         MOV       A,#0x7
   \   0003FB   12....       LCALL     ?DEALLOC_XSTACK8
   2368              defaultResponseSent = TRUE;
   \   0003FE   D2..         SETB      ?VB.0
   2369            }
   2370          
   2371            rawAFMsg = NULL;
   \                     ??zcl_ProcessMessageMSG_21:
   \   000400   90....       MOV       DPTR,#rawAFMsg
   \   000403   E4           CLR       A
   \   000404   F0           MOVX      @DPTR,A
   \   000405   A3           INC       DPTR
   \   000406   F0           MOVX      @DPTR,A
   2372            if ( status == ZSuccess )
   \   000407   EE           MOV       A,R6
   \   000408   7004         JNZ       ??zcl_ProcessMessageMSG_22
   2373            {
   2374              return ( ZCL_PROC_SUCCESS );
   \   00040A   7900         MOV       R1,#0x0
   \   00040C   8019         SJMP      ??zcl_ProcessMessageMSG_1
   2375            }
   2376            else if ( status == ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND )
   \                     ??zcl_ProcessMessageMSG_22:
   \   00040E   7484         MOV       A,#-0x7c
   \   000410   6E           XRL       A,R6
   \   000411   A2..         MOV       C,?VB.0
   \   000413   700A         JNZ       ??zcl_ProcessMessageMSG_23
   2377            {
   2378              if ( defaultResponseSent )
   \   000415   5004         JNC       ??zcl_ProcessMessageMSG_24
   2379              {
   2380                return ( ZCL_PROC_MANUFACTURER_SPECIFIC_DR );
   \   000417   7907         MOV       R1,#0x7
   \   000419   800C         SJMP      ??zcl_ProcessMessageMSG_1
   2381              }
   2382              else
   2383              {
   2384                return ( ZCL_PROC_MANUFACTURER_SPECIFIC );
   \                     ??zcl_ProcessMessageMSG_24:
   \   00041B   7906         MOV       R1,#0x6
   \   00041D   8008         SJMP      ??zcl_ProcessMessageMSG_1
   2385              }
   2386            }
   2387            else
   2388            {
   2389              if ( defaultResponseSent )
   \                     ??zcl_ProcessMessageMSG_23:
   \   00041F   5004         JNC       ??zcl_ProcessMessageMSG_25
   2390              {
   2391                return ( ZCL_PROC_NOT_HANDLED_DR );
   \   000421   7909         MOV       R1,#0x9
   \   000423   8002         SJMP      ??zcl_ProcessMessageMSG_1
   2392              }
   2393              else
   2394              {
   2395                return ( ZCL_PROC_NOT_HANDLED );
   \                     ??zcl_ProcessMessageMSG_25:
   \   000425   7908         MOV       R1,#0x8
   \                     ??zcl_ProcessMessageMSG_1:
   \   000427   7415         MOV       A,#0x15
   2396              }
   2397            }
   \   000429   02....       LJMP      ??Subroutine194_0 & 0xFFFF
   2398          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   F5..         MOV       ?V0,A
   \   000002   E4           CLR       A
   \   000003   3F           ADDC      A,R7
   \   000004   F5..         MOV       ?V1,A
   \   000006                ; Setup parameters for call to function zclParseHdr
   \   000006                ; Setup parameters for call to function afFindEndPointDesc
   \   000006   85..82       MOV       DPL,?V0
   \   000009   F583         MOV       DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   F0           MOVX      @DPTR,A
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000008   7408         MOV       A,#0x8
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FB           MOV       R3,A
   \   000009   7409         MOV       A,#0x9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   000003   C8           XCH       A,R0
   \   000004   2415         ADD       A,#0x15
   \   000006   F582         MOV       DPL,A
   \   000008   E4           CLR       A
   \   000009   38           ADDC      A,R0
   \   00000A   F583         MOV       DPH,A
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   000003   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000006   7409         MOV       A,#0x9
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_645:
   \   000009   85..82       MOV       DPL,?V0
   \   00000C   85..83       MOV       DPH,?V1
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   F9           MOV       R1,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine196_0
   \   000004                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   12....       LCALL     ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000003   E582         MOV       A,DPL
   \   000005   4583         ORL       A,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   F583         MOV       DPH,A
   \   000002   E4           CLR       A
   \   000003   93           MOVC      A,@A+DPTR
   \   000004   F8           MOV       R0,A
   \   000005   7401         MOV       A,#0x1
   \   000007   93           MOVC      A,@A+DPTR
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   000003                REQUIRE ??Subroutine211_0
   \   000003                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   F9           MOV       R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine223_0
   \   000004                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_622:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   000003   6401         XRL       A,#0x1
   \   000005   5401         ANL       A,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   13           RRC       A
   \   000002   13           RRC       A
   \   000003   13           RRC       A
   \   000004   541F         ANL       A,#0x1f
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   6401         XRL       A,#0x1
   \   000002   5401         ANL       A,#0x1
   \   000004   F5..         MOV       ?V0,A
   \   000006   78..         MOV       R0,#?V0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   C8           XCH       A,R0
   \   000003   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_639:
   \   000006   38           ADDC      A,R0
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_662:
   \   000003   740A         MOV       A,#0xa
   \   000005   22           RET
   2399          
   2400          /*********************************************************************
   2401           * PRIVATE FUNCTIONS
   2402           *********************************************************************/
   2403          
   2404          /*********************************************************************
   2405           * @fn      zclParseHdr
   2406           *
   2407           * @brief   Parse header of the ZCL format
   2408           *
   2409           * @param   hdr - place to put the frame control information
   2410           * @param   pData - incoming buffer to parse
   2411           *
   2412           * @return  pointer past the header
   2413           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2414          uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclParseHdr:
   2415          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2416            // Clear the header
   2417            zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C06         MOV       R4,#0x6
   \   00000F   7D00         MOV       R5,#0x0
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
   2418          
   2419            // Parse the Frame Control
   2420            hdr->fc.type = zcl_FCType( *pData );
   \   000016   85..82       MOV       DPL,?V0
   \   000019   85..83       MOV       DPH,?V1
   \   00001C   E0           MOVX      A,@DPTR
   \   00001D   54FC         ANL       A,#0xfc
   \   00001F   F8           MOV       R0,A
   \   000020   A3           INC       DPTR
   \   000021   E0           MOVX      A,@DPTR
   \   000022   F9           MOV       R1,A
   \   000023   8E82         MOV       DPL,R6
   \   000025   8F83         MOV       DPH,R7
   \   000027   E0           MOVX      A,@DPTR
   \   000028   5403         ANL       A,#0x3
   \   00002A   FA           MOV       R2,A
   \   00002B   E8           MOV       A,R0
   \   00002C   4A           ORL       A,R2
   \   00002D   85..82       MOV       DPL,?V0
   \   000030   85..83       MOV       DPH,?V1
   \   000033   12....       LCALL     ?Subroutine21 & 0xFFFF
   2421            hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_680:
   \   000036   A2E2         MOV       C,0xE0 /* A   */.2
   \   000038   5004         JNC       ??zclParseHdr_0
   \   00003A   D2F0         SETB      B.0
   \   00003C   8002         SJMP      ??zclParseHdr_1
   \                     ??zclParseHdr_0:
   \   00003E   C2F0         CLR       B.0
   \                     ??zclParseHdr_1:
   \   000040   85..82       MOV       DPL,?V0
   \   000043   85..83       MOV       DPH,?V1
   \   000046   E0           MOVX      A,@DPTR
   \   000047   54FB         ANL       A,#0xfb
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A2F0         MOV       C,B.0
   \   00004C   E4           CLR       A
   \   00004D   33           RLC       A
   \   00004E   F5..         MOV       ?V2,A
   \   000050   75..00       MOV       ?V3,#0x0
   \   000053   7402         MOV       A,#0x2
   \   000055   78..         MOV       R0,#?V2
   \   000057   12....       LCALL     ?S_SHL
   \   00005A   E0           MOVX      A,@DPTR
   \   00005B   45..         ORL       A,?V2
   \   00005D   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   2422            if ( zcl_FCDirection( *pData ) )
   \                     ??CrossCallReturnLabel_681:
   \   000060   A2E3         MOV       C,0xE0 /* A   */.3
   \   000062   85..82       MOV       DPL,?V0
   \   000065   85..83       MOV       DPH,?V1
   \   000068   E0           MOVX      A,@DPTR
   \   000069   5004         JNC       ??zclParseHdr_2
   2423            {
   2424              hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
   \   00006B   4408         ORL       A,#0x8
   \   00006D   8002         SJMP      ??zclParseHdr_3
   2425            }
   2426            else
   2427            {
   2428              hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
   \                     ??zclParseHdr_2:
   \   00006F   54F7         ANL       A,#0xf7
   2429            }
   \                     ??zclParseHdr_3:
   \   000071   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   2430          
   2431            hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
   \                     ??CrossCallReturnLabel_682:
   \   000074   A2E4         MOV       C,0xE0 /* A   */.4
   \   000076   5004         JNC       ??zclParseHdr_4
   \   000078   D2F0         SETB      B.0
   \   00007A   8002         SJMP      ??zclParseHdr_5
   \                     ??zclParseHdr_4:
   \   00007C   C2F0         CLR       B.0
   \                     ??zclParseHdr_5:
   \   00007E   85..82       MOV       DPL,?V0
   \   000081   85..83       MOV       DPH,?V1
   \   000084   E0           MOVX      A,@DPTR
   \   000085   54EF         ANL       A,#0xef
   \   000087   F0           MOVX      @DPTR,A
   \   000088   A2F0         MOV       C,B.0
   \   00008A   E4           CLR       A
   \   00008B   33           RLC       A
   \   00008C   F5..         MOV       ?V2,A
   \   00008E   7404         MOV       A,#0x4
   \   000090   78..         MOV       R0,#?V2
   \   000092   12....       LCALL     ?S_SHL
   \   000095   E0           MOVX      A,@DPTR
   \   000096   45..         ORL       A,?V2
   \   000098   12....       LCALL     ?Subroutine17 & 0xFFFF
   2432            pData++;  // move past the frame control field
   2433          
   2434            // parse the manfacturer code
   2435            if ( hdr->fc.manuSpecific )
   \                     ??CrossCallReturnLabel_12:
   \   00009B   85..82       MOV       DPL,?V0
   \   00009E   85..83       MOV       DPH,?V1
   \   0000A1   E0           MOVX      A,@DPTR
   \   0000A2   5404         ANL       A,#0x4
   \   0000A4   601C         JZ        ??zclParseHdr_6
   2436            {
   2437              hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
   \   0000A6   8E82         MOV       DPL,R6
   \   0000A8   8F83         MOV       DPH,R7
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   FA           MOV       R2,A
   \   0000AC   A3           INC       DPTR
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   F9           MOV       R1,A
   \   0000AF   EA           MOV       A,R2
   \   0000B0   85..82       MOV       DPL,?V0
   \   0000B3   85..83       MOV       DPH,?V1
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   12....       LCALL     ??Subroutine217_0 & 0xFFFF
   2438              pData += 2;
   \                     ??CrossCallReturnLabel_467:
   \   0000BB   EE           MOV       A,R6
   \   0000BC   2402         ADD       A,#0x2
   \   0000BE   FE           MOV       R6,A
   \   0000BF   5001         JNC       ??zclParseHdr_6
   \   0000C1   0F           INC       R7
   2439            }
   2440          
   2441            // parse the Transaction Sequence Number
   2442            hdr->transSeqNum = *pData++;
   \                     ??zclParseHdr_6:
   \   0000C2   8E82         MOV       DPL,R6
   \   0000C4   8F83         MOV       DPH,R7
   \   0000C6   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   0000C9   12....       LCALL     ?Subroutine46 & 0xFFFF
   2443          
   2444            // parse the Cluster's command ID
   2445            hdr->commandID = *pData++;
   \                     ??CrossCallReturnLabel_64:
   \   0000CC   12....       LCALL     ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   0000CF   A3           INC       DPTR
   \   0000D0   F0           MOVX      @DPTR,A
   2446          
   2447            // Should point to the frame payload
   2448            return ( pData );
   \   0000D1   EE           MOV       A,R6
   \   0000D2   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_663:
   \   0000D5   3F           ADDC      A,R7
   \   0000D6   FB           MOV       R3,A
   \   0000D7   02....       LJMP      ?Subroutine4 & 0xFFFF
   2449          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL     ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_688:
   \   000003   A3           INC       DPTR
   \   000004   AE82         MOV       R6,DPL
   \   000006   AF83         MOV       R7,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   2402         ADD       A,#0x2
   \   000002   FA           MOV       R2,A
   \   000003   E4           CLR       A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E9           MOV       A,R1
   \   000003                REQUIRE ??Subroutine246_0
   \   000003                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   12....       LCALL     ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_689:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET
   2450          
   2451          /*********************************************************************
   2452           * @fn      zclBuildHdr
   2453           *
   2454           * @brief   Build header of the ZCL format
   2455           *
   2456           * @param   hdr - outgoing header information
   2457           * @param   pData - outgoing header space
   2458           *
   2459           * @return  pointer past the header
   2460           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2461          static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
   \                     zclBuildHdr:
   2462          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2463            // Build the Frame Control byte
   2464            *pData = hdr->fc.type;
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   5403         ANL       A,#0x3
   \   00000C   8C82         MOV       DPL,R4
   \   00000E   8D83         MOV       DPH,R5
   \   000010   12....       LCALL     ??Subroutine197_0 & 0xFFFF
   2465            *pData |= hdr->fc.manuSpecific << 2;
   \                     ??CrossCallReturnLabel_360:
   \   000013   5404         ANL       A,#0x4
   \   000015   12....       LCALL     ?Subroutine39 & 0xFFFF
   2466            *pData |= hdr->fc.direction << 3;
   \                     ??CrossCallReturnLabel_358:
   \   000018   5408         ANL       A,#0x8
   \   00001A   12....       LCALL     ?Subroutine39 & 0xFFFF
   2467            *pData |= hdr->fc.disableDefaultRsp << 4;
   \                     ??CrossCallReturnLabel_359:
   \   00001D   5410         ANL       A,#0x10
   \   00001F   F8           MOV       R0,A
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   E0           MOVX      A,@DPTR
   \   000025   48           ORL       A,R0
   \   000026   F0           MOVX      @DPTR,A
   2468            pData++;  // move past the frame control field
   \   000027   A3           INC       DPTR
   \   000028   AC82         MOV       R4,DPL
   \   00002A   AD83         MOV       R5,DPH
   2469          
   2470            // Add the manfacturer code
   2471            if ( hdr->fc.manuSpecific )
   \   00002C   8A82         MOV       DPL,R2
   \   00002E   8B83         MOV       DPH,R3
   \   000030   E0           MOVX      A,@DPTR
   \   000031   5404         ANL       A,#0x4
   \   000033   6016         JZ        ??zclBuildHdr_0
   2472            {
   2473              *pData++ = LO_UINT16( hdr->manuCode );
   \   000035   12....       LCALL     ?Subroutine131 & 0xFFFF
   2474              *pData++ = HI_UINT16( hdr->manuCode );
   2475            }
   \                     ??CrossCallReturnLabel_244:
   \   000038   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   00003B   12....       LCALL     ??Subroutine190_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   00003E   8C82         MOV       DPL,R4
   \   000040   8D83         MOV       DPH,R5
   \   000042   A3           INC       DPTR
   \   000043   F0           MOVX      @DPTR,A
   \   000044   EC           MOV       A,R4
   \   000045   2402         ADD       A,#0x2
   \   000047   FC           MOV       R4,A
   \   000048   5001         JNC       ??zclBuildHdr_0
   \   00004A   0D           INC       R5
   2476          
   2477            // Add the Transaction Sequence Number
   2478            *pData++ = hdr->transSeqNum;
   \                     ??zclBuildHdr_0:
   \   00004B   8A82         MOV       DPL,R2
   \   00004D   8B83         MOV       DPH,R3
   \   00004F   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000052   12....       LCALL     ?Subroutine37 & 0xFFFF
   2479          
   2480            // Add the Cluster's command ID
   2481            *pData++ = hdr->commandID;
   \                     ??CrossCallReturnLabel_52:
   \   000055   12....       LCALL     ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000058   A3           INC       DPTR
   \   000059   F0           MOVX      @DPTR,A
   2482          
   2483            // Should point to the frame payload
   2484            return ( pData );
   \   00005A   EC           MOV       A,R4
   \   00005B   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_664:
   \   00005E   3D           ADDC      A,R5
   \   00005F   FB           MOV       R3,A
   \   000060   80..         SJMP      ??Subroutine198_0
   2485          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F8           MOV       R0,A
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   E0           MOVX      A,@DPTR
   \   000006   48           ORL       A,R0
   \   000007                REQUIRE ??Subroutine197_0
   \   000007                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   E0           MOVX      A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine202_0
   \   000004                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   8C82         MOV       DPL,R4
   \   000003   8D83         MOV       DPH,R5
   \   000005   22           RET
   2486          
   2487          /*********************************************************************
   2488           * @fn      zclCalcHdrSize
   2489           *
   2490           * @brief   Calculate the number of bytes needed for an outgoing
   2491           *          ZCL header.
   2492           *
   2493           * @param   hdr - outgoing header information
   2494           *
   2495           * @return  returns the number of bytes needed
   2496           */
   2497          static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
   2498          {
   2499            uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
   2500          
   2501            // Add the manfacturer code
   2502            if ( hdr->fc.manuSpecific )
   2503            {
   2504              needed += 2;
   2505            }
   2506          
   2507            return ( needed );
   2508          }
   2509          
   2510          /*********************************************************************
   2511           * @fn      zclFindPlugin
   2512           *
   2513           * @brief   Find the right plugin for a cluster ID
   2514           *
   2515           * @param   clusterID - cluster ID to look for
   2516           * @param   profileID - profile ID
   2517           *
   2518           * @return  pointer to plugin, NULL if not found
   2519           */
   2520          static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
   2521          {
   2522            zclLibPlugin_t *pLoop = plugins;
   2523          
   2524            (void)profileID;  // Intentionally unreferenced parameter
   2525          
   2526            while ( pLoop != NULL )
   2527            {
   2528              if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
   2529              {
   2530                return ( pLoop );
   2531              }
   2532          
   2533              pLoop = pLoop->next;
   2534            }
   2535          
   2536            return ( (zclLibPlugin_t *)NULL );
   2537          }
   2538          
   2539          #ifdef ZCL_DISCOVER
   2540          /*********************************************************************
   2541           * @fn      zclFindCmdRecsList
   2542           *
   2543           * @brief   Find the right command record list for an endpoint
   2544           *
   2545           * @param   endpoint - endpoint to look for
   2546           *
   2547           * @return  pointer to record list, NULL if not found
   2548           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2549          static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
   \                     zclFindCmdRecsList:
   2550          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2551            zclCmdRecsList_t *pLoop = gpCmdList;
   \   000004   90....       MOV       DPTR,#gpCmdList
   \   000007   8004         SJMP      ??zclFindCmdRecsList_0
   2552          
   2553            while ( pLoop != NULL )
   2554            {
   2555              if ( pLoop->endpoint == endpoint )
   2556              {
   2557                return ( pLoop );
   2558              }
   2559          
   2560              pLoop = pLoop->pNext;
   \                     ??zclFindCmdRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindCmdRecsList_0:
   \   00000D   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000010   600C         JZ        ??zclFindCmdRecsList_2
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   69           XRL       A,R1
   \   00001A   70ED         JNZ       ??zclFindCmdRecsList_1
   \   00001C   8004         SJMP      ??zclFindCmdRecsList_3
   2561            }
   2562          
   2563            return ( NULL );
   \                     ??zclFindCmdRecsList_2:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclFindCmdRecsList_3:
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   2564          }
   2565          
   2566          /*********************************************************************
   2567           * @fn      zclFindCmdRec
   2568           *
   2569           * @brief   Find the command record that matchs the parameters
   2570           *
   2571           * @param   endpoint - Application's endpoint
   2572           * @param   clusterID - cluster ID
   2573           * @param   attrId - attribute looking for
   2574           * @param   pAttr - attribute record to be returned
   2575           *
   2576           * @return  TRUE if record found. FALSE, otherwise.
   2577           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2578          uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
   \                     zclFindCmdRec:
   2579          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V1,R4
   2580            uint8 i;
   2581            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   \   00000B                ; Setup parameters for call to function zclFindCmdRecsList
   \   00000B   12....       LCALL     `??zclFindCmdRecsList::?relay`; Banked call to: zclFindCmdRecsList
   2582          
   2583            if ( pRec != NULL )
   \   00000E   EA           MOV       A,R2
   \   00000F   4B           ORL       A,R3
   \   000010   6061         JZ        ??zclFindCmdRec_0
   2584            {
   2585              for ( i = 0; i < pRec->numCommands; i++ )
   \   000012   7C00         MOV       R4,#0x0
   \   000014   8001         SJMP      ??zclFindCmdRec_1
   \                     ??zclFindCmdRec_2:
   \   000016   0C           INC       R4
   \                     ??zclFindCmdRec_1:
   \   000017   8A82         MOV       DPL,R2
   \   000019   8B83         MOV       DPH,R3
   \   00001B   A3           INC       DPTR
   \   00001C   A3           INC       DPTR
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   F8           MOV       R0,A
   \   000020   EC           MOV       A,R4
   \   000021   C3           CLR       C
   \   000022   98           SUBB      A,R0
   \   000023   504E         JNC       ??zclFindCmdRec_0
   2586              {
   2587                if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
   \   000025   EC           MOV       A,R4
   \   000026   F5..         MOV       ?V2,A
   \   000028   75..00       MOV       ?V3,#0x0
   \   00002B   7402         MOV       A,#0x2
   \   00002D   78..         MOV       R0,#?V2
   \   00002F   12....       LCALL     ?S_SHL
   \   000032   8A82         MOV       DPL,R2
   \   000034   8B83         MOV       DPH,R3
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   25..         ADD       A,?V2
   \   00003D   F8           MOV       R0,A
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   35..         ADDC      A,?V3
   \   000042   F9           MOV       R1,A
   \   000043   8882         MOV       DPL,R0
   \   000045   8983         MOV       DPH,R1
   \   000047   E4           CLR       A
   \   000048   93           MOVC      A,@A+DPTR
   \   000049   F5..         MOV       ?V2,A
   \   00004B   7401         MOV       A,#0x1
   \   00004D   93           MOVC      A,@A+DPTR
   \   00004E   F5..         MOV       ?V3,A
   \   000050   EE           MOV       A,R6
   \   000051   65..         XRL       A,?V2
   \   000053   7003         JNZ       ??zclFindCmdRec_3
   \   000055   EF           MOV       A,R7
   \   000056   65..         XRL       A,?V3
   \                     ??zclFindCmdRec_3:
   \   000058   70BC         JNZ       ??zclFindCmdRec_2
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E4           CLR       A
   \   00005D   93           MOVC      A,@A+DPTR
   \   00005E   65..         XRL       A,?V1
   \   000060   70B4         JNZ       ??zclFindCmdRec_2
   2588                {
   2589                  *pCmd = pRec->pCmdRecs[i];
   \   000062   740C         MOV       A,#0xc
   \   000064   12....       LCALL     ?XSTACK_DISP0_8
   \   000067   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00006A   7404         MOV       A,#0x4
   \   00006C   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2590          
   2591                  return ( TRUE ); // EMBEDDED RETURN
   \   00006F   7901         MOV       R1,#0x1
   \   000071   8002         SJMP      ??zclFindCmdRec_4
   2592                }
   2593              }
   2594            }
   2595          
   2596            return ( FALSE );
   \                     ??zclFindCmdRec_0:
   \   000073   7900         MOV       R1,#0x0
   \                     ??zclFindCmdRec_4:
   \   000075   02....       LJMP      ?Subroutine4 & 0xFFFF
   2597          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   000003   8983         MOV       DPH,R1
   \   000005   8882         MOV       DPL,R0
   \   000007   22           RET
   2598          #endif // ZCL_DISCOVER
   2599          
   2600          /*********************************************************************
   2601           * @fn      zclFindAttrRecsList
   2602           *
   2603           * @brief   Find the right attribute record list for an endpoint
   2604           *
   2605           * @param   clusterID - endpointto look for
   2606           *
   2607           * @return  pointer to record list, NULL if not found
   2608           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2609          zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
   \                     zclFindAttrRecsList:
   2610          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2611            zclAttrRecsList *pLoop = attrList;
   \   000004   90....       MOV       DPTR,#attrList
   \   000007   8004         SJMP      ??zclFindAttrRecsList_0
   2612          
   2613            while ( pLoop != NULL )
   2614            {
   2615              if ( pLoop->endpoint == endpoint )
   2616              {
   2617                return ( pLoop );
   2618              }
   2619          
   2620              pLoop = pLoop->next;
   \                     ??zclFindAttrRecsList_1:
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \                     ??zclFindAttrRecsList_0:
   \   00000D   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000010   600C         JZ        ??zclFindAttrRecsList_2
   \   000012   8A82         MOV       DPL,R2
   \   000014   8B83         MOV       DPH,R3
   \   000016   A3           INC       DPTR
   \   000017   A3           INC       DPTR
   \   000018   E0           MOVX      A,@DPTR
   \   000019   69           XRL       A,R1
   \   00001A   70ED         JNZ       ??zclFindAttrRecsList_1
   \   00001C   8004         SJMP      ??zclFindAttrRecsList_3
   2621            }
   2622          
   2623            return ( NULL );
   \                     ??zclFindAttrRecsList_2:
   \   00001E   7A00         MOV       R2,#0x0
   \   000020   7B00         MOV       R3,#0x0
   \                     ??zclFindAttrRecsList_3:
   \   000022   02....       LJMP      ?Subroutine0 & 0xFFFF
   2624          }
   2625          
   2626          /*********************************************************************
   2627           * @fn      zclFindAttrRec
   2628           *
   2629           * @brief   Find the attribute record that matchs the parameters
   2630           *
   2631           * @param   endpoint - Application's endpoint
   2632           * @param   clusterID - cluster ID
   2633           * @param   attrId - attribute looking for
   2634           * @param   pAttr - attribute record to be returned
   2635           *
   2636           * @return  TRUE if record found. FALSE, otherwise.
   2637           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2638          uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
   \                     zclFindAttrRec:
   2639          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   2640            uint8 x;
   2641            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000D   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   2642          
   2643            if ( pRec != NULL )
   \   000010   EA           MOV       A,R2
   \   000011   4B           ORL       A,R3
   \   000012   606A         JZ        ??zclFindAttrRec_0
   2644            {
   2645              for ( x = 0; x < pRec->numAttributes; x++ )
   \   000014   7C00         MOV       R4,#0x0
   \   000016   8001         SJMP      ??zclFindAttrRec_1
   \                     ??zclFindAttrRec_2:
   \   000018   0C           INC       R4
   \                     ??zclFindAttrRec_1:
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   A3           INC       DPTR
   \   000020   A3           INC       DPTR
   \   000021   A3           INC       DPTR
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   EC           MOV       A,R4
   \   000027   C3           CLR       C
   \   000028   98           SUBB      A,R0
   \   000029   5053         JNC       ??zclFindAttrRec_0
   2646              {
   2647                if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
   \   00002B   EC           MOV       A,R4
   \   00002C   F5..         MOV       ?V4,A
   \   00002E   75..00       MOV       ?V5,#0x0
   \   000031   7403         MOV       A,#0x3
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?S_SHL
   \   000038   8A82         MOV       DPL,R2
   \   00003A   8B83         MOV       DPH,R3
   \   00003C   A3           INC       DPTR
   \   00003D   A3           INC       DPTR
   \   00003E   A3           INC       DPTR
   \   00003F   A3           INC       DPTR
   \   000040   A3           INC       DPTR
   \   000041   A3           INC       DPTR
   \   000042   A3           INC       DPTR
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   25..         ADD       A,?V4
   \   000047   F8           MOV       R0,A
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   35..         ADDC      A,?V5
   \   00004C   F9           MOV       R1,A
   \   00004D   8882         MOV       DPL,R0
   \   00004F   8983         MOV       DPH,R1
   \   000051   12....       LCALL     ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000054   E5..         MOV       A,?V0
   \   000056   65..         XRL       A,?V4
   \   000058   7004         JNZ       ??zclFindAttrRec_3
   \   00005A   E5..         MOV       A,?V1
   \   00005C   65..         XRL       A,?V5
   \                     ??zclFindAttrRec_3:
   \   00005E   70B8         JNZ       ??zclFindAttrRec_2
   \   000060   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000063   EE           MOV       A,R6
   \   000064   65..         XRL       A,?V4
   \   000066   7003         JNZ       ??zclFindAttrRec_4
   \   000068   EF           MOV       A,R7
   \   000069   65..         XRL       A,?V5
   \                     ??zclFindAttrRec_4:
   \   00006B   70AB         JNZ       ??zclFindAttrRec_2
   2648                {
   2649                  *pAttr = pRec->attrs[x];
   \   00006D   740E         MOV       A,#0xe
   \   00006F   12....       LCALL     ?XSTACK_DISP0_8
   \   000072   12....       LCALL     ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000075   7408         MOV       A,#0x8
   \   000077   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2650          
   2651                  return ( TRUE ); // EMBEDDED RETURN
   \   00007A   7901         MOV       R1,#0x1
   \   00007C   8002         SJMP      ??zclFindAttrRec_5
   2652                }
   2653              }
   2654            }
   2655          
   2656            return ( FALSE );
   \                     ??zclFindAttrRec_0:
   \   00007E   7900         MOV       R1,#0x0
   \                     ??zclFindAttrRec_5:
   \   000080   02....       LJMP      ??Subroutine205_0 & 0xFFFF
   2657          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine200_0
   \   000002                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   E4           CLR       A
   \   000001   93           MOVC      A,@A+DPTR
   \   000002   F5..         MOV       ?V4,A
   \   000004   7401         MOV       A,#0x1
   \   000006   93           MOVC      A,@A+DPTR
   \   000007   F5..         MOV       ?V5,A
   \   000009   22           RET
   2658          
   2659          #if defined ( ZCL_STANDALONE )
   2660          /*********************************************************************
   2661           * @fn      zclSetAttrRecList
   2662           *
   2663           * @brief   Set attribute record list for end point
   2664           *
   2665           * @param   endpoint - endpoint the attribute list belongs to
   2666           * @param   numAttr - number of attributes in list
   2667           * @param   attrList - array of attribute records.
   2668           *                     NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE
   2669           *                     IN ASCENDING ORDER. OTHERWISE, THE DISCOVERY
   2670           *                     RESPONSE COMMAND WILL NOT HAVE THE RIGHT
   2671           *                     ATTRIBUTE INFO
   2672           *
   2673           * @return  TRUE if successful, FALSE otherwise.
   2674           */
   2675          uint8 zclSetAttrRecList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t attrList[] )
   2676          {
   2677            zclAttrRecsList *pRecsList = zclFindAttrRecsList( endpoint );
   2678          
   2679            if ( pRecsList != NULL )
   2680            {
   2681              pRecsList->numAttributes = numAttr;
   2682              pRecsList->attrs = attrList;
   2683              return ( TRUE );
   2684            }
   2685          
   2686            return ( FALSE );
   2687          }
   2688          
   2689          #endif // ZCL_STANDALONE
   2690          
   2691          #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
   2692          /*********************************************************************
   2693           * @fn      zclGetReadWriteCB
   2694           *
   2695           * @brief   Get the Read/Write callback function pointer for a given endpoint.
   2696           *
   2697           * @param   endpoint - Application's endpoint
   2698           *
   2699           * @return  Read/Write CB, NULL if not found
   2700           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2701          static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
   \                     zclGetReadWriteCB:
   2702          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2703            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2704          
   2705            if ( pRec != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6005         JZ        ??zclGetReadWriteCB_0
   2706            {
   2707              return ( pRec->pfnReadWriteCB );
   \   000012   12....       LCALL     ??Subroutine207_0 & 0xFFFF
   2708            }
   \                     ??CrossCallReturnLabel_416:
   \   000015   8004         SJMP      ??zclGetReadWriteCB_1
   2709          
   2710            return ( NULL );
   \                     ??zclGetReadWriteCB_0:
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \                     ??zclGetReadWriteCB_1:
   \   00001B   02....       LJMP      ??Subroutine199_0 & 0xFFFF
   2711          }
   2712          
   2713          /*********************************************************************
   2714           * @fn      zclGetAuthorizeCB
   2715           *
   2716           * @brief   Get the Read/Write Authorization callback function pointer
   2717           *          for a given endpoint.
   2718           *
   2719           * @param   endpoint - Application's endpoint
   2720           *
   2721           * @return  Authorization CB, NULL if not found
   2722           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2723          static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
   \                     zclGetAuthorizeCB:
   2724          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2725            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   000005                ; Setup parameters for call to function zclFindAttrRecsList
   \   000005   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2726          
   2727            if ( pRec != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6005         JZ        ??zclGetAuthorizeCB_0
   2728            {
   2729              return ( pRec->pfnAuthorizeCB );
   \   000012   12....       LCALL     ?Subroutine83 & 0xFFFF
   2730            }
   \                     ??CrossCallReturnLabel_420:
   \   000015   8004         SJMP      ??zclGetAuthorizeCB_1
   2731          
   2732            return ( NULL );
   \                     ??zclGetAuthorizeCB_0:
   \   000017   7A00         MOV       R2,#0x0
   \   000019   7B00         MOV       R3,#0x0
   \                     ??zclGetAuthorizeCB_1:
   \   00001B   02....       LJMP      ??Subroutine199_0 & 0xFFFF
   2733          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine206_0
   \   000001                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   A3           INC       DPTR
   \   000001                REQUIRE ??Subroutine207_0
   \   000001                ; // Fall through to label ??Subroutine207_0
   2734          #endif // ZCL_READ || ZCL_WRITE
   2735          
   2736          /*********************************************************************
   2737           * @fn      zclFindClusterOption
   2738           *
   2739           * @brief   Find the option record that matchs the cluster id
   2740           *
   2741           * @param   endpoint - Application's endpoint
   2742           * @param   clusterID - cluster ID looking for
   2743           *
   2744           * @return  pointer to clutser option, NULL if not found
   2745           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2746          static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclFindClusterOption:
   2747          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   \   000007   EA           MOV       A,R2
   \   000008   FC           MOV       R4,A
   \   000009   EB           MOV       A,R3
   \   00000A   FD           MOV       R5,A
   2748            zclClusterOptionList *pLoop;
   2749          
   2750            pLoop = clusterOptionList;
   \   00000B   90....       MOV       DPTR,#clusterOptionList
   \   00000E   8004         SJMP      ??zclFindClusterOption_0
   2751            while ( pLoop != NULL )
   2752            {
   2753              if ( pLoop->endpoint == endpoint )
   2754              {
   2755                uint8 x;
   2756                for ( x = 0; x < pLoop->numOptions; x++ )
   2757                {
   2758                  if ( pLoop->options[x].clusterID == clusterID )
   2759                  {
   2760                    return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
   2761                  }
   2762                }
   2763              }
   2764          
   2765              pLoop = pLoop->next;
   \                     ??zclFindClusterOption_1:
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \                     ??zclFindClusterOption_0:
   \   000014   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000017   6046         JZ        ??zclFindClusterOption_2
   \   000019   8882         MOV       DPL,R0
   \   00001B   8983         MOV       DPH,R1
   \   00001D   A3           INC       DPTR
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6E           XRL       A,R6
   \   000021   70ED         JNZ       ??zclFindClusterOption_1
   \   000023   7F00         MOV       R7,#0x0
   \   000025   8001         SJMP      ??zclFindClusterOption_3
   \                     ??zclFindClusterOption_4:
   \   000027   0F           INC       R7
   \                     ??zclFindClusterOption_3:
   \   000028   8882         MOV       DPL,R0
   \   00002A   8983         MOV       DPH,R1
   \   00002C   A3           INC       DPTR
   \   00002D   A3           INC       DPTR
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   FA           MOV       R2,A
   \   000031   EF           MOV       A,R7
   \   000032   C3           CLR       C
   \   000033   9A           SUBB      A,R2
   \   000034   50DA         JNC       ??zclFindClusterOption_1
   \   000036   EF           MOV       A,R7
   \   000037   75F003       MOV       B,#0x3
   \   00003A   A4           MUL       AB
   \   00003B   FA           MOV       R2,A
   \   00003C   85F0..       MOV       ?V0,B
   \   00003F   AB..         MOV       R3,?V0
   \   000041   8882         MOV       DPL,R0
   \   000043   8983         MOV       DPH,R1
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   E0           MOVX      A,@DPTR
   \   00004A   2A           ADD       A,R2
   \   00004B   FA           MOV       R2,A
   \   00004C   A3           INC       DPTR
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   3B           ADDC      A,R3
   \   00004F   FB           MOV       R3,A
   \   000050   8A82         MOV       DPL,R2
   \   000052   8B83         MOV       DPH,R3
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6C           XRL       A,R4
   \   000056   7003         JNZ       ??zclFindClusterOption_5
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   6D           XRL       A,R5
   \                     ??zclFindClusterOption_5:
   \   00005B   70CA         JNZ       ??zclFindClusterOption_4
   \   00005D   8004         SJMP      ??zclFindClusterOption_6
   2766            }
   2767          
   2768            return ( NULL );
   \                     ??zclFindClusterOption_2:
   \   00005F   7A00         MOV       R2,#0x0
   \   000061   7B00         MOV       R3,#0x0
   \                     ??zclFindClusterOption_6:
   \   000063   02....       LJMP      ??Subroutine198_0 & 0xFFFF
   2769          }
   2770          
   2771          /*********************************************************************
   2772           * @fn      zclGetClusterOption
   2773           *
   2774           * @brief   Get the option record that matchs the cluster id
   2775           *
   2776           * @param   endpoint - Application's endpoint
   2777           * @param   clusterID - cluster ID looking for
   2778           *
   2779           * @return  clutser option, AF_TX_OPTIONS_NONE if not found
   2780           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2781          static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
   \                     zclGetClusterOption:
   2782          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2783            uint8 option;
   2784            zclOptionRec_t *pOption;
   2785          
   2786            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000005                ; Setup parameters for call to function zclFindClusterOption
   \   000005   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   000008   8A82         MOV       DPL,R2
   \   00000A   8B83         MOV       DPH,R3
   2787            if ( pOption != NULL )
   \   00000C   E582         MOV       A,DPL
   \   00000E   4583         ORL       A,DPH
   \   000010   6006         JZ        ??zclGetClusterOption_0
   2788            {
   2789              option = pOption->option;
   2790              if ( !ZG_SECURE_ENABLED )
   2791              {
   2792                option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
   2793              }
   2794          
   2795              return ( option ); // EMBEDDED RETURN
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   F9           MOV       R1,A
   \   000016   8002         SJMP      ??zclGetClusterOption_1
   2796            }
   2797          
   2798            return ( AF_TX_OPTIONS_NONE );
   \                     ??zclGetClusterOption_0:
   \   000018   7900         MOV       R1,#0x0
   \                     ??zclGetClusterOption_1:
   \   00001A   80..         SJMP      ??Subroutine199_0
   2799          }
   2800          
   2801          /*********************************************************************
   2802           * @fn      zclSetSecurityOption
   2803           *
   2804           * @brief   Set the security option for the cluster id
   2805           *
   2806           * @param   endpoint - Application's endpoint
   2807           * @param   clusterID - cluster ID looking for
   2808           * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
   2809           *
   2810           * @return  none
   2811           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2812          static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
   \                     zclSetSecurityOption:
   2813          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FF           MOV       R7,A
   2814            zclOptionRec_t *pOption;
   2815          
   2816            pOption = zclFindClusterOption( endpoint, clusterID );
   \   000007                ; Setup parameters for call to function zclFindClusterOption
   \   000007   12....       LCALL     `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   A8..         MOV       R0,?V0
   \   000010   A9..         MOV       R1,?V1
   2817            if ( pOption != NULL )
   \   000012   E8           MOV       A,R0
   \   000013   49           ORL       A,R1
   \   000014   6015         JZ        ??zclSetSecurityOption_0
   2818            {
   2819              if ( enable )
   \   000016   E8           MOV       A,R0
   \   000017   2402         ADD       A,#0x2
   \   000019   F582         MOV       DPL,A
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   F583         MOV       DPH,A
   \   00001F   EF           MOV       A,R7
   \   000020   6005         JZ        ??zclSetSecurityOption_1
   2820              {
   2821                pOption->option |= AF_EN_SECURITY;
   \   000022   E0           MOVX      A,@DPTR
   \   000023   D2E6         SETB      0xE0 /* A   */.6
   \   000025   8003         SJMP      ??zclSetSecurityOption_2
   2822              }
   2823              else
   2824              {
   2825                pOption->option &= (AF_EN_SECURITY ^ 0xFF);
   \                     ??zclSetSecurityOption_1:
   \   000027   E0           MOVX      A,@DPTR
   \   000028   C2E6         CLR       0xE0 /* A   */.6
   \                     ??zclSetSecurityOption_2:
   \   00002A   F0           MOVX      @DPTR,A
   2826              }
   2827            }
   2828          }
   \                     ??zclSetSecurityOption_0:
   \   00002B   80..         SJMP      ??Subroutine199_0
   2829          
   2830          #ifdef ZCL_DISCOVER
   2831          /*********************************************************************
   2832           * @fn      zclFindNextCmdRec
   2833           *
   2834           * @brief   Find the command (or next) record that matchs the parameters
   2835           *
   2836           * @param   endpoint - Application's endpoint
   2837           * @param   clusterID - cluster ID
   2838           * @param   commandID - command ID from requesting command
   2839           * @param   direction- direction of received command
   2840           * @param   pCmdID - command looking for
   2841           * @param   pCmd - command information within command record list
   2842           *
   2843           * @return  pointer to command record, NULL no more records of this cluster
   2844           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2845          static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
   \                     zclFindNextCmdRec:
   2846                                          uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
   2847          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FF           MOV       R7,A
   \   00000B   8D..         MOV       ?V0,R5
   2848            zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
   \   00000D                ; Setup parameters for call to function zclFindCmdRecsList
   \   00000D   12....       LCALL     `??zclFindCmdRecsList::?relay`; Banked call to: zclFindCmdRecsList
   \   000010   8A..         MOV       ?V2,R2
   \   000012   8B..         MOV       ?V3,R3
   \   000014   AC..         MOV       R4,?V2
   \   000016   AD..         MOV       R5,?V3
   2849            uint8 i;
   2850          
   2851            if ( pRec != NULL )
   \   000018   EC           MOV       A,R4
   \   000019   4D           ORL       A,R5
   \   00001A   7003         JNZ       $+5
   \   00001C   02....       LJMP      ??zclFindNextCmdRec_0 & 0xFFFF
   2852            {
   2853              for ( i = 0; i < pRec->numCommands; i++ )
   \   00001F   75..00       MOV       ?V1,#0x0
   \   000022   740E         MOV       A,#0xe
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   00002A   8014         SJMP      ??zclFindNextCmdRec_1
   2854              {
   2855                if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
   2856                    ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
   2857                {
   2858                  if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
   2859                  {
   2860                    if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
   \                     ??zclFindNextCmdRec_2:
   \   00002C   85..82       MOV       DPL,?V2
   \   00002F   85..83       MOV       DPH,?V3
   \   000032   A3           INC       DPTR
   \   000033   A3           INC       DPTR
   \   000034   A3           INC       DPTR
   \   000035   E4           CLR       A
   \   000036   93           MOVC      A,@A+DPTR
   \   000037   A2E3         MOV       C,0xE0 /* A   */.3
   \   000039   5003         JNC       $+5
   \   00003B   02....       LJMP      ??zclFindNextCmdRec_3 & 0xFFFF
   \                     ??zclFindNextCmdRec_4:
   \   00003E   05..         INC       ?V1
   \                     ??zclFindNextCmdRec_1:
   \   000040   8C82         MOV       DPL,R4
   \   000042   8D83         MOV       DPH,R5
   \   000044   A3           INC       DPTR
   \   000045   A3           INC       DPTR
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   F8           MOV       R0,A
   \   000049   E5..         MOV       A,?V1
   \   00004B   C3           CLR       C
   \   00004C   98           SUBB      A,R0
   \   00004D   4003         JC        $+5
   \   00004F   02....       LJMP      ??zclFindNextCmdRec_0 & 0xFFFF
   \   000052   E5..         MOV       A,?V1
   \   000054   F5..         MOV       ?V2,A
   \   000056   75..00       MOV       ?V3,#0x0
   \   000059   7402         MOV       A,#0x2
   \   00005B   78..         MOV       R0,#?V2
   \   00005D   12....       LCALL     ?S_SHL
   \   000060   8C82         MOV       DPL,R4
   \   000062   8D83         MOV       DPH,R5
   \   000064   A3           INC       DPTR
   \   000065   A3           INC       DPTR
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   25..         ADD       A,?V2
   \   00006B   F5..         MOV       ?V2,A
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   35..         ADDC      A,?V3
   \   000071   F5..         MOV       ?V3,A
   \   000073   85..82       MOV       DPL,?V2
   \   000076   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000079   E5..         MOV       A,?V4
   \   00007B   68           XRL       A,R0
   \   00007C   7003         JNZ       ??zclFindNextCmdRec_5
   \   00007E   E5..         MOV       A,?V5
   \   000080   69           XRL       A,R1
   \                     ??zclFindNextCmdRec_5:
   \   000081   70BB         JNZ       ??zclFindNextCmdRec_4
   \   000083   8A82         MOV       DPL,R2
   \   000085   8B83         MOV       DPH,R3
   \   000087   E0           MOVX      A,@DPTR
   \   000088   F8           MOV       R0,A
   \   000089   85..82       MOV       DPL,?V2
   \   00008C   85..83       MOV       DPH,?V3
   \   00008F   A3           INC       DPTR
   \   000090   A3           INC       DPTR
   \   000091   E4           CLR       A
   \   000092   93           MOVC      A,@A+DPTR
   \   000093   C3           CLR       C
   \   000094   98           SUBB      A,R0
   \   000095   40A7         JC        ??zclFindNextCmdRec_4
   \   000097   7411         MOV       A,#0x11
   \   000099   6F           XRL       A,R7
   \   00009A   701B         JNZ       ??zclFindNextCmdRec_6
   \   00009C   7401         MOV       A,#0x1
   \   00009E   65..         XRL       A,?V0
   \   0000A0   608A         JZ        ??zclFindNextCmdRec_2
   2861                    {
   2862                      *pCmd = pRec->pCmdRecs[i];
   2863          
   2864                      // Update command ID
   2865                      *pCmdID = pCmd->cmdID;
   2866          
   2867                      return ( TRUE ); // EMBEDDED RETURN
   2868                    }
   2869                    else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
   \   0000A2   E5..         MOV       A,?V0
   \   0000A4   7098         JNZ       ??zclFindNextCmdRec_4
   \   0000A6   85..82       MOV       DPL,?V2
   \   0000A9   85..83       MOV       DPH,?V3
   \   0000AC   A3           INC       DPTR
   \   0000AD   A3           INC       DPTR
   \   0000AE   A3           INC       DPTR
   \   0000AF   E4           CLR       A
   \   0000B0   93           MOVC      A,@A+DPTR
   \   0000B1   A2E2         MOV       C,0xE0 /* A   */.2
   \                     ??zclFindNextCmdRec_7:
   \   0000B3   4035         JC        ??zclFindNextCmdRec_3
   \   0000B5   8087         SJMP      ??zclFindNextCmdRec_4
   2870                    {
   2871                      *pCmd = pRec->pCmdRecs[i];
   2872          
   2873                      // Update command ID
   2874                      *pCmdID = pCmd->cmdID;
   2875          
   2876                      return ( TRUE ); // EMBEDDED RETURN
   2877                    }
   2878                  }
   2879                  else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
   \                     ??zclFindNextCmdRec_6:
   \   0000B7   7413         MOV       A,#0x13
   \   0000B9   6F           XRL       A,R7
   \   0000BA   704C         JNZ       ??zclFindNextCmdRec_0
   2880                  {
   2881                    if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
   \   0000BC   E5..         MOV       A,?V0
   \   0000BE   700F         JNZ       ??zclFindNextCmdRec_8
   \   0000C0   85..82       MOV       DPL,?V2
   \   0000C3   85..83       MOV       DPH,?V3
   \   0000C6   A3           INC       DPTR
   \   0000C7   A3           INC       DPTR
   \   0000C8   A3           INC       DPTR
   \   0000C9   E4           CLR       A
   \   0000CA   93           MOVC      A,@A+DPTR
   \   0000CB   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000CD   80E4         SJMP      ??zclFindNextCmdRec_7
   2882                    {
   2883                      *pCmd = pRec->pCmdRecs[i];
   2884          
   2885                      // Update command ID
   2886                      *pCmdID = pCmd->cmdID;
   2887          
   2888                      return ( TRUE ); // EMBEDDED RETURN
   2889                    }
   2890                    else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
   \                     ??zclFindNextCmdRec_8:
   \   0000CF   7401         MOV       A,#0x1
   \   0000D1   65..         XRL       A,?V0
   \   0000D3   6003         JZ        $+5
   \   0000D5   02....       LJMP      ??zclFindNextCmdRec_4 & 0xFFFF
   \   0000D8   85..82       MOV       DPL,?V2
   \   0000DB   85..83       MOV       DPH,?V3
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   A3           INC       DPTR
   \   0000E1   E4           CLR       A
   \   0000E2   93           MOVC      A,@A+DPTR
   \   0000E3   A2E1         MOV       C,0xE0 /* A   */.1
   \   0000E5   4003         JC        $+5
   \   0000E7   02....       LJMP      ??zclFindNextCmdRec_4 & 0xFFFF
   \                     ??zclFindNextCmdRec_3:
   \   0000EA   7410         MOV       A,#0x10
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL     ?Subroutine98 & 0xFFFF
   2891                    {
   2892                      *pCmd = pRec->pCmdRecs[i];
   \                     ??CrossCallReturnLabel_179:
   \   0000F2   E8           MOV       A,R0
   \   0000F3   FC           MOV       R4,A
   \   0000F4   E9           MOV       A,R1
   \   0000F5   FD           MOV       R5,A
   \   0000F6   7404         MOV       A,#0x4
   \   0000F8   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2893          
   2894                      // Update command ID
   2895                      *pCmdID = pCmd->cmdID;
   \   0000FB   8882         MOV       DPL,R0
   \   0000FD   8983         MOV       DPH,R1
   \   0000FF   A3           INC       DPTR
   \   000100   A3           INC       DPTR
   \   000101   12....       LCALL     ?Subroutine125 & 0xFFFF
   2896          
   2897                      return ( TRUE ); // EMBEDDED RETURN
   \                     ??CrossCallReturnLabel_231:
   \   000104   7901         MOV       R1,#0x1
   \   000106   8002         SJMP      ??zclFindNextCmdRec_9
   2898                    }
   2899                  }
   2900                  else
   2901                  {
   2902                    return ( FALSE ); // Incorrect Command ID
   2903                  }
   2904                }
   2905              }
   2906            }
   2907          
   2908            return ( FALSE );
   \                     ??zclFindNextCmdRec_0:
   \   000108   7900         MOV       R1,#0x0
   \                     ??zclFindNextCmdRec_9:
   \   00010A   02....       LJMP      ??Subroutine205_0 & 0xFFFF
   2909          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   000003   85..82       MOV       DPL,?V2
   \   000006   85..83       MOV       DPH,?V3
   \   000009   22           RET
   2910          
   2911          /*********************************************************************
   2912           * @fn      zclFindNextAttrRec
   2913           *
   2914           * @brief   Find the attribute (or next) record that matchs the parameters
   2915           *
   2916           * @param   endpoint - Application's endpoint
   2917           * @param   clusterID - cluster ID
   2918           * @param   attr - attribute looking for
   2919           *
   2920           * @return  pointer to attribute record, NULL if not found
   2921           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2922          static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
   \                     zclFindNextAttrRec:
   2923                                           uint16 *attrId, zclAttrRec_t *pAttr )
   2924          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FF           MOV       R7,A
   2925            zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
   \   00000B                ; Setup parameters for call to function zclFindAttrRecsList
   \   00000B   12....       LCALL     `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
   \   00000E   8A..         MOV       ?V0,R2
   \   000010   8B..         MOV       ?V1,R3
   \   000012   AC..         MOV       R4,?V0
   \   000014   AD..         MOV       R5,?V1
   2926            uint8 attrDir;
   2927          
   2928            if ( pRec != NULL )
   \   000016   EC           MOV       A,R4
   \   000017   4D           ORL       A,R5
   \   000018   7003         JNZ       $+5
   \   00001A   02....       LJMP      ??zclFindNextAttrRec_0 & 0xFFFF
   2929            {
   2930              uint16 x;
   2931          
   2932              for ( x = 0; x < pRec->numAttributes; x++ )
   \   00001D   7A00         MOV       R2,#0x0
   \   00001F   7B00         MOV       R3,#0x0
   \   000021   7410         MOV       A,#0x10
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000029   8005         SJMP      ??zclFindNextAttrRec_1
   \                     ??zclFindNextAttrRec_2:
   \   00002B   0A           INC       R2
   \   00002C   EA           MOV       A,R2
   \   00002D   7001         JNZ       ??zclFindNextAttrRec_1
   \   00002F   0B           INC       R3
   \                     ??zclFindNextAttrRec_1:
   \   000030   8C82         MOV       DPL,R4
   \   000032   8D83         MOV       DPH,R5
   \   000034   A3           INC       DPTR
   \   000035   A3           INC       DPTR
   \   000036   A3           INC       DPTR
   \   000037   A3           INC       DPTR
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   F8           MOV       R0,A
   \   00003D   C3           CLR       C
   \   00003E   EA           MOV       A,R2
   \   00003F   98           SUBB      A,R0
   \   000040   EB           MOV       A,R3
   \   000041   9400         SUBB      A,#0x0
   \   000043   4003         JC        $+5
   \   000045   02....       LJMP      ??zclFindNextAttrRec_0 & 0xFFFF
   2933              {
   2934                if ( ( pRec->attrs[x].clusterID == clusterID ) &&
   2935                     ( pRec->attrs[x].attr.attrId >= *attrId ) )
   \   000048   8A..         MOV       ?V0,R2
   \   00004A   8B..         MOV       ?V1,R3
   \   00004C   7403         MOV       A,#0x3
   \   00004E   78..         MOV       R0,#?V0
   \   000050   12....       LCALL     ?S_SHL
   \   000053   8C82         MOV       DPL,R4
   \   000055   8D83         MOV       DPH,R5
   \   000057   A3           INC       DPTR
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   25..         ADD       A,?V0
   \   000062   F5..         MOV       ?V0,A
   \   000064   A3           INC       DPTR
   \   000065   E0           MOVX      A,@DPTR
   \   000066   35..         ADDC      A,?V1
   \   000068   F5..         MOV       ?V1,A
   \   00006A   85..82       MOV       DPL,?V0
   \   00006D   12....       LCALL     ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000070   E5..         MOV       A,?V6
   \   000072   68           XRL       A,R0
   \   000073   7003         JNZ       ??zclFindNextAttrRec_3
   \   000075   E5..         MOV       A,?V7
   \   000077   69           XRL       A,R1
   \                     ??zclFindNextAttrRec_3:
   \   000078   70B1         JNZ       ??zclFindNextAttrRec_2
   \   00007A   12....       LCALL     ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   00007D   85..82       MOV       DPL,?V2
   \   000080   85..83       MOV       DPH,?V3
   \   000083   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000086   C3           CLR       C
   \   000087   E5..         MOV       A,?V4
   \   000089   98           SUBB      A,R0
   \   00008A   E5..         MOV       A,?V5
   \   00008C   99           SUBB      A,R1
   \   00008D   409C         JC        ??zclFindNextAttrRec_2
   2936                {
   2937                  // also make sure direction is right
   2938                  attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
   2939                  if ( (attrDir == direction) || (pRec->attrs[x].attr.accessControl & ACCESS_GLOBAL))
   \   00008F   E5..         MOV       A,?V0
   \   000091   2405         ADD       A,#0x5
   \   000093   F582         MOV       DPL,A
   \   000095   E4           CLR       A
   \   000096   35..         ADDC      A,?V1
   \   000098   F583         MOV       DPH,A
   \   00009A   E4           CLR       A
   \   00009B   93           MOVC      A,@A+DPTR
   \   00009C   A2E7         MOV       C,0xE0 /* A   */.7
   \   00009E   E4           CLR       A
   \   00009F   33           RLC       A
   \   0000A0   6F           XRL       A,R7
   \   0000A1   6006         JZ        ??zclFindNextAttrRec_4
   \   0000A3   E4           CLR       A
   \   0000A4   93           MOVC      A,@A+DPTR
   \   0000A5   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000A7   5082         JNC       ??zclFindNextAttrRec_2
   \                     ??zclFindNextAttrRec_4:
   \   0000A9   7412         MOV       A,#0x12
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   2940                  {
   2941                    // return attribute and found attribute ID
   2942                    *pAttr = pRec->attrs[x];
   \                     ??CrossCallReturnLabel_558:
   \   0000B1   85..82       MOV       DPL,?V0
   \   0000B4   85..83       MOV       DPH,?V1
   \   0000B7   E8           MOV       A,R0
   \   0000B8   FC           MOV       R4,A
   \   0000B9   E9           MOV       A,R1
   \   0000BA   FD           MOV       R5,A
   \   0000BB   7408         MOV       A,#0x8
   \   0000BD   12....       LCALL     ?MOVE_LONG8_XDATA_CODE
   2943                    *attrId = pAttr->attr.attrId;
   \   0000C0   8882         MOV       DPL,R0
   \   0000C2   8983         MOV       DPH,R1
   \   0000C4   A3           INC       DPTR
   \   0000C5   A3           INC       DPTR
   \   0000C6   12....       LCALL     ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   0000C9   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   2944          
   2945                    return ( TRUE ); // EMBEDDED RETURN
   \                     ??CrossCallReturnLabel_473:
   \   0000CC   7901         MOV       R1,#0x1
   \   0000CE   8002         SJMP      ??zclFindNextAttrRec_5
   2946                  }
   2947                }
   2948              }
   2949            }
   2950          
   2951            return ( FALSE );
   \                     ??zclFindNextAttrRec_0:
   \   0000D0   7900         MOV       R1,#0x0
   \                     ??zclFindNextAttrRec_5:
   \   0000D2   02....       LJMP      ??Subroutine195_0 & 0xFFFF
   2952          }
   2953          #endif // ZCL_DISCOVER
   2954          
   2955          /*********************************************************************
   2956           * @fn      zclSerializeData
   2957           *
   2958           * @brief   Builds a buffer from the attribute data to sent out over
   2959           *          the air.
   2960           *          NOTE - Not compatible with application's attributes callbacks.
   2961           *
   2962           * @param   dataType - data types defined in zcl.h
   2963           * @param   attrData - pointer to the attribute data
   2964           * @param   buf - where to put the serialized data
   2965           *
   2966           * @return  pointer to end of destination buffer
   2967           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2968          uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
   \                     zclSerializeData:
   2969          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   EC           MOV       A,R4
   \   00000A   FA           MOV       R2,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FB           MOV       R3,A
   2970            uint8 *pStr;
   2971            uint16 len;
   2972          
   2973            if ( attrData == NULL )
   \   00000D   EE           MOV       A,R6
   \   00000E   4F           ORL       A,R7
   \   00000F   7003         JNZ       $+5
   \   000011   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2974            {
   2975              return ( buf );
   2976            }
   2977          
   2978            switch ( dataType )
   \   000014   EA           MOV       A,R2
   \   000015   2402         ADD       A,#0x2
   \   000017   F5..         MOV       ?V4,A
   \   000019   E4           CLR       A
   \   00001A   3B           ADDC      A,R3
   \   00001B   F5..         MOV       ?V5,A
   \   00001D   8A82         MOV       DPL,R2
   \   00001F   8B83         MOV       DPH,R3
   \   000021   A3           INC       DPTR
   \   000022   AC82         MOV       R4,DPL
   \   000024   AD83         MOV       R5,DPH
   \   000026   8E..         MOV       ?V0,R6
   \   000028   8F..         MOV       ?V1,R7
   \   00002A   75..00       MOV       ?V2,#0x0
   \   00002D   E9           MOV       A,R1
   \   00002E   12....       LCALL     ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for zclSerializeData>_0`:
   \   000031   04           DB        4
   \   000032   41           DB        65
   \   000033   42           DB        66
   \   000034   ....         DW        ??zclSerializeData_1
   \   000036   43           DB        67
   \   000037   44           DB        68
   \   000038   ....         DW        ??zclSerializeData_2
   \   00003A   E0           DB        224
   \   00003B   E2           DB        226
   \   00003C   ....         DW        ??zclSerializeData_3
   \   00003E   E8           DB        232
   \   00003F   E9           DB        233
   \   000040   ....         DW        ??zclSerializeData_4
   \   000042   25           DB        37
   \   000043   08           DB        8
   \   000044   ....         DW        ??zclSerializeData_5
   \   000046   09           DB        9
   \   000047   ....         DW        ??zclSerializeData_4
   \   000049   0A           DB        10
   \   00004A   ....         DW        ??zclSerializeData_6
   \   00004C   0B           DB        11
   \   00004D   ....         DW        ??zclSerializeData_3
   \   00004F   10           DB        16
   \   000050   ....         DW        ??zclSerializeData_5
   \   000052   18           DB        24
   \   000053   ....         DW        ??zclSerializeData_5
   \   000055   19           DB        25
   \   000056   ....         DW        ??zclSerializeData_4
   \   000058   1A           DB        26
   \   000059   ....         DW        ??zclSerializeData_6
   \   00005B   1B           DB        27
   \   00005C   ....         DW        ??zclSerializeData_3
   \   00005E   1C           DB        28
   \   00005F   ....         DW        ??zclSerializeData_7
   \   000061   1D           DB        29
   \   000062   ....         DW        ??zclSerializeData_8
   \   000064   1E           DB        30
   \   000065   ....         DW        ??zclSerializeData_9
   \   000067   1F           DB        31
   \   000068   ....         DW        ??zclSerializeData_10
   \   00006A   20           DB        32
   \   00006B   ....         DW        ??zclSerializeData_5
   \   00006D   21           DB        33
   \   00006E   ....         DW        ??zclSerializeData_4
   \   000070   22           DB        34
   \   000071   ....         DW        ??zclSerializeData_6
   \   000073   23           DB        35
   \   000074   ....         DW        ??zclSerializeData_3
   \   000076   24           DB        36
   \   000077   ....         DW        ??zclSerializeData_7
   \   000079   25           DB        37
   \   00007A   ....         DW        ??zclSerializeData_8
   \   00007C   26           DB        38
   \   00007D   ....         DW        ??zclSerializeData_9
   \   00007F   27           DB        39
   \   000080   ....         DW        ??zclSerializeData_10
   \   000082   28           DB        40
   \   000083   ....         DW        ??zclSerializeData_5
   \   000085   29           DB        41
   \   000086   ....         DW        ??zclSerializeData_4
   \   000088   2A           DB        42
   \   000089   ....         DW        ??zclSerializeData_6
   \   00008B   2B           DB        43
   \   00008C   ....         DW        ??zclSerializeData_3
   \   00008E   2C           DB        44
   \   00008F   ....         DW        ??zclSerializeData_7
   \   000091   2D           DB        45
   \   000092   ....         DW        ??zclSerializeData_8
   \   000094   2E           DB        46
   \   000095   ....         DW        ??zclSerializeData_9
   \   000097   2F           DB        47
   \   000098   ....         DW        ??zclSerializeData_10
   \   00009A   30           DB        48
   \   00009B   ....         DW        ??zclSerializeData_5
   \   00009D   31           DB        49
   \   00009E   ....         DW        ??zclSerializeData_4
   \   0000A0   38           DB        56
   \   0000A1   ....         DW        ??zclSerializeData_4
   \   0000A3   39           DB        57
   \   0000A4   ....         DW        ??zclSerializeData_3
   \   0000A6   3A           DB        58
   \   0000A7   ....         DW        ??zclSerializeData_10
   \   0000A9   EA           DB        234
   \   0000AA   ....         DW        ??zclSerializeData_3
   \   0000AC   F0           DB        240
   \   0000AD   ....         DW        ??zclSerializeData_10
   \   0000AF   F1           DB        241
   \   0000B0   ....         DW        ??zclSerializeData_11
   \   0000B2   ....         DW        ??zclSerializeData_0
   2979            {
   2980              case ZCL_DATATYPE_DATA8:
   2981              case ZCL_DATATYPE_BOOLEAN:
   2982              case ZCL_DATATYPE_BITMAP8:
   2983              case ZCL_DATATYPE_INT8:
   2984              case ZCL_DATATYPE_UINT8:
   2985              case ZCL_DATATYPE_ENUM8:
   2986                *buf++ = *((uint8 *)attrData);
   \                     ??zclSerializeData_5:
   \   0000B4   8E82         MOV       DPL,R6
   \   0000B6   8F83         MOV       DPH,R7
   \   0000B8   12....       LCALL     ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   0000BB   EC           MOV       A,R4
   \   0000BC   FA           MOV       R2,A
   \   0000BD   ED           MOV       A,R5
   \   0000BE   FB           MOV       R3,A
   2987                 break;
   \   0000BF   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   2988          
   2989              case ZCL_DATATYPE_DATA16:
   2990              case ZCL_DATATYPE_BITMAP16:
   2991              case ZCL_DATATYPE_UINT16:
   2992              case ZCL_DATATYPE_INT16:
   2993              case ZCL_DATATYPE_ENUM16:
   2994              case ZCL_DATATYPE_SEMI_PREC:
   2995              case ZCL_DATATYPE_CLUSTER_ID:
   2996              case ZCL_DATATYPE_ATTR_ID:
   2997                *buf++ = LO_UINT16( *((uint16*)attrData) );
   \                     ??zclSerializeData_4:
   \   0000C2   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   0000C5   12....       LCALL     ?Subroutine46 & 0xFFFF
   2998                *buf++ = HI_UINT16( *((uint16*)attrData) );
   \                     ??CrossCallReturnLabel_65:
   \   0000C8   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   0A           INC       R2
   \   0000CD   0A           INC       R2
   \   0000CE   AB..         MOV       R3,?V5
   2999                break;
   \   0000D0   02....       LJMP      ??zclSerializeData_0 & 0xFFFF
   3000          
   3001              case ZCL_DATATYPE_DATA24:
   3002              case ZCL_DATATYPE_BITMAP24:
   3003              case ZCL_DATATYPE_UINT24:
   3004              case ZCL_DATATYPE_INT24:
   3005                *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
   \                     ??zclSerializeData_6:
   \   0000D3   8E82         MOV       DPL,R6
   \   0000D5   8F83         MOV       DPH,R7
   \   0000D7   78..         MOV       R0,#?V0
   \   0000D9   12....       LCALL     ?L_MOV_X
   \   0000DC   8A82         MOV       DPL,R2
   \   0000DE   8B83         MOV       DPH,R3
   \   0000E0   E5..         MOV       A,?V0
   \   0000E2   12....       LCALL     ?Subroutine182 & 0xFFFF
   3006                *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
   \                     ??CrossCallReturnLabel_686:
   \   0000E5   78..         MOV       R0,#?V0
   \   0000E7   12....       LCALL     ?L_MOV_X
   \   0000EA   E5..         MOV       A,?V1
   \   0000EC   8C82         MOV       DPL,R4
   \   0000EE   8D83         MOV       DPH,R5
   \   0000F0   12....       LCALL     ?Subroutine182 & 0xFFFF
   3007                *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
   \                     ??CrossCallReturnLabel_687:
   \   0000F3   78..         MOV       R0,#?V0
   \   0000F5   12....       LCALL     ?L_MOV_X
   \   0000F8   7410         MOV       A,#0x10
   \   0000FA   78..         MOV       R0,#?V0
   \   0000FC   12....       LCALL     ?UL_SHR
   \   0000FF   85..82       MOV       DPL,?V4
   \   000102   85..83       MOV       DPH,?V5
   \   000105   E5..         MOV       A,?V0
   \   000107   F0           MOVX      @DPTR,A
   \   000108   EA           MOV       A,R2
   \   000109   2403         ADD       A,#0x3
   \   00010B   FA           MOV       R2,A
   \   00010C   506D         JNC       ??zclSerializeData_0
   \   00010E   0B           INC       R3
   3008                break;
   \   00010F   806A         SJMP      ??zclSerializeData_0
   3009          
   3010              case ZCL_DATATYPE_DATA32:
   3011              case ZCL_DATATYPE_BITMAP32:
   3012              case ZCL_DATATYPE_UINT32:
   3013              case ZCL_DATATYPE_INT32:
   3014              case ZCL_DATATYPE_SINGLE_PREC:
   3015              case ZCL_DATATYPE_TOD:
   3016              case ZCL_DATATYPE_DATE:
   3017              case ZCL_DATATYPE_UTC:
   3018              case ZCL_DATATYPE_BAC_OID:
   3019                buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
   \                     ??zclSerializeData_3:
   \   000111                ; Setup parameters for call to function osal_buffer_uint32
   \   000111   8E82         MOV       DPL,R6
   \   000113   8F83         MOV       DPH,R7
   \   000115   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000118   12....       LCALL     `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00011B   7404         MOV       A,#0x4
   \   00011D   12....       LCALL     ?DEALLOC_XSTACK8
   3020                break;
   \   000120   8059         SJMP      ??zclSerializeData_0
   3021          
   3022              case ZCL_DATATYPE_BITMAP40:
   3023              case ZCL_DATATYPE_UINT40:
   3024              case ZCL_DATATYPE_INT40:
   3025                pStr = (uint8*)attrData;
   3026                buf = zcl_memcpy( buf, pStr, 5 );
   \                     ??zclSerializeData_7:
   \   000122                ; Setup parameters for call to function osal_memcpy
   \   000122   78..         MOV       R0,#?V0
   \   000124   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000127   7C05         MOV       R4,#0x5
   \   000129   8046         SJMP      ??zclSerializeData_12
   3027                break;
   3028          
   3029              case ZCL_DATATYPE_BITMAP48:
   3030              case ZCL_DATATYPE_UINT48:
   3031              case ZCL_DATATYPE_INT48:
   3032                pStr = (uint8*)attrData;
   3033                buf = zcl_memcpy( buf, pStr, 6 );
   \                     ??zclSerializeData_8:
   \   00012B                ; Setup parameters for call to function osal_memcpy
   \   00012B   78..         MOV       R0,#?V0
   \   00012D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000130   7C06         MOV       R4,#0x6
   \   000132   803D         SJMP      ??zclSerializeData_12
   3034                break;
   3035          
   3036              case ZCL_DATATYPE_BITMAP56:
   3037              case ZCL_DATATYPE_UINT56:
   3038              case ZCL_DATATYPE_INT56:
   3039                pStr = (uint8*)attrData;
   3040                buf = zcl_memcpy( buf, pStr, 7 );
   \                     ??zclSerializeData_9:
   \   000134                ; Setup parameters for call to function osal_memcpy
   \   000134   78..         MOV       R0,#?V0
   \   000136   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000139   7C07         MOV       R4,#0x7
   \   00013B   8034         SJMP      ??zclSerializeData_12
   3041                break;
   3042          
   3043              case ZCL_DATATYPE_BITMAP64:
   3044              case ZCL_DATATYPE_DOUBLE_PREC:
   3045              case ZCL_DATATYPE_IEEE_ADDR:
   3046              case ZCL_DATATYPE_UINT64:
   3047              case ZCL_DATATYPE_INT64:
   3048                pStr = (uint8*)attrData;
   3049                buf = zcl_memcpy( buf, pStr, 8 );
   \                     ??zclSerializeData_10:
   \   00013D                ; Setup parameters for call to function osal_memcpy
   \   00013D   78..         MOV       R0,#?V0
   \   00013F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000142   7C08         MOV       R4,#0x8
   \   000144   802B         SJMP      ??zclSerializeData_12
   3050                break;
   3051          
   3052              case ZCL_DATATYPE_CHAR_STR:
   3053              case ZCL_DATATYPE_OCTET_STR:
   3054                pStr = (uint8*)attrData;
   3055                len = *pStr;
   3056                buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
   \                     ??zclSerializeData_1:
   \   000146                ; Setup parameters for call to function osal_memcpy
   \   000146   78..         MOV       R0,#?V0
   \   000148   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00014B   8E82         MOV       DPL,R6
   \   00014D   8F83         MOV       DPH,R7
   \   00014F   E0           MOVX      A,@DPTR
   \   000150   2401         ADD       A,#0x1
   \   000152   FC           MOV       R4,A
   \   000153   E4           CLR       A
   \   000154   3400         ADDC      A,#0x0
   \   000156   800F         SJMP      ??zclSerializeData_13
   3057                break;
   3058          
   3059              case ZCL_DATATYPE_LONG_CHAR_STR:
   3060              case ZCL_DATATYPE_LONG_OCTET_STR:
   3061                pStr = (uint8*)attrData;
   3062                len = BUILD_UINT16( pStr[0], pStr[1] );
   3063                buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
   \                     ??zclSerializeData_2:
   \   000158                ; Setup parameters for call to function osal_memcpy
   \   000158   78..         MOV       R0,#?V0
   \   00015A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00015D   8E82         MOV       DPL,R6
   \   00015F   8F83         MOV       DPH,R7
   \   000161   12....       LCALL     ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000164   FC           MOV       R4,A
   \   000165   E4           CLR       A
   \   000166   39           ADDC      A,R1
   \                     ??zclSerializeData_13:
   \   000167   FD           MOV       R5,A
   \   000168   8009         SJMP      ??zclSerializeData_14
   3064                break;
   3065          
   3066              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3067                pStr = (uint8*)attrData;
   3068                buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
   \                     ??zclSerializeData_11:
   \   00016A                ; Setup parameters for call to function osal_memcpy
   \   00016A   78..         MOV       R0,#?V0
   \   00016C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00016F   7C10         MOV       R4,#0x10
   \                     ??zclSerializeData_12:
   \   000171   7D00         MOV       R5,#0x0
   \                     ??zclSerializeData_14:
   \   000173   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000176   7403         MOV       A,#0x3
   \   000178   12....       LCALL     ?DEALLOC_XSTACK8
   3069                break;
   3070          
   3071              case ZCL_DATATYPE_NO_DATA:
   3072              case ZCL_DATATYPE_UNKNOWN:
   3073                // Fall through
   3074          
   3075              default:
   3076                break;
   3077            }
   3078          
   3079            return ( buf );
   \                     ??zclSerializeData_0:
   \   00017B   02....       LJMP      ??Subroutine242_0 & 0xFFFF
   3080          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine201_0
   \   000004                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   12....       LCALL     ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003   F9           MOV       R1,A
   \   000004   EC           MOV       A,R4
   \   000005   2402         ADD       A,#0x2
   \   000007   22           RET
   3081          
   3082          #if defined ZCL_REPORTING_DEVICE || defined ZCL_REPORT_CONFIGURING_DEVICE
   3083          /*********************************************************************
   3084           * @fn      zclAnalogDataType
   3085           *
   3086           * @brief   Checks to see if Data Type is Analog
   3087           *
   3088           * @param   dataType - data type
   3089           *
   3090           * @return  TRUE if data type is analog
   3091           */
   3092          uint8 zclAnalogDataType( uint8 dataType )
   3093          {
   3094            uint8 analog;
   3095          
   3096            switch ( dataType )
   3097            {
   3098              case ZCL_DATATYPE_UINT8:
   3099              case ZCL_DATATYPE_UINT16:
   3100              case ZCL_DATATYPE_UINT24:
   3101              case ZCL_DATATYPE_UINT32:
   3102              case ZCL_DATATYPE_UINT40:
   3103              case ZCL_DATATYPE_UINT48:
   3104              case ZCL_DATATYPE_UINT56:
   3105              case ZCL_DATATYPE_UINT64:
   3106              case ZCL_DATATYPE_INT8:
   3107              case ZCL_DATATYPE_INT16:
   3108              case ZCL_DATATYPE_INT24:
   3109              case ZCL_DATATYPE_INT32:
   3110              case ZCL_DATATYPE_INT40:
   3111              case ZCL_DATATYPE_INT48:
   3112              case ZCL_DATATYPE_INT56:
   3113              case ZCL_DATATYPE_INT64:
   3114              case ZCL_DATATYPE_SEMI_PREC:
   3115              case ZCL_DATATYPE_SINGLE_PREC:
   3116              case ZCL_DATATYPE_DOUBLE_PREC:
   3117              case ZCL_DATATYPE_TOD:
   3118              case ZCL_DATATYPE_DATE:
   3119              case ZCL_DATATYPE_UTC:
   3120                analog = TRUE;
   3121                break;
   3122          
   3123              default:
   3124                analog = FALSE;
   3125                break;
   3126            }
   3127          
   3128            return ( analog );
   3129          }
   3130          
   3131          /*********************************************************************
   3132           * @fn      zclIsLittleEndianMachine
   3133           *
   3134           * @brief   Verifies endianness in system.
   3135           *
   3136           * @param   none
   3137           *
   3138           * @return  MSB-00 or LSB-01 depending on endianness in the system
   3139           */
   3140          static int zclIsLittleEndianMachine(void)
   3141          {
   3142            uint16 test = 0x0001;
   3143          
   3144            return (*((uint8 *)(&test)));
   3145          }
   3146          
   3147          /*********************************************************************
   3148           * @fn      zcl_BuildAnalogData
   3149           *
   3150           * @brief   Build an analog arribute out of sequential bytes.
   3151           *
   3152           * @param   dataType - type of data
   3153           * @param   pData - pointer to data
   3154           * @param   pBuf - where to put the data
   3155           *
   3156           * @return  none
   3157           */
   3158          static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
   3159          {
   3160            int current_byte_index;
   3161            int remaining_bytes;
   3162            int step;
   3163          
   3164            remaining_bytes = zclGetAttrDataLength(dataType, pData);
   3165          
   3166            // decide if move forward or backwards to copy data
   3167            if ( zclIsLittleEndianMachine() )
   3168            {
   3169              step = 1;
   3170              current_byte_index = 0;
   3171            }
   3172            else
   3173            {
   3174              step = -1;
   3175              current_byte_index = remaining_bytes - 1;
   3176            }
   3177          
   3178            while ( remaining_bytes-- )
   3179            {
   3180              pData[current_byte_index] = *(pBuf++);
   3181              current_byte_index += step;
   3182            }
   3183          }
   3184          #endif
   3185          
   3186          /*********************************************************************
   3187           * @fn      zclGetDataTypeLength
   3188           *
   3189           * @brief   Return the length of the datatype in octet.
   3190           *
   3191           *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
   3192           *                ZCL_DATATYPE_CHAR_STR data types.
   3193           *
   3194           * @param   dataType - data type
   3195           *
   3196           * @return  length of data
   3197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3198          uint8 zclGetDataTypeLength( uint8 dataType )
   \                     zclGetDataTypeLength:
   3199          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV       A,R1
   3200            uint8 len;
   3201          
   3202            switch ( dataType )
   \   000001   24F8         ADD       A,#-0x8
   \   000003   6078         JZ        ??zclGetDataTypeLength_0
   \   000005   14           DEC       A
   \   000006   6079         JZ        ??zclGetDataTypeLength_1
   \   000008   14           DEC       A
   \   000009   607A         JZ        ??zclGetDataTypeLength_2
   \   00000B   14           DEC       A
   \   00000C   607B         JZ        ??zclGetDataTypeLength_3
   \   00000E   24FB         ADD       A,#-0x5
   \   000010   606B         JZ        ??zclGetDataTypeLength_0
   \   000012   24F8         ADD       A,#-0x8
   \   000014   6067         JZ        ??zclGetDataTypeLength_0
   \   000016   14           DEC       A
   \   000017   6068         JZ        ??zclGetDataTypeLength_1
   \   000019   14           DEC       A
   \   00001A   6069         JZ        ??zclGetDataTypeLength_2
   \   00001C   14           DEC       A
   \   00001D   606A         JZ        ??zclGetDataTypeLength_3
   \   00001F   24FB         ADD       A,#-0x5
   \   000021   605A         JZ        ??zclGetDataTypeLength_0
   \   000023   14           DEC       A
   \   000024   605B         JZ        ??zclGetDataTypeLength_1
   \   000026   14           DEC       A
   \   000027   605C         JZ        ??zclGetDataTypeLength_2
   \   000029   14           DEC       A
   \   00002A   605D         JZ        ??zclGetDataTypeLength_3
   \   00002C   14           DEC       A
   \   00002D   605E         JZ        ??zclGetDataTypeLength_4
   \   00002F   14           DEC       A
   \   000030   605F         JZ        ??zclGetDataTypeLength_5
   \   000032   14           DEC       A
   \   000033   6060         JZ        ??zclGetDataTypeLength_6
   \   000035   14           DEC       A
   \   000036   6061         JZ        ??zclGetDataTypeLength_7
   \   000038   14           DEC       A
   \   000039   6042         JZ        ??zclGetDataTypeLength_0
   \   00003B   14           DEC       A
   \   00003C   6043         JZ        ??zclGetDataTypeLength_1
   \   00003E   14           DEC       A
   \   00003F   6044         JZ        ??zclGetDataTypeLength_2
   \   000041   14           DEC       A
   \   000042   6045         JZ        ??zclGetDataTypeLength_3
   \   000044   14           DEC       A
   \   000045   6046         JZ        ??zclGetDataTypeLength_4
   \   000047   14           DEC       A
   \   000048   6047         JZ        ??zclGetDataTypeLength_5
   \   00004A   14           DEC       A
   \   00004B   6048         JZ        ??zclGetDataTypeLength_6
   \   00004D   14           DEC       A
   \   00004E   6049         JZ        ??zclGetDataTypeLength_7
   \   000050   14           DEC       A
   \   000051   602A         JZ        ??zclGetDataTypeLength_0
   \   000053   14           DEC       A
   \   000054   602B         JZ        ??zclGetDataTypeLength_1
   \   000056   24F9         ADD       A,#-0x7
   \   000058   6027         JZ        ??zclGetDataTypeLength_1
   \   00005A   14           DEC       A
   \   00005B   602C         JZ        ??zclGetDataTypeLength_3
   \   00005D   14           DEC       A
   \   00005E   6039         JZ        ??zclGetDataTypeLength_7
   \   000060   245A         ADD       A,#0x5a
   \   000062   6025         JZ        ??zclGetDataTypeLength_3
   \   000064   14           DEC       A
   \   000065   6022         JZ        ??zclGetDataTypeLength_3
   \   000067   14           DEC       A
   \   000068   601F         JZ        ??zclGetDataTypeLength_3
   \   00006A   24FA         ADD       A,#-0x6
   \   00006C   6013         JZ        ??zclGetDataTypeLength_1
   \   00006E   14           DEC       A
   \   00006F   6010         JZ        ??zclGetDataTypeLength_1
   \   000071   14           DEC       A
   \   000072   6015         JZ        ??zclGetDataTypeLength_3
   \   000074   24FA         ADD       A,#-0x6
   \   000076   6021         JZ        ??zclGetDataTypeLength_7
   \   000078   14           DEC       A
   \   000079   6022         JZ        ??zclGetDataTypeLength_8
   \   00007B   8024         SJMP      ??zclGetDataTypeLength_9
   3203            {
   3204              case ZCL_DATATYPE_DATA8:
   3205              case ZCL_DATATYPE_BOOLEAN:
   3206              case ZCL_DATATYPE_BITMAP8:
   3207              case ZCL_DATATYPE_INT8:
   3208              case ZCL_DATATYPE_UINT8:
   3209              case ZCL_DATATYPE_ENUM8:
   3210                len = 1;
   \                     ??zclGetDataTypeLength_0:
   \   00007D   7901         MOV       R1,#0x1
   3211                break;
   \   00007F   8022         SJMP      ??zclGetDataTypeLength_10
   3212          
   3213              case ZCL_DATATYPE_DATA16:
   3214              case ZCL_DATATYPE_BITMAP16:
   3215              case ZCL_DATATYPE_UINT16:
   3216              case ZCL_DATATYPE_INT16:
   3217              case ZCL_DATATYPE_ENUM16:
   3218              case ZCL_DATATYPE_SEMI_PREC:
   3219              case ZCL_DATATYPE_CLUSTER_ID:
   3220              case ZCL_DATATYPE_ATTR_ID:
   3221                len = 2;
   \                     ??zclGetDataTypeLength_1:
   \   000081   7902         MOV       R1,#0x2
   3222                break;
   \   000083   801E         SJMP      ??zclGetDataTypeLength_10
   3223          
   3224              case ZCL_DATATYPE_DATA24:
   3225              case ZCL_DATATYPE_BITMAP24:
   3226              case ZCL_DATATYPE_UINT24:
   3227              case ZCL_DATATYPE_INT24:
   3228                len = 3;
   \                     ??zclGetDataTypeLength_2:
   \   000085   7903         MOV       R1,#0x3
   3229                break;
   \   000087   801A         SJMP      ??zclGetDataTypeLength_10
   3230          
   3231              case ZCL_DATATYPE_DATA32:
   3232              case ZCL_DATATYPE_BITMAP32:
   3233              case ZCL_DATATYPE_UINT32:
   3234              case ZCL_DATATYPE_INT32:
   3235              case ZCL_DATATYPE_SINGLE_PREC:
   3236              case ZCL_DATATYPE_TOD:
   3237              case ZCL_DATATYPE_DATE:
   3238              case ZCL_DATATYPE_UTC:
   3239              case ZCL_DATATYPE_BAC_OID:
   3240                len = 4;
   \                     ??zclGetDataTypeLength_3:
   \   000089   7904         MOV       R1,#0x4
   3241                break;
   \   00008B   8016         SJMP      ??zclGetDataTypeLength_10
   3242          
   3243             case ZCL_DATATYPE_UINT40:
   3244             case ZCL_DATATYPE_INT40:
   3245                 len = 5;
   \                     ??zclGetDataTypeLength_4:
   \   00008D   7905         MOV       R1,#0x5
   3246                 break;
   \   00008F   8012         SJMP      ??zclGetDataTypeLength_10
   3247          
   3248             case ZCL_DATATYPE_UINT48:
   3249             case ZCL_DATATYPE_INT48:
   3250                 len = 6;
   \                     ??zclGetDataTypeLength_5:
   \   000091   7906         MOV       R1,#0x6
   3251                 break;
   \   000093   800E         SJMP      ??zclGetDataTypeLength_10
   3252          
   3253             case ZCL_DATATYPE_UINT56:
   3254             case ZCL_DATATYPE_INT56:
   3255                 len = 7;
   \                     ??zclGetDataTypeLength_6:
   \   000095   7907         MOV       R1,#0x7
   3256                 break;
   \   000097   800A         SJMP      ??zclGetDataTypeLength_10
   3257          
   3258             case ZCL_DATATYPE_DOUBLE_PREC:
   3259             case ZCL_DATATYPE_IEEE_ADDR:
   3260             case ZCL_DATATYPE_UINT64:
   3261             case ZCL_DATATYPE_INT64:
   3262               len = 8;
   \                     ??zclGetDataTypeLength_7:
   \   000099   7908         MOV       R1,#0x8
   3263               break;
   \   00009B   8006         SJMP      ??zclGetDataTypeLength_10
   3264          
   3265              case ZCL_DATATYPE_128_BIT_SEC_KEY:
   3266               len = SEC_KEY_LEN;
   \                     ??zclGetDataTypeLength_8:
   \   00009D   7910         MOV       R1,#0x10
   3267               break;
   \   00009F   8002         SJMP      ??zclGetDataTypeLength_10
   3268          
   3269              case ZCL_DATATYPE_NO_DATA:
   3270              case ZCL_DATATYPE_UNKNOWN:
   3271                // Fall through
   3272          
   3273              default:
   3274                len = 0;
   \                     ??zclGetDataTypeLength_9:
   \   0000A1   7900         MOV       R1,#0x0
   3275                break;
   3276            }
   3277          
   3278            return ( len );
   \                     ??zclGetDataTypeLength_10:
   \   0000A3   02....       LJMP      ?BRET
   3279          }
   3280          
   3281          /*********************************************************************
   3282           * @fn      zclGetAttrDataLength
   3283           *
   3284           * @brief   Return the length of the attribute.
   3285           *
   3286           * @param   dataType - data type
   3287           * @param   pData - pointer to data
   3288           *
   3289           * @return  returns atrribute length
   3290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3291          uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
   \                     zclGetAttrDataLength:
   3292          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
   3293            uint16 dataLen = 0;
   3294          
   3295            if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
   \   000007   7444         MOV       A,#0x44
   \   000009   6E           XRL       A,R6
   \   00000A   6005         JZ        ??zclGetAttrDataLength_0
   \   00000C   7443         MOV       A,#0x43
   \   00000E   6E           XRL       A,R6
   \   00000F   700C         JNZ       ??zclGetAttrDataLength_1
   3296            {
   3297              dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
   \                     ??zclGetAttrDataLength_0:
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   12....       LCALL     ?Subroutine128 & 0xFFFF
   3298            }
   \                     ??CrossCallReturnLabel_238:
   \   000018   FA           MOV       R2,A
   \   000019   E4           CLR       A
   \   00001A   39           ADDC      A,R1
   \   00001B   8015         SJMP      ??zclGetAttrDataLength_2
   3299            else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
   \                     ??zclGetAttrDataLength_1:
   \   00001D   7442         MOV       A,#0x42
   \   00001F   6E           XRL       A,R6
   \   000020   6005         JZ        ??zclGetAttrDataLength_3
   \   000022   7441         MOV       A,#0x41
   \   000024   6E           XRL       A,R6
   \   000025   700E         JNZ       ??zclGetAttrDataLength_4
   3300            {
   3301              dataLen = *pData + 1; // string length + 1 for length field
   \                     ??zclGetAttrDataLength_3:
   \   000027   8A82         MOV       DPL,R2
   \   000029   8B83         MOV       DPH,R3
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   2401         ADD       A,#0x1
   \   00002E   FA           MOV       R2,A
   \   00002F   E4           CLR       A
   \   000030   3400         ADDC      A,#0x0
   \                     ??zclGetAttrDataLength_2:
   \   000032   FB           MOV       R3,A
   \   000033   8007         SJMP      ??zclGetAttrDataLength_5
   3302            }
   3303            else
   3304            {
   3305              dataLen = zclGetDataTypeLength( dataType );
   \                     ??zclGetAttrDataLength_4:
   \   000035                ; Setup parameters for call to function zclGetDataTypeLength
   \   000035   12....       LCALL     `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
   \   000038   E9           MOV       A,R1
   \   000039   FA           MOV       R2,A
   \   00003A   7B00         MOV       R3,#0x0
   3306            }
   3307          
   3308            return ( dataLen );
   \                     ??zclGetAttrDataLength_5:
   \   00003C   02....       LJMP      ??Subroutine198_0 & 0xFFFF
   3309          }
   3310          
   3311          #ifdef ZCL_READ
   3312          /*********************************************************************
   3313           * @fn      zclReadAttrData
   3314           *
   3315           * @brief   Read the attribute's current value into pAttrData.
   3316           *          NOTE - Not compatible with application's attributes callbacks.
   3317           *
   3318           * @param   pAttrData - where to put attribute data
   3319           * @param   pAttr - pointer to attribute
   3320           * @param   pDataLen - where to put attribute data length
   3321           *
   3322           * @return Success
   3323           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3324          ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
   \                     zclReadAttrData:
   3325          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V4,R2
   \   000007   8B..         MOV       ?V5,R3
   3326            uint16 dataLen;
   3327          
   3328            if ( pAttr->attr.dataPtr == NULL )
   \   000009   EC           MOV       A,R4
   \   00000A   2406         ADD       A,#0x6
   \   00000C   F5..         MOV       ?V0,A
   \   00000E   E4           CLR       A
   \   00000F   3D           ADDC      A,R5
   \   000010   F5..         MOV       ?V1,A
   \   000012   85..82       MOV       DPL,?V0
   \   000015   F583         MOV       DPH,A
   \   000017   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   00001A   7004         JNZ       ??zclReadAttrData_0
   3329            {
   3330              return ( ZCL_STATUS_FAILURE );
   \   00001C   7901         MOV       R1,#0x1
   \   00001E   803A         SJMP      ??zclReadAttrData_1
   3331            }
   3332          
   3333            dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
   \                     ??zclReadAttrData_0:
   \   000020                ; Setup parameters for call to function zclGetAttrDataLength
   \   000020   8C82         MOV       DPL,R4
   \   000022   8D83         MOV       DPH,R5
   \   000024   A3           INC       DPTR
   \   000025   A3           INC       DPTR
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F9           MOV       R1,A
   \   00002A   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   00002D   8A..         MOV       ?V2,R2
   \   00002F   8B..         MOV       ?V3,R3
   \   000031   AE..         MOV       R6,?V2
   \   000033   AF..         MOV       R7,?V3
   3334            zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
   \   000035                ; Setup parameters for call to function osal_memcpy
   \   000035   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00003B   EE           MOV       A,R6
   \   00003C   FC           MOV       R4,A
   \   00003D   EF           MOV       A,R7
   \   00003E   FD           MOV       R5,A
   \   00003F   AA..         MOV       R2,?V4
   \   000041   AB..         MOV       R3,?V5
   \   000043   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000046   7403         MOV       A,#0x3
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \   00004B   740E         MOV       A,#0xe
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ??Subroutine196_0 & 0xFFFF
   3335          
   3336            if ( pDataLen != NULL )
   \                     ??CrossCallReturnLabel_352:
   \   000053   6003         JZ        ??CrossCallReturnLabel_386
   3337            {
   3338              *pDataLen = dataLen;
   \   000055   12....       LCALL     ??Subroutine204_0 & 0xFFFF
   3339            }
   3340          
   3341            return ( ZCL_STATUS_SUCCESS );
   \                     ??CrossCallReturnLabel_386:
   \   000058   7900         MOV       R1,#0x0
   \                     ??zclReadAttrData_1:
   \   00005A   80..         SJMP      ??Subroutine205_0
   3342          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006                REQUIRE ??Subroutine203_0
   \   000006                ; // Fall through to label ??Subroutine203_0
   3343          
   3344          /*********************************************************************
   3345           * @fn      zcl_ReadAttrData
   3346           *
   3347           * @brief   Read the attribute's current value into pAttrData.
   3348           *          Use application's callback function if assigned to this attribute.
   3349           *
   3350           * @param   endpoint - application's endpoint
   3351           * @param   clusterId - cluster that attribute belongs to
   3352           * @param   attrId - attribute id
   3353           * @param   pAttrData - where to put attribute data
   3354           * @param   pDataLen - where to put attribute data length
   3355           *
   3356           * @return  Successful if data was read
   3357           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3358          ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zcl_ReadAttrData:
   3359                                                   uint8 *pAttrData, uint16 *pDataLen )
   3360          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   89..         MOV       ?V0,R1
   \   00000C   EA           MOV       A,R2
   \   00000D   FE           MOV       R6,A
   \   00000E   EB           MOV       A,R3
   \   00000F   FF           MOV       R7,A
   \   000010   8C..         MOV       ?V2,R4
   \   000012   8D..         MOV       ?V3,R5
   3361            zclAttrRec_t attrRec;
   3362          
   3363            if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
   \   000014                ; Setup parameters for call to function zclFindAttrRec
   \   000014   A8..         MOV       R0,?XSP + 0
   \   000016   A9..         MOV       R1,?XSP + 1
   \   000018   88..         MOV       ?V4,R0
   \   00001A   89..         MOV       ?V5,R1
   \   00001C   78..         MOV       R0,#?V4
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   A9..         MOV       R1,?V0
   \   000023   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?DEALLOC_XSTACK8
   \   00002B   E9           MOV       A,R1
   \   00002C   7004         JNZ       ??zcl_ReadAttrData_0
   3364            {
   3365              return ( ZCL_STATUS_FAILURE );
   \   00002E   7901         MOV       R1,#0x1
   \   000030   804C         SJMP      ??zcl_ReadAttrData_1
   3366            }
   \                     ??zcl_ReadAttrData_0:
   \   000032   7416         MOV       A,#0x16
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   00003A   7418         MOV       A,#0x18
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   3367          
   3368            if ( attrRec.attr.dataPtr != NULL )
   \                     ??CrossCallReturnLabel_575:
   \   000042   7406         MOV       A,#0x6
   \   000044   12....       LCALL     ?XSTACK_DISP0_8
   \   000047   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   00004A   78..         MOV       R0,#?V4
   \   00004C   6012         JZ        ??zcl_ReadAttrData_2
   3369            {
   3370              return zclReadAttrData( pAttrData, &attrRec, pDataLen );
   \   00004E                ; Setup parameters for call to function zclReadAttrData
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   7402         MOV       A,#0x2
   \   000053   12....       LCALL     ?XSTACK_DISP102_8
   \   000056   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   000059   7402         MOV       A,#0x2
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   801E         SJMP      ??zcl_ReadAttrData_1
   3371            }
   3372            else
   3373            {
   3374              return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
   \                     ??zcl_ReadAttrData_2:
   \   000060                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   000060   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000063   8A..         MOV       ?V4,R2
   \   000065   8B..         MOV       ?V5,R3
   \   000067   78..         MOV       R0,#?V4
   \   000069   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00006C   AC..         MOV       R4,?V2
   \   00006E   AD..         MOV       R5,?V3
   \   000070   EE           MOV       A,R6
   \   000071   FA           MOV       R2,A
   \   000072   EF           MOV       A,R7
   \   000073   FB           MOV       R3,A
   \   000074   A9..         MOV       R1,?V0
   \   000076   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   000079   7404         MOV       A,#0x4
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zcl_ReadAttrData_1:
   \   00007E   7408         MOV       A,#0x8
   3375            }
   \   000080   02....       LJMP      ?Subroutine5 & 0xFFFF
   3376          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V5,A
   \   000007   22           RET
   3377          
   3378          /*********************************************************************
   3379           * @fn      zclGetAttrDataLengthUsingCB
   3380           *
   3381           * @brief   Use application's callback to get the length of the attribute's
   3382           *          current value stored in the database.
   3383           *
   3384           * @param   endpoint - application's endpoint
   3385           * @param   clusterId - cluster that attribute belongs to
   3386           * @param   attrId - attribute id
   3387           *
   3388           * @return  returns attribute length
   3389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3390          static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
   \                     zclGetAttrDataLengthUsingCB:
   3391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV       A,#-0x2
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
   3392            uint16 dataLen = 0;
   \   000012   85..82       MOV       DPL,?XSP + 0
   \   000015   85..83       MOV       DPH,?XSP + 1
   \   000018   E4           CLR       A
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   A3           INC       DPTR
   \   00001B   F0           MOVX      @DPTR,A
   3393            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00001C                ; Setup parameters for call to function zclGetReadWriteCB
   \   00001C   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   00001F   8A..         MOV       ?V0,R2
   \   000021   8B..         MOV       ?V1,R3
   3394          
   3395            if ( pfnReadWriteCB != NULL )
   \   000023   EA           MOV       A,R2
   \   000024   45..         ORL       A,?V1
   \   000026   602F         JZ        ??zclGetAttrDataLengthUsingCB_0
   3396            {
   3397              // Only get the attribute length
   3398              (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
   \   000028                ; Setup parameters for indirect call
   \   000028   A8..         MOV       R0,?XSP + 0
   \   00002A   A9..         MOV       R1,?XSP + 1
   \   00002C   88..         MOV       ?V4,R0
   \   00002E   89..         MOV       ?V5,R1
   \   000030   78..         MOV       R0,#?V4
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   E4           CLR       A
   \   000036   F5..         MOV       ?V4,A
   \   000038   F5..         MOV       ?V5,A
   \   00003A   78..         MOV       R0,#?V4
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003F   7900         MOV       R1,#0x0
   \   000041   EE           MOV       A,R6
   \   000042   FC           MOV       R4,A
   \   000043   EF           MOV       A,R7
   \   000044   FD           MOV       R5,A
   \   000045   AA..         MOV       R2,?V6
   \   000047   AB..         MOV       R3,?V7
   \   000049   85..82       MOV       DPL,?V0
   \   00004C   85..83       MOV       DPH,?V1
   \   00004F   12....       LCALL     ?CALL_IND
   \   000052   7404         MOV       A,#0x4
   \   000054   12....       LCALL     ?DEALLOC_XSTACK8
   3399            }
   3400          
   3401            return ( dataLen );
   \                     ??zclGetAttrDataLengthUsingCB_0:
   \   000057   85..82       MOV       DPL,?XSP + 0
   \   00005A   85..83       MOV       DPH,?XSP + 1
   \   00005D   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000060   7402         MOV       A,#0x2
   \   000062   02....       LJMP      ??Subroutine194_0 & 0xFFFF
   3402          }
   3403          
   3404          /*********************************************************************
   3405           * @fn      zclReadAttrDataUsingCB
   3406           *
   3407           * @brief   Use application's callback to read the attribute's current
   3408           *          value stored in the database.
   3409           *
   3410           * @param   endpoint - application's endpoint
   3411           * @param   clusterId - cluster that attribute belongs to
   3412           * @param   attrId - attribute id
   3413           * @param   pAttrData - where to put attribute data
   3414           * @param   pDataLen - where to put attribute data length
   3415           *
   3416           * @return  Successful if data was read
   3417           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3418          static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
   \                     zclReadAttrDataUsingCB:
   3419                                                   uint8 *pAttrData, uint16 *pDataLen )
   3420          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V6,R2
   \   000007   8B..         MOV       ?V7,R3
   \   000009   8C..         MOV       ?V2,R4
   \   00000B   8D..         MOV       ?V3,R5
   3421            zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   00000D                ; Setup parameters for call to function zclGetReadWriteCB
   \   00000D   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000010   8A..         MOV       ?V0,R2
   \   000012   8B..         MOV       ?V1,R3
   \   000014   7412         MOV       A,#0x12
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   3422          
   3423            if ( pDataLen != NULL )
   \                     ??CrossCallReturnLabel_576:
   \   00001C   E5..         MOV       A,?V4
   \   00001E   45..         ORL       A,?V5
   \   000020   600A         JZ        ??zclReadAttrDataUsingCB_0
   3424            {
   3425              *pDataLen = 0; // Always initialize it to 0
   \   000022   85..82       MOV       DPL,?V4
   \   000025   85..83       MOV       DPH,?V5
   \   000028   E4           CLR       A
   \   000029   F0           MOVX      @DPTR,A
   \   00002A   A3           INC       DPTR
   \   00002B   F0           MOVX      @DPTR,A
   3426            }
   3427          
   3428            if ( pfnReadWriteCB != NULL )
   \                     ??zclReadAttrDataUsingCB_0:
   \   00002C   EA           MOV       A,R2
   \   00002D   45..         ORL       A,?V1
   \   00002F   6027         JZ        ??zclReadAttrDataUsingCB_1
   3429            {
   3430              // Read the attribute value and its length
   3431              return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
   \   000031                ; Setup parameters for indirect call
   \   000031   78..         MOV       R0,#?V4
   \   000033   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000036   7412         MOV       A,#0x12
   \   000038   12....       LCALL     ?XSTACK_DISP0_8
   \   00003B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00003E   7901         MOV       R1,#0x1
   \   000040   AC..         MOV       R4,?V2
   \   000042   AD..         MOV       R5,?V3
   \   000044   AA..         MOV       R2,?V6
   \   000046   AB..         MOV       R3,?V7
   \   000048   85..82       MOV       DPL,?V0
   \   00004B   85..83       MOV       DPH,?V1
   \   00004E   12....       LCALL     ?CALL_IND
   \   000051   7404         MOV       A,#0x4
   \   000053   12....       LCALL     ?DEALLOC_XSTACK8
   \   000056   8002         SJMP      ??zclReadAttrDataUsingCB_2
   3432            }
   3433          
   3434            return ( ZCL_STATUS_SOFTWARE_FAILURE );
   \                     ??zclReadAttrDataUsingCB_1:
   \   000058   79C1         MOV       R1,#-0x3f
   \                     ??zclReadAttrDataUsingCB_2:
   \   00005A   02....       LJMP      ??Subroutine195_0 & 0xFFFF
   3435          }
   3436          
   3437          /*********************************************************************
   3438           * @fn      zclAuthorizeRead
   3439           *
   3440           * @brief   Use application's callback to authorize a Read operation
   3441           *          on a given attribute.
   3442           *
   3443           * @param   endpoint - application's endpoint
   3444           * @param   srcAddr - source Address
   3445           * @param   pAttr - pointer to attribute
   3446           *
   3447           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3448           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3449           */
   3450          static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   3451          {
   3452            if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
   3453            {
   3454              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   3455          
   3456              if ( pfnAuthorizeCB != NULL )
   3457              {
   3458                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
   3459              }
   3460            }
   3461          
   3462            return ( ZCL_STATUS_SUCCESS );
   3463          }
   3464          #endif // ZCL_READ
   3465          
   3466          #ifdef ZCL_WRITE
   3467          /*********************************************************************
   3468           * @fn      zclWriteAttrData
   3469           *
   3470           * @brief   Write the received data.
   3471           *
   3472           * @param   endpoint - application's endpoint
   3473           * @param   pAttr - where to write data to
   3474           * @param   pWriteRec - data to be written
   3475           *
   3476           * @return  Successful if data was written
   3477           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3478          static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrData:
   3479                                             zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
   3480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EC           MOV       A,R4
   \   000006   FE           MOV       R6,A
   \   000007   ED           MOV       A,R5
   \   000008   FF           MOV       R7,A
   3481            uint8 status;
   3482          
   3483            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   506F         JNC       ??zclWriteAttrData_0
   3484            {
   3485              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000017                ; Setup parameters for call to function zclAuthorizeWrite
   \   000017   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001A   E9           MOV       A,R1
   \   00001B   F5..         MOV       ?V3,A
   3486              if ( status == ZCL_STATUS_SUCCESS )
   \   00001D   706A         JNZ       ??zclWriteAttrData_1
   \   00001F   740F         MOV       A,#0xf
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   12....       LCALL     ?Subroutine164 & 0xFFFF
   3487              {
   3488                if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
   \                     ??CrossCallReturnLabel_380:
   \   000027   90....       MOV       DPTR,#zcl_ValidateAttrDataCB
   \   00002A   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00002D   6013         JZ        ??zclWriteAttrData_2
   \   00002F                ; Setup parameters for indirect call
   \   00002F   AC..         MOV       R4,?V0
   \   000031   AD..         MOV       R5,?V1
   \   000033   EE           MOV       A,R6
   \   000034   FA           MOV       R2,A
   \   000035   EF           MOV       A,R7
   \   000036   FB           MOV       R3,A
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F583         MOV       DPH,A
   \   00003A   8882         MOV       DPL,R0
   \   00003C   12....       LCALL     ?CALL_IND
   \   00003F   E9           MOV       A,R1
   \   000040   603F         JZ        ??zclWriteAttrData_3
   3489                {
   3490                  // Write the attribute value
   3491                  uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
   \                     ??zclWriteAttrData_2:
   \   000042   E5..         MOV       A,?V0
   \   000044   2403         ADD       A,#0x3
   \   000046   F5..         MOV       ?V0,A
   \   000048   5002         JNC       ??zclWriteAttrData_4
   \   00004A   05..         INC       ?V1
   \                     ??zclWriteAttrData_4:
   \   00004C                ; Setup parameters for call to function zclGetAttrDataLength
   \   00004C   F582         MOV       DPL,A
   \   00004E   85..83       MOV       DPH,?V1
   \   000051   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000054   8E82         MOV       DPL,R6
   \   000056   8F83         MOV       DPH,R7
   \   000058   A3           INC       DPTR
   \   000059   A3           INC       DPTR
   \   00005A   A3           INC       DPTR
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   F9           MOV       R1,A
   \   00005E   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000061   8A..         MOV       ?V4,R2
   \   000063   8B..         MOV       ?V5,R3
   \   000065   AC..         MOV       R4,?V4
   \   000067   AD..         MOV       R5,?V5
   3492                  zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
   \   000069                ; Setup parameters for call to function osal_memcpy
   \   000069   12....       LCALL     ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   00006C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00006F   8E82         MOV       DPL,R6
   \   000071   8F83         MOV       DPH,R7
   \   000073   A3           INC       DPTR
   \   000074   12....       LCALL     ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000077   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007A   7403         MOV       A,#0x3
   \   00007C   12....       LCALL     ?DEALLOC_XSTACK8
   3493          
   3494                  status = ZCL_STATUS_SUCCESS;
   \   00007F   8008         SJMP      ??zclWriteAttrData_1
   3495                }
   3496                else
   3497                {
   3498                  status = ZCL_STATUS_INVALID_VALUE;
   \                     ??zclWriteAttrData_3:
   \   000081   75..87       MOV       ?V3,#-0x79
   \   000084   8003         SJMP      ??zclWriteAttrData_1
   3499                }
   3500              }
   3501            }
   3502            else
   3503            {
   3504              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrData_0:
   \   000086   75..88       MOV       ?V3,#-0x78
   3505            }
   3506          
   3507            return ( status );
   \                     ??zclWriteAttrData_1:
   \   000089   A9..         MOV       R1,?V3
   \   00008B   02....       LJMP      ??Subroutine242_0 & 0xFFFF
   3508          }
   3509          
   3510          /*********************************************************************
   3511           * @fn      zclWriteAttrDataUsingCB
   3512           *
   3513           * @brief   Use application's callback to write the attribute's current
   3514           *          value stored in the database.
   3515           *
   3516           * @param   endpoint - application's endpoint
   3517           * @param   pAttr - where to write data to
   3518           * @param   pAttrData - data to be written
   3519           *
   3520           * @return  Successful if data was written
   3521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3522          static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
   \                     zclWriteAttrDataUsingCB:
   3523                                                    zclAttrRec_t *pAttr, uint8 *pAttrData )
   3524          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V2,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
   3525            uint8 status;
   3526          
   3527            if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
   \   00000B   8E82         MOV       DPL,R6
   \   00000D   8F83         MOV       DPH,R7
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   A2E1         MOV       C,0xE0 /* A   */.1
   \   000017   504D         JNC       ??zclWriteAttrDataUsingCB_0
   3528            {
   3529              status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
   \   000019                ; Setup parameters for call to function zclAuthorizeWrite
   \   000019   12....       LCALL     `??zclAuthorizeWrite::?relay`; Banked call to: zclAuthorizeWrite
   \   00001C   E9           MOV       A,R1
   \   00001D   F9           MOV       R1,A
   3530              if ( status == ZCL_STATUS_SUCCESS )
   \   00001E   7048         JNZ       ??zclWriteAttrDataUsingCB_1
   3531              {
   3532                zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
   \   000020                ; Setup parameters for call to function zclGetReadWriteCB
   \   000020   A9..         MOV       R1,?V2
   \   000022   12....       LCALL     `??zclGetReadWriteCB::?relay`; Banked call to: zclGetReadWriteCB
   \   000025   8A..         MOV       ?V0,R2
   \   000027   8B..         MOV       ?V1,R3
   3533                if ( pfnReadWriteCB != NULL )
   \   000029   EA           MOV       A,R2
   \   00002A   45..         ORL       A,?V1
   \   00002C   6034         JZ        ??zclWriteAttrDataUsingCB_2
   3534                {
   3535                  // Write the attribute value
   3536                  status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
   3537                                              ZCL_OPER_WRITE, pAttrData, NULL );
   \   00002E                ; Setup parameters for indirect call
   \   00002E   E4           CLR       A
   \   00002F   F5..         MOV       ?V4,A
   \   000031   F5..         MOV       ?V5,A
   \   000033   78..         MOV       R0,#?V4
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7410         MOV       A,#0x10
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000040   7902         MOV       R1,#0x2
   \   000042   8E82         MOV       DPL,R6
   \   000044   8F83         MOV       DPH,R7
   \   000046   12....       LCALL     ??Subroutine221_0 & 0xFFFF
   3538                }
   \                     ??CrossCallReturnLabel_517:
   \   000049   8E82         MOV       DPL,R6
   \   00004B   8F83         MOV       DPH,R7
   \   00004D   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000050   85..82       MOV       DPL,?V0
   \   000053   85..83       MOV       DPH,?V1
   \   000056   12....       LCALL     ?CALL_IND
   \   000059   7404         MOV       A,#0x4
   \   00005B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005E   E9           MOV       A,R1
   \   00005F   F9           MOV       R1,A
   \   000060   8006         SJMP      ??zclWriteAttrDataUsingCB_1
   3539                else
   3540                {
   3541                  status = ZCL_STATUS_SOFTWARE_FAILURE;
   \                     ??zclWriteAttrDataUsingCB_2:
   \   000062   79C1         MOV       R1,#-0x3f
   \   000064   8002         SJMP      ??zclWriteAttrDataUsingCB_1
   3542                }
   3543              }
   3544            }
   3545            else
   3546            {
   3547              status = ZCL_STATUS_READ_ONLY;
   \                     ??zclWriteAttrDataUsingCB_0:
   \   000066   7988         MOV       R1,#-0x78
   3548            }
   3549          
   3550            return ( status );
   \                     ??zclWriteAttrDataUsingCB_1:
   \   000068   02....       LJMP      ??Subroutine205_0 & 0xFFFF
   3551          }
   3552          
   3553          /*********************************************************************
   3554           * @fn      zclAuthorizeWrite
   3555           *
   3556           * @brief   Use application's callback to authorize a Write operation
   3557           *          on a given attribute.
   3558           *
   3559           * @param   endpoint - application's endpoint
   3560           * @param   srcAddr - source Address
   3561           * @param   pAttr - pointer to attribute
   3562           *
   3563           * @return  ZCL_STATUS_SUCCESS: Operation authorized
   3564           *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
   3565           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3566          static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
   \                     zclAuthorizeWrite:
   3567          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V2,R2
   \   000007   8B..         MOV       ?V3,R3
   \   000009   EC           MOV       A,R4
   \   00000A   FE           MOV       R6,A
   \   00000B   ED           MOV       A,R5
   \   00000C   FF           MOV       R7,A
   3568            if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
   \   00000D   8E82         MOV       DPL,R6
   \   00000F   8F83         MOV       DPH,R7
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   A2E5         MOV       C,0xE0 /* A   */.5
   \   000019   501C         JNC       ??zclAuthorizeWrite_0
   3569            {
   3570              zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
   \   00001B                ; Setup parameters for call to function zclGetAuthorizeCB
   \   00001B   12....       LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
   \   00001E   8A82         MOV       DPL,R2
   \   000020   8B83         MOV       DPH,R3
   3571          
   3572              if ( pfnAuthorizeCB != NULL )
   \   000022   E582         MOV       A,DPL
   \   000024   4583         ORL       A,DPH
   \   000026   600F         JZ        ??zclAuthorizeWrite_0
   3573              {
   3574                return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
   \   000028                ; Setup parameters for indirect call
   \   000028   7902         MOV       R1,#0x2
   \   00002A   EE           MOV       A,R6
   \   00002B   FC           MOV       R4,A
   \   00002C   EF           MOV       A,R7
   \   00002D   FD           MOV       R5,A
   \   00002E   AA..         MOV       R2,?V2
   \   000030   AB..         MOV       R3,?V3
   \   000032   12....       LCALL     ?CALL_IND
   \   000035   8002         SJMP      ??zclAuthorizeWrite_1
   3575              }
   3576            }
   3577          
   3578            return ( ZCL_STATUS_SUCCESS );
   \                     ??zclAuthorizeWrite_0:
   \   000037   7900         MOV       R1,#0x0
   \                     ??zclAuthorizeWrite_1:
   \   000039   02....       LJMP      ??Subroutine205_0 & 0xFFFF
   3579          }
   3580          #endif // ZCL_WRITE
   3581          
   3582          #ifdef ZCL_READ
   3583          /*********************************************************************
   3584           * @fn      zclParseInReadCmd
   3585           *
   3586           * @brief   Parse the "Profile" Read Commands
   3587           *
   3588           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3589           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3590           *
   3591           * @param   pCmd - pointer to incoming data to parse
   3592           *
   3593           * @return  pointer to the parsed command structure
   3594           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3595          void *zclParseInReadCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadCmd:
   3596          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3597            zclReadCmd_t *readCmd;
   3598            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine107 & 0xFFFF
   3599          
   3600            readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
   \                     ??CrossCallReturnLabel_201:
   \   000008   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   00000B   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3601            if ( readCmd != NULL )
   \   00000E   EA           MOV       A,R2
   \   00000F   4B           ORL       A,R3
   \   000010   6054         JZ        ??zclParseInReadCmd_0
   3602            {
   3603              uint8 i;
   3604              readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
   \   000012   85..82       MOV       DPL,?V0
   \   000015   85..83       MOV       DPH,?V1
   \   000018   12....       LCALL     ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   00001B   C3           CLR       C
   \   00001C   13           RRC       A
   \   00001D   E8           MOV       A,R0
   \   00001E   13           RRC       A
   \   00001F   8A82         MOV       DPL,R2
   \   000021   8B83         MOV       DPH,R3
   \   000023   F0           MOVX      @DPTR,A
   3605              for ( i = 0; i < readCmd->numAttr; i++ )
   \   000024   7C00         MOV       R4,#0x0
   \   000026   8033         SJMP      ??zclParseInReadCmd_1
   3606              {
   3607                readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInReadCmd_2:
   \   000028   8E82         MOV       DPL,R6
   \   00002A   8F83         MOV       DPH,R7
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   F5..         MOV       ?V0,A
   \   00002F   A3           INC       DPTR
   \   000030   E0           MOVX      A,@DPTR
   \   000031   F8           MOV       R0,A
   \   000032   E4           CLR       A
   \   000033   C8           XCH       A,R0
   \   000034   F9           MOV       R1,A
   \   000035   E5..         MOV       A,?V0
   \   000037   28           ADD       A,R0
   \   000038   E4           CLR       A
   \   000039   39           ADDC      A,R1
   \   00003A   F5..         MOV       ?V1,A
   \   00003C   EC           MOV       A,R4
   \   00003D   25E0         ADD       A,0xE0 /* A   */
   \   00003F   F8           MOV       R0,A
   \   000040   E4           CLR       A
   \   000041   33           RLC       A
   \   000042   F9           MOV       R1,A
   \   000043   EA           MOV       A,R2
   \   000044   28           ADD       A,R0
   \   000045   F582         MOV       DPL,A
   \   000047   EB           MOV       A,R3
   \   000048   39           ADDC      A,R1
   \   000049   F583         MOV       DPH,A
   \   00004B   A3           INC       DPTR
   \   00004C   E5..         MOV       A,?V0
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   E5..         MOV       A,?V1
   \   000052   F0           MOVX      @DPTR,A
   3608                pBuf += 2;
   \   000053   EE           MOV       A,R6
   \   000054   2402         ADD       A,#0x2
   \   000056   FE           MOV       R6,A
   \   000057   5001         JNC       ??zclParseInReadCmd_3
   \   000059   0F           INC       R7
   3609              }
   \                     ??zclParseInReadCmd_3:
   \   00005A   0C           INC       R4
   \                     ??zclParseInReadCmd_1:
   \   00005B   8A82         MOV       DPL,R2
   \   00005D   8B83         MOV       DPH,R3
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   F8           MOV       R0,A
   \   000061   EC           MOV       A,R4
   \   000062   C3           CLR       C
   \   000063   98           SUBB      A,R0
   \   000064   40C2         JC        ??zclParseInReadCmd_2
   3610            }
   3611          
   3612            return ( (void *)readCmd );
   \                     ??zclParseInReadCmd_0:
   \   000066   02....       LJMP      ?Subroutine4 & 0xFFFF
   3613          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   8582..       MOV       ?V0,DPL
   \   000003   8583..       MOV       ?V1,DPH
   \   000006                ; Setup parameters for call to function osal_mem_alloc
   \   000006                ; Setup parameters for call to function osal_mem_alloc
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2401         ADD       A,#0x1
   \   000009   FA           MOV       R2,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3400         ADDC      A,#0x0
   \   00000E   FB           MOV       R3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007   E0           MOVX      A,@DPTR
   \   000008   FE           MOV       R6,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FF           MOV       R7,A
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   A3           INC       DPTR
   \   000011   22           RET
   3614          
   3615          /*********************************************************************
   3616           * @fn      zclParseInReadRspCmd
   3617           *
   3618           * @brief   Parse the "Profile" Read Response Commands
   3619           *
   3620           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3621           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3622           *
   3623           * @param   pCmd - pointer to incoming data to parse
   3624           *
   3625           * @return  pointer to the parsed command structure
   3626           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7404         MOV       A,#0x4
   \   000002   12....       LCALL     ?XSTACK_DISP0_8
   \   000005   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   000008                REQUIRE ??Subroutine193_0
   \   000008                ; // Fall through to label ??Subroutine193_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3627          static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInReadRspCmd:
   3628          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine26 & 0xFFFF
   3629            zclReadRspCmd_t *readRspCmd;
   3630            uint8 *pBuf = pCmd->pData;
   \                     ??CrossCallReturnLabel_28:
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine12 & 0xFFFF
   3631            uint8 *dataPtr;
   3632            uint8 numAttr = 0;
   3633            uint8 hdrLen;
   3634            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_6:
   \   000018   803C         SJMP      ??CrossCallReturnLabel_266
   3635            uint16 attrDataLen;
   3636          
   3637            // find out the number of attributes and the length of attribute data
   3638            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3639            {
   3640              uint8 status;
   3641          
   3642              numAttr++;
   \                     ??zclParseInReadRspCmd_0:
   \   00001A   05..         INC       ?V3
   3643              pBuf += 2; // move pass attribute id
   3644          
   3645              status = *pBuf++;
   \   00001C   85..82       MOV       DPL,?V4
   \   00001F   85..83       MOV       DPH,?V5
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F8           MOV       R0,A
   \   000026   E5..         MOV       A,?V4
   \   000028   2403         ADD       A,#0x3
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   5002         JNC       ??zclParseInReadRspCmd_1
   \   00002E   05..         INC       ?V5
   3646              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_1:
   \   000030   E8           MOV       A,R0
   \   000031   7023         JNZ       ??CrossCallReturnLabel_266
   3647              {
   3648                uint8 dataType = *pBuf++;
   \   000033   85..82       MOV       DPL,?V4
   \   000036   85..83       MOV       DPH,?V5
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   A3           INC       DPTR
   \   00003C   8582..       MOV       ?V4,DPL
   \   00003F   8583..       MOV       ?V5,DPH
   3649          
   3650                attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \   000042                ; Setup parameters for call to function zclGetAttrDataLength
   \   000042   AA..         MOV       R2,?V4
   \   000044   AB..         MOV       R3,?V5
   \   000046   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000049   12....       LCALL     ?Subroutine139 & 0xFFFF
   3651                pBuf += attrDataLen; // move pass attribute data
   3652          
   3653                // add padding if needed
   3654                if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_256:
   \   00004C   5005         JNC       ??zclParseInReadRspCmd_2
   3655                {
   3656                  attrDataLen++;
   \   00004E   0E           INC       R6
   \   00004F   04           INC       A
   \   000050   7001         JNZ       ??zclParseInReadRspCmd_2
   \   000052   0F           INC       R7
   3657                }
   3658          
   3659                dataLen += attrDataLen;
   \                     ??zclParseInReadRspCmd_2:
   \   000053   12....       LCALL     ?Subroutine144 & 0xFFFF
   3660              }
   3661            }
   \                     ??CrossCallReturnLabel_266:
   \   000056   7402         MOV       A,#0x2
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   00005E   40BA         JC        ??zclParseInReadRspCmd_0
   3662          
   3663            // calculate the length of the response header
   3664            hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
   \   000060   75F006       MOV       B,#0x6
   \   000063   E5..         MOV       A,?V3
   \   000065   A4           MUL       AB
   \   000066   04           INC       A
   \   000067   FE           MOV       R6,A
   3665          
   3666            readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   000068                ; Setup parameters for call to function osal_mem_alloc
   \   000068   25..         ADD       A,?V6
   \   00006A   FA           MOV       R2,A
   \   00006B   E4           CLR       A
   \   00006C   35..         ADDC      A,?V7
   \   00006E   FB           MOV       R3,A
   \   00006F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000072   7404         MOV       A,#0x4
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   3667            if ( readRspCmd != NULL )
   \                     ??CrossCallReturnLabel_453:
   \   00007A   7404         MOV       A,#0x4
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   000082   7003         JNZ       $+5
   \   000084   02....       LJMP      ??zclParseInReadRspCmd_3 & 0xFFFF
   3668            {
   3669              uint8 i;
   3670              pBuf = pCmd->pData;
   \   000087   12....       LCALL     ?Subroutine70 & 0xFFFF
   3671              dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
   \                     ??CrossCallReturnLabel_125:
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000090   12....       LCALL     ?XSTACK_DISP0_8
   \   000093   12....       LCALL     ?Subroutine34 & 0xFFFF
   3672          
   3673              readRspCmd->numAttr = numAttr;
   \                     ??CrossCallReturnLabel_45:
   \   000096   12....       LCALL     ?XSTACK_DISP0_8
   \   000099   12....       LCALL     ?Subroutine87 & 0xFFFF
   3674              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_163:
   \   00009C   02....       LJMP      ??zclParseInReadRspCmd_4 & 0xFFFF
   3675              {
   3676                zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   \                     ??zclParseInReadRspCmd_5:
   \   00009F   E5..         MOV       A,?V6
   \   0000A1   75F006       MOV       B,#0x6
   \   0000A4   A4           MUL       AB
   \   0000A5   F8           MOV       R0,A
   \   0000A6   A9F0         MOV       R1,B
   \   0000A8   7404         MOV       A,#0x4
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   12....       LCALL     ?Subroutine10 & 0xFFFF
   3677          
   3678                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3679                pBuf += 2;
   3680          
   3681                statusRec->status = *pBuf++;
   \                     ??CrossCallReturnLabel_2:
   \   0000B0   F8           MOV       R0,A
   \   0000B1   85..82       MOV       DPL,?XSP + 0
   \   0000B4   85..83       MOV       DPH,?XSP + 1
   \   0000B7   E0           MOVX      A,@DPTR
   \   0000B8   F9           MOV       R1,A
   \   0000B9   A3           INC       DPTR
   \   0000BA   E0           MOVX      A,@DPTR
   \   0000BB   F583         MOV       DPH,A
   \   0000BD   8982         MOV       DPL,R1
   \   0000BF   A3           INC       DPTR
   \   0000C0   A3           INC       DPTR
   \   0000C1   E8           MOV       A,R0
   \   0000C2   F0           MOVX      @DPTR,A
   \   0000C3   E5..         MOV       A,?V4
   \   0000C5   2403         ADD       A,#0x3
   \   0000C7   F5..         MOV       ?V4,A
   \   0000C9   5002         JNC       ??zclParseInReadRspCmd_6
   \   0000CB   05..         INC       ?V5
   3682                if ( statusRec->status == ZCL_STATUS_SUCCESS )
   \                     ??zclParseInReadRspCmd_6:
   \   0000CD   E8           MOV       A,R0
   \   0000CE   7067         JNZ       ??CrossCallReturnLabel_474
   3683                {
   3684                  statusRec->dataType = *pBuf++;
   \   0000D0   85..82       MOV       DPL,?V4
   \   0000D3   85..83       MOV       DPH,?V5
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   F9           MOV       R1,A
   \   0000D8   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   0000DB   E9           MOV       A,R1
   \   0000DC   12....       LCALL     ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0000DF   8582..       MOV       ?V4,DPL
   \   0000E2   8583..       MOV       ?V5,DPH
   3685          
   3686                  attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \   0000E5                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000E5   AA..         MOV       R2,?V4
   \   0000E7   AB..         MOV       R3,?V5
   \   0000E9   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000EC   8A..         MOV       ?V0,R2
   \   0000EE   8B..         MOV       ?V1,R3
   \   0000F0   AE..         MOV       R6,?V0
   \   0000F2   AF..         MOV       R7,?V1
   3687                  zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \   0000F4                ; Setup parameters for call to function osal_memcpy
   \   0000F4   85....       MOV       ?V0,?V4
   \   0000F7   85....       MOV       ?V1,?V5
   \   0000FA   75..00       MOV       ?V2,#0x0
   \   0000FD   78..         MOV       R0,#?V0
   \   0000FF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000102   EE           MOV       A,R6
   \   000103   FC           MOV       R4,A
   \   000104   EF           MOV       A,R7
   \   000105   FD           MOV       R5,A
   \   000106   7405         MOV       A,#0x5
   \   000108   12....       LCALL     ?XSTACK_DISP0_8
   \   00010B   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   00010E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000111   7403         MOV       A,#0x3
   \   000113   12....       LCALL     ?DEALLOC_XSTACK8
   3688                  statusRec->data = dataPtr;
   \   000116   7402         MOV       A,#0x2
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00011E   A3           INC       DPTR
   \   00011F   12....       LCALL     ?Subroutine19 & 0xFFFF
   3689          
   3690                  pBuf += attrDataLen; // move pass attribute data
   3691          
   3692                  // advance attribute data pointer
   3693                  if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_18:
   \   000122   5005         JNC       ??zclParseInReadRspCmd_7
   3694                  {
   3695                    attrDataLen++;
   \   000124   0E           INC       R6
   \   000125   04           INC       A
   \   000126   7001         JNZ       ??zclParseInReadRspCmd_7
   \   000128   0F           INC       R7
   3696                  }
   3697          
   3698                  dataPtr += attrDataLen;
   \                     ??zclParseInReadRspCmd_7:
   \   000129   7402         MOV       A,#0x2
   \   00012B   12....       LCALL     ?XSTACK_DISP0_8
   \   00012E   12....       LCALL     ?Subroutine127 & 0xFFFF
   3699                }
   3700              }
   \                     ??CrossCallReturnLabel_235:
   \   000131   12....       LCALL     ?XSTACK_DISP0_8
   \   000134   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   000137   05..         INC       ?V6
   \                     ??zclParseInReadRspCmd_4:
   \   000139   E5..         MOV       A,?V6
   \   00013B   C3           CLR       C
   \   00013C   95..         SUBB      A,?V3
   \   00013E   5003         JNC       $+5
   \   000140   02....       LJMP      ??zclParseInReadRspCmd_5 & 0xFFFF
   3701            }
   3702          
   3703            return ( (void *)readRspCmd );
   \                     ??zclParseInReadRspCmd_3:
   \   000143   02....       LJMP      ?Subroutine1 & 0xFFFF
   3704          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine213_0
   \   000006                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   12....       LCALL     ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   E5..         MOV       A,?V6
   \   000002   2E           ADD       A,R6
   \   000003   F5..         MOV       ?V6,A
   \   000005   E5..         MOV       A,?V7
   \   000007   3F           ADDC      A,R7
   \   000008   F5..         MOV       ?V7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004   AE..         MOV       R6,?V0
   \   000006   AF..         MOV       R7,?V1
   \   000008   E5..         MOV       A,?V4
   \   00000A   2A           ADD       A,R2
   \   00000B   F5..         MOV       ?V4,A
   \   00000D   E5..         MOV       A,?V5
   \   00000F   3F           ADDC      A,R7
   \   000010   F5..         MOV       ?V5,A
   \   000012   EE           MOV       A,R6
   \   000013   A2E0         MOV       C,0xE0 /* A   */.0
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2E           ADD       A,R6
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3F           ADDC      A,R7
   \   000006   F9           MOV       R1,A
   \   000007   7402         MOV       A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2E           ADD       A,R6
   \   000002   F8           MOV       R0,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   F9           MOV       R1,A
   \   000008   7402         MOV       A,#0x2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_599:
   \   000003   E5..         MOV       A,?V3
   \   000005   F0           MOVX      @DPTR,A
   \   000006   75..00       MOV       ?V6,#0x0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL     ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   000003   A3           INC       DPTR
   \   000004   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   000007   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   28           ADD       A,R0
   \   00000C   F8           MOV       R0,A
   \   00000D   A3           INC       DPTR
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   39           ADDC      A,R1
   \   000010   F9           MOV       R1,A
   \   000011   C3           CLR       C
   \   000012   E5..         MOV       A,?V4
   \   000014   98           SUBB      A,R0
   \   000015   E5..         MOV       A,?V5
   \   000017   99           SUBB      A,R1
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine215_0
   \   000006                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8A82         MOV       DPL,R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_657:
   \   000006   E5..         MOV       A,?V4
   \   000008   2E           ADD       A,R6
   \   000009   F5..         MOV       ?V4,A
   \   00000B   E5..         MOV       A,?V5
   \   00000D   3F           ADDC      A,R7
   \   00000E   F5..         MOV       ?V5,A
   \   000010   EE           MOV       A,R6
   \   000011   A2E0         MOV       C,0xE0 /* A   */.0
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2403         ADD       A,#0x3
   \   000003   F8           MOV       R0,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   F9           MOV       R1,A
   \   000009   85..82       MOV       DPL,?XSP + 0
   \   00000C   85..83       MOV       DPH,?XSP + 1
   \   00000F   E8           MOV       A,R0
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   E9           MOV       A,R1
   \   000013   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000016   F5..         MOV       ?V4,A
   \   000018   A3           INC       DPTR
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   F5..         MOV       ?V5,A
   \   00001C   75..00       MOV       ?V3,#0x0
   \   00001F   75..00       MOV       ?V6,#0x0
   \   000022   75..00       MOV       ?V7,#0x0
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL     ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000003   A882         MOV       R0,DPL
   \   000005   A983         MOV       R1,DPH
   \   000007   85..82       MOV       DPL,?XSP + 0
   \   00000A   85..83       MOV       DPH,?XSP + 1
   \   00000D   E8           MOV       A,R0
   \   00000E   F0           MOVX      @DPTR,A
   \   00000F   A3           INC       DPTR
   \   000010   E9           MOV       A,R1
   \   000011   12....       LCALL     ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000014   FA           MOV       R2,A
   \   000015   A3           INC       DPTR
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F9           MOV       R1,A
   \   000018   EA           MOV       A,R2
   \   000019   F8           MOV       R0,A
   \   00001A   12....       LCALL     ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   00001D   E8           MOV       A,R0
   \   00001E   F0           MOVX      @DPTR,A
   \   00001F   A3           INC       DPTR
   \   000020   E9           MOV       A,R1
   \   000021   12....       LCALL     ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_659:
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_671:
   \   000003   F5..         MOV       ?V4,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V5,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   12....       LCALL     ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_670:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine244_0
   \   000006                ; // Fall through to label ??Subroutine244_0
   3705          #endif // ZCL_READ
   3706          
   3707          #ifdef ZCL_WRITE
   3708          /*********************************************************************
   3709           * @fn      zclParseInWriteCmd
   3710           *
   3711           * @brief   Parse the "Profile" Write, Write Undivided and Write No
   3712           *          Response Commands
   3713           *
   3714           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3715           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3716           *
   3717           * @param   pCmd - pointer to incoming data to parse
   3718           *
   3719           * @return  pointer to the parsed command structure
   3720           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3721          void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteCmd:
   3722          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine26 & 0xFFFF
   3723            zclWriteCmd_t *writeCmd;
   3724            uint8 *pBuf = pCmd->pData;
   \                     ??CrossCallReturnLabel_29:
   \   000012   12....       LCALL     ?XSTACK_DISP0_8
   \   000015   12....       LCALL     ?Subroutine12 & 0xFFFF
   3725            uint16 attrDataLen;
   3726            uint8 *dataPtr;
   3727            uint8 numAttr = 0;
   3728            uint8 hdrLen;
   3729            uint16 dataLen = 0;
   \                     ??CrossCallReturnLabel_7:
   \   000018   8029         SJMP      ??CrossCallReturnLabel_267
   3730          
   3731            // find out the number of attributes and the length of attribute data
   3732            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3733            {
   3734              uint8 dataType;
   3735          
   3736              numAttr++;
   \                     ??zclParseInWriteCmd_0:
   \   00001A   05..         INC       ?V3
   3737              pBuf += 2; // move pass attribute id
   3738          
   3739              dataType = *pBuf++;
   \   00001C   85..82       MOV       DPL,?V4
   \   00001F   85..83       MOV       DPH,?V5
   \   000022   A3           INC       DPTR
   \   000023   A3           INC       DPTR
   \   000024   E0           MOVX      A,@DPTR
   \   000025   F9           MOV       R1,A
   \   000026   E5..         MOV       A,?V4
   \   000028   2403         ADD       A,#0x3
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   5002         JNC       ??zclParseInWriteCmd_1
   \   00002E   05..         INC       ?V5
   3740          
   3741              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   \                     ??zclParseInWriteCmd_1:
   \   000030                ; Setup parameters for call to function zclGetAttrDataLength
   \   000030   FA           MOV       R2,A
   \   000031   AB..         MOV       R3,?V5
   \   000033   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000036   12....       LCALL     ?Subroutine139 & 0xFFFF
   3742              pBuf += attrDataLen; // move pass attribute data
   3743          
   3744              // add padding if needed
   3745              if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_257:
   \   000039   5005         JNC       ??zclParseInWriteCmd_2
   3746              {
   3747                attrDataLen++;
   \   00003B   0E           INC       R6
   \   00003C   04           INC       A
   \   00003D   7001         JNZ       ??zclParseInWriteCmd_2
   \   00003F   0F           INC       R7
   3748              }
   3749          
   3750              dataLen += attrDataLen;
   \                     ??zclParseInWriteCmd_2:
   \   000040   12....       LCALL     ?Subroutine144 & 0xFFFF
   3751            }
   \                     ??CrossCallReturnLabel_267:
   \   000043   7402         MOV       A,#0x2
   \   000045   12....       LCALL     ?XSTACK_DISP0_8
   \   000048   12....       LCALL     ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00004B   40CD         JC        ??zclParseInWriteCmd_0
   3752          
   3753            // calculate the length of the response header
   3754            hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
   \   00004D   75F005       MOV       B,#0x5
   \   000050   E5..         MOV       A,?V3
   \   000052   A4           MUL       AB
   \   000053   04           INC       A
   \   000054   FE           MOV       R6,A
   3755            printf("Arrive 3757!\n");
   \   000055                ; Setup parameters for call to function printf
   \   000055   7A..         MOV       R2,#`?<Constant "Arrive 3757!\\n">` & 0xff
   \   000057   7B..         MOV       R3,#(`?<Constant "Arrive 3757!\\n">` >> 8) & 0xff
   \   000059   12....       LCALL     `??printf::?relay`; Banked call to: printf
   3756            writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   \   00005C                ; Setup parameters for call to function osal_mem_alloc
   \   00005C   EE           MOV       A,R6
   \   00005D   25..         ADD       A,?V6
   \   00005F   FA           MOV       R2,A
   \   000060   E4           CLR       A
   \   000061   35..         ADDC      A,?V7
   \   000063   FB           MOV       R3,A
   \   000064   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000067   7404         MOV       A,#0x4
   \   000069   12....       LCALL     ?XSTACK_DISP0_8
   \   00006C   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   3757            if ( writeCmd != NULL )
   \                     ??CrossCallReturnLabel_454:
   \   00006F   7404         MOV       A,#0x4
   \   000071   12....       LCALL     ?XSTACK_DISP0_8
   \   000074   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   000077   7003         JNZ       $+5
   \   000079   02....       LJMP      ??zclParseInWriteCmd_3 & 0xFFFF
   3758            {
   3759              uint8 i;
   3760              pBuf = pCmd->pData;
   \   00007C   12....       LCALL     ?Subroutine70 & 0xFFFF
   3761              dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
   \                     ??CrossCallReturnLabel_126:
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   12....       LCALL     ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000085   12....       LCALL     ?XSTACK_DISP0_8
   \   000088   12....       LCALL     ?Subroutine34 & 0xFFFF
   3762          
   3763              writeCmd->numAttr = numAttr;
   \                     ??CrossCallReturnLabel_46:
   \   00008B   12....       LCALL     ?XSTACK_DISP0_8
   \   00008E   12....       LCALL     ?Subroutine87 & 0xFFFF
   3764              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_164:
   \   000091   8079         SJMP      ??zclParseInWriteCmd_4
   3765              {
   3766                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   \                     ??zclParseInWriteCmd_5:
   \   000093   E5..         MOV       A,?V6
   \   000095   75F005       MOV       B,#0x5
   \   000098   A4           MUL       AB
   \   000099   F8           MOV       R0,A
   \   00009A   A9F0         MOV       R1,B
   \   00009C   7404         MOV       A,#0x4
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   12....       LCALL     ?Subroutine10 & 0xFFFF
   3767          
   3768                statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3769                pBuf += 2;
   3770                statusRec->dataType = *pBuf++;
   \                     ??CrossCallReturnLabel_3:
   \   0000A4   F9           MOV       R1,A
   \   0000A5   85..82       MOV       DPL,?XSP + 0
   \   0000A8   85..83       MOV       DPH,?XSP + 1
   \   0000AB   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000AE   E9           MOV       A,R1
   \   0000AF   F0           MOVX      @DPTR,A
   \   0000B0   E5..         MOV       A,?V4
   \   0000B2   2403         ADD       A,#0x3
   \   0000B4   F5..         MOV       ?V4,A
   \   0000B6   5002         JNC       ??zclParseInWriteCmd_6
   \   0000B8   05..         INC       ?V5
   3771          
   3772                attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
   \                     ??zclParseInWriteCmd_6:
   \   0000BA                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000BA   FA           MOV       R2,A
   \   0000BB   AB..         MOV       R3,?V5
   \   0000BD   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000C0   8A..         MOV       ?V0,R2
   \   0000C2   8B..         MOV       ?V1,R3
   \   0000C4   AE..         MOV       R6,?V0
   \   0000C6   AF..         MOV       R7,?V1
   3773                zcl_memcpy( dataPtr, pBuf, attrDataLen);
   \   0000C8                ; Setup parameters for call to function osal_memcpy
   \   0000C8   85....       MOV       ?V0,?V4
   \   0000CB   85....       MOV       ?V1,?V5
   \   0000CE   75..00       MOV       ?V2,#0x0
   \   0000D1   78..         MOV       R0,#?V0
   \   0000D3   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000D6   EE           MOV       A,R6
   \   0000D7   FC           MOV       R4,A
   \   0000D8   EF           MOV       A,R7
   \   0000D9   FD           MOV       R5,A
   \   0000DA   7405         MOV       A,#0x5
   \   0000DC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DF   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   0000E2   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000E5   7403         MOV       A,#0x3
   \   0000E7   12....       LCALL     ?DEALLOC_XSTACK8
   3774                statusRec->attrData = dataPtr;
   \   0000EA   7402         MOV       A,#0x2
   \   0000EC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EF   12....       LCALL     ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   0000F2   12....       LCALL     ?Subroutine19 & 0xFFFF
   3775          
   3776                pBuf += attrDataLen; // move pass attribute data
   3777          
   3778                // advance attribute data pointer
   3779                if ( PADDING_NEEDED( attrDataLen ) )
   \                     ??CrossCallReturnLabel_19:
   \   0000F5   5005         JNC       ??zclParseInWriteCmd_7
   3780                {
   3781                  attrDataLen++;
   \   0000F7   0E           INC       R6
   \   0000F8   04           INC       A
   \   0000F9   7001         JNZ       ??zclParseInWriteCmd_7
   \   0000FB   0F           INC       R7
   3782                }
   3783          
   3784                dataPtr += attrDataLen;
   \                     ??zclParseInWriteCmd_7:
   \   0000FC   7402         MOV       A,#0x2
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   12....       LCALL     ?Subroutine127 & 0xFFFF
   3785              }
   \                     ??CrossCallReturnLabel_236:
   \   000104   12....       LCALL     ?XSTACK_DISP0_8
   \   000107   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   00010A   05..         INC       ?V6
   \                     ??zclParseInWriteCmd_4:
   \   00010C   E5..         MOV       A,?V6
   \   00010E   C3           CLR       C
   \   00010F   95..         SUBB      A,?V3
   \   000111   4080         JC        ??zclParseInWriteCmd_5
   3786            }
   3787          
   3788            return ( (void *)writeCmd );
   \                     ??zclParseInWriteCmd_3:
   \   000113   02....       LJMP      ?Subroutine1 & 0xFFFF
   3789          }
   3790          
   3791          /*********************************************************************
   3792           * @fn      zclParseInWriteRspCmd
   3793           *
   3794           * @brief   Parse the "Profile" Write Response Commands
   3795           *
   3796           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3797           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3798           *
   3799           * @param   pCmd - pointer to incoming data to parse
   3800           *
   3801           * @return  pointer to the parsed command structure
   3802           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3803          static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInWriteRspCmd:
   3804          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3805            zclWriteRspCmd_t *writeRspCmd;
   3806            uint8 *pBuf = pCmd->pData;
   \   000005   EA           MOV       A,R2
   \   000006   2403         ADD       A,#0x3
   \   000008   F5..         MOV       ?V6,A
   \   00000A   E4           CLR       A
   \   00000B   3B           ADDC      A,R3
   \   00000C   F5..         MOV       ?V7,A
   \   00000E   85..82       MOV       DPL,?V6
   \   000011   F583         MOV       DPH,A
   \   000013   12....       LCALL     ??Subroutine219_0 & 0xFFFF
   3807            uint8 i = 0;
   \                     ??CrossCallReturnLabel_495:
   \   000016   75..00       MOV       ?V2,#0x0
   3808          
   3809            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
   \   000019   8A82         MOV       DPL,R2
   \   00001B   8B83         MOV       DPH,R3
   \   00001D   A3           INC       DPTR
   \   00001E   12....       LCALL     ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000021   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3810            if ( writeRspCmd != NULL )
   \   000024   EA           MOV       A,R2
   \   000025   4B           ORL       A,R3
   \   000026   606F         JZ        ??zclParseInWriteRspCmd_0
   3811            {
   3812              if ( pCmd->dataLen == 1 )
   \   000028   85..82       MOV       DPL,?V0
   \   00002B   85..83       MOV       DPH,?V1
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   6401         XRL       A,#0x1
   \   000031   7002         JNZ       ??zclParseInWriteRspCmd_1
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \                     ??zclParseInWriteRspCmd_1:
   \   000035   7040         JNZ       ??zclParseInWriteRspCmd_2
   3813              {
   3814                // special case when all writes were successfull
   3815                writeRspCmd->attrList[i++].status = *pBuf;
   \   000037   8E82         MOV       DPL,R6
   \   000039   8F83         MOV       DPH,R7
   \   00003B   12....       LCALL     ??Subroutine218_0 & 0xFFFF
   3816              }
   \                     ??CrossCallReturnLabel_488:
   \   00003E   F0           MOVX      @DPTR,A
   \   00003F   75..01       MOV       ?V2,#0x1
   \   000042   804C         SJMP      ??zclParseInWriteRspCmd_3
   3817              else
   3818              {
   3819                while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3820                {
   3821                  writeRspCmd->attrList[i].status = *pBuf++;
   \                     ??zclParseInWriteRspCmd_4:
   \   000044   E5..         MOV       A,?V2
   \   000046   75F003       MOV       B,#0x3
   \   000049   A4           MUL       AB
   \   00004A   F8           MOV       R0,A
   \   00004B   A9F0         MOV       R1,B
   \   00004D   EA           MOV       A,R2
   \   00004E   28           ADD       A,R0
   \   00004F   F8           MOV       R0,A
   \   000050   EB           MOV       A,R3
   \   000051   39           ADDC      A,R1
   \   000052   F9           MOV       R1,A
   \   000053   8E82         MOV       DPL,R6
   \   000055   8F83         MOV       DPH,R7
   \   000057   12....       LCALL     ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   00005A   12....       LCALL     ?Subroutine17 & 0xFFFF
   3822                  writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_13:
   \   00005D   E0           MOVX      A,@DPTR
   \   00005E   F5..         MOV       ?V4,A
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   FD           MOV       R5,A
   \   000063   E5..         MOV       A,?V4
   \   000065   8882         MOV       DPL,R0
   \   000067   8983         MOV       DPH,R1
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   12....       LCALL     ??Subroutine192_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   00006E   05..         INC       ?V2
   3823                  pBuf += 2;
   \   000070   EE           MOV       A,R6
   \   000071   2402         ADD       A,#0x2
   \   000073   FE           MOV       R6,A
   \   000074   5001         JNC       ??zclParseInWriteRspCmd_2
   \   000076   0F           INC       R7
   3824                }
   \                     ??zclParseInWriteRspCmd_2:
   \   000077   85..82       MOV       DPL,?V0
   \   00007A   85..83       MOV       DPH,?V1
   \   00007D   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   3825              }
   \                     ??CrossCallReturnLabel_559:
   \   000080   85..82       MOV       DPL,?V6
   \   000083   85..83       MOV       DPH,?V7
   \   000086   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000089   C3           CLR       C
   \   00008A   EE           MOV       A,R6
   \   00008B   98           SUBB      A,R0
   \   00008C   EF           MOV       A,R7
   \   00008D   99           SUBB      A,R1
   \   00008E   40B4         JC        ??zclParseInWriteRspCmd_4
   3826          
   3827              writeRspCmd->numAttr = i;
   \                     ??zclParseInWriteRspCmd_3:
   \   000090   8A82         MOV       DPL,R2
   \   000092   8B83         MOV       DPH,R3
   \   000094   E5..         MOV       A,?V2
   \   000096   F0           MOVX      @DPTR,A
   3828            }
   3829          
   3830            return ( (void *)writeRspCmd );
   \                     ??zclParseInWriteRspCmd_0:
   \   000097   02....       LJMP      ??Subroutine195_0 & 0xFFFF
   3831          }
   3832          #endif // ZCL_WRITE
   3833          
   3834          #ifdef ZCL_REPORTING_DEVICE
   3835          /*********************************************************************
   3836           * @fn      zclParseInConfigReportCmd
   3837           *
   3838           * @brief   Parse the "Profile" Configure Reporting Command
   3839           *
   3840           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3841           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3842           *
   3843           * @param   pCmd - pointer to incoming data to parse
   3844           *
   3845           * @return  pointer to the parsed command structure
   3846           */
   3847          void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
   3848          {
   3849            zclCfgReportCmd_t *cfgReportCmd;
   3850            uint8 *pBuf = pCmd->pData;
   3851            uint8 *dataPtr;
   3852            uint8 numAttr = 0;
   3853            uint8 dataType;
   3854            uint8 hdrLen;
   3855            uint16 dataLen = 0;
   3856            uint8 reportChangeLen; // length of Reportable Change field
   3857          
   3858            // Calculate the length of the Request command
   3859            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   3860            {
   3861              uint8 direction;
   3862          
   3863              numAttr++;
   3864              direction = *pBuf++;
   3865              pBuf += 2; // move pass the attribute ID
   3866          
   3867              // Is there a Reportable Change field?
   3868              if ( direction == ZCL_SEND_ATTR_REPORTS )
   3869              {
   3870                dataType = *pBuf++;
   3871                pBuf += 4; // move pass the Min and Max Reporting Intervals
   3872          
   3873                // For attributes of 'discrete' data types this field is omitted
   3874                if ( zclAnalogDataType( dataType ) )
   3875                {
   3876                  reportChangeLen = zclGetDataTypeLength( dataType );
   3877                  pBuf += reportChangeLen;
   3878          
   3879                  // add padding if needed
   3880                  if ( PADDING_NEEDED( reportChangeLen ) )
   3881                  {
   3882                    reportChangeLen++;
   3883                  }
   3884          
   3885                  dataLen += reportChangeLen;
   3886                }
   3887                else
   3888                {
   3889                  pBuf++; // move past reportable change field
   3890                }
   3891              }
   3892              else
   3893              {
   3894                pBuf += 2; // move pass the Timeout Period
   3895              }
   3896            } // while loop
   3897          
   3898            hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
   3899          
   3900            cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   3901            if ( cfgReportCmd != NULL )
   3902            {
   3903              uint8 i;
   3904              pBuf = pCmd->pData;
   3905              dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
   3906          
   3907              cfgReportCmd->numAttr = numAttr;
   3908              for ( i = 0; i < numAttr; i++ )
   3909              {
   3910                zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
   3911          
   3912                zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
   3913          
   3914                reportRec->direction = *pBuf++;
   3915                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3916                pBuf += 2;
   3917                if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
   3918                {
   3919                  // Attribute to be reported
   3920                  reportRec->dataType = *pBuf++;
   3921                  reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3922                  pBuf += 2;
   3923                  reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   3924                  pBuf += 2;
   3925          
   3926                  // For attributes of 'discrete' data types this field is omitted
   3927                  if ( zclAnalogDataType( reportRec->dataType ) )
   3928                  {
   3929                    zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
   3930                    reportRec->reportableChange = dataPtr;
   3931          
   3932                    reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
   3933                    pBuf += reportChangeLen;
   3934          
   3935                    // advance attribute data pointer
   3936                    if ( PADDING_NEEDED( reportChangeLen ) )
   3937                    {
   3938                      reportChangeLen++;
   3939                    }
   3940          
   3941                    dataPtr += reportChangeLen;
   3942                  }
   3943                }
   3944                else
   3945                {
   3946                  // Attribute reports to be received
   3947                  reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   3948                  pBuf += 2;
   3949                }
   3950              } // while loop
   3951            }
   3952          
   3953            return ( (void *)cfgReportCmd );
   3954          }
   3955          #endif
   3956          
   3957          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   3958          /*********************************************************************
   3959           * @fn      zclParseInConfigReportRspCmd
   3960           *
   3961           * @brief   Parse the "Profile" Configure Reporting Response Command
   3962           *
   3963           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   3964           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   3965           *
   3966           * @param   pCmd - pointer to incoming data to parse
   3967           *
   3968           * @return  pointer to the parsed command structure
   3969           */
   3970          static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
   3971          {
   3972            zclCfgReportRspCmd_t *cfgReportRspCmd;
   3973            uint8 *pBuf = pCmd->pData;
   3974            uint8 numAttr;
   3975          
   3976            numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
   3977          
   3978            cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
   3979                                                      + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
   3980            if ( cfgReportRspCmd != NULL )
   3981            {
   3982              uint8 i;
   3983              cfgReportRspCmd->numAttr = numAttr;
   3984              for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
   3985              {
   3986                cfgReportRspCmd->attrList[i].status = *pBuf++;
   3987                cfgReportRspCmd->attrList[i].direction = *pBuf++;
   3988                cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   3989                pBuf += 2;
   3990              }
   3991            }
   3992          
   3993            return ( (void *)cfgReportRspCmd );
   3994          }
   3995          #endif
   3996          
   3997          #ifdef ZCL_REPORTING_DEVICE
   3998          /*********************************************************************
   3999           * @fn      zclParseInReadReportCfgCmd
   4000           *
   4001           * @brief   Parse the "Profile" Read Reporting Configuration Command
   4002           *
   4003           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4004           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4005           *
   4006           * @param   pCmd - pointer to incoming data to parse
   4007           *
   4008           * @return  pointer to the parsed command structure
   4009           */
   4010          void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
   4011          {
   4012            zclReadReportCfgCmd_t *readReportCfgCmd;
   4013            uint8 *pBuf = pCmd->pData;
   4014            uint8 numAttr;
   4015          
   4016            numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
   4017          
   4018            readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
   4019                                                            + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
   4020            if ( readReportCfgCmd != NULL )
   4021            {
   4022              uint8 i;
   4023              readReportCfgCmd->numAttr = numAttr;
   4024              for ( i = 0; i < readReportCfgCmd->numAttr; i++)
   4025              {
   4026                readReportCfgCmd->attrList[i].direction = *pBuf++;;
   4027                readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4028                pBuf += 2;
   4029              }
   4030            }
   4031          
   4032            return ( (void *)readReportCfgCmd );
   4033          }
   4034          #endif
   4035          
   4036          #ifdef ZCL_REPORT_CONFIGURING_DEVICE
   4037          /*********************************************************************
   4038           * @fn      zclParseInReadReportCfgRspCmd
   4039           *
   4040           * @brief   Parse the "Profile" Read Reporting Configuration Response Command
   4041           *
   4042           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4043           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4044           *
   4045           * @param   pCmd - pointer to incoming data to parse
   4046           *
   4047           * @return  pointer to the parsed command structure
   4048           */
   4049          static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
   4050          {
   4051            zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
   4052            uint8 reportChangeLen;
   4053            uint8 *pBuf = pCmd->pData;
   4054            uint8 *dataPtr;
   4055            uint8 numAttr = 0;
   4056            uint8 hdrLen;
   4057            uint16 dataLen = 0;
   4058          
   4059            // Calculate the length of the response command
   4060            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4061            {
   4062              uint8 status;
   4063              uint8 direction;
   4064          
   4065              numAttr++;
   4066              status = *pBuf++;
   4067              direction = *pBuf++;
   4068              pBuf += 2; // move pass the attribute ID
   4069          
   4070              if ( status == ZCL_STATUS_SUCCESS )
   4071              {
   4072                if ( direction == ZCL_SEND_ATTR_REPORTS )
   4073                {
   4074                  uint8 dataType = *pBuf++;
   4075                  pBuf += 4; // move pass the Min and Max Reporting Intervals
   4076          
   4077                  // For attributes of 'discrete' data types this field is omitted
   4078                  if ( zclAnalogDataType( dataType ) )
   4079                  {
   4080                    reportChangeLen = zclGetDataTypeLength( dataType );
   4081                    pBuf += reportChangeLen;
   4082          
   4083                    // add padding if needed
   4084                    if ( PADDING_NEEDED( reportChangeLen ) )
   4085                    {
   4086                      reportChangeLen++;
   4087                    }
   4088          
   4089                    dataLen += reportChangeLen;
   4090                  }
   4091                }
   4092                else
   4093                {
   4094                  pBuf += 2; // move pass the Timeout field
   4095                }
   4096              }
   4097            } // while loop
   4098          
   4099            hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
   4100          
   4101            readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   4102            if ( readReportCfgRspCmd != NULL )
   4103            {
   4104              uint8 i;
   4105              pBuf = pCmd->pData;
   4106              dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
   4107          
   4108              readReportCfgRspCmd->numAttr = numAttr;
   4109              for ( i = 0; i < numAttr; i++ )
   4110              {
   4111                zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
   4112          
   4113                reportRspRec->status = *pBuf++;
   4114                reportRspRec->direction = *pBuf++;
   4115                reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4116                pBuf += 2;
   4117          
   4118                if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
   4119                {
   4120                  if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
   4121                  {
   4122                    reportRspRec->dataType = *pBuf++;
   4123                    reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4124                    pBuf += 2;
   4125                    reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
   4126                    pBuf += 2;
   4127          
   4128                    if ( zclAnalogDataType( reportRspRec->dataType ) )
   4129                    {
   4130                      zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
   4131                      reportRspRec->reportableChange = dataPtr;
   4132          
   4133                      reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
   4134                      pBuf += reportChangeLen;
   4135          
   4136                      // advance attribute data pointer
   4137                      if ( PADDING_NEEDED( reportChangeLen ) )
   4138                      {
   4139                        reportChangeLen++;
   4140                      }
   4141          
   4142                      dataPtr += reportChangeLen;
   4143                    }
   4144                  }
   4145                  else
   4146                  {
   4147                    reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
   4148                    pBuf += 2;
   4149                  }
   4150                }
   4151              }
   4152            }
   4153          
   4154            return ( (void *)readReportCfgRspCmd );
   4155          }
   4156          #endif
   4157          
   4158          #ifdef ZCL_REPORT_DESTINATION_DEVICE
   4159          /*********************************************************************
   4160           * @fn      zclParseInReportCmd
   4161           *
   4162           * @brief   Parse the "Profile" Report Command
   4163           *
   4164           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4165           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4166           *
   4167           * @param   pCmd - pointer to incoming data to parse
   4168           *
   4169           * @return  pointer to the parsed command structure
   4170           */
   4171          void *zclParseInReportCmd( zclParseCmd_t *pCmd )
   4172          {
   4173            zclReportCmd_t *reportCmd;
   4174            uint8 *pBuf = pCmd->pData;
   4175            uint16 attrDataLen;
   4176            uint8 *dataPtr;
   4177            uint8 numAttr = 0;
   4178            uint8 hdrLen;
   4179            uint16 dataLen = 0;
   4180          
   4181            // find out the number of attributes and the length of attribute data
   4182            while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
   4183            {
   4184              uint8 dataType;
   4185          
   4186              numAttr++;
   4187              pBuf += 2; // move pass attribute id
   4188          
   4189              dataType = *pBuf++;
   4190          
   4191              attrDataLen = zclGetAttrDataLength( dataType, pBuf );
   4192              pBuf += attrDataLen; // move pass attribute data
   4193          
   4194              // add padding if needed
   4195              if ( PADDING_NEEDED( attrDataLen ) )
   4196              {
   4197                attrDataLen++;
   4198              }
   4199          
   4200              dataLen += attrDataLen;
   4201            }
   4202          
   4203            hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
   4204          
   4205            reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
   4206            if (reportCmd != NULL )
   4207            {
   4208              uint8 i;
   4209              pBuf = pCmd->pData;
   4210              dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
   4211          
   4212              reportCmd->numAttr = numAttr;
   4213              for ( i = 0; i < numAttr; i++ )
   4214              {
   4215                zclReport_t *reportRec = &(reportCmd->attrList[i]);
   4216          
   4217                reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   4218                pBuf += 2;
   4219                reportRec->dataType = *pBuf++;
   4220          
   4221                attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
   4222                zcl_memcpy( dataPtr, pBuf, attrDataLen );
   4223                reportRec->attrData = dataPtr;
   4224          
   4225                pBuf += attrDataLen; // move pass attribute data
   4226          
   4227                // advance attribute data pointer
   4228                if ( PADDING_NEEDED( attrDataLen ) )
   4229                {
   4230                  attrDataLen++;
   4231                }
   4232          
   4233                dataPtr += attrDataLen;
   4234              }
   4235            }
   4236          
   4237            return ( (void *)reportCmd );
   4238          }
   4239          #endif
   4240          
   4241          /*********************************************************************
   4242           * @fn      zclParseInDefaultRspCmd
   4243           *
   4244           * @brief   Parse the "Profile" Default Response Command
   4245           *
   4246           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4247           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4248           *
   4249           * @param   pCmd - pointer to incoming data to parse
   4250           *
   4251           * @return  pointer to the parsed command structure
   4252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4253          static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDefaultRspCmd:
   4254          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4255            zclDefaultRspCmd_t *defaultRspCmd;
   4256            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine114 & 0xFFFF
   4257          
   4258            defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
   \                     ??CrossCallReturnLabel_215:
   \   000008   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4259            if ( defaultRspCmd != NULL )
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   6003         JZ        ??CrossCallReturnLabel_26
   4260            {
   4261              defaultRspCmd->commandID = *pBuf++;
   \   00000F   12....       LCALL     ?Subroutine25 & 0xFFFF
   4262              defaultRspCmd->statusCode = *pBuf;
   4263            }
   4264          
   4265            return ( (void *)defaultRspCmd );
   \                     ??CrossCallReturnLabel_26:
   \   000012   02....       LJMP      ??Subroutine199_0 & 0xFFFF
   4266          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   8A82         MOV       DPL,R2
   \   000002   8B83         MOV       DPH,R3
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   A3           INC       DPTR
   \   000007                REQUIRE ??Subroutine219_0
   \   000007                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   12....       LCALL     ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003                ; Setup parameters for call to function osal_mem_alloc
   \   000003   7A02         MOV       R2,#0x2
   \   000005   7B00         MOV       R3,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000003   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_503:
   \   000006   12....       LCALL     ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   22           RET
   4267          
   4268          #ifdef ZCL_DISCOVER
   4269          /*********************************************************************
   4270           * @fn      zclParseInDiscAttrsCmd
   4271           *
   4272           * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
   4273           *
   4274           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4275           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4276           *
   4277           * @param   pCmd - pointer to incoming data to parse
   4278           *
   4279           * @return  pointer to the parsed command structure
   4280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4281          void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsCmd:
   4282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4283            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4284            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine171 & 0xFFFF
   4285          
   4286            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
   \                     ??CrossCallReturnLabel_496:
   \   000008                ; Setup parameters for call to function osal_mem_alloc
   \   000008   7A03         MOV       R2,#0x3
   \   00000A   7B00         MOV       R3,#0x0
   \   00000C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4287            if ( pDiscoverCmd != NULL )
   \   00000F   EA           MOV       A,R2
   \   000010   4B           ORL       A,R3
   \   000011   601A         JZ        ??zclParseInDiscAttrsCmd_0
   4288            {
   4289              pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000013   8E82         MOV       DPL,R6
   \   000015   8F83         MOV       DPH,R7
   \   000017   12....       LCALL     ?Subroutine177 & 0xFFFF
   4290              pBuf += 2;
   4291              pDiscoverCmd->maxAttrIDs = *pBuf;
   4292            }
   \                     ??CrossCallReturnLabel_303:
   \   00001A   F9           MOV       R1,A
   \   00001B   EC           MOV       A,R4
   \   00001C   8A82         MOV       DPL,R2
   \   00001E   8B83         MOV       DPH,R3
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   E9           MOV       A,R1
   \   000023   12....       LCALL     ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_500:
   \   000026   8A82         MOV       DPL,R2
   \   000028   8B83         MOV       DPH,R3
   \   00002A   A3           INC       DPTR
   \   00002B   A3           INC       DPTR
   \   00002C   F0           MOVX      @DPTR,A
   4293          
   4294            return ( (void *)pDiscoverCmd );
   \                     ??zclParseInDiscAttrsCmd_0:
   \   00002D   02....       LJMP      ??Subroutine199_0 & 0xFFFF
   4295          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET
   4296          
   4297          /*********************************************************************
   4298           * @fn      zclParseInDiscAttrsRspCmd
   4299           *
   4300           * @brief   Parse the "Profile" Discovery Response Commands
   4301           *
   4302           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4303           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4304           *
   4305           * @param   pCmd - pointer to incoming data to parse
   4306           *
   4307           * @return  pointer to the parsed command structure
   4308           */
   4309          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4310          static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsRspCmd:
   4311          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   4312            zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
   4313            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine90 & 0xFFFF
   4314            uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
   \                     ??CrossCallReturnLabel_169:
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   34FF         ADDC      A,#-0x1
   \   00000D   F9           MOV       R1,A
   \   00000E   7A03         MOV       R2,#0x3
   \   000010   7B00         MOV       R3,#0x0
   \   000012   12....       LCALL     ?US_DIV_MOD
   \   000015   E8           MOV       A,R0
   \   000016   F5..         MOV       ?V0,A
   4315          
   4316            pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
   4317                              ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_667:
   \   00001B   39           ADDC      A,R1
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4318          
   4319            if ( pDiscoverRspCmd != NULL )
   \   000020   EA           MOV       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   6036         JZ        ??zclParseInDiscAttrsRspCmd_0
   4320            {
   4321              uint8 i;
   4322          
   4323              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000024   12....       LCALL     ?Subroutine16 & 0xFFFF
   4324              pDiscoverRspCmd->numAttr = numAttr;
   4325          
   4326              for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_10:
   \   000027   7C00         MOV       R4,#0x0
   \   000029   8029         SJMP      ??zclParseInDiscAttrsRspCmd_1
   4327              {
   4328                pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInDiscAttrsRspCmd_2:
   \   00002B   EC           MOV       A,R4
   \   00002C   75F003       MOV       B,#0x3
   \   00002F   A4           MUL       AB
   \   000030   F8           MOV       R0,A
   \   000031   A9F0         MOV       R1,B
   \   000033   EA           MOV       A,R2
   \   000034   28           ADD       A,R0
   \   000035   F8           MOV       R0,A
   \   000036   EB           MOV       A,R3
   \   000037   39           ADDC      A,R1
   \   000038   F9           MOV       R1,A
   \   000039   12....       LCALL     ?Subroutine118 & 0xFFFF
   4329                pBuf += 2;
   4330                pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
   4331              }
   \                     ??CrossCallReturnLabel_221:
   \   00003C   8882         MOV       DPL,R0
   \   00003E   8983         MOV       DPH,R1
   \   000040   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   000043   8882         MOV       DPL,R0
   \   000045   8983         MOV       DPH,R1
   \   000047   A3           INC       DPTR
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   F0           MOVX      @DPTR,A
   \   00004C   EE           MOV       A,R6
   \   00004D   2403         ADD       A,#0x3
   \   00004F   FE           MOV       R6,A
   \   000050   5001         JNC       ??zclParseInDiscAttrsRspCmd_3
   \   000052   0F           INC       R7
   \                     ??zclParseInDiscAttrsRspCmd_3:
   \   000053   0C           INC       R4
   \                     ??zclParseInDiscAttrsRspCmd_1:
   \   000054   EC           MOV       A,R4
   \   000055   C3           CLR       C
   \   000056   95..         SUBB      A,?V0
   \   000058   40D1         JC        ??zclParseInDiscAttrsRspCmd_2
   4332            }
   4333          
   4334            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscAttrsRspCmd_0:
   \   00005A   02....       LJMP      ??Subroutine205_0 & 0xFFFF
   4335          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E5..         MOV       A,?V3
   \   000006                REQUIRE ??Subroutine220_0
   \   000006                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V4,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V3,A
   \   00000B   E5..         MOV       A,?V4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL     ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   24FF         ADD       A,#-0x1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   000003   12....       LCALL     ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000006   8A82         MOV       DPL,R2
   \   000008   8B83         MOV       DPH,R3
   \   00000A   A3           INC       DPTR
   \   00000B   E5..         MOV       A,?V0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   75F003       MOV       B,#0x3
   \   000003   A4           MUL       AB
   \   000004   A9F0         MOV       R1,B
   \   000006                REQUIRE ??Subroutine243_0
   \   000006                ; // Fall through to label ??Subroutine243_0
   4336          
   4337          /*********************************************************************
   4338           * @fn      zclParseInDiscCmdsCmd
   4339           *
   4340           * @brief   Parse the "Profile" Discovery Commands
   4341           *
   4342           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4343           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4344           *
   4345           * @param   pCmd - pointer to incoming data to parse
   4346           *
   4347           * @return  pointer to the parsed command structure
   4348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4349          void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscCmdsCmd:
   4350          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   4351            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   4352            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine114 & 0xFFFF
   4353          
   4354            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
   \                     ??CrossCallReturnLabel_216:
   \   000008   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4355            if ( pDiscoverCmd != NULL )
   \   00000B   EA           MOV       A,R2
   \   00000C   4B           ORL       A,R3
   \   00000D   6003         JZ        ??CrossCallReturnLabel_27
   4356            {
   4357              pDiscoverCmd->startCmdID = *pBuf++;
   \   00000F   12....       LCALL     ?Subroutine25 & 0xFFFF
   4358              pDiscoverCmd->maxCmdID = *pBuf++;
   4359            }
   4360          
   4361            return ( (void *)pDiscoverCmd );
   \                     ??CrossCallReturnLabel_27:
   \   000012   02....       LJMP      ??Subroutine199_0 & 0xFFFF
   4362          }
   4363          
   4364          /*********************************************************************
   4365           * @fn      zclParseInDiscCmdsRspCmd
   4366           *
   4367           * @brief   Parse the Discover Commands Response Command
   4368           *
   4369           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4370           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4371           *
   4372           * @param   pCmd - pointer to incoming data to parse
   4373           *
   4374           * @return  pointer to the parsed command structure
   4375           */
   4376          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4377          static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscCmdsRspCmd:
   4378          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   4379            zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
   4380            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine107 & 0xFFFF
   4381            uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // length of command ID variable array
   \                     ??CrossCallReturnLabel_202:
   \   000008   E0           MOVX      A,@DPTR
   \   000009   14           DEC       A
   \   00000A   F5..         MOV       ?V2,A
   4382          
   4383              // allocate memory for size of structure plus variable array
   4384            pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmdRsp_t ) +
   4385                              ( numCmds * sizeof(uint8) ) );
   \   00000C                ; Setup parameters for call to function osal_mem_alloc
   \   00000C   2405         ADD       A,#0x5
   \   00000E   FA           MOV       R2,A
   \   00000F   E4           CLR       A
   \   000010   3400         ADDC      A,#0x0
   \   000012   FB           MOV       R3,A
   \   000013   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV       ?V0,R2
   \   000018   8B..         MOV       ?V1,R3
   4386            if ( pDiscoverRspCmd != NULL )
   \   00001A   EA           MOV       A,R2
   \   00001B   45..         ORL       A,?V1
   \   00001D   6043         JZ        ??zclParseInDiscCmdsRspCmd_0
   4387            {
   4388              uint8 i;
   4389              pDiscoverRspCmd->discComplete = *pBuf++;
   \   00001F   12....       LCALL     ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_368:
   \   000022   12....       LCALL     ?Subroutine17 & 0xFFFF
   4390              pDiscoverRspCmd->numCmd = numCmds;
   \                     ??CrossCallReturnLabel_14:
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E5..         MOV       A,?V2
   \   00002D   F0           MOVX      @DPTR,A
   4391              printf("Arrive 4395!\n");
   \   00002E                ; Setup parameters for call to function printf
   \   00002E   7A..         MOV       R2,#`?<Constant "Arrive 4395!\\n">` & 0xff
   \   000030   7B..         MOV       R3,#(`?<Constant "Arrive 4395!\\n">` >> 8) & 0xff
   \   000032   12....       LCALL     `??printf::?relay`; Banked call to: printf
   4392              for ( i = 0; i < numCmds; i++ )
   \   000035   7800         MOV       R0,#0x0
   \   000037   8023         SJMP      ??zclParseInDiscCmdsRspCmd_1
   4393              {
   4394                pDiscoverRspCmd->pCmdID[i] = *pBuf++;
   \                     ??zclParseInDiscCmdsRspCmd_2:
   \   000039   8E82         MOV       DPL,R6
   \   00003B   8F83         MOV       DPH,R7
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   C0E0         PUSH      A
   \   000040   E8           MOV       A,R0
   \   000041   FA           MOV       R2,A
   \   000042   85..82       MOV       DPL,?V0
   \   000045   85..83       MOV       DPH,?V1
   \   000048   A3           INC       DPTR
   \   000049   A3           INC       DPTR
   \   00004A   A3           INC       DPTR
   \   00004B   E0           MOVX      A,@DPTR
   \   00004C   2A           ADD       A,R2
   \   00004D   F9           MOV       R1,A
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   3400         ADDC      A,#0x0
   \   000052   8982         MOV       DPL,R1
   \   000054   F583         MOV       DPH,A
   \   000056   D0E0         POP       A
   \   000058   12....       LCALL     ?Subroutine17 & 0xFFFF
   4395              }
   \                     ??CrossCallReturnLabel_15:
   \   00005B   08           INC       R0
   \                     ??zclParseInDiscCmdsRspCmd_1:
   \   00005C   E8           MOV       A,R0
   \   00005D   C3           CLR       C
   \   00005E   95..         SUBB      A,?V2
   \   000060   40D7         JC        ??zclParseInDiscCmdsRspCmd_2
   4396            }
   4397          
   4398            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscCmdsRspCmd_0:
   \   000062   AA..         MOV       R2,?V0
   \   000064   AB..         MOV       R3,?V1
   \   000066   02....       LJMP      ??Subroutine205_0 & 0xFFFF
   4399          }
   4400          
   4401          /*********************************************************************
   4402           * @fn      zclParseInDiscAttrsExtRspCmd
   4403           *
   4404           * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
   4405           *
   4406           *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
   4407           *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
   4408           *
   4409           * @param   pCmd - pointer to incoming data to parse
   4410           *
   4411           * @return  pointer to the parsed command structure
   4412           */
   4413          #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4414          static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
   \                     zclParseInDiscAttrsExtRspCmd:
   4415          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   4416            zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
   4417            uint8 i;
   4418            uint8 *pBuf = pCmd->pData;
   \   000005   12....       LCALL     ?Subroutine90 & 0xFFFF
   4419            uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
   \                     ??CrossCallReturnLabel_170:
   \   000008   F5..         MOV       ?V0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   34FF         ADDC      A,#-0x1
   \   00000E   F5..         MOV       ?V1,A
   \   000010   7402         MOV       A,#0x2
   \   000012   78..         MOV       R0,#?V0
   \   000014   12....       LCALL     ?US_SHR
   \   000017   E5..         MOV       A,?V0
   \   000019   F5..         MOV       ?V0,A
   4420          
   4421            pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
   4422                              ( numAttrs * sizeof(zclExtAttrInfo_t) ) );
   \   00001B                ; Setup parameters for call to function osal_mem_alloc
   \   00001B   F5..         MOV       ?V2,A
   \   00001D   75..00       MOV       ?V3,#0x0
   \   000020   7402         MOV       A,#0x2
   \   000022   78..         MOV       R0,#?V2
   \   000024   12....       LCALL     ?S_SHL
   \   000027   E5..         MOV       A,?V2
   \   000029   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_665:
   \   00002C   35..         ADDC      A,?V3
   \   00002E   FB           MOV       R3,A
   \   00002F   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   4423          
   4424            if ( pDiscoverRspCmd != NULL )
   \   000032   EA           MOV       A,R2
   \   000033   4B           ORL       A,R3
   \   000034   6048         JZ        ??zclParseInDiscAttrsExtRspCmd_0
   4425            {
   4426              pDiscoverRspCmd->discComplete = *pBuf++;
   \   000036   12....       LCALL     ?Subroutine16 & 0xFFFF
   4427              pDiscoverRspCmd->numAttr = numAttrs;
   4428          
   4429              for ( i = 0; i < numAttrs; i++ )
   \                     ??CrossCallReturnLabel_11:
   \   000039   7900         MOV       R1,#0x0
   \   00003B   803B         SJMP      ??zclParseInDiscAttrsExtRspCmd_1
   4430              {
   4431                pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??zclParseInDiscAttrsExtRspCmd_2:
   \   00003D   E9           MOV       A,R1
   \   00003E   F5..         MOV       ?V2,A
   \   000040   75..00       MOV       ?V3,#0x0
   \   000043   7402         MOV       A,#0x2
   \   000045   78..         MOV       R0,#?V2
   \   000047   12....       LCALL     ?S_SHL
   \   00004A   EA           MOV       A,R2
   \   00004B   25..         ADD       A,?V2
   \   00004D   FC           MOV       R4,A
   \   00004E   EB           MOV       A,R3
   \   00004F   35..         ADDC      A,?V3
   \   000051   FD           MOV       R5,A
   \   000052   12....       LCALL     ?Subroutine118 & 0xFFFF
   4432                pBuf += 2;
   4433                pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
   4434                pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
   4435              }
   \                     ??CrossCallReturnLabel_222:
   \   000055   8C82         MOV       DPL,R4
   \   000057   8D83         MOV       DPH,R5
   \   000059   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   00005C   8C82         MOV       DPL,R4
   \   00005E   8D83         MOV       DPH,R5
   \   000060   A3           INC       DPTR
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   12....       LCALL     ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000067   12....       LCALL     ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   A3           INC       DPTR
   \   00006F   F0           MOVX      @DPTR,A
   \   000070   EE           MOV       A,R6
   \   000071   2404         ADD       A,#0x4
   \   000073   FE           MOV       R6,A
   \   000074   5001         JNC       ??zclParseInDiscAttrsExtRspCmd_3
   \   000076   0F           INC       R7
   \                     ??zclParseInDiscAttrsExtRspCmd_3:
   \   000077   09           INC       R1
   \                     ??zclParseInDiscAttrsExtRspCmd_1:
   \   000078   E9           MOV       A,R1
   \   000079   C3           CLR       C
   \   00007A   95..         SUBB      A,?V0
   \   00007C   40BF         JC        ??zclParseInDiscAttrsExtRspCmd_2
   4436            }
   4437          
   4438            return ( (void *)pDiscoverRspCmd );
   \                     ??zclParseInDiscAttrsExtRspCmd_0:
   \   00007E   02....       LJMP      ??Subroutine205_0 & 0xFFFF
   4439          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL     ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET
   4440          #endif // ZCL_DISCOVER
   4441          
   4442          #ifdef ZCL_READ
   4443          /*********************************************************************
   4444           * @fn      zclProcessInReadCmd
   4445           *
   4446           * @brief   Process the "Profile" Read Command
   4447           *
   4448           * @param   pInMsg - incoming message to process
   4449           *
   4450           * @return  TRUE if command processed. FALSE, otherwise.
   4451           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003   A3           INC       DPTR
   \   000004                REQUIRE ??Subroutine210_0
   \   000004                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002                REQUIRE ??Subroutine216_0
   \   000002                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4452          static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInReadCmd:
   4453          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine117 & 0xFFFF
   4454            zclReadCmd_t *readCmd;
   4455            zclReadRspCmd_t *readRspCmd;
   4456            zclAttrRec_t attrRec;
   4457            uint16 len;
   4458            uint8 i;
   4459            uint8 attrFound;
   4460          
   4461            readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_554:
   \   00000D   7404         MOV       A,#0x4
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ?Subroutine34 & 0xFFFF
   4462          
   4463            // calculate the length of the response status record
   4464            len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
   4465          
   4466            readRspCmd = zcl_mem_alloc( len );
   \                     ??CrossCallReturnLabel_47:
   \   000015   12....       LCALL     ?XSTACK_DISP0_8
   \   000018   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   00001B   75F006       MOV       B,#0x6
   \   00001E   A4           MUL       AB
   \   00001F   A9F0         MOV       R1,B
   \   000021   2401         ADD       A,#0x1
   \   000023   FA           MOV       R2,A
   \   000024   E4           CLR       A
   \   000025   39           ADDC      A,R1
   \   000026   FB           MOV       R3,A
   \   000027   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV       ?V6,R2
   \   00002C   8B..         MOV       ?V7,R3
   4467            if ( readRspCmd == NULL )
   \   00002E   EA           MOV       A,R2
   \   00002F   45..         ORL       A,?V7
   \   000031   7005         JNZ       ??zclProcessInReadCmd_0
   4468            {
   4469              return FALSE; // EMBEDDED RETURN
   \   000033   7900         MOV       R1,#0x0
   \   000035   02....       LJMP      ??zclProcessInReadCmd_1 & 0xFFFF
   4470            }
   4471          
   4472            readRspCmd->numAttr = readCmd->numAttr;
   \                     ??zclProcessInReadCmd_0:
   \   000038   7404         MOV       A,#0x4
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   000040   8A82         MOV       DPL,R2
   \   000042   8B83         MOV       DPH,R3
   \   000044   F0           MOVX      @DPTR,A
   4473            for ( i = 0; i < readCmd->numAttr; i++ )
   \   000045   75..00       MOV       ?V0,#0x0
   \   000048   800D         SJMP      ??zclProcessInReadCmd_2
   4474            {
   4475              zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
   4476          
   4477              statusRec->attrID = readCmd->attrID[i];
   4478              
   4479              attrFound = zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, readCmd->attrID[i], &attrRec );
   4480              
   4481              //Validate the attribute is found and the access control
   4482              if ( ( attrFound == TRUE ) && 
   4483                   (  (attrRec.attr.accessControl & ACCESS_GLOBAL) || 
   4484                      (GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROL_MASK ) == pInMsg->hdr.fc.direction ) ) )
   4485              {
   4486                if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
   4487                {
   4488                  statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
   4489                                                        &(pInMsg->msg->srcAddr), &attrRec );
   4490                  if ( statusRec->status == ZCL_STATUS_SUCCESS )
   4491                  {
   4492                    statusRec->data = attrRec.attr.dataPtr;
   4493                    statusRec->dataType = attrRec.attr.dataType;
   4494                  }
   4495                }
   4496                else
   4497                {
   4498                  statusRec->status = ZCL_STATUS_WRITE_ONLY;
   4499                }
   4500              }
   4501              else
   4502              {
   4503                statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \                     ??zclProcessInReadCmd_3:
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?XSTACK_DISP0_8
   \   00004F   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   4504              }
   \                     ??CrossCallReturnLabel_584:
   \   000052   7486         MOV       A,#-0x7a
   \                     ??zclProcessInReadCmd_4:
   \   000054   F0           MOVX      @DPTR,A
   \                     ??zclProcessInReadCmd_5:
   \   000055   05..         INC       ?V0
   \                     ??zclProcessInReadCmd_2:
   \   000057   7404         MOV       A,#0x4
   \   000059   12....       LCALL     ?XSTACK_DISP0_8
   \   00005C   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   00005F   12....       LCALL     ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_675:
   \   000062   4003         JC        $+5
   \   000064   02....       LJMP      ??zclProcessInReadCmd_6 & 0xFFFF
   \   000067   A8..         MOV       R0,?V0
   \   000069   E8           MOV       A,R0
   \   00006A   75F006       MOV       B,#0x6
   \   00006D   A4           MUL       AB
   \   00006E   FA           MOV       R2,A
   \   00006F   ABF0         MOV       R3,B
   \   000071   E5..         MOV       A,?V6
   \   000073   2A           ADD       A,R2
   \   000074   F582         MOV       DPL,A
   \   000076   E5..         MOV       A,?V7
   \   000078   12....       LCALL     ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   00007B   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   00007E   E8           MOV       A,R0
   \   00007F   28           ADD       A,R0
   \   000080   F8           MOV       R0,A
   \   000081   E4           CLR       A
   \   000082   33           RLC       A
   \   000083   F9           MOV       R1,A
   \   000084   7404         MOV       A,#0x4
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   12....       LCALL     ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00008C   FC           MOV       R4,A
   \   00008D   A3           INC       DPTR
   \   00008E   E0           MOVX      A,@DPTR
   \   00008F   FD           MOV       R5,A
   \   000090   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   000093   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000096   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000099   7402         MOV       A,#0x2
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   E8           MOV       A,R0
   \   00009F   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_684:
   \   0000A2   F5..         MOV       ?V2,A
   \   0000A4   A3           INC       DPTR
   \   0000A5   E0           MOVX      A,@DPTR
   \   0000A6   F5..         MOV       ?V3,A
   \   0000A8                ; Setup parameters for call to function zclFindAttrRec
   \   0000A8   7406         MOV       A,#0x6
   \   0000AA   12....       LCALL     ?XSTACK_DISP100_8
   \   0000AD   88..         MOV       ?V4,R0
   \   0000AF   89..         MOV       ?V5,R1
   \   0000B1   78..         MOV       R0,#?V4
   \   0000B3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B6   8A82         MOV       DPL,R2
   \   0000B8   8B83         MOV       DPH,R3
   \   0000BA   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   0000BD   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_631:
   \   0000C0   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000C3   7402         MOV       A,#0x2
   \   0000C5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000C8   E9           MOV       A,R1
   \   0000C9   6401         XRL       A,#0x1
   \   0000CB   6003         JZ        $+5
   \   0000CD   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \   0000D0   740B         MOV       A,#0xb
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   E0           MOVX      A,@DPTR
   \   0000D6   A2E6         MOV       C,0xE0 /* A   */.6
   \   0000D8   401E         JC        ??zclProcessInReadCmd_7
   \   0000DA   8E82         MOV       DPL,R6
   \   0000DC   8F83         MOV       DPH,R7
   \   0000DE   A3           INC       DPTR
   \   0000DF   A3           INC       DPTR
   \   0000E0   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   0000E3   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000E5   92F0         MOV       B.0,C
   \   0000E7   740B         MOV       A,#0xb
   \   0000E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000EF   20F001       JB        B.0,??zclProcessInReadCmd_8
   \   0000F2   B3           CPL       C
   \                     ??zclProcessInReadCmd_8:
   \   0000F3   4003         JC        $+5
   \   0000F5   02....       LJMP      ??zclProcessInReadCmd_3 & 0xFFFF
   \                     ??zclProcessInReadCmd_7:
   \   0000F8   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000FA   5075         JNC       ??zclProcessInReadCmd_9
   \   0000FC   8E82         MOV       DPL,R6
   \   0000FE   8F83         MOV       DPH,R7
   \   000100   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   000103   E8           MOV       A,R0
   \   000104   2406         ADD       A,#0x6
   \   000106   F5..         MOV       ?V4,A
   \   000108   E4           CLR       A
   \   000109   39           ADDC      A,R1
   \   00010A   F5..         MOV       ?V5,A
   \   00010C   740B         MOV       A,#0xb
   \   00010E   12....       LCALL     ?XSTACK_DISP0_8
   \   000111   E0           MOVX      A,@DPTR
   \   000112   A2E4         MOV       C,0xE0 /* A   */.4
   \   000114   5021         JNC       ??zclProcessInReadCmd_10
   \   000116                ; Setup parameters for call to function zclGetAuthorizeCB
   \   000116   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_580:
   \   000119   12....       LCALL     `??zclGetAuthorizeCB::?relay`; Banked call to: zclGetAuthorizeCB
   \   00011C   8A82         MOV       DPL,R2
   \   00011E   8B83         MOV       DPH,R3
   \   000120   E582         MOV       A,DPL
   \   000122   4583         ORL       A,DPH
   \   000124   6011         JZ        ??zclProcessInReadCmd_10
   \   000126                ; Setup parameters for indirect call
   \   000126   7901         MOV       R1,#0x1
   \   000128   7406         MOV       A,#0x6
   \   00012A   12....       LCALL     ?XSTACK_DISP102_8
   \   00012D   AA..         MOV       R2,?V4
   \   00012F   AB..         MOV       R3,?V5
   \   000131   12....       LCALL     ?CALL_IND
   \   000134   E9           MOV       A,R1
   \   000135   8002         SJMP      ??zclProcessInReadCmd_11
   \                     ??zclProcessInReadCmd_10:
   \   000137   7400         MOV       A,#0x0
   \                     ??zclProcessInReadCmd_11:
   \   000139   C0E0         PUSH      A
   \   00013B   7402         MOV       A,#0x2
   \   00013D   12....       LCALL     ?XSTACK_DISP0_8
   \   000140   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   000143   D0E0         POP       A
   \   000145   F0           MOVX      @DPTR,A
   \   000146   7402         MOV       A,#0x2
   \   000148   12....       LCALL     ?XSTACK_DISP0_8
   \   00014B   12....       LCALL     ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   00014E   6003         JZ        $+5
   \   000150   02....       LJMP      ??zclProcessInReadCmd_5 & 0xFFFF
   \   000153   740C         MOV       A,#0xc
   \   000155   12....       LCALL     ?XSTACK_DISP0_8
   \   000158   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00015B   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00015E   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   000161   740A         MOV       A,#0xa
   \   000163   12....       LCALL     ?XSTACK_DISP0_8
   \   000166   E0           MOVX      A,@DPTR
   \   000167   C0E0         PUSH      A
   \   000169   12....       LCALL     ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   00016C   D0E0         POP       A
   \   00016E   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   \                     ??zclProcessInReadCmd_9:
   \   000171   7402         MOV       A,#0x2
   \   000173   12....       LCALL     ?XSTACK_DISP0_8
   \   000176   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   4505            }
   \                     ??CrossCallReturnLabel_587:
   \   000179   748F         MOV       A,#-0x71
   \   00017B   02....       LJMP      ??zclProcessInReadCmd_4 & 0xFFFF
   4506          
   4507            // Build and send Read Response command
   4508            zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
   4509                             readRspCmd, !pInMsg->hdr.fc.direction,
   4510                             true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInReadCmd_6:
   \   00017E   12....       LCALL     ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   000181                ; Setup parameters for call to function zcl_SendReadRsp
   \   000181   8E82         MOV       DPL,R6
   \   000183   8F83         MOV       DPH,R7
   \   000185   A3           INC       DPTR
   \   000186   A3           INC       DPTR
   \   000187   A3           INC       DPTR
   \   000188   A3           INC       DPTR
   \   000189   A3           INC       DPTR
   \   00018A   A3           INC       DPTR
   \   00018B   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00018E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000191   75..01       MOV       ?V0,#0x1
   \   000194   78..         MOV       R0,#?V0
   \   000196   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000199   8E82         MOV       DPL,R6
   \   00019B   8F83         MOV       DPH,R7
   \   00019D   A3           INC       DPTR
   \   00019E   A3           INC       DPTR
   \   00019F   12....       LCALL     ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   0001A2   F5..         MOV       ?V0,A
   \   0001A4   78..         MOV       R0,#?V0
   \   0001A6   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001A9   78..         MOV       R0,#?V6
   \   0001AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AE   85..82       MOV       DPL,?V2
   \   0001B1   85..83       MOV       DPH,?V3
   \   0001B4   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   0001B7   E5..         MOV       A,?V2
   \   0001B9   2406         ADD       A,#0x6
   \   0001BB   FA           MOV       R2,A
   \   0001BC   E4           CLR       A
   \   0001BD   35..         ADDC      A,?V3
   \   0001BF   FB           MOV       R3,A
   \   0001C0   E5..         MOV       A,?V2
   \   0001C2   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   0001C5   35..         ADDC      A,?V3
   \   0001C7   F583         MOV       DPH,A
   \   0001C9   E0           MOVX      A,@DPTR
   \   0001CA   F9           MOV       R1,A
   \   0001CB   12....       LCALL     `??zcl_SendReadRsp::?relay`; Banked call to: zcl_SendReadRsp
   \   0001CE   7405         MOV       A,#0x5
   \   0001D0   12....       LCALL     ?DEALLOC_XSTACK8
   4511            zcl_mem_free( readRspCmd );
   \   0001D3                ; Setup parameters for call to function osal_mem_free
   \   0001D3   AA..         MOV       R2,?V6
   \   0001D5   AB..         MOV       R3,?V7
   \   0001D7   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4512          
   4513            return TRUE;
   \   0001DA   7901         MOV       R1,#0x1
   \                     ??zclProcessInReadCmd_1:
   \   0001DC   740E         MOV       A,#0xe
   \   0001DE   02....       LJMP      ??Subroutine194_0 & 0xFFFF
   4514          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2402         ADD       A,#0x2
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   3400         ADDC      A,#0x0
   \   00000E   F9           MOV       R1,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine228_0
   \   000004                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL     ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000003                REQUIRE ??Subroutine229_0
   \   000003                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine233_0
   \   000006                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003   FF           MOV       R7,A
   \   000004   EE           MOV       A,R6
   \   000005   240C         ADD       A,#0xc
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3F           ADDC      A,R7
   \   00000B   F583         MOV       DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_570:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   85..82       MOV       DPL,?V2
   \   000003   85..83       MOV       DPH,?V3
   \   000006   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_652:
   \   000009   E5..         MOV       A,?V2
   \   00000B   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_644:
   \   00000E   35..         ADDC      A,?V3
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   22           RET
   4515          #endif // ZCL_READ
   4516          
   4517          #ifdef ZCL_WRITE
   4518          /*********************************************************************
   4519           * @fn      processInWriteCmd
   4520           *
   4521           * @brief   Process the "Profile" Write and Write No Response Commands
   4522           *
   4523           * @param   pInMsg - incoming message to process
   4524           *
   4525           * @return  TRUE if command processed. FALSE, otherwise.
   4526           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4527          static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteCmd:
   4528          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV       A,#-0x10
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine33 & 0xFFFF
   4529            zclWriteCmd_t *writeCmd;
   4530            zclWriteRspCmd_t *writeRspCmd;
   4531            uint8 sendRsp = FALSE;
   \                     ??CrossCallReturnLabel_461:
   \   00000D   C2..         CLR       ?VB.0
   4532            uint8 j = 0;
   \   00000F   12....       LCALL     ?Subroutine68 & 0xFFFF
   4533            uint8 i;
   4534          
   4535            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_123:
   \   000012   7404         MOV       A,#0x4
   \   000014   12....       LCALL     ?XSTACK_DISP0_8
   \   000017   12....       LCALL     ?Subroutine14 & 0xFFFF
   4536            if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
   \                     ??CrossCallReturnLabel_540:
   \   00001A   C8           XCH       A,R0
   \   00001B   2407         ADD       A,#0x7
   \   00001D   F582         MOV       DPL,A
   \   00001F   E4           CLR       A
   \   000020   38           ADDC      A,R0
   \   000021   F583         MOV       DPH,A
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6402         XRL       A,#0x2
   \   000026   7022         JNZ       ??zclProcessInWriteCmd_0
   4537            {
   4538              // We need to send a response back - allocate space for it
   4539              printf("Arrive 4537!\n");
   \   000028                ; Setup parameters for call to function printf
   \   000028   7A..         MOV       R2,#`?<Constant "Arrive 4537!\\n">` & 0xff
   \   00002A   7B..         MOV       R3,#(`?<Constant "Arrive 4537!\\n">` >> 8) & 0xff
   \   00002C   12....       LCALL     `??printf::?relay`; Banked call to: printf
   4540              writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4541                      + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   7404         MOV       A,#0x4
   \   000031   12....       LCALL     ?XSTACK_DISP0_8
   \   000034   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000037   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003A   8A..         MOV       ?V6,R2
   \   00003C   8B..         MOV       ?V7,R3
   4542              if ( writeRspCmd == NULL )
   \   00003E   EA           MOV       A,R2
   \   00003F   45..         ORL       A,?V7
   \   000041   7005         JNZ       ??zclProcessInWriteCmd_1
   4543              {
   4544                return FALSE; // EMBEDDED RETURN
   \   000043   7900         MOV       R1,#0x0
   \   000045   02....       LJMP      ??zclProcessInWriteCmd_2 & 0xFFFF
   4545              }
   4546          
   4547              sendRsp = TRUE;
   \                     ??zclProcessInWriteCmd_1:
   \   000048   D2..         SETB      ?VB.0
   4548            }
   4549          
   4550            for ( i = 0; i < writeCmd->numAttr; i++ )
   \                     ??zclProcessInWriteCmd_0:
   \   00004A   7F00         MOV       R7,#0x0
   \   00004C   12....       LCALL     ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00004F   7406         MOV       A,#0x6
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   000057   8011         SJMP      ??zclProcessInWriteCmd_3
   4551            {
   4552              zclAttrRec_t attrRec;
   4553              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4554          
   4555              if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4556                                   statusRec->attrID, &attrRec ) )
   4557              {
   4558                if ( GET_BIT( &attrRec.attr.accessControl, ACCESS_CONTROLEXT_MASK ) != pInMsg->hdr.fc.direction )
   4559                {
   4560                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4561                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4562                  break;
   4563                }
   4564                if ( statusRec->dataType == attrRec.attr.dataType )
   4565                {
   4566                  uint8 status;
   4567          
   4568                  // Write the new attribute value
   4569                  if ( attrRec.attr.dataPtr != NULL )
   4570                  {
   4571                    //Handle special case for Identify
   4572                    if((pInMsg->msg->clusterId == ZCL_CLUSTER_ID_GEN_IDENTIFY) && (statusRec->attrID == ATTRID_IDENTIFY_TIME))
   4573                    {
   4574                      uint16 identifyTime; 
   4575                            
   4576                      osal_memcpy((uint8*)&identifyTime,statusRec->attrData,sizeof(uint16));
   4577                                  
   4578                      bdb_ZclIdentifyCmdInd(identifyTime, pInMsg->msg->endPoint);
   4579                      
   4580                      status = ZCL_STATUS_SUCCESS;
   4581                    }          
   4582                    else
   4583                    {                
   4584                      status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4585                                                 &attrRec, statusRec );
   4586                    }
   4587                  }
   4588                  else // Use CB
   4589                  {
   4590                    status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4591                                                      &attrRec, statusRec->attrData );
   4592                  }
   4593          
   4594                  // If successful, a write attribute status record shall NOT be generated
   4595                  if ( sendRsp && status != ZCL_STATUS_SUCCESS )
   4596                  {
   4597                    // Attribute is read only - move on to the next write attribute record
   4598                    writeRspCmd->attrList[j].status = status;
   4599                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4600                  }
   4601                }
   4602                else
   4603                {
   4604                  // Attribute data type is incorrect - move on to the next write attribute record
   4605                  if ( sendRsp )
   4606                  {
   4607                    writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4608                    writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4609                  }
   4610                }
   4611              }
   4612              else
   4613              {
   4614                // Attribute is not supported - move on to the next write attribute record
   4615                if ( sendRsp )
   \                     ??zclProcessInWriteCmd_4:
   \   000059   A2..         MOV       C,?VB.0
   \   00005B   500C         JNC       ??CrossCallReturnLabel_8
   4616                {
   4617                  writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   \   00005D   85..82       MOV       DPL,?V4
   \   000060   85..83       MOV       DPH,?V5
   \   000063   A3           INC       DPTR
   \   000064   7486         MOV       A,#-0x7a
   4618                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4619                }
   4620              }
   \                     ??zclProcessInWriteCmd_5:
   \   000066   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000069   0F           INC       R7
   \                     ??zclProcessInWriteCmd_3:
   \   00006A   7404         MOV       A,#0x4
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000072   4003         JC        $+5
   \   000074   02....       LJMP      ??CrossCallReturnLabel_9 & 0xFFFF
   \   000077   EF           MOV       A,R7
   \   000078   75F005       MOV       B,#0x5
   \   00007B   A4           MUL       AB
   \   00007C   F8           MOV       R0,A
   \   00007D   A9F0         MOV       R1,B
   \   00007F   7404         MOV       A,#0x4
   \   000081   12....       LCALL     ?XSTACK_DISP0_8
   \   000084   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000087   8582..       MOV       ?V2,DPL
   \   00008A   8583..       MOV       ?V3,DPH
   \   00008D   EE           MOV       A,R6
   \   00008E   75F003       MOV       B,#0x3
   \   000091   A4           MUL       AB
   \   000092   F8           MOV       R0,A
   \   000093   A9F0         MOV       R1,B
   \   000095   E5..         MOV       A,?V6
   \   000097   28           ADD       A,R0
   \   000098   F5..         MOV       ?V4,A
   \   00009A   E5..         MOV       A,?V7
   \   00009C   39           ADDC      A,R1
   \   00009D   F5..         MOV       ?V5,A
   \   00009F   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   0000A2   7402         MOV       A,#0x2
   \   0000A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A7   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   0000AA                ; Setup parameters for call to function zclFindAttrRec
   \   0000AA   7408         MOV       A,#0x8
   \   0000AC   12....       LCALL     ?XSTACK_DISP100_8
   \   0000AF   88..         MOV       ?V0,R0
   \   0000B1   89..         MOV       ?V1,R1
   \   0000B3   78..         MOV       R0,#?V0
   \   0000B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B8   85..82       MOV       DPL,?V2
   \   0000BB   85..83       MOV       DPH,?V3
   \   0000BE   12....       LCALL     ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   0000C7   12....       LCALL     ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   0000CA   7404         MOV       A,#0x4
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000D2   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000D5   7402         MOV       A,#0x2
   \   0000D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DA   E9           MOV       A,R1
   \   0000DB   7003         JNZ       $+5
   \   0000DD   02....       LJMP      ??zclProcessInWriteCmd_4 & 0xFFFF
   \   0000E0   7406         MOV       A,#0x6
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   0000E8   A2E0         MOV       C,0xE0 /* A   */.0
   \   0000EA   92F0         MOV       B.0,C
   \   0000EC   740D         MOV       A,#0xd
   \   0000EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F1   E0           MOVX      A,@DPTR
   \   0000F2   A2E7         MOV       C,0xE0 /* A   */.7
   \   0000F4   20F001       JB        B.0,??zclProcessInWriteCmd_6
   \   0000F7   B3           CPL       C
   \                     ??zclProcessInWriteCmd_6:
   \   0000F8   4062         JC        ??zclProcessInWriteCmd_7
   \   0000FA   85..82       MOV       DPL,?V4
   \   0000FD   85..83       MOV       DPH,?V5
   \   000100   A3           INC       DPTR
   \   000101   7486         MOV       A,#-0x7a
   \   000103   12....       LCALL     ?Subroutine13 & 0xFFFF
   4621            } // for loop
   4622          
   4623            if ( sendRsp )
   \                     ??CrossCallReturnLabel_9:
   \   000106   A2..         MOV       C,?VB.0
   \   000108   504B         JNC       ??zclProcessInWriteCmd_8
   4624            {
   4625              writeRspCmd->numAttr = j;
   \   00010A   EE           MOV       A,R6
   \   00010B   85..82       MOV       DPL,?V6
   \   00010E   85..83       MOV       DPH,?V7
   \   000111   F0           MOVX      @DPTR,A
   4626              if ( writeRspCmd->numAttr == 0 )
   \   000112   700B         JNZ       ??zclProcessInWriteCmd_9
   4627              {
   4628                // Since all records were written successful, include a single status record
   4629                // in the resonse command with the status field set to SUCCESS and the
   4630                // attribute ID field omitted.
   4631                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   000114   A3           INC       DPTR
   \   000115   E4           CLR       A
   \   000116   F0           MOVX      @DPTR,A
   4632                writeRspCmd->numAttr = 1;
   \   000117   85..82       MOV       DPL,?V6
   \   00011A   85..83       MOV       DPH,?V7
   \   00011D   04           INC       A
   \   00011E   F0           MOVX      @DPTR,A
   4633              }
   4634          
   4635              zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4636                                pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4637                                true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteCmd_9:
   \   00011F   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000122   12....       LCALL     ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000125   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000128   75..01       MOV       ?V0,#0x1
   \   00012B   78..         MOV       R0,#?V0
   \   00012D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000130   7408         MOV       A,#0x8
   \   000132   12....       LCALL     ?XSTACK_DISP0_8
   \   000135   12....       LCALL     ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000138   12....       LCALL     ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   00013B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00013E   78..         MOV       R0,#?V6
   \   000140   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000143   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000146   12....       LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
   \   000149   7405         MOV       A,#0x5
   \   00014B   12....       LCALL     ?DEALLOC_XSTACK8
   4638              zcl_mem_free( writeRspCmd );
   \   00014E                ; Setup parameters for call to function osal_mem_free
   \   00014E   AA..         MOV       R2,?V6
   \   000150   AB..         MOV       R3,?V7
   \   000152   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4639            }
   4640          
   4641            return TRUE;
   \                     ??zclProcessInWriteCmd_8:
   \   000155   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteCmd_2:
   \   000157   7410         MOV       A,#0x10
   \   000159   02....       LJMP      ??Subroutine194_0 & 0xFFFF
   \                     ??zclProcessInWriteCmd_7:
   \   00015C   85..82       MOV       DPL,?V2
   \   00015F   85..83       MOV       DPH,?V3
   \   000162   A3           INC       DPTR
   \   000163   A3           INC       DPTR
   \   000164   E0           MOVX      A,@DPTR
   \   000165   F8           MOV       R0,A
   \   000166   740C         MOV       A,#0xc
   \   000168   12....       LCALL     ?XSTACK_DISP0_8
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   68           XRL       A,R0
   \   00016D   6003         JZ        $+5
   \   00016F   02....       LJMP      ??zclProcessInWriteCmd_10 & 0xFFFF
   \   000172   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000175   F5..         MOV       ?V0,A
   \   000177   A3           INC       DPTR
   \   000178   E0           MOVX      A,@DPTR
   \   000179   F5..         MOV       ?V1,A
   \   00017B   740E         MOV       A,#0xe
   \   00017D   12....       LCALL     ?XSTACK_DISP0_8
   \   000180   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   000183   6065         JZ        ??zclProcessInWriteCmd_11
   \   000185   85..82       MOV       DPL,?V0
   \   000188   85..83       MOV       DPH,?V1
   \   00018B   A3           INC       DPTR
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   A3           INC       DPTR
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   6403         XRL       A,#0x3
   \   000192   7002         JNZ       ??zclProcessInWriteCmd_12
   \   000194   A3           INC       DPTR
   \   000195   E0           MOVX      A,@DPTR
   \                     ??zclProcessInWriteCmd_12:
   \   000196   7040         JNZ       ??zclProcessInWriteCmd_13
   \   000198   85..82       MOV       DPL,?V2
   \   00019B   85..83       MOV       DPH,?V3
   \   00019E   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   0001A1   7035         JNZ       ??zclProcessInWriteCmd_13
   \   0001A3                ; Setup parameters for call to function osal_memcpy
   \   0001A3   85..82       MOV       DPL,?V2
   \   0001A6   85..83       MOV       DPH,?V3
   \   0001A9   A3           INC       DPTR
   \   0001AA   A3           INC       DPTR
   \   0001AB   A3           INC       DPTR
   \   0001AC   12....       LCALL     ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   0001AF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B2   7C02         MOV       R4,#0x2
   \   0001B4   7D00         MOV       R5,#0x0
   \   0001B6   7405         MOV       A,#0x5
   \   0001B8   12....       LCALL     ?XSTACK_DISP101_8
   \   0001BB   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001BE   7403         MOV       A,#0x3
   \   0001C0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C3                ; Setup parameters for call to function bdb_ZclIdentifyCmdInd
   \   0001C3   12....       LCALL     ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   0001C6   F8           MOV       R0,A
   \   0001C7   12....       LCALL     ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0001CA   7402         MOV       A,#0x2
   \   0001CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CF   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_407:
   \   0001D2   12....       LCALL     `??bdb_ZclIdentifyCmdInd::?relay`; Banked call to: bdb_ZclIdentifyCmdInd
   \   0001D5   02....       LJMP      ??CrossCallReturnLabel_8 & 0xFFFF
   \                     ??zclProcessInWriteCmd_13:
   \   0001D8                ; Setup parameters for call to function zclWriteAttrData
   \   0001D8   78..         MOV       R0,#?V2
   \   0001DA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001DD   740A         MOV       A,#0xa
   \   0001DF   12....       LCALL     ?XSTACK_DISP102_8
   \   0001E2   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   0001E5   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   0001E8   8017         SJMP      ??zclProcessInWriteCmd_14
   \                     ??zclProcessInWriteCmd_11:
   \   0001EA                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   0001EA   85..82       MOV       DPL,?V2
   \   0001ED   85..83       MOV       DPH,?V3
   \   0001F0   A3           INC       DPTR
   \   0001F1   A3           INC       DPTR
   \   0001F2   A3           INC       DPTR
   \   0001F3   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0001F6   740A         MOV       A,#0xa
   \   0001F8   12....       LCALL     ?XSTACK_DISP102_8
   \   0001FB   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   0001FE   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \                     ??zclProcessInWriteCmd_14:
   \   000201   7402         MOV       A,#0x2
   \   000203   12....       LCALL     ?DEALLOC_XSTACK8
   \   000206   E9           MOV       A,R1
   \   000207   A2..         MOV       C,?VB.0
   \   000209   4003         JC        $+5
   \   00020B   02....       LJMP      ??CrossCallReturnLabel_8 & 0xFFFF
   \   00020E   7003         JNZ       $+5
   \   000210   02....       LJMP      ??CrossCallReturnLabel_8 & 0xFFFF
   \   000213   85..82       MOV       DPL,?V4
   \   000216   85..83       MOV       DPH,?V5
   \   000219   A3           INC       DPTR
   \   00021A   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   \                     ??zclProcessInWriteCmd_10:
   \   00021D   A2..         MOV       C,?VB.0
   \   00021F   4003         JC        $+5
   \   000221   02....       LJMP      ??CrossCallReturnLabel_8 & 0xFFFF
   \   000224   85..82       MOV       DPL,?V4
   \   000227   85..83       MOV       DPH,?V5
   \   00022A   A3           INC       DPTR
   \   00022B   748D         MOV       A,#-0x73
   \   00022D   02....       LJMP      ??zclProcessInWriteCmd_5 & 0xFFFF
   4642          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   E5..         MOV       A,?V0
   \   000002   2406         ADD       A,#0x6
   \   000004   FA           MOV       R2,A
   \   000005   E4           CLR       A
   \   000006   35..         ADDC      A,?V1
   \   000008   FB           MOV       R3,A
   \   000009                REQUIRE ??Subroutine224_0
   \   000009                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   E5..         MOV       A,?V0
   \   000002   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_641:
   \   000005   35..         ADDC      A,?V1
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine225_0
   \   000006                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   12....       LCALL     ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_669:
   \   000003   13           RRC       A
   \   000004   13           RRC       A
   \   000005   13           RRC       A
   \   000006   541F         ANL       A,#0x1f
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004                REQUIRE ??Subroutine226_0
   \   000004                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?V2
   \   000004   85..83       MOV       DPH,?V3
   \   000007   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   00000A   85..82       MOV       DPL,?V4
   \   00000D   85..83       MOV       DPH,?V5
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   E8           MOV       A,R0
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   E9           MOV       A,R1
   \   000016   F0           MOVX      @DPTR,A
   \   000017   0E           INC       R6
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   000009                REQUIRE ??Subroutine230_0
   \   000009                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   7E00         MOV       R6,#0x0
   \   000002   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   000005   C8           XCH       A,R0
   \   000006   240C         ADD       A,#0xc
   \   000008   F582         MOV       DPL,A
   \   00000A   E4           CLR       A
   \   00000B   38           ADDC      A,R0
   \   00000C   F583         MOV       DPH,A
   \   00000E   12....       LCALL     ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000003   75F003       MOV       B,#0x3
   \   000006   A4           MUL       AB
   \   000007   A9F0         MOV       R1,B
   \   000009   2401         ADD       A,#0x1
   \   00000B   FA           MOV       R2,A
   \   00000C   E4           CLR       A
   \   00000D   39           ADDC      A,R1
   \   00000E   FB           MOV       R3,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   000003   F8           MOV       R0,A
   \   000004   EF           MOV       A,R7
   \   000005   C3           CLR       C
   \   000006   98           SUBB      A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine234_0
   \   000006                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   000003   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   FE           MOV       R6,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   FF           MOV       R7,A
   \   000004                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000004                ; Setup parameters for call to function zcl_SendWriteRsp
   \   000004                ; Setup parameters for call to function zcl_SendDiscoverAttrsRspCmd
   \   000004                ; Setup parameters for call to function zcl_SendDiscoverAttrsExtRsp
   \   000004   85..82       MOV       DPL,?XSP + 0
   \   000007   85..83       MOV       DPH,?XSP + 1
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   C8           XCH       A,R0
   \   00000D   2406         ADD       A,#0x6
   \   00000F   F582         MOV       DPL,A
   \   000011   E4           CLR       A
   \   000012   38           ADDC      A,R0
   \   000013   F583         MOV       DPH,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000007   EE           MOV       A,R6
   \   000008   2406         ADD       A,#0x6
   \   00000A   FA           MOV       R2,A
   \   00000B   E4           CLR       A
   \   00000C   3F           ADDC      A,R7
   \   00000D   FB           MOV       R3,A
   \   00000E   EE           MOV       A,R6
   \   00000F   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_638:
   \   000012   3F           ADDC      A,R7
   \   000013   F583         MOV       DPH,A
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F9           MOV       R1,A
   \   000017   22           RET
   4643          
   4644          /*********************************************************************
   4645           * @fn      zclRevertWriteUndividedCmd
   4646           *
   4647           * @brief   Revert the "Profile" Write Undevided Command
   4648           *
   4649           * @param   pInMsg - incoming message to process
   4650           * @param   curWriteRec - old data
   4651           * @param   numAttr - number of attributes to be reverted
   4652           *
   4653           * @return  none
   4654           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4655          static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
   \                     zclRevertWriteUndividedCmd:
   4656                                              zclWriteRec_t *curWriteRec, uint16 numAttr )
   4657          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000013   12....       LCALL     ?XSTACK_DISP0_8
   \   000016   12....       LCALL     ?Subroutine36 & 0xFFFF
   4658            uint8 i;
   4659          
   4660            for ( i = 0; i < numAttr; i++ )
   \                     ??CrossCallReturnLabel_351:
   \   000019   75..00       MOV       ?V0,#0x0
   \   00001C   802F         SJMP      ??zclRevertWriteUndividedCmd_0
   4661            {
   4662              zclAttrRec_t attrRec;
   4663              zclWriteRec_t *statusRec = &(curWriteRec[i]);
   4664          
   4665              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4666                                    statusRec->attrID, &attrRec ) )
   4667              {
   4668                break; // should never happen
   4669              }
   4670          
   4671              if ( attrRec.attr.dataPtr != NULL )
   4672              {
   4673                // Just copy the old data back - no need to validate the data
   4674                uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
   4675                zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
   4676              }
   4677              else // Use CB
   4678              {
   4679                // Write the old data back
   4680                zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4681                                         &attrRec, statusRec->attrData );
   \                     ??zclRevertWriteUndividedCmd_1:
   \   00001E   12....       LCALL     ?Subroutine92 & 0xFFFF
   4682              }
   \                     ??CrossCallReturnLabel_539:
   \   000021   FE           MOV       R6,A
   \   000022   A3           INC       DPTR
   \   000023   E0           MOVX      A,@DPTR
   \   000024   FF           MOV       R7,A
   \   000025                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000025   8A..         MOV       ?V2,R2
   \   000027   8B..         MOV       ?V3,R3
   \   000029   78..         MOV       R0,#?V2
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   7406         MOV       A,#0x6
   \   000030   12....       LCALL     ?XSTACK_DISP102_8
   \   000033   EE           MOV       A,R6
   \   000034   2406         ADD       A,#0x6
   \   000036   FA           MOV       R2,A
   \   000037   E4           CLR       A
   \   000038   3F           ADDC      A,R7
   \   000039   FB           MOV       R3,A
   \   00003A   EE           MOV       A,R6
   \   00003B   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   00003E   3F           ADDC      A,R7
   \   00003F   F583         MOV       DPH,A
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \   000046   7402         MOV       A,#0x2
   \   000048   12....       LCALL     ?DEALLOC_XSTACK8
   \                     ??zclRevertWriteUndividedCmd_2:
   \   00004B   05..         INC       ?V0
   \                     ??zclRevertWriteUndividedCmd_0:
   \   00004D   741B         MOV       A,#0x1b
   \   00004F   12....       LCALL     ?XSTACK_DISP0_8
   \   000052   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_561:
   \   000055   C3           CLR       C
   \   000056   E5..         MOV       A,?V0
   \   000058   98           SUBB      A,R0
   \   000059   E4           CLR       A
   \   00005A   99           SUBB      A,R1
   \   00005B   4003         JC        $+5
   \   00005D   02....       LJMP      ??zclRevertWriteUndividedCmd_3 & 0xFFFF
   \   000060   E5..         MOV       A,?V0
   \   000062   75F005       MOV       B,#0x5
   \   000065   A4           MUL       AB
   \   000066   F8           MOV       R0,A
   \   000067   A9F0         MOV       R1,B
   \   000069   7402         MOV       A,#0x2
   \   00006B   12....       LCALL     ?XSTACK_DISP0_8
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   28           ADD       A,R0
   \   000070   FE           MOV       R6,A
   \   000071   A3           INC       DPTR
   \   000072   E0           MOVX      A,@DPTR
   \   000073   39           ADDC      A,R1
   \   000074   FF           MOV       R7,A
   \   000075   12....       LCALL     ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000078   88..         MOV       ?V2,R0
   \   00007A   89..         MOV       ?V3,R1
   \   00007C                ; Setup parameters for call to function zclFindAttrRec
   \   00007C   7404         MOV       A,#0x4
   \   00007E   12....       LCALL     ?XSTACK_DISP100_8
   \   000081   88..         MOV       ?V4,R0
   \   000083   89..         MOV       ?V5,R1
   \   000085   78..         MOV       R0,#?V4
   \   000087   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008A   8E82         MOV       DPL,R6
   \   00008C   8F83         MOV       DPH,R7
   \   00008E   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000091   12....       LCALL     ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_632:
   \   000094   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000097   7402         MOV       A,#0x2
   \   000099   12....       LCALL     ?DEALLOC_XSTACK8
   \   00009C   E9           MOV       A,R1
   \   00009D   604F         JZ        ??zclRevertWriteUndividedCmd_3
   \   00009F   EE           MOV       A,R6
   \   0000A0   2403         ADD       A,#0x3
   \   0000A2   FE           MOV       R6,A
   \   0000A3   5001         JNC       ??zclRevertWriteUndividedCmd_4
   \   0000A5   0F           INC       R7
   \                     ??zclRevertWriteUndividedCmd_4:
   \   0000A6   8E82         MOV       DPL,R6
   \   0000A8   8F83         MOV       DPH,R7
   \   0000AA   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   0000AD   740A         MOV       A,#0xa
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL     ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   0000B5   E5..         MOV       A,?V2
   \   0000B7   45..         ORL       A,?V3
   \   0000B9   7003         JNZ       $+5
   \   0000BB   02....       LJMP      ??zclRevertWriteUndividedCmd_1 & 0xFFFF
   \   0000BE                ; Setup parameters for call to function zclGetAttrDataLength
   \   0000BE   7408         MOV       A,#0x8
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   E0           MOVX      A,@DPTR
   \   0000C4   F9           MOV       R1,A
   \   0000C5   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   0000C8   8A..         MOV       ?V4,R2
   \   0000CA   8B..         MOV       ?V5,R3
   \   0000CC   AC..         MOV       R4,?V4
   \   0000CE   AD..         MOV       R5,?V5
   \   0000D0                ; Setup parameters for call to function osal_memcpy
   \   0000D0   8E82         MOV       DPL,R6
   \   0000D2   8F83         MOV       DPH,R7
   \   0000D4   12....       LCALL     ??Subroutine231_0 & 0xFFFF
   4683            } // for loop
   \                     ??CrossCallReturnLabel_577:
   \   0000D7   75..00       MOV       ?V6,#0x0
   \   0000DA   78..         MOV       R0,#?V4
   \   0000DC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000DF   AA..         MOV       R2,?V2
   \   0000E1   AB..         MOV       R3,?V3
   \   0000E3   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000E6   7403         MOV       A,#0x3
   \   0000E8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000EB   02....       LJMP      ??zclRevertWriteUndividedCmd_2 & 0xFFFF
   4684          }
   \                     ??zclRevertWriteUndividedCmd_3:
   \   0000EE   02....       LJMP      ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   740C         MOV       A,#0xc
   \   000002                REQUIRE ??Subroutine241_0
   \   000002                ; // Fall through to label ??Subroutine241_0
   4685          
   4686          /*********************************************************************
   4687           * @fn      zclProcessInWriteUndividedCmd
   4688           *
   4689           * @brief   Process the "Profile" Write Undivided Command
   4690           *
   4691           * @param   pInMsg - incoming message to process
   4692           *
   4693           * @return  TRUE if command processed. FALSE, otherwise.
   4694           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   F583         MOV       DPH,A
   \   000002   8882         MOV       DPL,R0
   \   000004                REQUIRE ??Subroutine231_0
   \   000004                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4695          static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInWriteUndividedCmd:
   4696          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine33 & 0xFFFF
   4697            zclWriteCmd_t *writeCmd;
   4698            zclWriteRspCmd_t *writeRspCmd;
   4699            zclAttrRec_t attrRec;
   4700            uint16 dataLen;
   4701            uint16 curLen = 0;
   \                     ??CrossCallReturnLabel_462:
   \   00000D   7406         MOV       A,#0x6
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   E4           CLR       A
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   F0           MOVX      @DPTR,A
   4702            uint8 j = 0;
   \   000016   12....       LCALL     ?Subroutine68 & 0xFFFF
   4703            uint8 i;
   4704          
   4705            writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_124:
   \   000019   740A         MOV       A,#0xa
   \   00001B   12....       LCALL     ?XSTACK_DISP0_8
   \   00001E   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   4706          
   4707            // Allocate space for Write Response Command
   4708            writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
   4709                             + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
   \                     ??CrossCallReturnLabel_478:
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   740A         MOV       A,#0xa
   \   000023   12....       LCALL     ?XSTACK_DISP0_8
   \   000026   12....       LCALL     ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000029   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002C   8A..         MOV       ?V0,R2
   \   00002E   8B..         MOV       ?V1,R3
   4710            if ( writeRspCmd == NULL )
   \   000030   EA           MOV       A,R2
   \   000031   45..         ORL       A,?V1
   \   000033   7003         JNZ       $+5
   \   000035   02....       LJMP      ??zclProcessInWriteUndividedCmd_0 & 0xFFFF
   4711            {
   4712              return FALSE; // EMBEDDED RETURN
   4713            }
   4714          
   4715            // If any attribute cannot be written, no attribute values are changed. Hence,
   4716            // make sure all the attributes are supported and writable
   4717            for ( i = 0; i < writeCmd->numAttr; i++ )
   \   000038   7F00         MOV       R7,#0x0
   \   00003A   8041         SJMP      ??zclProcessInWriteUndividedCmd_1
   4718            {
   4719              zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4720          
   4721              if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4722                                    statusRec->attrID, &attrRec ) )
   4723              {
   4724                // Attribute is not supported - stop here
   4725                writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
   4726                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4727                break;
   4728              }
   4729          
   4730              if ( statusRec->dataType != attrRec.attr.dataType )
   4731              {
   4732                // Attribute data type is incorrect - stope here
   4733                writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
   4734                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4735                break;
   4736              }
   4737          
   4738              if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
   4739              {
   4740                // Attribute is not writable - stop here
   4741                writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
   4742                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4743                break;
   4744              }
   4745          
   4746              if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
   4747              {
   4748                // Not authorized to write - stop here
   4749                writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
   4750                writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4751                break;
   4752              }
   4753          
   4754              // Attribute Data length
   4755              if ( attrRec.attr.dataPtr != NULL )
   4756              {
   4757                dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
   4758              }
   4759              else // Use CB
   4760              {
   4761                dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4762                                                       statusRec->attrID );
   \                     ??zclProcessInWriteUndividedCmd_2:
   \   00003C   12....       LCALL     ?Subroutine78 & 0xFFFF
   4763              }
   \                     ??CrossCallReturnLabel_144:
   \   00003F                ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
   \   00003F   85..82       MOV       DPL,?V4
   \   000042   85..83       MOV       DPH,?V5
   \   000045   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   000048   8882         MOV       DPL,R0
   \   00004A   8983         MOV       DPH,R1
   \   00004C   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   00004F   12....       LCALL     ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_581:
   \   000052   12....       LCALL     `??zclGetAttrDataLengthUsingCB::?relay`; Banked call to: zclGetAttrDataLengthUsingCB
   \                     ??zclProcessInWriteUndividedCmd_3:
   \   000055   7402         MOV       A,#0x2
   \   000057   12....       LCALL     ?XSTACK_DISP0_8
   \   00005A   12....       LCALL     ?Subroutine26 & 0xFFFF
   4764          
   4765              // add padding if needed
   4766              if ( PADDING_NEEDED( dataLen ) )
   \                     ??CrossCallReturnLabel_30:
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   E0           MOVX      A,@DPTR
   \   000061   A2E0         MOV       C,0xE0 /* A   */.0
   \   000063   5003         JNC       ??CrossCallReturnLabel_260
   4767              {
   4768                dataLen++;
   \   000065   12....       LCALL     ?Subroutine141 & 0xFFFF
   4769              }
   4770          
   4771              curLen += dataLen;
   \                     ??CrossCallReturnLabel_260:
   \   000068   7402         MOV       A,#0x2
   \   00006A   12....       LCALL     ?XSTACK_DISP0_8
   \   00006D   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_562:
   \   000070   7406         MOV       A,#0x6
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   E0           MOVX      A,@DPTR
   \   000076   28           ADD       A,R0
   \   000077   F0           MOVX      @DPTR,A
   \   000078   A3           INC       DPTR
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   39           ADDC      A,R1
   \   00007B   F0           MOVX      @DPTR,A
   \   00007C   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_1:
   \   00007D   740A         MOV       A,#0xa
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000085   506D         JNC       ??zclProcessInWriteUndividedCmd_4
   \   000087   EF           MOV       A,R7
   \   000088   75F005       MOV       B,#0x5
   \   00008B   A4           MUL       AB
   \   00008C   F8           MOV       R0,A
   \   00008D   A9F0         MOV       R1,B
   \   00008F   740A         MOV       A,#0xa
   \   000091   12....       LCALL     ?XSTACK_DISP0_8
   \   000094   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000097   8582..       MOV       ?V4,DPL
   \   00009A   8583..       MOV       ?V5,DPH
   \   00009D   12....       LCALL     ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_592:
   \   0000A0   12....       LCALL     ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   0000A3                ; Setup parameters for call to function zclFindAttrRec
   \   0000A3   740C         MOV       A,#0xc
   \   0000A5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A8   88..         MOV       ?V2,R0
   \   0000AA   89..         MOV       ?V3,R1
   \   0000AC   78..         MOV       R0,#?V2
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B1   85..82       MOV       DPL,?V4
   \   0000B4   85..83       MOV       DPH,?V5
   \   0000B7   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   0000BA   85..82       MOV       DPL,?V6
   \   0000BD   85..83       MOV       DPH,?V7
   \   0000C0   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   0000C3   E5..         MOV       A,?V6
   \   0000C5   12....       LCALL     ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   0000C8   35..         ADDC      A,?V7
   \   0000CA   F583         MOV       DPH,A
   \   0000CC   E0           MOVX      A,@DPTR
   \   0000CD   F9           MOV       R1,A
   \   0000CE   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   0000D1   7402         MOV       A,#0x2
   \   0000D3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D6   E9           MOV       A,R1
   \   0000D7   705B         JNZ       ??zclProcessInWriteUndividedCmd_5
   \   0000D9   85..82       MOV       DPL,?V0
   \   0000DC   85..83       MOV       DPH,?V1
   \   0000DF   A3           INC       DPTR
   \   0000E0   7486         MOV       A,#-0x7a
   \                     ??zclProcessInWriteUndividedCmd_6:
   \   0000E2   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   0000E5   F8           MOV       R0,A
   \   0000E6   A3           INC       DPTR
   \   0000E7   E0           MOVX      A,@DPTR
   \   0000E8   F9           MOV       R1,A
   \   0000E9   85..82       MOV       DPL,?V0
   \   0000EC   85..83       MOV       DPH,?V1
   \   0000EF   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   0000F2   7E01         MOV       R6,#0x1
   4772            } // for loop
   4773          
   4774            writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_4:
   \   0000F4   EE           MOV       A,R6
   \   0000F5   85..82       MOV       DPL,?V0
   \   0000F8   85..83       MOV       DPH,?V1
   \   0000FB   F0           MOVX      @DPTR,A
   4775            if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
   \   0000FC   6003         JZ        $+5
   \   0000FE   02....       LJMP      ??zclProcessInWriteUndividedCmd_7 & 0xFFFF
   4776            {
   4777              uint8 *curDataPtr;
   4778              zclWriteRec_t *curWriteRec;
   4779          
   4780              // calculate the length of the current data header
   4781              uint8 hdrLen = j * sizeof( zclWriteRec_t );
   \   000101   75F005       MOV       B,#0x5
   \   000104   A4           MUL       AB
   \   000105   FF           MOV       R7,A
   4782          
   4783              // Allocate space to keep a copy of the current data
   4784              curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
   \   000106                ; Setup parameters for call to function osal_mem_alloc
   \   000106   7406         MOV       A,#0x6
   \   000108   12....       LCALL     ?XSTACK_DISP0_8
   \   00010B   E0           MOVX      A,@DPTR
   \   00010C   2F           ADD       A,R7
   \   00010D   FA           MOV       R2,A
   \   00010E   A3           INC       DPTR
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   3400         ADDC      A,#0x0
   \   000112   FB           MOV       R3,A
   \   000113   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000116   7408         MOV       A,#0x8
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   4785              if ( curWriteRec == NULL )
   \                     ??CrossCallReturnLabel_455:
   \   00011E   7408         MOV       A,#0x8
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   000126   7063         JNZ       ??zclProcessInWriteUndividedCmd_8
   4786              {
   4787                zcl_mem_free(writeRspCmd );
   \   000128                ; Setup parameters for call to function osal_mem_free
   \   000128   AA..         MOV       R2,?V0
   \   00012A   AB..         MOV       R3,?V1
   \   00012C   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4788                return FALSE; // EMBEDDED RETURN
   \                     ??zclProcessInWriteUndividedCmd_0:
   \   00012F   7900         MOV       R1,#0x0
   \   000131   02....       LJMP      ??zclProcessInWriteUndividedCmd_9 & 0xFFFF
   4789              }
   \                     ??zclProcessInWriteUndividedCmd_5:
   \   000134   7410         MOV       A,#0x10
   \   000136   12....       LCALL     ?XSTACK_DISP0_8
   \   000139   E0           MOVX      A,@DPTR
   \   00013A   F9           MOV       R1,A
   \   00013B   85..82       MOV       DPL,?V4
   \   00013E   85..83       MOV       DPH,?V5
   \   000141   A3           INC       DPTR
   \   000142   A3           INC       DPTR
   \   000143   E0           MOVX      A,@DPTR
   \   000144   69           XRL       A,R1
   \   000145   600B         JZ        ??zclProcessInWriteUndividedCmd_10
   \   000147   85..82       MOV       DPL,?V0
   \   00014A   85..83       MOV       DPH,?V1
   \   00014D   A3           INC       DPTR
   \   00014E   748D         MOV       A,#-0x73
   \   000150   8090         SJMP      ??zclProcessInWriteUndividedCmd_6
   \                     ??zclProcessInWriteUndividedCmd_10:
   \   000152   7411         MOV       A,#0x11
   \   000154   12....       LCALL     ?XSTACK_DISP0_8
   \   000157   E0           MOVX      A,@DPTR
   \   000158   A2E1         MOV       C,0xE0 /* A   */.1
   \   00015A   400C         JC        ??zclProcessInWriteUndividedCmd_11
   \   00015C   85..82       MOV       DPL,?V0
   \   00015F   85..83       MOV       DPH,?V1
   \   000162   A3           INC       DPTR
   \   000163   7488         MOV       A,#-0x78
   \   000165   02....       LJMP      ??zclProcessInWriteUndividedCmd_6 & 0xFFFF
   \                     ??zclProcessInWriteUndividedCmd_11:
   \   000168   A2E5         MOV       C,0xE0 /* A   */.5
   \   00016A   500C         JNC       ??zclProcessInWriteUndividedCmd_12
   \   00016C   85..82       MOV       DPL,?V0
   \   00016F   85..83       MOV       DPH,?V1
   \   000172   A3           INC       DPTR
   \   000173   747E         MOV       A,#0x7e
   \   000175   02....       LJMP      ??zclProcessInWriteUndividedCmd_6 & 0xFFFF
   \                     ??zclProcessInWriteUndividedCmd_12:
   \   000178   7412         MOV       A,#0x12
   \   00017A   12....       LCALL     ?XSTACK_DISP0_8
   \   00017D   12....       LCALL     ??Subroutine189_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000180   7003         JNZ       $+5
   \   000182   02....       LJMP      ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
   \   000185                ; Setup parameters for call to function zclGetAttrDataLength
   \   000185   12....       LCALL     `??zclGetAttrDataLength::?relay`; Banked call to: zclGetAttrDataLength
   \   000188   02....       LJMP      ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
   4790          
   4791              curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
   \                     ??zclProcessInWriteUndividedCmd_8:
   \   00018B   7408         MOV       A,#0x8
   \   00018D   12....       LCALL     ?XSTACK_DISP0_8
   \   000190   E0           MOVX      A,@DPTR
   \   000191   2F           ADD       A,R7
   \   000192   F5..         MOV       ?V6,A
   \   000194   A3           INC       DPTR
   \   000195   E0           MOVX      A,@DPTR
   \   000196   3400         ADDC      A,#0x0
   \   000198   F5..         MOV       ?V7,A
   4792          
   4793              // Write the new data over
   4794              for ( i = 0; i < writeCmd->numAttr; i++ )
   \   00019A   7F00         MOV       R7,#0x0
   \   00019C   8020         SJMP      ??zclProcessInWriteUndividedCmd_13
   4795              {
   4796                uint8 status;
   4797                zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
   4798                zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
   4799          
   4800                if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4801                                      statusRec->attrID, &attrRec ) )
   4802                {
   4803                  break; // should never happen
   4804                }
   4805          
   4806                // Keep a copy of the current data before before writing the new data over
   4807                curStatusRec->attrID = statusRec->attrID;
   4808                curStatusRec->attrData = curDataPtr;
   4809          
   4810                if ( attrRec.attr.dataPtr != NULL )
   4811                {
   4812                  // Read the current value
   4813                  zclReadAttrData( curDataPtr, &attrRec, &dataLen );
   4814          
   4815                  // Write the new attribute value
   4816                  status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4817                                             &attrRec, statusRec );
   4818                }
   4819                else // Use CBs
   4820                {
   4821                  // Read the current value
   4822                  zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   4823                                          statusRec->attrID, curDataPtr, &dataLen );
   4824                  // Write the new attribute value
   4825                  status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4826                                                    &attrRec, statusRec->attrData );
   4827                }
   4828          
   4829                // If successful, a write attribute status record shall NOT be generated
   4830                if ( status != ZCL_STATUS_SUCCESS )
   4831                {
   4832                  writeRspCmd->attrList[j].status = status;
   4833                  writeRspCmd->attrList[j++].attrID = statusRec->attrID;
   4834          
   4835                  // Since this write failed, we need to revert all the pervious writes
   4836                  zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
   4837                  break;
   4838                }
   4839          
   4840                // add padding if needed
   4841                if ( PADDING_NEEDED( dataLen ) )
   \                     ??zclProcessInWriteUndividedCmd_14:
   \   00019E   7402         MOV       A,#0x2
   \   0001A0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A3   E0           MOVX      A,@DPTR
   \   0001A4   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001A6   5003         JNC       ??CrossCallReturnLabel_261
   4842                {
   4843                  dataLen++;
   \   0001A8   12....       LCALL     ?Subroutine141 & 0xFFFF
   4844                }
   4845          
   4846                curDataPtr += dataLen;
   \                     ??CrossCallReturnLabel_261:
   \   0001AB   7402         MOV       A,#0x2
   \   0001AD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B0   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_563:
   \   0001B3   E5..         MOV       A,?V6
   \   0001B5   28           ADD       A,R0
   \   0001B6   F5..         MOV       ?V6,A
   \   0001B8   E5..         MOV       A,?V7
   \   0001BA   39           ADDC      A,R1
   \   0001BB   F5..         MOV       ?V7,A
   \   0001BD   0F           INC       R7
   \                     ??zclProcessInWriteUndividedCmd_13:
   \   0001BE   740A         MOV       A,#0xa
   \   0001C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C3   12....       LCALL     ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0001C6   4003         JC        $+5
   \   0001C8   02....       LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   0001CB   EF           MOV       A,R7
   \   0001CC   75F005       MOV       B,#0x5
   \   0001CF   A4           MUL       AB
   \   0001D0   F8           MOV       R0,A
   \   0001D1   A9F0         MOV       R1,B
   \   0001D3   740A         MOV       A,#0xa
   \   0001D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D8   12....       LCALL     ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   0001DB   AA82         MOV       R2,DPL
   \   0001DD   AB83         MOV       R3,DPH
   \   0001DF   7404         MOV       A,#0x4
   \   0001E1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E4   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   0001E7   7408         MOV       A,#0x8
   \   0001E9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EC   12....       LCALL     ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0001EF   7406         MOV       A,#0x6
   \   0001F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F4   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   0001F7   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   0001FA                ; Setup parameters for call to function zclFindAttrRec
   \   0001FA   740C         MOV       A,#0xc
   \   0001FC   12....       LCALL     ?XSTACK_DISP100_8
   \   0001FF   88..         MOV       ?V2,R0
   \   000201   89..         MOV       ?V3,R1
   \   000203   78..         MOV       R0,#?V2
   \   000205   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000208   7406         MOV       A,#0x6
   \   00020A   12....       LCALL     ?XSTACK_DISP0_8
   \   00020D   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000210   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_627:
   \   000213   12....       LCALL     `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
   \   000216   7402         MOV       A,#0x2
   \   000218   12....       LCALL     ?DEALLOC_XSTACK8
   \   00021B   E9           MOV       A,R1
   \   00021C   7003         JNZ       $+5
   \   00021E   02....       LJMP      ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
   \   000221   7404         MOV       A,#0x4
   \   000223   12....       LCALL     ?XSTACK_DISP0_8
   \   000226   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   000229   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   00022C   7406         MOV       A,#0x6
   \   00022E   12....       LCALL     ?XSTACK_DISP0_8
   \   000231   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   000234   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   000237   7406         MOV       A,#0x6
   \   000239   12....       LCALL     ?XSTACK_DISP0_8
   \   00023C   12....       LCALL     ??Subroutine213_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   00023F   E5..         MOV       A,?V6
   \   000241   F0           MOVX      @DPTR,A
   \   000242   A3           INC       DPTR
   \   000243   E5..         MOV       A,?V7
   \   000245   F0           MOVX      @DPTR,A
   \   000246   7412         MOV       A,#0x12
   \   000248   12....       LCALL     ?XSTACK_DISP0_8
   \   00024B   12....       LCALL     ??Subroutine212_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   00024E   6035         JZ        ??zclProcessInWriteUndividedCmd_16
   \   000250                ; Setup parameters for call to function zclReadAttrData
   \   000250   7402         MOV       A,#0x2
   \   000252   12....       LCALL     ?XSTACK_DISP100_8
   \   000255   88..         MOV       ?V2,R0
   \   000257   89..         MOV       ?V3,R1
   \   000259   78..         MOV       R0,#?V2
   \   00025B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00025E   740E         MOV       A,#0xe
   \   000260   12....       LCALL     ?XSTACK_DISP102_8
   \   000263   AA..         MOV       R2,?V6
   \   000265   AB..         MOV       R3,?V7
   \   000267   12....       LCALL     `??zclReadAttrData::?relay`; Banked call to: zclReadAttrData
   \   00026A   7402         MOV       A,#0x2
   \   00026C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00026F   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000272   12....       LCALL     ?XSTACK_DISP0_8
   \   000275   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000278   740E         MOV       A,#0xe
   \   00027A   12....       LCALL     ?XSTACK_DISP102_8
   \   00027D   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_582:
   \   000280   12....       LCALL     `??zclWriteAttrData::?relay`; Banked call to: zclWriteAttrData
   \   000283   804A         SJMP      ??zclProcessInWriteUndividedCmd_17
   \                     ??zclProcessInWriteUndividedCmd_16:
   \   000285   12....       LCALL     ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   000288   12....       LCALL     ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   00028B                ; Setup parameters for call to function zclReadAttrDataUsingCB
   \   00028B   7402         MOV       A,#0x2
   \   00028D   12....       LCALL     ?XSTACK_DISP100_8
   \   000290   88..         MOV       ?V2,R0
   \   000292   89..         MOV       ?V3,R1
   \   000294   78..         MOV       R0,#?V2
   \   000296   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000299   85....       MOV       ?V2,?V6
   \   00029C   85....       MOV       ?V3,?V7
   \   00029F   78..         MOV       R0,#?V2
   \   0002A1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002A4   7408         MOV       A,#0x8
   \   0002A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A9   12....       LCALL     ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0002AC   12....       LCALL     ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   0002AF   12....       LCALL     `??zclReadAttrDataUsingCB::?relay`; Banked call to: zclReadAttrDataUsingCB
   \   0002B2   7404         MOV       A,#0x4
   \   0002B4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002B7   12....       LCALL     ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   0002BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BD   12....       LCALL     ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   0002C0   A3           INC       DPTR
   \   0002C1   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0002C4   740E         MOV       A,#0xe
   \   0002C6   12....       LCALL     ?XSTACK_DISP102_8
   \   0002C9   12....       LCALL     ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   0002CC   12....       LCALL     `??zclWriteAttrDataUsingCB::?relay`; Banked call to: zclWriteAttrDataUsingCB
   \                     ??zclProcessInWriteUndividedCmd_17:
   \   0002CF   7402         MOV       A,#0x2
   \   0002D1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002D4   E9           MOV       A,R1
   \   0002D5   FA           MOV       R2,A
   \   0002D6   EA           MOV       A,R2
   \   0002D7   7003         JNZ       $+5
   \   0002D9   02....       LJMP      ??zclProcessInWriteUndividedCmd_14 & 0xFFFF
   \   0002DC   EE           MOV       A,R6
   \   0002DD   75F003       MOV       B,#0x3
   \   0002E0   A4           MUL       AB
   \   0002E1   F8           MOV       R0,A
   \   0002E2   A9F0         MOV       R1,B
   \   0002E4   E5..         MOV       A,?V0
   \   0002E6   28           ADD       A,R0
   \   0002E7   F8           MOV       R0,A
   \   0002E8   E5..         MOV       A,?V1
   \   0002EA   39           ADDC      A,R1
   \   0002EB   F9           MOV       R1,A
   \   0002EC   EA           MOV       A,R2
   \   0002ED   8882         MOV       DPL,R0
   \   0002EF   8983         MOV       DPH,R1
   \   0002F1   A3           INC       DPTR
   \   0002F2   F0           MOVX      @DPTR,A
   \   0002F3   7404         MOV       A,#0x4
   \   0002F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F8   12....       LCALL     ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   0002FB   12....       LCALL     ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0002FE   12....       LCALL     ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   000301   0E           INC       R6
   \   000302                ; Setup parameters for call to function zclRevertWriteUndividedCmd
   \   000302   EF           MOV       A,R7
   \   000303   F5..         MOV       ?V2,A
   \   000305   75..00       MOV       ?V3,#0x0
   \   000308   78..         MOV       R0,#?V2
   \   00030A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00030D   740A         MOV       A,#0xa
   \   00030F   12....       LCALL     ?XSTACK_DISP0_8
   \   000312   12....       LCALL     ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   000315   7402         MOV       A,#0x2
   \   000317   12....       LCALL     ?XSTACK_DISP0_8
   \   00031A   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   00031D   12....       LCALL     `??zclRevertWriteUndividedCmd::?relay`; Banked call to: zclRevertWriteUndividedCmd
   \   000320   7402         MOV       A,#0x2
   \   000322   12....       LCALL     ?DEALLOC_XSTACK8
   4847              } // for loop
   4848          
   4849              writeRspCmd->numAttr = j;
   \                     ??zclProcessInWriteUndividedCmd_15:
   \   000325   EE           MOV       A,R6
   \   000326   85..82       MOV       DPL,?V0
   \   000329   85..83       MOV       DPH,?V1
   \   00032C   F0           MOVX      @DPTR,A
   4850              if ( writeRspCmd->numAttr  == 0 )
   \   00032D   700B         JNZ       ??zclProcessInWriteUndividedCmd_18
   4851              {
   4852                // Since all records were written successful, include a single status record
   4853                // in the resonse command with the status field set to SUCCESS and the
   4854                // attribute ID field omitted.
   4855                writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
   \   00032F   A3           INC       DPTR
   \   000330   E4           CLR       A
   \   000331   F0           MOVX      @DPTR,A
   4856                writeRspCmd->numAttr = 1;
   \   000332   85..82       MOV       DPL,?V0
   \   000335   85..83       MOV       DPH,?V1
   \   000338   04           INC       A
   \   000339   F0           MOVX      @DPTR,A
   4857              }
   4858          
   4859              zcl_mem_free( curWriteRec );
   \                     ??zclProcessInWriteUndividedCmd_18:
   \   00033A                ; Setup parameters for call to function osal_mem_free
   \   00033A   7408         MOV       A,#0x8
   \   00033C   12....       LCALL     ?XSTACK_DISP0_8
   \   00033F   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   4860            }
   \                     ??CrossCallReturnLabel_411:
   \   000342   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4861          
   4862            zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   4863                              pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
   4864                              true, pInMsg->hdr.transSeqNum );
   \                     ??zclProcessInWriteUndividedCmd_7:
   \   000345   12....       LCALL     ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000348   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   00034B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00034E   75..01       MOV       ?V2,#0x1
   \   000351   78..         MOV       R0,#?V2
   \   000353   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000356   7402         MOV       A,#0x2
   \   000358   12....       LCALL     ?XSTACK_DISP0_8
   \   00035B   12....       LCALL     ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00035E   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_618:
   \   000361   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000364   78..         MOV       R0,#?V0
   \   000366   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000369   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00036C   12....       LCALL     `??zcl_SendWriteRsp::?relay`; Banked call to: zcl_SendWriteRsp
   \   00036F   7405         MOV       A,#0x5
   \   000371   12....       LCALL     ?DEALLOC_XSTACK8
   4865            zcl_mem_free( writeRspCmd );
   \   000374                ; Setup parameters for call to function osal_mem_free
   \   000374   AA..         MOV       R2,?V0
   \   000376   AB..         MOV       R3,?V1
   \   000378   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4866          
   4867            return TRUE;
   \   00037B   7901         MOV       R1,#0x1
   \                     ??zclProcessInWriteUndividedCmd_9:
   \   00037D   7414         MOV       A,#0x14
   \   00037F   02....       LJMP      ??Subroutine194_0 & 0xFFFF
   4868          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   2401         ADD       A,#0x1
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   E8           MOV       A,R0
   \   000001   2406         ADD       A,#0x6
   \   000003   FA           MOV       R2,A
   \   000004   E4           CLR       A
   \   000005   39           ADDC      A,R1
   \   000006   FB           MOV       R3,A
   \   000007                REQUIRE ??Subroutine232_0
   \   000007                ; // Fall through to label ??Subroutine232_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   E8           MOV       A,R0
   \   000001   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_642:
   \   000004   39           ADDC      A,R1
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F9           MOV       R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   000003   12....       LCALL     ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL     ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_571:
   \   000003                ; Setup parameters for call to function zclWriteAttrData
   \   000003                ; Setup parameters for call to function zclWriteAttrDataUsingCB
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   12....       LCALL     ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   000003   F5..         MOV       ?V2,A
   \   000005   78..         MOV       R0,#?V2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   85..82       MOV       DPL,?V4
   \   000003   85..83       MOV       DPH,?V5
   \   000006   12....       LCALL     ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   000009   E5..         MOV       A,?V4
   \   00000B   12....       LCALL     ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   00000E   35..         ADDC      A,?V5
   \   000010   F583         MOV       DPH,A
   \   000012   E0           MOVX      A,@DPTR
   \   000013   F9           MOV       R1,A
   \   000014   22           RET
   4869          #endif // ZCL_WRITE
   4870          
   4871          #ifdef ZCL_DISCOVER
   4872          /*********************************************************************
   4873           * @fn      zclProcessInDiscAttrs
   4874           *
   4875           * @brief   Process the "Profile" Discover Attributes Commands
   4876           *
   4877           * @param   pInMsg - incoming message to process
   4878           *
   4879           * @return  TRUE if command processed. FALSE, otherwise.
   4880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4881          static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
   \                     zclProcessInDiscAttrs:
   4882          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine180 & 0xFFFF
   4883            zclDiscoverAttrsCmd_t *pDiscoverCmd;
   4884            zclAttrRec_t attrRec;
   4885            uint16 attrID;
   4886            uint8 numAttrs;
   4887            uint8 i;
   4888          
   4889            pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_308:
   \   00000D   12....       LCALL     ?Subroutine84 & 0xFFFF
   4890          
   4891            // Find out the number of attributes supported within the specified range
   4892            for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
   \                     ??CrossCallReturnLabel_158:
   \   000010   75..00       MOV       ?V0,#0x0
   \   000013   85..82       MOV       DPL,?V6
   \   000016   F583         MOV       DPH,A
   \   000018   12....       LCALL     ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00001B   E8           MOV       A,R0
   \   00001C   F0           MOVX      @DPTR,A
   \   00001D   A3           INC       DPTR
   \   00001E   E9           MOV       A,R1
   \   00001F   8010         SJMP      ??zclProcessInDiscAttrs_0
   \                     ??zclProcessInDiscAttrs_1:
   \   000021   05..         INC       ?V0
   \   000023   85..82       MOV       DPL,?XSP + 0
   \   000026   85..83       MOV       DPH,?XSP + 1
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   2401         ADD       A,#0x1
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   3400         ADDC      A,#0x0
   \                     ??zclProcessInDiscAttrs_0:
   \   000031   F0           MOVX      @DPTR,A
   \   000032   85..82       MOV       DPL,?V6
   \   000035   85..83       MOV       DPH,?V7
   \   000038   A3           INC       DPTR
   \   000039   A3           INC       DPTR
   \   00003A   12....       LCALL     ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_676:
   \   00003D   5036         JNC       ??zclProcessInDiscAttrs_2
   4893            {
   4894              // finds the next attribute on this endpoint/cluster after the range.
   4895              // attributes must be in numerical order in the list.
   4896              if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \   00003F   12....       LCALL     ?Subroutine122 & 0xFFFF
   4897              {
   4898                break;
   4899              }
   4900            }
   \                     ??CrossCallReturnLabel_553:
   \   000042                ; Setup parameters for call to function zclFindNextAttrRec
   \   000042   7402         MOV       A,#0x2
   \   000044   12....       LCALL     ?XSTACK_DISP100_8
   \   000047   88..         MOV       ?V4,R0
   \   000049   89..         MOV       ?V5,R1
   \   00004B   78..         MOV       R0,#?V4
   \   00004D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?XSTACK_DISP100_8
   \   000055   88..         MOV       ?V4,R0
   \   000057   89..         MOV       ?V5,R1
   \   000059   78..         MOV       R0,#?V4
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   8E82         MOV       DPL,R6
   \   000060   8F83         MOV       DPH,R7
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   000067   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_633:
   \   00006A   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   00006D   7404         MOV       A,#0x4
   \   00006F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000072   E9           MOV       A,R1
   \   000073   70AC         JNZ       ??zclProcessInDiscAttrs_1
   4901          
   4902            numAttrs = i;  // store range of attributes in buffer
   4903          
   4904              // Process message for either attributes or extended attributes
   4905            if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
   \                     ??zclProcessInDiscAttrs_2:
   \   000075   8E82         MOV       DPL,R6
   \   000077   8F83         MOV       DPH,R7
   \   000079   A3           INC       DPTR
   \   00007A   A3           INC       DPTR
   \   00007B   A3           INC       DPTR
   \   00007C   A3           INC       DPTR
   \   00007D   A3           INC       DPTR
   \   00007E   A3           INC       DPTR
   \   00007F   A3           INC       DPTR
   \   000080   E0           MOVX      A,@DPTR
   \   000081   F8           MOV       R0,A
   \   000082   740C         MOV       A,#0xc
   \   000084   68           XRL       A,R0
   \   000085   700F         JNZ       ??zclProcessInDiscAttrs_3
   4906            {
   4907              zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
   \   000087                ; Setup parameters for call to function zclProcessInDiscAttrsCmd
   \   000087   A9..         MOV       R1,?V0
   \   000089   AC..         MOV       R4,?V6
   \   00008B   AD..         MOV       R5,?V7
   \   00008D   EE           MOV       A,R6
   \   00008E   FA           MOV       R2,A
   \   00008F   EF           MOV       A,R7
   \   000090   FB           MOV       R3,A
   \   000091   12....       LCALL     `??zclProcessInDiscAttrsCmd::?relay`; Banked call to: zclProcessInDiscAttrsCmd
   \   000094   8012         SJMP      ??zclProcessInDiscAttrs_4
   4908            }
   4909            else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
   \                     ??zclProcessInDiscAttrs_3:
   \   000096   7415         MOV       A,#0x15
   \   000098   68           XRL       A,R0
   \   000099   700D         JNZ       ??zclProcessInDiscAttrs_4
   4910            {
   4911              zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
   \   00009B                ; Setup parameters for call to function zclProcessInDiscAttrsExtCmd
   \   00009B   A9..         MOV       R1,?V0
   \   00009D   AC..         MOV       R4,?V6
   \   00009F   AD..         MOV       R5,?V7
   \   0000A1   EE           MOV       A,R6
   \   0000A2   FA           MOV       R2,A
   \   0000A3   EF           MOV       A,R7
   \   0000A4   FB           MOV       R3,A
   \   0000A5   12....       LCALL     `??zclProcessInDiscAttrsExtCmd::?relay`; Banked call to: zclProcessInDiscAttrsExtCmd
   4912            }
   4913          
   4914            return TRUE;
   \                     ??zclProcessInDiscAttrs_4:
   \   0000A8   7901         MOV       R1,#0x1
   \   0000AA   740A         MOV       A,#0xa
   \   0000AC   02....       LJMP      ??Subroutine194_0 & 0xFFFF
   4915          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   12....       LCALL     ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   000003   5401         ANL       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   FC           MOV       R4,A
   \   000001                REQUIRE ??Subroutine239_0
   \   000001                ; // Fall through to label ??Subroutine239_0
   4916          
   4917          /*********************************************************************
   4918           * @fn      zclProcessInDiscAttrsCmd
   4919           *
   4920           * @brief   Process the Discover Attributes Command
   4921           *
   4922           * @param   pInMsg - incoming message to process
   4923           *
   4924           * @param   pDiscoverCmd - structure from requesting command
   4925           *
   4926           * @param   attrLenBuf - describes the amount of attributes to be processed
   4927           *
   4928           * @return  none
   4929           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4930          static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   \                     zclProcessInDiscAttrsCmd:
   4931          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine22 & 0xFFFF
   4932            zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
   4933            uint8 discComplete = TRUE;
   4934            zclAttrRec_t attrRec;
   4935            uint16 attrID;
   4936            uint8 i;
   4937          
   4938            // Allocate space for the response command
   4939            pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
   4940                                                                    + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
   \                     ??CrossCallReturnLabel_22:
   \   00000D   12....       LCALL     ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_668:
   \   000010   39           ADDC      A,R1
   \   000011   FB           MOV       R3,A
   \   000012   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000015   8A..         MOV       ?V0,R2
   \   000017   8B..         MOV       ?V1,R3
   4941            if ( pDiscoverRsp == NULL )
   \   000019   EA           MOV       A,R2
   \   00001A   45..         ORL       A,?V1
   \   00001C   7003         JNZ       $+5
   \   00001E   02....       LJMP      ??zclProcessInDiscAttrsCmd_0 & 0xFFFF
   4942            {
   4943              return; // EMBEDDED RETURN
   4944            }
   4945          
   4946            if ( numAttrs != 0 )
   \   000021   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   00002A   E5..         MOV       A,?V6
   \   00002C   7003         JNZ       $+5
   \   00002E   02....       LJMP      ??zclProcessInDiscAttrsCmd_1 & 0xFFFF
   4947            {
   4948              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   \   000031   7F00         MOV       R7,#0x0
   \   000033   85..82       MOV       DPL,?V4
   \   000036   85..83       MOV       DPH,?V5
   \   000039   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?XSTACK_DISP0_8
   \   000041   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   4949              {
   4950                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??CrossCallReturnLabel_480:
   \   000044   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000047   12....       LCALL     ?XSTACK_DISP100_8
   \   00004A   88..         MOV       ?V2,R0
   \   00004C   89..         MOV       ?V3,R1
   \   00004E   78..         MOV       R0,#?V2
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   7404         MOV       A,#0x4
   \   000055   12....       LCALL     ?XSTACK_DISP100_8
   \   000058   88..         MOV       ?V2,R0
   \   00005A   89..         MOV       ?V3,R1
   \   00005C   78..         MOV       R0,#?V2
   \   00005E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000061   7408         MOV       A,#0x8
   \   000063   12....       LCALL     ?XSTACK_DISP0_8
   \   000066   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_629:
   \   000069   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   00006C   7404         MOV       A,#0x4
   \   00006E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000071   E9           MOV       A,R1
   \   000072   6029         JZ        ??zclProcessInDiscAttrsCmd_2
   4951                {
   4952                  break; // should not happen, as numAttrs already calculated
   4953                }
   4954          
   4955                pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
   \   000074   EF           MOV       A,R7
   \   000075   75F003       MOV       B,#0x3
   \   000078   A4           MUL       AB
   \   000079   F8           MOV       R0,A
   \   00007A   A9F0         MOV       R1,B
   \   00007C   E5..         MOV       A,?V0
   \   00007E   28           ADD       A,R0
   \   00007F   F8           MOV       R0,A
   \   000080   E5..         MOV       A,?V1
   \   000082   39           ADDC      A,R1
   \   000083   F9           MOV       R1,A
   \   000084   7408         MOV       A,#0x8
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   12....       LCALL     ?Subroutine32 & 0xFFFF
   4956                pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
   4957              }
   \                     ??CrossCallReturnLabel_653:
   \   00008C   12....       LCALL     ?XSTACK_DISP0_8
   \   00008F   12....       LCALL     ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000092   0F           INC       R7
   \   000093   7402         MOV       A,#0x2
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00009B   40A7         JC        ??CrossCallReturnLabel_480
   4958          
   4959              // Are there more attributes to be discovered?
   4960              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??zclProcessInDiscAttrsCmd_2:
   \   00009D   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0000A0   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A3   88..         MOV       ?V4,R0
   \   0000A5   89..         MOV       ?V5,R1
   \   0000A7   78..         MOV       R0,#?V4
   \   0000A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AC   7404         MOV       A,#0x4
   \   0000AE   12....       LCALL     ?XSTACK_DISP100_8
   \   0000B1   88..         MOV       ?V4,R0
   \   0000B3   89..         MOV       ?V5,R1
   \   0000B5   78..         MOV       R0,#?V4
   \   0000B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000BA   7408         MOV       A,#0x8
   \   0000BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   0000C2   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_634:
   \   0000C5   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   0000C8   7404         MOV       A,#0x4
   \   0000CA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000CD   E9           MOV       A,R1
   \   0000CE   6002         JZ        ??zclProcessInDiscAttrsCmd_1
   4961              {
   4962                discComplete = FALSE;
   \   0000D0   7E00         MOV       R6,#0x0
   4963              }
   4964            }
   4965          
   4966            pDiscoverRsp->discComplete = discComplete;
   \                     ??zclProcessInDiscAttrsCmd_1:
   \   0000D2   12....       LCALL     ?Subroutine9 & 0xFFFF
   4967            pDiscoverRsp->numAttr = numAttrs;
   4968          
   4969            zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   4970                                         pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
   4971                                         true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_0:
   \   0000D5   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000D8   75..01       MOV       ?V2,#0x1
   \   0000DB   78..         MOV       R0,#?V2
   \   0000DD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000E0   7406         MOV       A,#0x6
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_620:
   \   0000E8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000EB   78..         MOV       R0,#?V0
   \   0000ED   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F0   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000F3   12....       LCALL     `??zcl_SendDiscoverAttrsRspCmd::?relay`; Banked call to: zcl_SendDiscoverAttrsRspCmd
   \   0000F6   7405         MOV       A,#0x5
   \   0000F8   12....       LCALL     ?DEALLOC_XSTACK8
   4972            zcl_mem_free( pDiscoverRsp );
   \   0000FB                ; Setup parameters for call to function osal_mem_free
   \   0000FB   AA..         MOV       R2,?V0
   \   0000FD   AB..         MOV       R3,?V1
   \   0000FF   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   4973          
   4974            return;
   \                     ??zclProcessInDiscAttrsCmd_0:
   \   000102                REQUIRE ?Subroutine8
   \   000102                ; // Fall through to label ?Subroutine8
   4975          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   740E         MOV       A,#0xe
   \   000002   02....       LJMP      ??Subroutine241_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   000003                REQUIRE ??Subroutine235_0
   \   000003                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL     ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   000003                REQUIRE ??Subroutine236_0
   \   000003                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL     ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000003   5401         ANL       A,#0x1
   \   000005   FC           MOV       R4,A
   \   000006                REQUIRE ??Subroutine237_0
   \   000006                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL     ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003                REQUIRE ??Subroutine240_0
   \   000003                ; // Fall through to label ??Subroutine240_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   12....       LCALL     ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   F0           MOVX      @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   12....       LCALL     ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL     ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_610:
   \   000003   F5..         MOV       ?V2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V3,A
   \   000009                ; Setup parameters for call to function zclFindNextAttrRec
   \   000009                ; Setup parameters for call to function zclFindNextAttrRec
   \   000009   7406         MOV       A,#0x6
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL     ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003                ; Setup parameters for call to function zclFindNextAttrRec
   \   000003                ; Setup parameters for call to function zclFindNextAttrRec
   \   000003   7406         MOV       A,#0x6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2E           ADD       A,R6
   \   000002   F0           MOVX      @DPTR,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   EF           MOV       A,R7
   \   000009   C3           CLR       C
   \   00000A   95..         SUBB      A,?V6
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   12....       LCALL     ?Subroutine152 & 0xFFFF
   \                     ??CrossCallReturnLabel_658:
   \   000009   8C..         MOV       ?V4,R4
   \   00000B   8D..         MOV       ?V5,R5
   \   00000D   89..         MOV       ?V6,R1
   \   00000F   7E01         MOV       R6,#0x1
   \   000011                ; Setup parameters for call to function osal_mem_alloc
   \   000011                ; Setup parameters for call to function osal_mem_alloc
   \   000011   E9           MOV       A,R1
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EE           MOV       A,R6
   \   000001   85..82       MOV       DPL,?V0
   \   000004   85..83       MOV       DPH,?V1
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   E5..         MOV       A,?V6
   \   00000B   12....       LCALL     ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   00000E   12....       LCALL     ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V2,A
   \   000014   78..         MOV       R0,#?V2
   \   000016   22           RET
   4976          
   4977          /*********************************************************************
   4978           * @fn      zclProcessInDiscAttrsExtCmd
   4979           *
   4980           * @brief   Process the Discover Attributes Extended Command
   4981           *
   4982           * @param   pInMsg - incoming message to process
   4983           *
   4984           * @param   pDiscoverCmd - structure from requesting command
   4985           *
   4986           * @param   attrLenBuf - describes the amount of attributes to be processed
   4987           *
   4988           * @return  none
   4989           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4990          static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
   \                     zclProcessInDiscAttrsExtCmd:
   4991          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine22 & 0xFFFF
   4992            zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
   4993            uint8 discComplete = TRUE;
   4994            zclAttrRec_t attrRec;
   4995            uint16 attrID;
   4996            uint8 i;
   4997          
   4998              // Allocate space for the response command
   4999            pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
   5000                                                                   + sizeof ( zclExtAttrInfo_t ) * numAttrs );
   \                     ??CrossCallReturnLabel_23:
   \   00000D   F5..         MOV       ?V0,A
   \   00000F   75..00       MOV       ?V1,#0x0
   \   000012   7402         MOV       A,#0x2
   \   000014   78..         MOV       R0,#?V0
   \   000016   12....       LCALL     ?S_SHL
   \   000019   E5..         MOV       A,?V0
   \   00001B   12....       LCALL     ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_666:
   \   00001E   35..         ADDC      A,?V1
   \   000020   FB           MOV       R3,A
   \   000021   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000024   8A..         MOV       ?V0,R2
   \   000026   8B..         MOV       ?V1,R3
   5001            if ( pDiscoverExtRsp == NULL )
   \   000028   EA           MOV       A,R2
   \   000029   45..         ORL       A,?V1
   \   00002B   7003         JNZ       $+5
   \   00002D   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_0 & 0xFFFF
   5002            {
   5003              return; // EMBEDDED RETURN
   5004            }
   5005          
   5006          
   5007            if ( numAttrs != 0 )
   \   000030   12....       LCALL     ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   000039   E5..         MOV       A,?V6
   \   00003B   7003         JNZ       $+5
   \   00003D   02....       LJMP      ??zclProcessInDiscAttrsExtCmd_1 & 0xFFFF
   5008            {
   5009              for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
   \   000040   7F00         MOV       R7,#0x0
   \   000042   85..82       MOV       DPL,?V4
   \   000045   85..83       MOV       DPH,?V5
   \   000048   12....       LCALL     ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   00004B   7402         MOV       A,#0x2
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   5010              {
   5011                if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??CrossCallReturnLabel_482:
   \   000053   12....       LCALL     ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000056   12....       LCALL     ?XSTACK_DISP100_8
   \   000059   88..         MOV       ?V2,R0
   \   00005B   89..         MOV       ?V3,R1
   \   00005D   78..         MOV       R0,#?V2
   \   00005F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000062   7404         MOV       A,#0x4
   \   000064   12....       LCALL     ?XSTACK_DISP100_8
   \   000067   88..         MOV       ?V2,R0
   \   000069   89..         MOV       ?V3,R1
   \   00006B   78..         MOV       R0,#?V2
   \   00006D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000070   7408         MOV       A,#0x8
   \   000072   12....       LCALL     ?XSTACK_DISP0_8
   \   000075   12....       LCALL     ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   000078   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   00007B   7404         MOV       A,#0x4
   \   00007D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000080   E9           MOV       A,R1
   \   000081   6042         JZ        ??zclProcessInDiscAttrsExtCmd_2
   5012                {
   5013                  break; // Should not happen, as numAttrs already calculated
   5014                }
   5015          
   5016                pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
   \   000083   EF           MOV       A,R7
   \   000084   F5..         MOV       ?V2,A
   \   000086   75..00       MOV       ?V3,#0x0
   \   000089   7402         MOV       A,#0x2
   \   00008B   78..         MOV       R0,#?V2
   \   00008D   12....       LCALL     ?S_SHL
   \   000090   E5..         MOV       A,?V0
   \   000092   25..         ADD       A,?V2
   \   000094   F8           MOV       R0,A
   \   000095   E5..         MOV       A,?V1
   \   000097   35..         ADDC      A,?V3
   \   000099   F9           MOV       R1,A
   \   00009A   7408         MOV       A,#0x8
   \   00009C   12....       LCALL     ?XSTACK_DISP0_8
   \   00009F   12....       LCALL     ?Subroutine32 & 0xFFFF
   5017                pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
   \                     ??CrossCallReturnLabel_654:
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL     ?Subroutine110 & 0xFFFF
   5018                pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
   \                     ??CrossCallReturnLabel_208:
   \   0000A8   740B         MOV       A,#0xb
   \   0000AA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AD   E0           MOVX      A,@DPTR
   \   0000AE   5407         ANL       A,#0x7
   \   0000B0   8882         MOV       DPL,R0
   \   0000B2   8983         MOV       DPH,R1
   \   0000B4   A3           INC       DPTR
   \   0000B5   A3           INC       DPTR
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   F0           MOVX      @DPTR,A
   5019              }
   \   0000BA   0F           INC       R7
   \   0000BB   7402         MOV       A,#0x2
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000C3   408E         JC        ??CrossCallReturnLabel_482
   5020          
   5021              // Are there more attributes to be discovered?
   5022              if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
   \                     ??zclProcessInDiscAttrsExtCmd_2:
   \   0000C5   12....       LCALL     ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   0000C8   12....       LCALL     ?XSTACK_DISP100_8
   \   0000CB   88..         MOV       ?V4,R0
   \   0000CD   89..         MOV       ?V5,R1
   \   0000CF   78..         MOV       R0,#?V4
   \   0000D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000D4   7404         MOV       A,#0x4
   \   0000D6   12....       LCALL     ?XSTACK_DISP100_8
   \   0000D9   88..         MOV       ?V4,R0
   \   0000DB   89..         MOV       ?V5,R1
   \   0000DD   78..         MOV       R0,#?V4
   \   0000DF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E2   7408         MOV       A,#0x8
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   12....       LCALL     ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   0000EA   12....       LCALL     ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_635:
   \   0000ED   12....       LCALL     `??zclFindNextAttrRec::?relay`; Banked call to: zclFindNextAttrRec
   \   0000F0   7404         MOV       A,#0x4
   \   0000F2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000F5   E9           MOV       A,R1
   \   0000F6   6002         JZ        ??zclProcessInDiscAttrsExtCmd_1
   5023              {
   5024                discComplete = FALSE;
   \   0000F8   7E00         MOV       R6,#0x0
   5025              }
   5026            }
   5027          
   5028            pDiscoverExtRsp->discComplete = discComplete;
   \                     ??zclProcessInDiscAttrsExtCmd_1:
   \   0000FA   12....       LCALL     ?Subroutine9 & 0xFFFF
   5029            pDiscoverExtRsp->numAttr = numAttrs;
   5030          
   5031            zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   5032                                         pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
   5033                                         true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_1:
   \   0000FD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000100   75..01       MOV       ?V2,#0x1
   \   000103   78..         MOV       R0,#?V2
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000108   7406         MOV       A,#0x6
   \   00010A   12....       LCALL     ?XSTACK_DISP0_8
   \   00010D   12....       LCALL     ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_621:
   \   000110   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000113   78..         MOV       R0,#?V0
   \   000115   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000118   12....       LCALL     ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00011B   12....       LCALL     `??zcl_SendDiscoverAttrsExtRsp::?relay`; Banked call to: zcl_SendDiscoverAttrsExtRsp
   \   00011E   7405         MOV       A,#0x5
   \   000120   12....       LCALL     ?DEALLOC_XSTACK8
   5034          
   5035            zcl_mem_free( pDiscoverExtRsp );
   \   000123                ; Setup parameters for call to function osal_mem_free
   \   000123   AA..         MOV       R2,?V0
   \   000125   AB..         MOV       R3,?V1
   \   000127   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   5036          
   5037            return;
   \                     ??zclProcessInDiscAttrsExtCmd_0:
   \   00012A   02....       LJMP      ?Subroutine8 & 0xFFFF
   5038          }
   5039          
   5040          /*********************************************************************
   5041           * @fn      zclProcessInDiscCmd
   5042           *
   5043           * @brief   Process the "Profile" Discover Command
   5044           *
   5045           * @param   pInMsg - incoming message to process
   5046           *
   5047           * @return  TRUE if command processed. FALSE, otherwise.
   5048           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   12....       LCALL     ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_616:
   \   000009   FD           MOV       R5,A
   \   00000A   8E82         MOV       DPL,R6
   \   00000C   8F83         MOV       DPH,R7
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   A3           INC       DPTR
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016                REQUIRE ??Subroutine238_0
   \   000016                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   5049          static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
   \                     zclProcessInDiscCmd:
   5050          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   12....       LCALL     ?Subroutine117 & 0xFFFF
   5051            zclDiscoverCmdsCmd_t *pDiscoverCmd;
   5052            zclDiscoverCmdsCmdRsp_t cmdRsp;
   5053            ZStatus_t status;
   5054            zclCommandRec_t cmdRec;
   5055            uint8 cmdID;
   5056            uint8 i;
   5057            uint8 j;
   5058          
   5059            pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
   \                     ??CrossCallReturnLabel_555:
   \   00000D   7401         MOV       A,#0x1
   \   00000F   12....       LCALL     ?XSTACK_DISP0_8
   \   000012   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   5060          
   5061            // Find out the number of commands supported within the specified range
   5062            for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
   \                     ??CrossCallReturnLabel_483:
   \   000015   75..00       MOV       ?V0,#0x0
   \   000018   7401         MOV       A,#0x1
   \   00001A   12....       LCALL     ?XSTACK_DISP0_8
   \   00001D   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000020   800A         SJMP      ??zclProcessInDiscCmd_0
   \                     ??zclProcessInDiscCmd_1:
   \   000022   05..         INC       ?V0
   \   000024   85..82       MOV       DPL,?XSP + 0
   \   000027   85..83       MOV       DPH,?XSP + 1
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   04           INC       A
   \                     ??zclProcessInDiscCmd_0:
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   7401         MOV       A,#0x1
   \   00002F   12....       LCALL     ?XSTACK_DISP0_8
   \   000032   12....       LCALL     ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   000035   A3           INC       DPTR
   \   000036   12....       LCALL     ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_677:
   \   000039   502B         JNC       ??zclProcessInDiscCmd_2
   5063            {
   5064              if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \   00003B   12....       LCALL     ?Subroutine121 & 0xFFFF
   5065              {
   5066                break;  // Command not supported
   5067              }
   5068            }
   \                     ??CrossCallReturnLabel_225:
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V4,R0
   \   000043   89..         MOV       ?V5,R1
   \   000045   78..         MOV       R0,#?V4
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7402         MOV       A,#0x2
   \   00004C   12....       LCALL     ?XSTACK_DISP100_8
   \   00004F   88..         MOV       ?V4,R0
   \   000051   89..         MOV       ?V5,R1
   \   000053   78..         MOV       R0,#?V4
   \   000055   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000058   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_636:
   \   00005B   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
   \   000063   E9           MOV       A,R1
   \   000064   70BC         JNZ       ??zclProcessInDiscCmd_1
   5069          
   5070            // Allocate space for the response command
   5071            cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
   \                     ??zclProcessInDiscCmd_2:
   \   000066                ; Setup parameters for call to function osal_mem_alloc
   \   000066   AA..         MOV       R2,?V0
   \   000068   7B00         MOV       R3,#0x0
   \   00006A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006D   8A..         MOV       ?V2,R2
   \   00006F   8B..         MOV       ?V3,R3
   \   000071   A8..         MOV       R0,?V2
   \   000073   A9..         MOV       R1,?V3
   \   000075   7406         MOV       A,#0x6
   \   000077   12....       LCALL     ?XSTACK_DISP0_8
   \   00007A   12....       LCALL     ??Subroutine216_0 & 0xFFFF
   5072          
   5073            if ( cmdRsp.pCmdID == NULL )
   \                     ??CrossCallReturnLabel_484:
   \   00007D   E8           MOV       A,R0
   \   00007E   49           ORL       A,R1
   \   00007F   7003         JNZ       $+5
   \   000081   02....       LJMP      ??zclProcessInDiscCmd_3 & 0xFFFF
   5074            {
   5075              return FALSE; // EMBEDDED RETURN
   5076            }
   5077          
   5078            if ( i != 0 )
   \   000084   E5..         MOV       A,?V0
   \   000086   6066         JZ        ??zclProcessInDiscCmd_4
   5079            {
   5080              for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
   \   000088   75..00       MOV       ?V6,#0x0
   \   00008B   7401         MOV       A,#0x1
   \   00008D   12....       LCALL     ?XSTACK_DISP0_8
   \   000090   12....       LCALL     ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000093   F0           MOVX      @DPTR,A
   5081              {
   5082                if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \                     ??zclProcessInDiscCmd_5:
   \   000094   12....       LCALL     ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000097   12....       LCALL     ?XSTACK_DISP100_8
   \   00009A   88..         MOV       ?V4,R0
   \   00009C   89..         MOV       ?V5,R1
   \   00009E   78..         MOV       R0,#?V4
   \   0000A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A3   7402         MOV       A,#0x2
   \   0000A5   12....       LCALL     ?XSTACK_DISP100_8
   \   0000A8   88..         MOV       ?V4,R0
   \   0000AA   89..         MOV       ?V5,R1
   \   0000AC   78..         MOV       R0,#?V4
   \   0000AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000B1   12....       LCALL     ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_637:
   \   0000B4   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   0000B7   7404         MOV       A,#0x4
   \   0000B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000BC   E9           MOV       A,R1
   \   0000BD   602F         JZ        ??zclProcessInDiscCmd_4
   5083                {
   5084                  break; // Attribute not supported
   5085                }
   5086          
   5087                cmdRsp.pCmdID[j] = cmdRec.cmdID;
   \   0000BF   740A         MOV       A,#0xa
   \   0000C1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C4   E0           MOVX      A,@DPTR
   \   0000C5   C0E0         PUSH      A
   \   0000C7   A8..         MOV       R0,?V6
   \   0000C9   7406         MOV       A,#0x6
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   28           ADD       A,R0
   \   0000D0   FA           MOV       R2,A
   \   0000D1   A3           INC       DPTR
   \   0000D2   E0           MOVX      A,@DPTR
   \   0000D3   3400         ADDC      A,#0x0
   \   0000D5   8A82         MOV       DPL,R2
   \   0000D7   F583         MOV       DPH,A
   \   0000D9   D0E0         POP       A
   \   0000DB   F0           MOVX      @DPTR,A
   5088              }
   \   0000DC   05..         INC       ?V6
   \   0000DE   85..82       MOV       DPL,?XSP + 0
   \   0000E1   85..83       MOV       DPH,?XSP + 1
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   04           INC       A
   \   0000E6   F0           MOVX      @DPTR,A
   \   0000E7   E5..         MOV       A,?V6
   \   0000E9   C3           CLR       C
   \   0000EA   95..         SUBB      A,?V0
   \   0000EC   40A6         JC        ??zclProcessInDiscCmd_5
   5089            }
   5090          
   5091            // Are there more commands to be discovered?
   5092            if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
   \                     ??zclProcessInDiscCmd_4:
   \   0000EE   8E82         MOV       DPL,R6
   \   0000F0   8F83         MOV       DPH,R7
   \   0000F2   12....       LCALL     ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   0000F5                ; Setup parameters for call to function zclFindNextCmdRec
   \   0000F5   7408         MOV       A,#0x8
   \   0000F7   12....       LCALL     ?XSTACK_DISP100_8
   \   0000FA   88..         MOV       ?V2,R0
   \   0000FC   89..         MOV       ?V3,R1
   \   0000FE   78..         MOV       R0,#?V2
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000103   7402         MOV       A,#0x2
   \   000105   12....       LCALL     ?XSTACK_DISP100_8
   \   000108   88..         MOV       ?V2,R0
   \   00010A   89..         MOV       ?V3,R1
   \   00010C   78..         MOV       R0,#?V2
   \   00010E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000111   8E82         MOV       DPL,R6
   \   000113   8F83         MOV       DPH,R7
   \   000115   A3           INC       DPTR
   \   000116   A3           INC       DPTR
   \   000117   12....       LCALL     ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_613:
   \   00011A   FD           MOV       R5,A
   \   00011B   8E82         MOV       DPL,R6
   \   00011D   8F83         MOV       DPH,R7
   \   00011F   A3           INC       DPTR
   \   000120   A3           INC       DPTR
   \   000121   A3           INC       DPTR
   \   000122   A3           INC       DPTR
   \   000123   A3           INC       DPTR
   \   000124   A3           INC       DPTR
   \   000125   A3           INC       DPTR
   \   000126   E0           MOVX      A,@DPTR
   \   000127   FC           MOV       R4,A
   \   000128   85..82       MOV       DPL,?V0
   \   00012B   85..83       MOV       DPH,?V1
   \   00012E   12....       LCALL     ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000131   12....       LCALL     ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   000134   12....       LCALL     `??zclFindNextCmdRec::?relay`; Banked call to: zclFindNextCmdRec
   \   000137   7404         MOV       A,#0x4
   \   000139   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013C   E9           MOV       A,R1
   \   00013D   6008         JZ        ??zclProcessInDiscCmd_6
   5093            {
   5094              cmdRsp.discComplete = FALSE;
   \   00013F   7403         MOV       A,#0x3
   \   000141   12....       LCALL     ?XSTACK_DISP0_8
   \   000144   E4           CLR       A
   \   000145   8007         SJMP      ??zclProcessInDiscCmd_7
   5095            }
   5096            else
   5097            {
   5098              cmdRsp.discComplete = TRUE;
   \                     ??zclProcessInDiscCmd_6:
   \   000147   7403         MOV       A,#0x3
   \   000149   12....       LCALL     ?XSTACK_DISP0_8
   \   00014C   7401         MOV       A,#0x1
   5099            }
   \                     ??zclProcessInDiscCmd_7:
   \   00014E   12....       LCALL     ?Subroutine45 & 0xFFFF
   5100          
   5101            // pass the command requested
   5102            cmdRsp.cmdType = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_62:
   \   000151   A3           INC       DPTR
   \   000152   A3           INC       DPTR
   \   000153   A3           INC       DPTR
   \   000154   A3           INC       DPTR
   \   000155   E0           MOVX      A,@DPTR
   \   000156   C0E0         PUSH      A
   \   000158   7404         MOV       A,#0x4
   \   00015A   12....       LCALL     ?XSTACK_DISP0_8
   \   00015D   D0E0         POP       A
   \   00015F   F0           MOVX      @DPTR,A
   5103          
   5104            // store number of commands returned
   5105            cmdRsp.numCmd = j;
   \   000160   7405         MOV       A,#0x5
   \   000162   12....       LCALL     ?XSTACK_DISP0_8
   \   000165   E5..         MOV       A,?V6
   \   000167   12....       LCALL     ??Subroutine246_0 & 0xFFFF
   5106          
   5107            status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   5108                                                pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
   5109                                                true, pInMsg->hdr.transSeqNum );
   \                     ??CrossCallReturnLabel_683:
   \   00016A   F5..         MOV       ?V0,A
   \   00016C   A3           INC       DPTR
   \   00016D   E0           MOVX      A,@DPTR
   \   00016E   F5..         MOV       ?V1,A
   \   000170                ; Setup parameters for call to function zcl_SendDiscoverCmdsRspCmd
   \   000170   8E82         MOV       DPL,R6
   \   000172   8F83         MOV       DPH,R7
   \   000174   A3           INC       DPTR
   \   000175   A3           INC       DPTR
   \   000176   A3           INC       DPTR
   \   000177   A3           INC       DPTR
   \   000178   A3           INC       DPTR
   \   000179   A3           INC       DPTR
   \   00017A   12....       LCALL     ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00017D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000180   75..01       MOV       ?V2,#0x1
   \   000183   78..         MOV       R0,#?V2
   \   000185   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000188   8E82         MOV       DPL,R6
   \   00018A   8F83         MOV       DPH,R7
   \   00018C   A3           INC       DPTR
   \   00018D   A3           INC       DPTR
   \   00018E   12....       LCALL     ??Subroutine236_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_619:
   \   000191   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000194   7406         MOV       A,#0x6
   \   000196   12....       LCALL     ?XSTACK_DISP100_8
   \   000199   88..         MOV       ?V2,R0
   \   00019B   89..         MOV       ?V3,R1
   \   00019D   78..         MOV       R0,#?V2
   \   00019F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A2   85..82       MOV       DPL,?V0
   \   0001A5   85..83       MOV       DPH,?V1
   \   0001A8   12....       LCALL     ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   0001AB   12....       LCALL     ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   0001AE   12....       LCALL     `??zcl_SendDiscoverCmdsRspCmd::?relay`; Banked call to: zcl_SendDiscoverCmdsRspCmd
   \   0001B1   7405         MOV       A,#0x5
   \   0001B3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B6   E9           MOV       A,R1
   \   0001B7   FE           MOV       R6,A
   5110          
   5111            zcl_mem_free( cmdRsp.pCmdID );
   \   0001B8                ; Setup parameters for call to function osal_mem_free
   \   0001B8   7406         MOV       A,#0x6
   \   0001BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL     ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   0001C0   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   5112          
   5113            if ( status == ZSuccess )
   \   0001C3   EE           MOV       A,R6
   \   0001C4   7004         JNZ       ??zclProcessInDiscCmd_3
   5114            {
   5115              return TRUE;
   \   0001C6   7901         MOV       R1,#0x1
   \   0001C8   8002         SJMP      ??zclProcessInDiscCmd_8
   5116            }
   5117            else
   5118            {
   5119              return FALSE;
   \                     ??zclProcessInDiscCmd_3:
   \   0001CA   7900         MOV       R1,#0x0
   5120            }
   \                     ??zclProcessInDiscCmd_8:
   \   0001CC   02....       LJMP      ?Subroutine6 & 0xFFFF
   5121          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   F5..         MOV       ?V2,A
   \   000007   A3           INC       DPTR
   \   000008   E0           MOVX      A,@DPTR
   \   000009   F5..         MOV       ?V3,A
   \   00000B                ; Setup parameters for call to function zclFindNextCmdRec
   \   00000B                ; Setup parameters for call to function zclFindNextCmdRec
   \   00000B   7408         MOV       A,#0x8
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL     ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zcl_radius>`:
   \   000000   1E           DB 30

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerForMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerForMsgExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerForMsgExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_addExternalFoundationHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_addExternalFoundationHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getExternalFoundationHandler::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getExternalFoundationHandler

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_HandleExternal::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_HandleExternal

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getRawAFMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getRawAFMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_getParsedTransSeqNum::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_getParsedTransSeqNum

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerPlugin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerPlugin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerCmdList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerCmdList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerAttrList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerAttrList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerClusterOptionList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerClusterOptionList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerValidateAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerValidateAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_registerReadWriteCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_registerReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_DeviceOperational::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_DeviceOperational

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendReadRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendReadRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendWriteRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendWriteRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendWriteRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDefaultRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverCmdsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverCmdsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverCmdsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverCmdsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_SendDiscoverAttrsExtRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_SendDiscoverAttrsExtRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_ProcessMessageMSG::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_ProcessMessageMSG

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseHdr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclBuildHdr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclBuildHdr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindCmdRecsList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindCmdRecsList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindCmdRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindCmdRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindAttrRecsList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRecsList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindAttrRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetReadWriteCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetReadWriteCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAuthorizeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAuthorizeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindClusterOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetClusterOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetClusterOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSetSecurityOption::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSetSecurityOption

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindNextCmdRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindNextCmdRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclFindNextAttrRec::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFindNextAttrRec

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSerializeData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSerializeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetDataTypeLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetDataTypeLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAttrDataLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclReadAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zcl_ReadAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zcl_ReadAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGetAttrDataLengthUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGetAttrDataLengthUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclReadAttrDataUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclReadAttrDataUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclWriteAttrData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclWriteAttrDataUsingCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclWriteAttrDataUsingCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclAuthorizeWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclAuthorizeWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInReadCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInReadRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInWriteCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInWriteRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInWriteRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDefaultRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDefaultRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscAttrsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscAttrsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscAttrsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscAttrsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscCmdsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscCmdsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscCmdsRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscCmdsRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclParseInDiscAttrsExtRspCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclParseInDiscAttrsExtRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInReadCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInReadCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInWriteCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclRevertWriteUndividedCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclRevertWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInWriteUndividedCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInWriteUndividedCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscAttrs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscAttrs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscAttrsCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscAttrsCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscAttrsExtCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscAttrsExtCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclProcessInDiscCmd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclProcessInDiscCmd

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Arrived 1198!\\n">`:
   \   000000   41727269     DB "Arrived 1198!\012"
   \            76656420
   \            31313938
   \            210A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Arrive 3757!\\n">`:
   \   000000   41727269     DB "Arrive 3757!\012"
   \            76652033
   \            37353721
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Arrive 4395!\\n">`:
   \   000000   41727269     DB "Arrive 4395!\012"
   \            76652034
   \            33393521
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Arrive 4537!\\n">`:
   \   000000   41727269     DB "Arrive 4537!\012"
   \            76652034
   \            35333721
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50
   5122          
   5123          #endif // ZCL_DISCOVER
   5124          
   5125          
   5126          /*********************************************************************
   5127          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     29   zclAuthorizeWrite
        0     14   -> zclGetAuthorizeCB
      1     36   zclBuildHdr
      2     52   zclFindAttrRec
        0     14   -> zclFindAttrRecsList
      2     16   zclFindAttrRecsList
      0     19   zclFindClusterOption
      2     14   zclFindCmdRec
        0     12   -> zclFindCmdRecsList
      2     14   zclFindCmdRecsList
      0     49   zclFindNextAttrRec
        0     16   -> zclFindAttrRecsList
      1     45   zclFindNextCmdRec
        0     14   -> zclFindCmdRecsList
      0     45   zclGetAttrDataLength
        0      9   -> zclGetDataTypeLength
      0     58   zclGetAttrDataLengthUsingCB
        0     18   -> zclGetReadWriteCB
      0     40   zclGetAuthorizeCB
        0     10   -> zclFindAttrRecsList
      0     47   zclGetClusterOption
        0     10   -> zclFindClusterOption
      0      9   zclGetDataTypeLength
      0     28   zclGetReadWriteCB
        0     10   -> zclFindAttrRecsList
      1     49   zclParseHdr
        0     12   -> osal_memset
      1     10   zclParseInDefaultRspCmd
        0     10   -> osal_mem_alloc
      1     10   zclParseInDiscAttrsCmd
        0     10   -> osal_mem_alloc
      1     14   zclParseInDiscAttrsExtRspCmd
        0     14   -> osal_mem_alloc
      1     14   zclParseInDiscAttrsRspCmd
        0     14   -> osal_mem_alloc
      1     10   zclParseInDiscCmdsCmd
        0     10   -> osal_mem_alloc
      1     14   zclParseInDiscCmdsRspCmd
        0     14   -> osal_mem_alloc
        0     14   -> printf
      1     12   zclParseInReadCmd
        0     12   -> osal_mem_alloc
      1     25   zclParseInReadRspCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> zclGetAttrDataLength
      1     25   zclParseInWriteCmd
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     22   -> printf
        0     22   -> zclGetAttrDataLength
      1     16   zclParseInWriteRspCmd
        0     16   -> osal_mem_alloc
      0     30   zclProcessInDiscAttrs
        0     30   -> zclFindNextAttrRec
        0     26   -> zclProcessInDiscAttrsCmd
        0     26   -> zclProcessInDiscAttrsExtCmd
      1     60   zclProcessInDiscAttrsCmd
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     33   -> zclFindNextAttrRec
        0     34   -> zcl_SendDiscoverAttrsRspCmd
      1     60   zclProcessInDiscAttrsExtCmd
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     33   -> zclFindNextAttrRec
        0     34   -> zcl_SendDiscoverAttrsExtRsp
      1     32   zclProcessInDiscCmd
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     31   -> zclFindNextCmdRec
        0     32   -> zcl_SendDiscoverCmdsRspCmd
      1     35   zclProcessInReadCmd
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     32   -> zclFindAttrRec
        0     30   -> zclGetAuthorizeCB
        0     35   -> zcl_SendReadRsp
      1     37   zclProcessInWriteCmd
        0     32   -> bdb_ZclIdentifyCmdInd
        0     32   -> osal_mem_alloc
        0     32   -> osal_mem_free
        0     35   -> osal_memcpy
        0     32   -> printf
        0     34   -> zclFindAttrRec
        0     34   -> zclWriteAttrData
        0     34   -> zclWriteAttrDataUsingCB
        0     37   -> zcl_SendWriteRsp
      1     41   zclProcessInWriteUndividedCmd
        0     36   -> osal_mem_alloc
        0     36   -> osal_mem_free
        0     38   -> zclFindAttrRec
        0     36   -> zclGetAttrDataLength
        0     36   -> zclGetAttrDataLengthUsingCB
        0     38   -> zclReadAttrData
        0     40   -> zclReadAttrDataUsingCB
        0     38   -> zclRevertWriteUndividedCmd
        0     38   -> zclWriteAttrData
        0     38   -> zclWriteAttrDataUsingCB
        0     41   -> zcl_SendWriteRsp
      0     55   zclReadAttrData
        0     17   -> osal_memcpy
        0     14   -> zclGetAttrDataLength
      0     60   zclReadAttrDataUsingCB
        0     16   -> zclGetReadWriteCB
      0     68   zclRevertWriteUndividedCmd
        0     30   -> osal_memcpy
        0     29   -> zclFindAttrRec
        0     27   -> zclGetAttrDataLength
        0     29   -> zclWriteAttrDataUsingCB
      1     41   zclSerializeData
        0     19   -> osal_buffer_uint32
        0     18   -> osal_memcpy
      0     47   zclSetSecurityOption
        0     10   -> zclFindClusterOption
      0     56   zclWriteAttrData
        0     18   -> osal_memcpy
        0     15   -> zclAuthorizeWrite
        0     15   -> zclGetAttrDataLength
      0     56   zclWriteAttrDataUsingCB
        0     14   -> zclAuthorizeWrite
        0     14   -> zclGetReadWriteCB
      0     62   zcl_DeviceOperational
        0     23   -> zclFindAttrRec
        0     23   -> zclReadAttrData
      1     12   zcl_HandleExternal
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
        0     12   -> zcl_getExternalFoundationHandler
      2      0   zcl_Init
      1    136   zcl_ProcessMessageMSG
        0     37   -> afFindEndPointDesc
        0     37   -> osal_mem_free
        0     37   -> zclGetClusterOption
        0     37   -> zclParseHdr
        0     37   -> zclSetSecurityOption
        0     39   -> zcl_DeviceOperational
        0     44   -> zcl_SendDefaultRspCmd
      0     30   zcl_ReadAttrData
        0     24   -> zclFindAttrRec
        0     24   -> zclReadAttrData
        0     26   -> zclReadAttrDataUsingCB
      1    139   zcl_SendCommand
        0     36   -> AF_DataRequest
        0     27   -> afFindEndPointDesc
        0     27   -> osal_mem_alloc
        0     27   -> osal_mem_free
        0     30   -> osal_memcpy
        0     27   -> osal_memset
        0     27   -> printf
        0     27   -> zclBuildHdr
        0     27   -> zclGetClusterOption
        0     29   -> zcl_DeviceOperational
      1     67   zcl_SendDefaultRspCmd
        0     23   -> zcl_SendCommand
      1     32   zcl_SendDiscoverAttrsCmd
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     27   -> zcl_SendCommand
      1     29   zcl_SendDiscoverAttrsExt
        0     24   -> zcl_SendCommand
      1     66   zcl_SendDiscoverAttrsExtRsp
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     66   zcl_SendDiscoverAttrsRspCmd
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     32   -> zcl_SendCommand
      1     33   zcl_SendDiscoverCmdsCmd
        0     27   -> zcl_SendCommand
      1     63   zcl_SendDiscoverCmdsRspCmd
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
        0     31   -> zcl_SendCommand
      1     35   zcl_SendRead
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     30   -> zcl_SendCommand
      1     68   zcl_SendReadRsp
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> zclGetAttrDataLength
        0     22   -> zclGetAttrDataLengthUsingCB
        0     26   -> zclReadAttrDataUsingCB
        0     22   -> zclSerializeData
        0     33   -> zcl_SendCommand
      1     38   zcl_SendWriteRequest
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     21   -> zclGetAttrDataLength
        0     21   -> zclSerializeData
        0     32   -> zcl_SendCommand
      1     71   zcl_SendWriteRsp
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     30   -> zcl_SendCommand
      1     19   zcl_addExternalFoundationHandler
        0     10   -> osal_mem_alloc
        0     10   -> osal_mem_free
      0    103   zcl_event_loop
        0     92   -> bdb_getZCLFrameCounter
        0     92   -> gp_GetHeadNotificationMsg
        0     92   -> gp_GetPHeadNotification
        0     92   -> gp_NotificationMsgClean
        0     94   -> gp_getProxyTableByGpId
        0     95   -> osal_memcpy
        0     92   -> osal_msg_deallocate
        0     92   -> osal_msg_receive
        0     92   -> osal_msg_send
        0     95   -> osal_revmemcpy
        0     96   -> osal_start_timerEx
        0     92   -> zcl_ProcessMessageMSG
        0    103   -> zcl_SendCommand
        0     92   -> zcl_getExternalFoundationHandler
      2     92   zcl_getExternalFoundationHandler
      2      0   zcl_getParsedTransSeqNum
      2      0   zcl_getRawAFMsg
      1     12   zcl_registerAttrList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerClusterOptionList
        0     12   -> osal_mem_alloc
      1     12   zcl_registerCmdList
        0     12   -> osal_mem_alloc
      0      9   zcl_registerForMsg
        0      9   -> zcl_addExternalFoundationHandler
      0      9   zcl_registerForMsgExt
        0      9   -> zcl_addExternalFoundationHandler
      0     14   zcl_registerPlugin
        0     12   -> osal_mem_alloc
      0     14   zcl_registerReadWriteCB
        0     14   -> zclFindAttrRecsList
      2      0   zcl_registerValidateAttrData


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  ?<Constant "Arrive 3757!\n">
      14  ?<Constant "Arrive 4395!\n">
      14  ?<Constant "Arrive 4537!\n">
      15  ?<Constant "Arrived 1198!\n">
       1  ?<Initializer for zcl_radius>
       5  ??Subroutine188_0
       6  ??Subroutine189_0
       6  ??Subroutine190_0
       6  ??Subroutine191_0
       5  ??Subroutine192_0
       2  ??Subroutine193_0
       3  ??Subroutine194_0
       5  ??Subroutine195_0
       8  ??Subroutine196_0
       7  ??Subroutine197_0
       5  ??Subroutine198_0
       5  ??Subroutine199_0
      10  ??Subroutine200_0
       6  ??Subroutine201_0
       6  ??Subroutine202_0
       9  ??Subroutine203_0
       6  ??Subroutine204_0
       5  ??Subroutine205_0
       1  ??Subroutine206_0
       2  ??Subroutine207_0
       1  ??Subroutine208_0
       4  ??Subroutine209_0
       6  ??Subroutine210_0
       2  ??Subroutine211_0
       6  ??Subroutine212_0
       5  ??Subroutine213_0
       4  ??Subroutine214_0
       9  ??Subroutine215_0
       1  ??Subroutine216_0
       5  ??Subroutine217_0
       4  ??Subroutine218_0
       6  ??Subroutine219_0
       6  ??Subroutine220_0
       2  ??Subroutine221_0
       4  ??Subroutine222_0
       6  ??Subroutine223_0
      12  ??Subroutine224_0
       4  ??Subroutine225_0
       5  ??Subroutine226_0
       5  ??Subroutine227_0
       8  ??Subroutine228_0
       4  ??Subroutine229_0
       6  ??Subroutine230_0
       8  ??Subroutine231_0
      10  ??Subroutine232_0
       4  ??Subroutine233_0
       4  ??Subroutine234_0
       4  ??Subroutine235_0
       8  ??Subroutine236_0
      21  ??Subroutine237_0
       1  ??Subroutine238_0
      21  ??Subroutine239_0
       6  ??Subroutine240_0
       3  ??Subroutine241_0
       5  ??Subroutine242_0
       5  ??Subroutine243_0
       5  ??Subroutine244_0
       7  ??Subroutine245_0
       5  ??Subroutine246_0
       7  ?Subroutine0
       8  ?Subroutine1
      39  ?Subroutine10
       6  ?Subroutine100
       6  ?Subroutine101
       8  ?Subroutine102
       6  ?Subroutine103
       7  ?Subroutine104
      12  ?Subroutine105
       4  ?Subroutine106
       4  ?Subroutine107
      14  ?Subroutine108
       6  ?Subroutine109
      12  ?Subroutine11
       8  ?Subroutine110
      11  ?Subroutine111
       4  ?Subroutine112
      11  ?Subroutine113
       8  ?Subroutine114
       4  ?Subroutine115
       4  ?Subroutine116
       3  ?Subroutine117
      14  ?Subroutine118
       8  ?Subroutine119
      38  ?Subroutine12
       2  ?Subroutine120
      14  ?Subroutine121
       4  ?Subroutine122
       4  ?Subroutine123
       2  ?Subroutine124
       5  ?Subroutine125
      16  ?Subroutine126
      10  ?Subroutine127
       8  ?Subroutine128
       4  ?Subroutine129
      25  ?Subroutine13
      14  ?Subroutine130
      12  ?Subroutine131
       6  ?Subroutine132
      12  ?Subroutine133
       9  ?Subroutine134
       7  ?Subroutine135
       4  ?Subroutine136
       9  ?Subroutine137
       9  ?Subroutine138
      22  ?Subroutine139
       4  ?Subroutine14
      21  ?Subroutine140
       9  ?Subroutine141
       2  ?Subroutine142
      10  ?Subroutine143
      11  ?Subroutine144
      20  ?Subroutine145
       5  ?Subroutine146
       2  ?Subroutine147
       9  ?Subroutine148
       6  ?Subroutine149
      10  ?Subroutine15
       9  ?Subroutine150
       5  ?Subroutine151
       6  ?Subroutine152
       9  ?Subroutine153
      22  ?Subroutine154
      12  ?Subroutine155
       6  ?Subroutine156
      10  ?Subroutine157
      10  ?Subroutine158
       9  ?Subroutine159
      15  ?Subroutine16
       4  ?Subroutine160
       9  ?Subroutine161
       6  ?Subroutine162
      13  ?Subroutine163
       8  ?Subroutine164
      12  ?Subroutine165
       4  ?Subroutine166
      18  ?Subroutine167
       6  ?Subroutine168
       4  ?Subroutine169
       4  ?Subroutine17
       8  ?Subroutine170
       7  ?Subroutine171
      16  ?Subroutine172
       7  ?Subroutine173
       7  ?Subroutine174
       4  ?Subroutine175
       6  ?Subroutine176
       5  ?Subroutine177
       9  ?Subroutine178
       6  ?Subroutine179
      17  ?Subroutine18
      14  ?Subroutine180
       6  ?Subroutine181
       6  ?Subroutine182
       9  ?Subroutine183
       6  ?Subroutine184
       4  ?Subroutine185
       7  ?Subroutine186
       9  ?Subroutine187
      20  ?Subroutine19
       3  ?Subroutine2
      11  ?Subroutine20
       3  ?Subroutine21
      19  ?Subroutine22
      10  ?Subroutine23
       6  ?Subroutine24
      11  ?Subroutine25
       6  ?Subroutine26
       8  ?Subroutine27
       7  ?Subroutine28
      12  ?Subroutine29
       3  ?Subroutine3
      13  ?Subroutine30
       6  ?Subroutine31
       3  ?Subroutine32
       6  ?Subroutine33
       8  ?Subroutine34
       8  ?Subroutine35
       1  ?Subroutine36
       7  ?Subroutine37
      11  ?Subroutine38
       7  ?Subroutine39
       5  ?Subroutine4
       4  ?Subroutine40
       8  ?Subroutine41
       2  ?Subroutine42
       1  ?Subroutine43
      20  ?Subroutine44
       6  ?Subroutine45
       4  ?Subroutine46
       7  ?Subroutine47
       4  ?Subroutine48
      22  ?Subroutine49
       3  ?Subroutine5
       3  ?Subroutine50
      24  ?Subroutine51
       5  ?Subroutine52
       6  ?Subroutine53
       6  ?Subroutine54
      25  ?Subroutine55
       3  ?Subroutine56
       7  ?Subroutine57
       6  ?Subroutine58
      12  ?Subroutine59
       2  ?Subroutine6
       8  ?Subroutine60
       4  ?Subroutine61
      18  ?Subroutine62
      16  ?Subroutine63
       9  ?Subroutine64
       6  ?Subroutine65
       4  ?Subroutine66
      13  ?Subroutine67
      18  ?Subroutine68
       3  ?Subroutine69
       7  ?Subroutine7
       6  ?Subroutine70
       6  ?Subroutine71
       4  ?Subroutine72
      12  ?Subroutine73
       4  ?Subroutine74
       9  ?Subroutine75
       4  ?Subroutine76
       6  ?Subroutine77
       4  ?Subroutine78
      10  ?Subroutine79
       5  ?Subroutine8
       6  ?Subroutine80
       6  ?Subroutine81
       6  ?Subroutine82
       1  ?Subroutine83
       8  ?Subroutine84
       9  ?Subroutine85
       4  ?Subroutine86
      10  ?Subroutine87
      14  ?Subroutine88
       6  ?Subroutine89
      23  ?Subroutine9
       7  ?Subroutine90
       7  ?Subroutine91
       6  ?Subroutine92
       6  ?Subroutine93
       4  ?Subroutine94
      10  ?Subroutine95
       1  ?Subroutine96
       6  ?Subroutine97
      10  ?Subroutine98
      10  ?Subroutine99
       4  __Constant_32
       2  attrList
       2  clusterOptionList
       2  externalEndPointHandlerList
       2  gpCmdList
       2  plugins
       2  rawAFMsg
       1  savedZCLTransSeqNum
      60  zclAuthorizeWrite
       6  zclAuthorizeWrite::?relay
      98  zclBuildHdr
       6  zclBuildHdr::?relay
      92  zclCmdTable
     131  zclFindAttrRec
       6  zclFindAttrRec::?relay
      37  zclFindAttrRecsList
       6  zclFindAttrRecsList::?relay
     102  zclFindClusterOption
       6  zclFindClusterOption::?relay
     120  zclFindCmdRec
       6  zclFindCmdRec::?relay
      37  zclFindCmdRecsList
       6  zclFindCmdRecsList::?relay
     213  zclFindNextAttrRec
       6  zclFindNextAttrRec::?relay
     269  zclFindNextCmdRec
       6  zclFindNextCmdRec::?relay
      63  zclGetAttrDataLength
       6  zclGetAttrDataLength::?relay
     101  zclGetAttrDataLengthUsingCB
       6  zclGetAttrDataLengthUsingCB::?relay
      30  zclGetAuthorizeCB
       6  zclGetAuthorizeCB::?relay
      28  zclGetClusterOption
       6  zclGetClusterOption::?relay
     166  zclGetDataTypeLength
       6  zclGetDataTypeLength::?relay
      30  zclGetReadWriteCB
       6  zclGetReadWriteCB::?relay
     218  zclParseHdr
       6  zclParseHdr::?relay
      21  zclParseInDefaultRspCmd
       6  zclParseInDefaultRspCmd::?relay
      48  zclParseInDiscAttrsCmd
       6  zclParseInDiscAttrsCmd::?relay
     129  zclParseInDiscAttrsExtRspCmd
       6  zclParseInDiscAttrsExtRspCmd::?relay
      93  zclParseInDiscAttrsRspCmd
       6  zclParseInDiscAttrsRspCmd::?relay
      21  zclParseInDiscCmdsCmd
       6  zclParseInDiscCmdsCmd::?relay
     105  zclParseInDiscCmdsRspCmd
       6  zclParseInDiscCmdsRspCmd::?relay
     105  zclParseInReadCmd
       6  zclParseInReadCmd::?relay
     326  zclParseInReadRspCmd
       6  zclParseInReadRspCmd::?relay
     278  zclParseInWriteCmd
       6  zclParseInWriteCmd::?relay
     154  zclParseInWriteRspCmd
       6  zclParseInWriteRspCmd::?relay
     175  zclProcessInDiscAttrs
       6  zclProcessInDiscAttrs::?relay
     258  zclProcessInDiscAttrsCmd
       6  zclProcessInDiscAttrsCmd::?relay
     301  zclProcessInDiscAttrsExtCmd
       6  zclProcessInDiscAttrsExtCmd::?relay
     463  zclProcessInDiscCmd
       6  zclProcessInDiscCmd::?relay
     481  zclProcessInReadCmd
       6  zclProcessInReadCmd::?relay
     560  zclProcessInWriteCmd
       6  zclProcessInWriteCmd::?relay
     898  zclProcessInWriteUndividedCmd
       6  zclProcessInWriteUndividedCmd::?relay
      92  zclReadAttrData
       6  zclReadAttrData::?relay
      93  zclReadAttrDataUsingCB
       6  zclReadAttrDataUsingCB::?relay
     241  zclRevertWriteUndividedCmd
       6  zclRevertWriteUndividedCmd::?relay
     382  zclSerializeData
       6  zclSerializeData::?relay
      45  zclSetSecurityOption
       6  zclSetSecurityOption::?relay
     142  zclWriteAttrData
       6  zclWriteAttrData::?relay
     107  zclWriteAttrDataUsingCB
       6  zclWriteAttrDataUsingCB::?relay
     126  zcl_DeviceOperational
       6  zcl_DeviceOperational::?relay
     183  zcl_HandleExternal
       6  zcl_HandleExternal::?relay
       1  zcl_InSeqNum
      12  zcl_Init
       6  zcl_Init::?relay
    1068  zcl_ProcessMessageMSG
       6  zcl_ProcessMessageMSG::?relay
     131  zcl_ReadAttrData
       6  zcl_ReadAttrData::?relay
     502  zcl_SendCommand
       6  zcl_SendCommand::?relay
     118  zcl_SendDefaultRspCmd
       6  zcl_SendDefaultRspCmd::?relay
     178  zcl_SendDiscoverAttrsCmd
       6  zcl_SendDiscoverAttrsCmd::?relay
     130  zcl_SendDiscoverAttrsExt
       6  zcl_SendDiscoverAttrsExt::?relay
     285  zcl_SendDiscoverAttrsExtRsp
       6  zcl_SendDiscoverAttrsExtRsp::?relay
     247  zcl_SendDiscoverAttrsRspCmd
       6  zcl_SendDiscoverAttrsRspCmd::?relay
     225  zcl_SendDiscoverCmdsCmd
       6  zcl_SendDiscoverCmdsCmd::?relay
     325  zcl_SendDiscoverCmdsRspCmd
       6  zcl_SendDiscoverCmdsRspCmd::?relay
     240  zcl_SendRead
       6  zcl_SendRead::?relay
     466  zcl_SendReadRsp
       6  zcl_SendReadRsp::?relay
     292  zcl_SendWriteRequest
       6  zcl_SendWriteRequest::?relay
     268  zcl_SendWriteRsp
       6  zcl_SendWriteRsp::?relay
       1  zcl_TaskID
       2  zcl_ValidateAttrDataCB
     140  zcl_addExternalFoundationHandler
       6  zcl_addExternalFoundationHandler::?relay
     588  zcl_event_loop
       6  zcl_event_loop::?relay
      60  zcl_getExternalFoundationHandler
       6  zcl_getExternalFoundationHandler::?relay
       9  zcl_getParsedTransSeqNum
       6  zcl_getParsedTransSeqNum::?relay
      12  zcl_getRawAFMsg
       6  zcl_getRawAFMsg::?relay
       1  zcl_radius
      86  zcl_registerAttrList
       6  zcl_registerAttrList::?relay
      70  zcl_registerClusterOptionList
       6  zcl_registerClusterOptionList::?relay
      73  zcl_registerCmdList
       6  zcl_registerCmdList::?relay
      10  zcl_registerForMsg
       6  zcl_registerForMsg::?relay
       8  zcl_registerForMsgExt
       6  zcl_registerForMsgExt::?relay
     101  zcl_registerPlugin
       6  zcl_registerPlugin::?relay
      48  zcl_registerReadWriteCB
       6  zcl_registerReadWriteCB::?relay
      15  zcl_registerValidateAttrData
       6  zcl_registerValidateAttrData::?relay

 
 15 200 bytes in segment BANKED_CODE
    420 bytes in segment BANK_RELAYS
     92 bytes in segment CODE_C
      1 byte  in segment XDATA_I
      1 byte  in segment XDATA_ID
     61 bytes in segment XDATA_ROM_C
     17 bytes in segment XDATA_Z
 
    513 bytes of CODE     memory
     57 bytes of CONST    memory (+ 4 bytes shared)
 15 200 bytes of HUGECODE memory
     18 bytes of XDATA    memory

Errors: none
Warnings: none
