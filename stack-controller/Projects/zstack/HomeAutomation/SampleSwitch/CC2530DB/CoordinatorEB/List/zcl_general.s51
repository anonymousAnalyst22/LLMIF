///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.10.1.4655 for 8051              22/Nov/2023  15:42:45
// Copyright 2004-2017 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\fuzzing-coordinator-response-collection\Components\stack\zcl\zcl_general.c
//    Command line       =  
//        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWADDD.tmp
//        (D:\fuzzing-coordinator-response-collection\Components\stack\zcl\zcl_general.c
//        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
//        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
//        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
//        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
//        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        -lA
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
//        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
//        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
//        -DENABLE_LED4_DISABLE_S1) -f
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
//        -I
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
//        -Ohz --require_prototypes)
//    Locale             =  Chinese (Simplified)_China.936
//    List file          =  
//        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl_general.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_general

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V1
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclClosures_HdlInSpecificCommands::?relay`,0203H
        FUNCTION `??zclClosures_HdlIncoming::?relay`,0203H
        PUBLIC `??zclClosures_RegisterDoorLockCmdCallbacks::?re`
        FUNCTION `??zclClosures_RegisterDoorLockCmdCallbacks::?re`,0203H
        FUNCTION `??zclGeneral_HdlInSpecificCommands::?relay`,0203H
        FUNCTION `??zclGeneral_HdlIncoming::?relay`,0203H
        FUNCTION `??zclGeneral_ProcessInGroupsClient::?relay`,0203H
        FUNCTION `??zclGeneral_ProcessInScenesClient::?relay`,0203H
        PUBLIC `??zclGeneral_RegisterCmdCallbacks::?relay`
        FUNCTION `??zclGeneral_RegisterCmdCallbacks::?relay`,0203H
        PUBLIC `??zclGeneral_SendIdentify::?relay`
        FUNCTION `??zclGeneral_SendIdentify::?relay`,0203H
        PUBLIC `??zclGeneral_SendIdentifyEZModeInvoke::?relay`
        FUNCTION `??zclGeneral_SendIdentifyEZModeInvoke::?relay`,0203H
        PUBLIC `??zclGeneral_SendIdentifyQueryResponse::?relay`
        FUNCTION `??zclGeneral_SendIdentifyQueryResponse::?relay`,0203H
        PUBLIC `??zclGeneral_SendIdentifyUpdateCommState::?rela`
        FUNCTION `??zclGeneral_SendIdentifyUpdateCommState::?rela`,0203H
        FUNCTION zclClosures_HdlInSpecificCommands,080203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        FUNCTION zclClosures_HdlIncoming,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclClosures_RegisterDoorLockCmdCallbacks
        FUNCTION zclClosures_RegisterDoorLockCmdCallbacks,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zclGeneral_HdlInSpecificCommands,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zclGeneral_HdlIncoming,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclGeneral_ProcessInGroupsClient,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 51, STACK
        FUNCTION zclGeneral_ProcessInScenesClient,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 89, STACK
        PUBLIC zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclGeneral_SendIdentify
        FUNCTION zclGeneral_SendIdentify,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC zclGeneral_SendIdentifyEZModeInvoke
        FUNCTION zclGeneral_SendIdentifyEZModeInvoke,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC zclGeneral_SendIdentifyQueryResponse
        FUNCTION zclGeneral_SendIdentifyQueryResponse,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC zclGeneral_SendIdentifyUpdateCommState
        FUNCTION zclGeneral_SendIdentifyUpdateCommState,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_registerPlugin  SYMBOL "zcl_registerPlugin"
`??zcl_registerPlugin::?relay` SYMBOL "?relay", zcl_registerPlugin
zclClosures_RegisterDoorLockCmdCallbacks SYMBOL "zclClosures_RegisterDoorLockCmdCallbacks"
`??zclClosures_RegisterDoorLockCmdCallbacks::?re` SYMBOL "?relay", zclClosures_RegisterDoorLockCmdCallbacks
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
`??zclGeneral_RegisterCmdCallbacks::?relay` SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclGeneral_SendIdentify SYMBOL "zclGeneral_SendIdentify"
`??zclGeneral_SendIdentify::?relay` SYMBOL "?relay", zclGeneral_SendIdentify
zclGeneral_SendIdentifyEZModeInvoke SYMBOL "zclGeneral_SendIdentifyEZModeInvoke"
`??zclGeneral_SendIdentifyEZModeInvoke::?relay` SYMBOL "?relay", zclGeneral_SendIdentifyEZModeInvoke
zclGeneral_SendIdentifyQueryResponse SYMBOL "zclGeneral_SendIdentifyQueryResponse"
`??zclGeneral_SendIdentifyQueryResponse::?relay` SYMBOL "?relay", zclGeneral_SendIdentifyQueryResponse
zclGeneral_SendIdentifyUpdateCommState SYMBOL "zclGeneral_SendIdentifyUpdateCommState"
`??zclGeneral_SendIdentifyUpdateCommState::?rela` SYMBOL "?relay", zclGeneral_SendIdentifyUpdateCommState

        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,00H
        EXTERN `??zcl_registerPlugin::?relay`
        FUNCTION `??zcl_registerPlugin::?relay`,00H
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerPlugin
        FUNCTION zcl_registerPlugin,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\fuzzing-coordinator-response-collection\Components\stack\zcl\zcl_general.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_general.c
//    3   Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
//    4   Revision:       $Revision: 44493 $
//    5 
//    6   Description:    Zigbee Cluster Library - General.  This application receives all
//    7                   ZCL messages and initially parses them before passing to application.
//    8 
//    9 
//   10   Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License"). You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product. Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42  * INCLUDES
//   43  */
//   44 #include "ZComDef.h"
//   45 #include "zcl.h"
//   46 #include "zcl_general.h"
//   47 #include "zcl_closures.h"
//   48 //#include "ZDApp.h"
//   49 
//   50 #include <stdio.h>
//   51 
//   52 #if defined ( INTER_PAN )
//   53   #include "stub_aps.h"
//   54 #endif
//   55 #include "bdb.h"
//   56 
//   57 /*********************************************************************
//   58  * MACROS
//   59  */
//   60 #define locationTypeAbsolute( a )          ( (a) & LOCATION_TYPE_ABSOLUTE )
//   61 #define locationType2D( a )                ( (a) & LOCATION_TYPE_2_D )
//   62 #define locationTypeCoordinateSystem( a )  ( (a) & LOCATION_TYPE_COORDINATE_SYSTEM )
//   63 
//   64 #ifdef ZCL_SCENES
//   65 #define zclGeneral_ScenesRemaingCapacity() ( ZCL_GEN_MAX_SCENES - zclGeneral_CountAllScenes() )
//   66 #endif // ZCL_SCENES
//   67 
//   68 /*********************************************************************
//   69  * CONSTANTS
//   70  */
//   71 
//   72 /*********************************************************************
//   73  * TYPEDEFS
//   74  */
//   75 typedef struct zclGenCBRec
//   76 {
//   77   struct zclGenCBRec        *next;
//   78   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   79   zclGeneral_AppCallbacks_t *CBs;     // Pointer to Callback function
//   80 } zclGenCBRec_t;
//   81 
//   82 typedef struct zclGenSceneItem
//   83 {
//   84   struct zclGenSceneItem    *next;
//   85   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   86   zclGeneral_Scene_t        scene;    // Scene info
//   87 } zclGenSceneItem_t;
//   88 
//   89 typedef struct zclGenAlarmItem
//   90 {
//   91   struct zclGenAlarmItem    *next;
//   92   uint8                     endpoint; // Used to link it into the endpoint descriptor
//   93   zclGeneral_Alarm_t        alarm;    // Alarm info
//   94 } zclGenAlarmItem_t;
//   95 
//   96 // Scene NV types
//   97 typedef struct
//   98 {
//   99   uint16                    numRecs;
//  100 } nvGenScenesHdr_t;
//  101 
//  102 typedef struct zclGenSceneNVItem
//  103 {
//  104   uint8                     endpoint;
//  105   zclGeneral_Scene_t        scene;
//  106 } zclGenSceneNVItem_t;
//  107 
//  108 /*********************************************************************
//  109  * GLOBAL VARIABLES
//  110  */
//  111 
//  112 /*********************************************************************
//  113  * GLOBAL FUNCTIONS
//  114  */
//  115 
//  116 /*********************************************************************
//  117  * LOCAL VARIABLES
//  118  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  119 static zclGenCBRec_t *zclGenCBs = (zclGenCBRec_t *)NULL;
zclGenCBs:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  120 static uint8 zclGenPluginRegisted = FALSE;
zclGenPluginRegisted:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  121 
//  122 #if defined( ZCL_SCENES )
//  123   #if !defined ( ZCL_STANDALONE )
//  124     static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
//  125   #endif
//  126 #endif // ZCL_SCENES
//  127 
//  128 #ifdef ZCL_ALARMS
//  129 static zclGenAlarmItem_t *zclGenAlarmTable = (zclGenAlarmItem_t *)NULL;
//  130 #endif // ZCL_ALARMS
//  131 
//  132 /*********************************************************************
//  133  * LOCAL FUNCTIONS
//  134  */
//  135 static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg );
//  136 static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg );
//  137 static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint );
//  138 
//  139 // Device Configuration and Installation clusters
//  140 #ifdef ZCL_BASIC
//  141 static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  142 #endif // ZCL_BASIC
//  143 
//  144 #ifdef ZCL_IDENTIFY
//  145 static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  146 #endif // ZCL_IDENTIFY
//  147 static ZStatus_t zclGeneral_ProcessInIdentityJC( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  148 
//  149 // Groups and Scenes clusters
//  150 #ifdef ZCL_GROUPS
//  151 static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg );
//  152 static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData );
//  153 #endif // ZCL_GROUPS
//  154 static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  155 
//  156 #ifdef ZCL_SCENES
//  157 static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  158 #endif // ZCL_SCENES
//  159 static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  160 
//  161 // On/Off and Level Control Configuration clusters
//  162 #ifdef ZCL_ON_OFF
//  163 static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  164 #endif // ZCL_ONOFF
//  165 
//  166 #ifdef ZCL_LEVEL_CTRL
//  167 static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  168 #endif // ZCL_LEVEL_CTRL
//  169 
//  170 // Alarms cluster
//  171 #ifdef ZCL_ALARMS
//  172 static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  173 static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  174 #endif // ZCL_ALARMS
//  175 
//  176 // Location cluster
//  177 #ifdef ZCL_LOCATION
//  178 static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  179 static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
//  180 #endif // ZCL_LOCATION
//  181 
//  182 #ifdef ZCL_SCENES
//  183   #if !defined ( ZCL_STANDALONE )
//  184     static uint8 zclGeneral_ScenesInitNV( void );
//  185     static void zclGeneral_ScenesSetDefaultNV( void );
//  186     static void zclGeneral_ScenesWriteNV( void );
//  187     static uint16 zclGeneral_ScenesRestoreFromNV( void );
//  188   #endif
//  189 #endif // ZCL_SCENES
//  190 
//  191 /*********************************************************************
//  192  * @fn      zclGeneral_RegisterCmdCallbacks
//  193  *
//  194  * @brief   Register an applications command callbacks
//  195  *
//  196  * @param   endpoint - application's endpoint
//  197  * @param   callbacks - pointer to the callback record.
//  198  *
//  199  * @return  ZMemError if not able to allocate
//  200  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  201 ZStatus_t zclGeneral_RegisterCmdCallbacks( uint8 endpoint, zclGeneral_AppCallbacks_t *callbacks )
zclGeneral_RegisterCmdCallbacks:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
        CODE
//  202 {
        FUNCALL zclGeneral_RegisterCmdCallbacks, zcl_registerPlugin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_RegisterCmdCallbacks, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  203   zclGenCBRec_t *pNewItem;
//  204   zclGenCBRec_t *pLoop;
//  205 
//  206   // Register as a ZCL Plugin
//  207   if ( zclGenPluginRegisted == FALSE )
        MOV       DPTR,#zclGenPluginRegisted
        MOVX      A,@DPTR
        JNZ       ??zclGeneral_RegisterCmdCallbacks_0
//  208   {
//  209     zcl_registerPlugin( ZCL_CLUSTER_ID_GEN_BASIC,
//  210                         ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
//  211                         zclGeneral_HdlIncoming );
        ; Setup parameters for call to function zcl_registerPlugin
        MOV       ?V2,#`??zclGeneral_HdlIncoming::?relay` & 0xff
        MOV       ?V3,#(`??zclGeneral_HdlIncoming::?relay` >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x14
        MOV       R5,#0x0
        MOV       R2,#0x0
        MOV       R3,#0x0
        LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  212 
//  213 #ifdef ZCL_SCENES
//  214     // Initialize the Scenes Table
//  215     zclGeneral_ScenesInit();
//  216 #endif // ZCL_SCENES
//  217 
//  218     zclGenPluginRegisted = TRUE;
        MOV       DPTR,#zclGenPluginRegisted
        MOV       A,#0x1
        MOVX      @DPTR,A
//  219   }
//  220 
//  221   // Fill in the new profile list
//  222   pNewItem = zcl_mem_alloc( sizeof( zclGenCBRec_t ) );
??zclGeneral_RegisterCmdCallbacks_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x5
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
//  223   if ( pNewItem == NULL )
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zclGeneral_RegisterCmdCallbacks_1
//  224     return (ZMemError);
        MOV       R1,#0x10
        SJMP      ??zclGeneral_RegisterCmdCallbacks_2
//  225 
//  226   pNewItem->next = (zclGenCBRec_t *)NULL;
??zclGeneral_RegisterCmdCallbacks_1:
        LCALL     ?Subroutine19 & 0xFFFF
//  227   pNewItem->endpoint = endpoint;
//  228   pNewItem->CBs = callbacks;
//  229 
//  230   // Find spot in list
//  231   if (  zclGenCBs == NULL )
??CrossCallReturnLabel_27:
        MOV       DPTR,#zclGenCBs
        LCALL     ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV       DPTR,#zclGenCBs
        JZ        ??zclGeneral_RegisterCmdCallbacks_3
//  232   {
//  233     zclGenCBs = pNewItem;
//  234   }
//  235   else
//  236   {
//  237     // Look for end of list
//  238     pLoop = zclGenCBs;
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??zclGeneral_RegisterCmdCallbacks_4
//  239     while ( pLoop->next != NULL )
//  240       pLoop = pLoop->next;
??zclGeneral_RegisterCmdCallbacks_5:
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
??zclGeneral_RegisterCmdCallbacks_4:
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_72:
        JNZ       ??zclGeneral_RegisterCmdCallbacks_5
//  241 
//  242     // Put new item at end of list
//  243     pLoop->next = pNewItem;
        MOV       DPL,R4
        MOV       DPH,R5
//  244   }
??zclGeneral_RegisterCmdCallbacks_3:
        LCALL     ?Subroutine20 & 0xFFFF
//  245 
//  246   return ( ZSuccess );
??CrossCallReturnLabel_48:
        MOV       R1,#0x0
??zclGeneral_RegisterCmdCallbacks_2:
        SJMP      ??Subroutine31_0
//  247 }
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  248 
//  249 #ifdef ZCL_IDENTIFY
//  250 /*********************************************************************
//  251  * @fn      zclGeneral_SendIdentify
//  252  *
//  253  * @brief   Call to send out an Identify Command
//  254  *
//  255  * @param   srcEP - Sending application's endpoint
//  256  * @param   dstAddr - where you want the message to go
//  257  * @param   identifyTime - how long the device will continue to identify itself (in seconds)
//  258  * @param   seqNum - identification number for the transaction
//  259  *
//  260  * @return  ZStatus_t
//  261  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  262 ZStatus_t zclGeneral_SendIdentify( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendIdentify:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zclGeneral_SendIdentify
        CODE
//  263                                    uint16 identifyTime, uint8 disableDefaultRsp, uint8 seqNum )
//  264 {
        FUNCALL zclGeneral_SendIdentify, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R6,A
//  265   uint8 buf[2];
//  266 
//  267   buf[0] = LO_UINT16( identifyTime );
        MOV       A,R4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  268   buf[1] = HI_UINT16( identifyTime );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
//  269 
//  270   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  271                           COMMAND_IDENTIFY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  272                           disableDefaultRsp, 0, seqNum, 2, buf );
??CrossCallReturnLabel_29:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_19:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V0,#0x1
          CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  273 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 21)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V0,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       R4,#0x3
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,#0x2
          CFI EndBlock cfiBlock4
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5
//  274 
//  275 /*********************************************************************
//  276  * @fn      zclGeneral_SendIdentifyEZModeInvoke
//  277  *
//  278  * @brief   Call to send out an Identify EZ-Mode Invoke Command
//  279  *
//  280  * @param   srcEP - Sending application's endpoint
//  281  * @param   dstAddr - where you want the message to go
//  282  * @param   action - describes the EZ-Mode action to be performed
//  283  * @param   seqNum - identification number for the transaction
//  284  *
//  285  * @return  ZStatus_t
//  286  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  287 ZStatus_t zclGeneral_SendIdentifyEZModeInvoke( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendIdentifyEZModeInvoke:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyEZModeInvoke
        CODE
//  288                                                uint8 action, uint8 disableDefaultRsp, uint8 seqNum )
//  289 {
        FUNCALL zclGeneral_SendIdentifyEZModeInvoke, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV       A,#-0x1
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,R1
        MOV       R6,A
        MOV       A,R4
//  290   uint8 buf[1];
//  291 
//  292   buf[0] = action;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine22 & 0xFFFF
//  293 
//  294   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  295                           COMMAND_IDENTIFY_EZMODE_INVOKE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  296                           disableDefaultRsp, 0, seqNum, 1, buf );
??CrossCallReturnLabel_31:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       ?V2,#0x1
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       A,R5
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x2
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       R4,#0x3
        MOV       R5,#0x0
        MOV       A,R6
        MOV       R1,A
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       A,#0x1
        LJMP      ?Subroutine0 & 0xFFFF
//  297 }
          CFI EndBlock cfiBlock6
//  298 
//  299 /*********************************************************************
//  300  * @fn      zclGeneral_SendIdentifyUpdateCommState
//  301  *
//  302  * @brief   Call to send out an Identify Update Commission State Command
//  303  *
//  304  * @param   srcEP - Sending application's endpoint
//  305  * @param   dstAddr - where you want the message to go
//  306  * @param   action - describes the EZ-Mode action to be performed
//  307  * @param   commissionStateMask - updates the device's commission state
//  308  * @param   seqNum - identification number for the transaction
//  309  *
//  310  * @return  ZStatus_t
//  311  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  312 ZStatus_t zclGeneral_SendIdentifyUpdateCommState( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendIdentifyUpdateCommState:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyUpdateCommState
        CODE
//  313                                                   uint8 action, uint8 commissionStateMask,
//  314                                                   uint8 disableDefaultRsp, uint8 seqNum )
//  315 {
        FUNCALL zclGeneral_SendIdentifyUpdateCommState, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,R1
        MOV       A,R4
//  316   uint8 buf[2];
//  317 
//  318   buf[0] = action;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  319   buf[1] = commissionStateMask;
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R5
        LCALL     ?Subroutine22 & 0xFFFF
//  320 
//  321   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  322                           COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  323                           disableDefaultRsp, 0, seqNum, 2, buf );
??CrossCallReturnLabel_32:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       ?V2,#0x2
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        CLR       A
        MOV       ?V2,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       ?V1,#0x0
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       ?V1,#0x1
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       ?V1,#0x3
        MOV       R0,#?V1
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R4,#0x3
        MOV       R5,#0x0
        MOV       R1,?V0
        LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV       A,#0xb
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       A,#0x2
        LJMP      ?Subroutine0 & 0xFFFF
//  324 }
          CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyEZModeInvoke
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zclGeneral_SendIdentifyUpdateCommState
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
//  325 
//  326 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  327 /*********************************************************************
//  328  * @fn      zclGeneral_SendIdentifyTriggerEffect
//  329  *
//  330  * @brief   Call to send out a Trigger Effect Command
//  331  *
//  332  * @param   srcEP - Sending application's endpoint
//  333  * @param   dstAddr - where you want the message to go
//  334  * @param   effectId - identify effect to use
//  335  * @param   effectVariant - which variant of effect to be triggered
//  336  * @param   disableDefaultRsp - whether to disable the Default Response command
//  337  * @param   seqNum - identification number for the transaction
//  338  *
//  339  * @return  ZStatus_t
//  340  */
//  341 ZStatus_t zclGeneral_SendIdentifyTriggerEffect( uint8 srcEP, afAddrType_t *dstAddr,
//  342                                                 uint8 effectId, uint8 effectVariant,
//  343                                                 uint8 disableDefaultRsp, uint8 seqNum )
//  344 {
//  345   uint8 buf[2];
//  346 
//  347   buf[0] = effectId;
//  348   buf[1] = effectVariant;
//  349 
//  350   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  351                           COMMAND_IDENTIFY_TRIGGER_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  352                           disableDefaultRsp, 0, seqNum, 2, buf );
//  353 }
//  354 #endif // ZCL_LIGHT_LINK_ENHANCE
//  355 
//  356 /*********************************************************************
//  357  * @fn      zclGeneral_SendIdentifyQueryResponse
//  358  *
//  359  * @brief   Call to send out an Identify Query Response Command
//  360  *
//  361  * @param   srcEP - Sending application's endpoint
//  362  * @param   dstAddr - where you want the message to go
//  363  * @param   timeout - how long the device will continue to identify itself (in seconds)
//  364  * @param   seqNum - identification number for the transaction
//  365  *
//  366  * @return  ZStatus_t
//  367  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  368 ZStatus_t zclGeneral_SendIdentifyQueryResponse( uint8 srcEP, afAddrType_t *dstAddr,
zclGeneral_SendIdentifyQueryResponse:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function zclGeneral_SendIdentifyQueryResponse
        CODE
//  369                                                 uint16 timeout, uint8 disableDefaultRsp, uint8 seqNum )
//  370 {
        FUNCALL zclGeneral_SendIdentifyQueryResponse, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV       A,#-0x2
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV       A,R1
        MOV       R6,A
//  371   uint8 buf[2];
//  372 
//  373   buf[0] = LO_UINT16( timeout );
        MOV       A,R4
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
//  374   buf[1] = HI_UINT16( timeout );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine21 & 0xFFFF
//  375 
//  376   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
//  377                           COMMAND_IDENTIFY_QUERY_RSP, TRUE,
//  378                           ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
??CrossCallReturnLabel_30:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#0x2
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        LJMP      ?Subroutine1 & 0xFFFF
//  379 }
          CFI EndBlock cfiBlock11

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function zclGeneral_SendIdentify
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOV       A,R5
        MOVX      @DPTR,A
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function zclGeneral_SendIdentify
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zclGeneral_SendIdentify
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zclGeneral_SendIdentifyQueryResponse
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19
//  380 #endif // ZCL_IDENTIFY
//  381 
//  382 #ifdef ZCL_GROUPS
//  383 /*********************************************************************
//  384  * @fn      zclGeneral_SendGroupRequest
//  385  *
//  386  * @brief   Send a Group Request to a device.  You can also use the
//  387  *          appropriate macro.
//  388  *
//  389  * @param   srcEP - Sending Apps endpoint
//  390  * @param   dstAddr - where to send the request
//  391  * @param   cmd - one of the following:
//  392  *              COMMAND_GROUP_VIEW
//  393  *              COMMAND_GROUP_REMOVE
//  394  * @param   groupID -
//  395  *
//  396  * @return  ZStatus_t
//  397  */
//  398 ZStatus_t zclGeneral_SendGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  399                                        uint8 cmd, uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
//  400 {
//  401   uint8 buf[2];
//  402 
//  403   buf[0] = LO_UINT16( groupID );
//  404   buf[1] = HI_UINT16( groupID );
//  405 
//  406   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  407                             cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  408                             disableDefaultRsp, 0, seqNum, 2, buf ) );
//  409 }
//  410 
//  411 /*********************************************************************
//  412  * @fn      zclGeneral_SendAddGroupRequest
//  413  *
//  414  * @brief   Send the Add Group Request to a device
//  415  *
//  416  * @param   srcEP - Sending Apps endpoint
//  417  * @param   dstAddr - where to send the request
//  418  * @param   cmd - one of the following:
//  419  *                COMMAND_GROUP_ADD
//  420  *                COMMAND_GROUP_ADD_IF_IDENTIFYING
//  421  * @param   groupID - pointer to the group structure
//  422  * @param   groupName - pointer to Group Name.  This is a Zigbee
//  423  *          string data type, so the first byte is the length of the
//  424  *          name (in bytes), then the name.
//  425  *
//  426  * @return  ZStatus_t
//  427  */
//  428 ZStatus_t zclGeneral_SendAddGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  429                                           uint8 cmd, uint16 groupID, uint8 *groupName,
//  430                                           uint8 disableDefaultRsp, uint8 seqNum )
//  431 {
//  432   uint8 *buf;
//  433   uint8 *pBuf;
//  434   uint8 len;
//  435   ZStatus_t status;
//  436 
//  437   len = 2;    // Group ID
//  438   len += groupName[0] + 1;  // String + 1 for length
//  439 
//  440   buf = zcl_mem_alloc( len );
//  441   if ( buf )
//  442   {
//  443     pBuf = buf;
//  444     *pBuf++ = LO_UINT16( groupID );
//  445     *pBuf++ = HI_UINT16( groupID );
//  446     *pBuf++ = groupName[0]; // string length
//  447     zcl_memcpy( pBuf, &(groupName[1]), groupName[0] );
//  448 
//  449     status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  450                               cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  451                               disableDefaultRsp, 0, seqNum, len, buf );
//  452     zcl_mem_free( buf );
//  453   }
//  454   else
//  455     status = ZMemError;
//  456 
//  457   return ( status );
//  458 }
//  459 
//  460 /*********************************************************************
//  461  * @fn      zclGeneral_SendGroupGetMembershipRequest
//  462  *
//  463  * @brief   Send a Get Group Membership (Resposne) Command to a device
//  464  *
//  465  * @param   srcEP - Sending Apps endpoint
//  466  * @param   dstAddr - where to send the request
//  467  * @param   cmd - one of the following:
//  468  *                COMMAND_GROUP_GET_MEMBERSHIP
//  469  *                COMMAND_GROUP_GET_MEMBERSHIP_RSP
//  470  * @param   groupID - pointer to the group structure
//  471  * @param   groupName - pointer to Group Name.  This is a Zigbee
//  472  *          string data type, so the first byte is the length of the
//  473  *          name (in bytes), then the name.
//  474  *
//  475  * @return  ZStatus_t
//  476  */
//  477 ZStatus_t zclGeneral_SendGroupGetMembershipRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  478                                                     uint8 cmd, uint8 rspCmd, uint8 direction, uint8 capacity,
//  479                                                     uint8 grpCnt, uint16 *grpList, uint8 disableDefaultRsp, uint8 seqNum )
//  480 {
//  481   uint8 *buf;
//  482   uint8 *pBuf;
//  483   uint8 len = 0;
//  484   uint8 i;
//  485   ZStatus_t status;
//  486 
//  487   if ( rspCmd )
//  488     len++;  // Capacity
//  489 
//  490   len++;  // Group Count
//  491   len += sizeof ( uint16 ) * grpCnt;  // Group List
//  492 
//  493   buf = zcl_mem_alloc( len );
//  494   if ( buf )
//  495   {
//  496     pBuf = buf;
//  497     if ( rspCmd )
//  498       *pBuf++ = capacity;
//  499 
//  500     *pBuf++ = grpCnt;
//  501     for ( i = 0; i < grpCnt; i++ )
//  502     {
//  503       *pBuf++ = LO_UINT16( grpList[i] );
//  504       *pBuf++ = HI_UINT16( grpList[i] );
//  505     }
//  506 
//  507     status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  508                               cmd, TRUE, direction,
//  509                               disableDefaultRsp, 0, seqNum, len, buf );
//  510     zcl_mem_free( buf );
//  511   }
//  512   else
//  513     status = ZMemError;
//  514 
//  515   return ( status );
//  516 }
//  517 
//  518 /*********************************************************************
//  519  * @fn      zclGeneral_SendGroupResponse
//  520  *
//  521  * @brief   Send Group Response (not Group View Response)
//  522  *
//  523  * @param   srcEP - Sending application's endpoint
//  524  * @param   dstAddr - where you want the message to go
//  525  * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
//  526  * @param   status - group command status
//  527  * @param   groupID - what group
//  528  *
//  529  * @return  ZStatus_t
//  530  */
//  531 ZStatus_t zclGeneral_SendGroupResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  532                                         uint8 cmd, uint8 status, uint16 groupID,
//  533                                         uint8 disableDefaultRsp, uint8 seqNum )
//  534 {
//  535   uint8 buf[3];
//  536 
//  537   buf[0] = status;
//  538   buf[1] = LO_UINT16( groupID );
//  539   buf[2] = HI_UINT16( groupID );
//  540 
//  541   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  542                           cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  543                           disableDefaultRsp, 0, seqNum, 3, buf );
//  544 }
//  545 
//  546 /*********************************************************************
//  547  * @fn      zclGeneral_SendGroupViewResponse
//  548  *
//  549  * @brief   Call to send Group Response Command
//  550  *
//  551  * @param   srcEP - Sending application's endpoint
//  552  * @param   dstAddr - where you want the message to go
//  553  * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
//  554  * @param   status - group command status
//  555  * @param   grp - group info
//  556  *
//  557  * @return  ZStatus_t
//  558  */
//  559 ZStatus_t zclGeneral_SendGroupViewResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  560                                             uint8 status, aps_Group_t *grp, uint8 disableDefaultRsp, uint8 seqNum )
//  561 {
//  562   uint8 *buf;
//  563   uint8 len;
//  564   ZStatus_t stat;
//  565 
//  566   len = 1 + 2 + 1; // Status + Group ID + name length
//  567 
//  568   if ( status == ZCL_STATUS_SUCCESS )
//  569   {
//  570     len += grp->name[0];  // String length
//  571   }
//  572 
//  573   buf = zcl_mem_alloc( len );
//  574   if ( buf )
//  575   {
//  576     buf[0] = status;
//  577     buf[1] = LO_UINT16( grp->ID );
//  578     buf[2] = HI_UINT16( grp->ID );
//  579 
//  580     if ( status == ZCL_STATUS_SUCCESS )
//  581     {
//  582       buf[3] = grp->name[0]; // string length
//  583       zcl_memcpy( &buf[4], (&grp->name[1]), grp->name[0] );
//  584     }
//  585     else //ZCL_STATUS_NOT_FOUND
//  586     {
//  587       buf[3] = 0;
//  588     }
//  589 
//  590     stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
//  591                             COMMAND_GROUP_VIEW_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  592                             disableDefaultRsp, 0, seqNum, len, buf );
//  593     zcl_mem_free( buf );
//  594   }
//  595   else
//  596   {
//  597     stat = ZMemError;
//  598   }
//  599 
//  600   return ( stat );
//  601 }
//  602 #endif // ZCL_GROUPS
//  603 
//  604 #ifdef ZCL_SCENES
//  605 /*********************************************************************
//  606  * @fn      zclGeneral_SendAddSceneRequest
//  607  *
//  608  * @brief   Send the (Enhanced) Add Scene Request to a device. You can
//  609  *           also use the appropriate macro.
//  610  *
//  611  * @param   srcEP - Sending Apps endpoint
//  612  * @param   dstAddr - where to send the request
//  613  * @param   scene - pointer to the scene structure
//  614  * @param  cmd - COMMAND_SCENE_ADD or COMMAND_SCENE_ENHANCED_ADD
//  615  * @param   disableDefaultRsp - whether to disable the Default Response command
//  616  * @param   seqNum - sequence number
//  617  *
//  618  * @return  ZStatus_t
//  619  */
//  620 ZStatus_t zclGeneral_SendAddSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  621                                           uint8 cmd, zclGeneral_Scene_t *scene,
//  622                                           uint8 disableDefaultRsp, uint8 seqNum )
//  623 {
//  624   uint8 *buf;
//  625   uint8 *pBuf;
//  626   uint8 len;
//  627   ZStatus_t status;
//  628 
//  629   len = 2 + 1 + 2;    // Group ID + Scene ID + transition time
//  630   len += scene->name[0] + 1; // String + 1 for length
//  631 
//  632   // Add something for the extension field length
//  633   len += scene->extLen;
//  634 
//  635   buf = zcl_mem_alloc( len );
//  636   if ( buf )
//  637   {
//  638     pBuf = buf;
//  639     *pBuf++ = LO_UINT16( scene->groupID );
//  640     *pBuf++ = HI_UINT16( scene->groupID );
//  641     *pBuf++ = scene->ID;
//  642     *pBuf++ = LO_UINT16( scene->transTime );
//  643     *pBuf++ = HI_UINT16( scene->transTime );
//  644     *pBuf++ = scene->name[0]; // string length
//  645     zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
//  646     pBuf += scene->name[0]; // move pass name
//  647 
//  648     // Add the extension fields
//  649     if ( scene->extLen > 0 )
//  650       zcl_memcpy( pBuf, scene->extField, scene->extLen );
//  651 
//  652     status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  653                               cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  654                               disableDefaultRsp, 0, seqNum, len, buf );
//  655     zcl_mem_free( buf );
//  656   }
//  657   else
//  658     status = ZMemError;
//  659 
//  660   return ( status );
//  661 }
//  662 
//  663 /*********************************************************************
//  664  * @fn      zclGeneral_SendSceneRequest
//  665  *
//  666  * @brief   Send a Scene Request to a device.  You can also use the
//  667  *          appropriate macro.
//  668  *
//  669  * @param   srcEP - Sending Apps endpoint
//  670  * @param   dstAddr - where to send the request
//  671  * @param   cmd - one of the following:
//  672  *              COMMAND_SCENE_VIEW
//  673  *              COMMAND_SCENE_REMOVE
//  674  *              COMMAND_SCENE_REMOVE_ALL
//  675  *              COMMAND_SCENE_STORE
//  676  *              COMMAND_SCENE_RECALL
//  677  *              COMMAND_SCENE_GET_MEMBERSHIP
//  678  *              COMMAND_SCENE_ENHANCED_VIEW
//  679  * @param   groupID - group ID
//  680  * @param   sceneID - scene ID (not applicable to COMMAND_SCENE_REMOVE_ALL and
//  681  *                    COMMAND_SCENE_GET_MEMBERSHIP)
//  682  * @param   disableDefaultRsp - whether to disable the Default Response command
//  683  * @param   seqNum - sequence number
//  684  * @return  ZStatus_t
//  685  */
//  686 ZStatus_t zclGeneral_SendSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
//  687                                        uint8 cmd, uint16 groupID, uint8 sceneID,
//  688                                        uint8 disableDefaultRsp, uint8 seqNum )
//  689 {
//  690   uint8 buf[3];
//  691   uint8 len = 2;
//  692 
//  693   buf[0] = LO_UINT16( groupID );
//  694   buf[1] = HI_UINT16( groupID );
//  695 
//  696   if ( cmd != COMMAND_SCENE_REMOVE_ALL && cmd != COMMAND_SCENE_GET_MEMBERSHIP )
//  697   {
//  698     buf[2] = sceneID;
//  699     len++;
//  700   }
//  701 
//  702   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  703                             cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  704                             disableDefaultRsp, 0, seqNum, len, buf ) );
//  705 }
//  706 
//  707 /*********************************************************************
//  708  * @fn      zclGeneral_SendSceneResponse
//  709  *
//  710  * @brief   Send Group Response (not Group View Response)
//  711  *
//  712  * @param   srcEP - Sending application's endpoint
//  713  * @param   dstAddr - where you want the message to go
//  714  * @param   cmd - either COMMAND_SCENE_ADD_RSP, COMMAND_SCENE_REMOVE_RSP
//  715  *                COMMAND_SCENE_STORE_RSP, or COMMAND_SCENE_REMOVE_ALL_RSP
//  716  * @param   status - scene command status
//  717  * @param   groupID - what group
//  718  * @param   sceneID - what scene (not applicable to COMMAND_SCENE_REMOVE_ALL_RSP)
//  719  *
//  720  * @return  ZStatus_t
//  721  */
//  722 ZStatus_t zclGeneral_SendSceneResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  723                                         uint8 cmd, uint8 status, uint16 groupID,
//  724                                         uint8 sceneID, uint8 disableDefaultRsp, uint8 seqNum )
//  725 {
//  726   uint8 buf[4];
//  727   uint8 len = 1 + 2; // Status + Group ID
//  728 
//  729   buf[0] = status;
//  730   buf[1] = LO_UINT16( groupID );
//  731   buf[2] = HI_UINT16( groupID );
//  732 
//  733   if ( cmd != COMMAND_SCENE_REMOVE_ALL_RSP )
//  734   {
//  735     buf[3] = sceneID;
//  736     len++;
//  737   }
//  738 
//  739   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  740                           cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  741                           disableDefaultRsp, 0, seqNum, len, buf );
//  742 }
//  743 
//  744 /*********************************************************************
//  745  * @fn      zclGeneral_SendSceneViewResponse
//  746  *
//  747  * @brief   Call to send Scene (Enahced) View Response Command. You can
//  748  *           also use the appropriate macro.
//  749  *
//  750  * @param   srcEP - Sending application's endpoint
//  751  * @param   dstAddr - where you want the message to go
//  752  * @param   cmd - either COMMAND_SCENE_VIEW_RSP or COMMAND_SCENE_ENHANCED_VIEW_RSP
//  753  * @param   status - scene command status
//  754  * @param   scene - scene info
//  755  *
//  756  * @return  ZStatus_t
//  757  */
//  758 ZStatus_t zclGeneral_SendSceneViewRsp( uint8 srcEP, afAddrType_t *dstAddr,
//  759                                        uint8 cmd, uint8 status, zclGeneral_Scene_t *scene,
//  760                                        uint8 disableDefaultRsp, uint8 seqNum )
//  761 {
//  762   uint8 *buf;
//  763   uint8 *pBuf;
//  764   uint8 len = 1 + 2 + 1; // Status + Group ID + Scene ID
//  765   ZStatus_t stat;
//  766 
//  767   if ( status == ZCL_STATUS_SUCCESS )
//  768   {
//  769     len += 2; // Transition Time
//  770     len += scene->name[0] + 1; // string + 1 for length
//  771 
//  772     // Add something for the extension field length
//  773     len += scene->extLen;
//  774   }
//  775 
//  776   buf = zcl_mem_alloc( len );
//  777   if ( buf )
//  778   {
//  779     pBuf = buf;
//  780     *pBuf++ = status;
//  781     *pBuf++ = LO_UINT16( scene->groupID );
//  782     *pBuf++ = HI_UINT16( scene->groupID );
//  783     *pBuf++ = scene->ID;
//  784     if ( status == ZCL_STATUS_SUCCESS )
//  785     {
//  786       uint16 transTime = scene->transTime;
//  787       if ( cmd == COMMAND_SCENE_ENHANCED_VIEW_RSP )
//  788       {
//  789         // Transition time is in 1/10s
//  790         transTime *= 10;
//  791         transTime += scene->transTime100ms;
//  792       }
//  793 
//  794       *pBuf++ = LO_UINT16( transTime );
//  795       *pBuf++ = HI_UINT16( transTime );
//  796       *pBuf++ = scene->name[0]; // string length
//  797       if ( scene->name[0] != 0 )
//  798       {
//  799         zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
//  800         pBuf += scene->name[0]; // move pass name
//  801       }
//  802 
//  803       // Add the extension fields
//  804       if ( scene->extLen > 0 )
//  805         zcl_memcpy( pBuf, scene->extField, scene->extLen );
//  806     }
//  807 
//  808     stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  809                             cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  810                             disableDefaultRsp, 0, seqNum, len, buf );
//  811     zcl_mem_free( buf );
//  812   }
//  813   else
//  814     stat = ZMemError;
//  815 
//  816   return ( stat );
//  817 }
//  818 
//  819 /*********************************************************************
//  820  * @fn      zclGeneral_SendSceneGetMembershipResponse
//  821  *
//  822  * @brief   Call to send Scene Get Membership Response Command
//  823  *
//  824  * @param   srcEP - Sending application's endpoint
//  825  * @param   dstAddr - where you want the message to go
//  826  * @param   status - scene command status
//  827  * @param   capacity - remaining capacity of the scene table
//  828  * @param   sceneCnt - number of scenes in the scene list
//  829  * @param   sceneList - list of scene IDs
//  830  * @param   groupID - group ID that scene belongs to
//  831  * @param   seqNum - sequence number
//  832  *
//  833  * @return  ZStatus_t
//  834  */
//  835 ZStatus_t zclGeneral_SendSceneGetMembershipResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  836                                                      uint8 status, uint8 capacity, uint8 sceneCnt, uint8 *sceneList,
//  837                                                      uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
//  838 {
//  839   uint8 *buf;
//  840   uint8 *pBuf;
//  841   uint8 len = 1 + 1 + 2; // Status + Capacity + Group ID;
//  842   uint8 i;
//  843   ZStatus_t stat;
//  844 
//  845   if ( status == ZCL_STATUS_SUCCESS )
//  846   {
//  847     len++; // Scene Count
//  848     len += sceneCnt; // Scene List (Scene ID is a single octet)
//  849   }
//  850 
//  851   buf = zcl_mem_alloc( len );
//  852   if ( buf )
//  853   {
//  854     pBuf = buf;
//  855     *pBuf++ = status;
//  856     *pBuf++ = capacity;
//  857     *pBuf++ = LO_UINT16( groupID );
//  858     *pBuf++ = HI_UINT16( groupID );
//  859     if ( status == ZCL_STATUS_SUCCESS )
//  860     {
//  861       *pBuf++ = sceneCnt;
//  862       for ( i = 0; i < sceneCnt; i++ )
//  863         *pBuf++ = sceneList[i];
//  864     }
//  865 
//  866     stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  867                             COMMAND_SCENE_GET_MEMBERSHIP_RSP, TRUE,
//  868                             ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
//  869     zcl_mem_free( buf );
//  870   }
//  871   else
//  872     stat = ZMemError;
//  873 
//  874   return ( stat );
//  875 }
//  876 
//  877 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  878 /*********************************************************************
//  879  * @fn      zclGeneral_SendSceneCopy
//  880  *
//  881  * @brief   Send Scene Copy Request to a device
//  882  *
//  883  * @param   srcEP - sending application's endpoint
//  884  * @param   dstAddr - where to send the request
//  885  * @param   mode - how scene copy is to proceed
//  886  * @param   groupIDFrom - group from which scene to be copied
//  887  * @param   sceneIDFrom - scene from which scene to be copied
//  888  * @param   groupIDTo - group to which scene to be copied
//  889  * @param   sceneIDTo - scene to which scene to be copied
//  890  * @param   disableDefaultRsp - disable Default Response command
//  891  * @param   seqNum - the identification number for the transaction
//  892  *
//  893  * @return  ZStatus_t
//  894  */
//  895 ZStatus_t zclGeneral_SendSceneCopy( uint8 srcEP, afAddrType_t *dstAddr,
//  896                                     uint8 mode, uint16 groupIDFrom, uint8 sceneIDFrom,
//  897                                     uint16 groupIDTo, uint8 sceneIDTo,
//  898                                     uint8 disableDefaultRsp, uint8 seqNum )
//  899 {
//  900   uint8 buf[7];
//  901 
//  902   buf[0] = mode;
//  903   buf[1] = LO_UINT16( groupIDFrom );
//  904   buf[2] = HI_UINT16( groupIDFrom );
//  905   buf[3] = sceneIDFrom;
//  906   buf[4] = LO_UINT16( groupIDTo );
//  907   buf[5] = HI_UINT16( groupIDTo );
//  908   buf[6] = sceneIDTo;
//  909 
//  910   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  911                             COMMAND_SCENE_COPY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  912                             disableDefaultRsp, 0, seqNum, 7, buf ) );
//  913 }
//  914 
//  915 /*********************************************************************
//  916  * @fn      zclGeneral_SendSceneCopyResponse
//  917  *
//  918  * @brief   Send Scene Copy Response to a device
//  919  *
//  920  * @param   srcEP - sending application's endpoint
//  921  * @param   dstAddr - where to send the request
//  922  * @param   status - status of copy scene attemp
//  923  * @param   groupIDFrom - group from which scene was copied
//  924  * @param   sceneIDFrom - scene from which scene was copied
//  925  * @param   disableDefaultRsp - disable Default Response command
//  926  * @param   seqNum - the identification number for the transaction
//  927  *
//  928  * @return  ZStatus_t
//  929  */
//  930 ZStatus_t zclGeneral_SendSceneCopyResponse( uint8 srcEP, afAddrType_t *dstAddr,
//  931                                             uint8 status, uint16 groupIDFrom, uint8 sceneIDFrom,
//  932                                             uint8 disableDefaultRsp, uint8 seqNum )
//  933 {
//  934   uint8 buf[4];
//  935 
//  936   buf[0] = status;
//  937   buf[1] = LO_UINT16( groupIDFrom );
//  938   buf[2] = HI_UINT16( groupIDFrom );
//  939   buf[3] = sceneIDFrom;
//  940 
//  941   return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
//  942                             COMMAND_SCENE_COPY_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
//  943                             disableDefaultRsp, 0, seqNum, 4, buf ) );
//  944 }
//  945 #endif // ZCL_LIGHT_LINK_ENHANCE
//  946 #endif // ZCL_SCENES
//  947 
//  948 #ifdef ZCL_ON_OFF
//  949 #ifdef ZCL_LIGHT_LINK_ENHANCE
//  950 /*********************************************************************
//  951  * @fn      zclGeneral_SendOnOff_CmdOffWithEffect
//  952  *
//  953  * @brief   Call to send out an Off with Effect Command.
//  954  *
//  955  * @param   srcEP - Sending application's endpoint
//  956  * @param   dstAddr - where you want the message to go
//  957  * @param   effectId - fading effect to use when switching light off
//  958  * @param   effectVariant - which variant of effect to be triggered
//  959  * @param   disableDefaultRsp - whether to disable the Default Response command
//  960  * @param   seqNum - sequence number
//  961  *
//  962  * @return  ZStatus_t
//  963  */
//  964 ZStatus_t zclGeneral_SendOnOff_CmdOffWithEffect( uint8 srcEP, afAddrType_t *dstAddr,
//  965                                                  uint8 effectId, uint8 effectVariant,
//  966                                                  uint8 disableDefaultRsp, uint8 seqNum )
//  967 {
//  968   uint8 buf[2];
//  969 
//  970   buf[0] = effectId;
//  971   buf[1] = effectVariant;
//  972 
//  973   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
//  974                           COMMAND_OFF_WITH_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
//  975                           disableDefaultRsp, 0, seqNum, 2, buf );
//  976 }
//  977 
//  978 /*********************************************************************
//  979  * @fn      zclGeneral_SendOnOff_CmdOnWithTimedOff
//  980  *
//  981  * @brief   Call to send out an On with Timed Off Command.
//  982  *
//  983  * @param   srcEP - Sending application's endpoint
//  984  * @param   dstAddr - where you want the message to go
//  985  * @param   onOffCtrl - how the lamp is to be operated
//  986  * @param   onTime - the length of time (in 1/10ths second) that the lamp is to remain on, before automatically turning off
//  987  * @param   offWaitTime - the length of time (in 1/10ths second) that the lamp shall remain off, and guarded to prevent an on command turning the light back on.
//  988  * @param   disableDefaultRsp - whether to disable the Default Response command
//  989  * @param   seqNum - sequence number
//  990  *
//  991  * @return  ZStatus_t
//  992  */
//  993 ZStatus_t zclGeneral_SendOnOff_CmdOnWithTimedOff ( uint8 srcEP, afAddrType_t *dstAddr,
//  994                                                    zclOnOffCtrl_t onOffCtrl, uint16 onTime, uint16 offWaitTime,
//  995                                                    uint8 disableDefaultRsp, uint8 seqNum )
//  996 {
//  997   uint8 buf[5];
//  998 
//  999   buf[0] = onOffCtrl.byte;
// 1000   buf[1] = LO_UINT16( onTime );
// 1001   buf[2] = HI_UINT16( onTime );
// 1002   buf[3] = LO_UINT16( offWaitTime );
// 1003   buf[4] = HI_UINT16( offWaitTime );
// 1004 
// 1005   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
// 1006                           COMMAND_ON_WITH_TIMED_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1007                           disableDefaultRsp, 0, seqNum, 5, buf );
// 1008 }
// 1009 #endif // ZCL_LIGHT_LINK_ENHANCE
// 1010 #endif // ZCL_ON_OFF
// 1011 
// 1012 #ifdef ZCL_LEVEL_CTRL
// 1013 /*********************************************************************
// 1014  * @fn      zclGeneral_SendLevelControlMoveToLevelRequest
// 1015  *
// 1016  * @brief   Call to send out a Level Control Request. You can also use
// 1017  *          the appropriate macro.
// 1018  *
// 1019  * @param   srcEP - Sending application's endpoint
// 1020  * @param   dstAddr - where you want the message to go
// 1021  * @param   cmd - one of the following:
// 1022  *              COMMAND_LEVEL_MOVE_TO_LEVEL or
// 1023  *              COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
// 1024  * @param   level - what level to move to
// 1025  * @param   transitionTime - how long to take to get to the level (in seconds)
// 1026  *
// 1027  * @return  ZStatus_t
// 1028  */
// 1029 ZStatus_t zclGeneral_SendLevelControlMoveToLevelRequest( uint8 srcEP, afAddrType_t *dstAddr,
// 1030                                                          uint8 cmd, uint8 level, uint16 transTime,
// 1031                                                          uint8 disableDefaultRsp, uint8 seqNum )
// 1032 {
// 1033   uint8 buf[3];
// 1034 
// 1035   buf[0] = level;
// 1036   buf[1] = LO_UINT16( transTime );
// 1037   buf[2] = HI_UINT16( transTime );
// 1038 
// 1039   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1040                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1041                           disableDefaultRsp, 0, seqNum, 3, buf );
// 1042 }
// 1043 
// 1044 /*********************************************************************
// 1045  * @fn      zclGeneral_SendLevelControlMoveRequest
// 1046  *
// 1047  * @brief   Call to send out a Level Control Request. You can also use
// 1048  *          the appropriate macro.
// 1049  *
// 1050  * @param   srcEP - Sending application's endpoint
// 1051  * @param   dstAddr - where you want the message to go
// 1052  * @param   cmd - one of the following:
// 1053  *              COMMAND_LEVEL_MOVE or
// 1054  *              COMMAND_LEVEL_MOVE_WITH_ON_OFF
// 1055  * @param   moveMode - LEVEL_MOVE_UP or
// 1056  *                     LEVEL_MOVE_DOWN
// 1057  * @param   rate - number of steps to take per second
// 1058  *
// 1059  * @return  ZStatus_t
// 1060  */
// 1061 ZStatus_t zclGeneral_SendLevelControlMoveRequest( uint8 srcEP, afAddrType_t *dstAddr,
// 1062                                                   uint8 cmd, uint8 moveMode, uint8 rate,
// 1063                                                   uint8 disableDefaultRsp, uint8 seqNum )
// 1064 {
// 1065   uint8 buf[2];
// 1066 
// 1067   buf[0] = moveMode;
// 1068   buf[1] = rate;
// 1069 
// 1070   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1071                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1072                           disableDefaultRsp, 0, seqNum, 2, buf );
// 1073 }
// 1074 
// 1075 /*********************************************************************
// 1076  * @fn      zclGeneral_SendLevelControlStepRequest
// 1077  *
// 1078  * @brief   Call to send out a Level Control Request. You can also use
// 1079  *          the appropriate macro.
// 1080  *
// 1081  * @param   srcEP - Sending application's endpoint
// 1082  * @param   dstAddr - where you want the message to go
// 1083  * @param   cmd - one of the following:
// 1084  *              COMMAND_LEVEL_STEP
// 1085  *              COMMAND_LEVEL_STEP_WITH_ON_OFF
// 1086  * @param   stepMode - LEVEL_STEP_UP or
// 1087  *                     LEVEL_STEP_DOWN
// 1088  * @param   amount - number of levels to step
// 1089  * @param   transitionTime - time, in 1/10ths of a second, to take to perform the step
// 1090  *
// 1091  * @return  ZStatus_t
// 1092  */
// 1093 ZStatus_t zclGeneral_SendLevelControlStepRequest( uint8 srcEP, afAddrType_t *dstAddr,
// 1094                                                   uint8 cmd, uint8 stepMode, uint8 stepSize, uint16 transTime,
// 1095                                                   uint8 disableDefaultRsp, uint8 seqNum )
// 1096 {
// 1097   uint8 buf[4];
// 1098 
// 1099   buf[0] = stepMode;
// 1100   buf[1] = stepSize;
// 1101   buf[2] = LO_UINT16( transTime );
// 1102   buf[3] = HI_UINT16( transTime );
// 1103 
// 1104   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1105                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1106                           disableDefaultRsp, 0, seqNum, 4, buf );
// 1107 }
// 1108 
// 1109 /*********************************************************************
// 1110  * @fn      zclGeneral_SendLevelControlStepRequest
// 1111  *
// 1112  * @brief   Call to send out a Level Control Request. You can also use
// 1113  *          the appropriate macro.
// 1114  *
// 1115  * @param   srcEP - Sending application's endpoint
// 1116  * @param   dstAddr - where you want the message to go
// 1117  * @param   cmd - one of the following:
// 1118  *              COMMAND_LEVEL_STOP
// 1119  *              COMMAND_LEVEL_STOP_WITH_ON_OFF
// 1120  *
// 1121  * @return  ZStatus_t
// 1122  */
// 1123 ZStatus_t zclGeneral_SendLevelControlStopRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
// 1124                                                   uint8 disableDefaultRsp, uint8 seqNum )
// 1125 {
// 1126   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
// 1127                           cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1128                           disableDefaultRsp, 0, seqNum, 0, NULL );
// 1129 }
// 1130 #endif // ZCL_LEVEL_CTRL
// 1131 
// 1132 #ifdef ZCL_ALARMS
// 1133 /*********************************************************************
// 1134  * @fn      zclGeneral_SendAlarm
// 1135  *
// 1136  * @brief   Call to send out an Alarm Request Command
// 1137  *
// 1138  * @param   srcEP - Sending application's endpoint
// 1139  * @param   dstAddr - where you want the message to go
// 1140  * @param   cmd - COMMAND_ALARMS_ALARM
// 1141  * @param   alarmCode - code for the cause of the alarm
// 1142  * @param   clusterID - cluster whose attribute generate the alarm
// 1143  *
// 1144  * @return  ZStatus_t
// 1145  */
// 1146 ZStatus_t zclGeneral_SendAlarm( uint8 srcEP, afAddrType_t *dstAddr,
// 1147                                 uint8 alarmCode, uint16 clusterID,
// 1148                                 uint8 disableDefaultRsp, uint8 seqNum )
// 1149 {
// 1150   uint8 buf[3];
// 1151 
// 1152   buf[0] = alarmCode;
// 1153   buf[1] = LO_UINT16( clusterID );
// 1154   buf[2] = HI_UINT16( clusterID );
// 1155 
// 1156   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1157                           COMMAND_ALARMS_ALARM, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1158                           disableDefaultRsp, 0, seqNum, 3, buf );
// 1159 }
// 1160 
// 1161 /*********************************************************************
// 1162  * @fn      zclGeneral_SendAlarmReset
// 1163  *
// 1164  * @brief   Call to send out an Alarm Reset Command
// 1165  *
// 1166  * @param   srcEP - Sending application's endpoint
// 1167  * @param   dstAddr - where you want the message to go
// 1168  * @param   alarmCode - code for the cause of the alarm
// 1169  * @param   clusterID - cluster whose attribute generate the alarm
// 1170  *
// 1171  * @return  ZStatus_t
// 1172 */
// 1173 ZStatus_t zclGeneral_SendAlarmReset( uint8 srcEP, afAddrType_t *dstAddr,
// 1174                                      uint8 alarmCode, uint16 clusterID,
// 1175                                      uint8 disableDefaultRsp, uint8 seqNum )
// 1176 {
// 1177   uint8 buf[3];
// 1178 
// 1179   buf[0] = alarmCode;
// 1180   buf[1] = LO_UINT16( clusterID );
// 1181   buf[2] = HI_UINT16( clusterID );
// 1182 
// 1183   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1184                           COMMAND_ALARMS_RESET, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1185                           disableDefaultRsp, 0, seqNum, 3, buf );
// 1186 }
// 1187 
// 1188 /*********************************************************************
// 1189  * @fn      zclGeneral_SendAlarmGetResponse
// 1190  *
// 1191  * @brief   Call to send out an Alarm Get Response Command
// 1192  *
// 1193  * @param   srcEP - Sending application's endpoint
// 1194  * @param   dstAddr - where you want the message to go
// 1195  * @param   status - SUCCESS or NOT_FOUND
// 1196  * @param   alarmCode - code for the cause of the alarm
// 1197  * @param   clusterID - cluster whose attribute generate the alarm
// 1198  * @param   timeStamp - time at which the alarm occured
// 1199  *
// 1200  * @return  ZStatus_t
// 1201  */
// 1202 ZStatus_t zclGeneral_SendAlarmGetResponse( uint8 srcEP, afAddrType_t *dstAddr,
// 1203                                            uint8 status, uint8 alarmCode, uint16 clusterID,
// 1204                                            uint32 timeStamp, uint8 disableDefaultRsp, uint8 seqNum )
// 1205 {
// 1206   uint8 buf[8];
// 1207   uint8 len = 1; // Status
// 1208 
// 1209   buf[0] = status;
// 1210   if ( status == ZCL_STATUS_SUCCESS )
// 1211   {
// 1212     len += 1 + 2 + 4; // Alarm code + Cluster ID + Time stamp
// 1213     buf[1] = alarmCode;
// 1214     buf[2] = LO_UINT16( clusterID );
// 1215     buf[3] = HI_UINT16( clusterID );
// 1216     zcl_buffer_uint32( &buf[4], timeStamp );
// 1217   }
// 1218 
// 1219   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1220                           COMMAND_ALARMS_GET_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1221                           disableDefaultRsp, 0, seqNum, len, buf );
// 1222 }
// 1223 
// 1224 #ifdef SE_UK_EXT
// 1225 /*********************************************************************
// 1226  * @fn      zclGeneral_SendAlarmGetEventLog
// 1227  *
// 1228  * @brief   Call to send out an Alarm Get Event Log Command
// 1229  *
// 1230  * @param   srcEP - Sending application's endpoint
// 1231  * @param   dstAddr - where you want the message to go
// 1232  * @param   pEventLog - pointer to Get Event Log Command
// 1233  * @param   disableDefaultRsp - disable default response
// 1234  * @param   seqNum - ZCL sequence number
// 1235  *
// 1236  * @return  ZStatus_t
// 1237  */
// 1238 ZStatus_t zclGeneral_SendAlarmGetEventLog( uint8 srcEP, afAddrType_t *dstAddr,
// 1239                                            zclGetEventLog_t *pEventLog,
// 1240                                            uint8 disableDefaultRsp, uint8 seqNum )
// 1241 {
// 1242   uint8 buf[10];
// 1243 
// 1244   buf[0] = pEventLog->logID;
// 1245   zcl_buffer_uint32( &buf[1], pEventLog->startTime );
// 1246   zcl_buffer_uint32( &buf[5], pEventLog->endTime );
// 1247   buf[9] = pEventLog->numEvents;
// 1248 
// 1249   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1250                           COMMAND_ALARMS_GET_EVENT_LOG, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1251                           disableDefaultRsp, 0, seqNum, 10, buf );
// 1252 }
// 1253 
// 1254 /*********************************************************************
// 1255  * @fn      zclGeneral_SendAlarmPublishEventLog
// 1256  *
// 1257  * @brief   Call to send out an Alarm Publish Event Log Command
// 1258  *
// 1259  * @param   srcEP - Sending application's endpoint
// 1260  * @param   dstAddr - where you want the message to go
// 1261  * @param   pEventLog - pointer to Publish Event Log Command
// 1262  * @param   disableDefaultRsp - disable default response
// 1263  * @param   seqNum - ZCL sequence number
// 1264  *
// 1265  * @return  ZStatus_t
// 1266  */
// 1267 ZStatus_t zclGeneral_SendAlarmPublishEventLog( uint8 srcEP, afAddrType_t *dstAddr,
// 1268                                                zclPublishEventLog_t *pEventLog,
// 1269                                                uint8 disableDefaultRsp, uint8 seqNum )
// 1270 {
// 1271   uint8 *buf;
// 1272   uint8 *pBuf;
// 1273   uint8 bufLen;
// 1274 
// 1275   // Log ID + Command Index + Total Commands + (numSubLogs * ( Event ID + Event Time))
// 1276   bufLen = 1 + 1 + 1 + (pEventLog->numSubLogs * (1 + 4));
// 1277 
// 1278   buf = zcl_mem_alloc( bufLen );
// 1279   if ( buf == NULL )
// 1280   {
// 1281     return (ZMemError);
// 1282   }
// 1283 
// 1284   pBuf = buf;
// 1285   *pBuf++ = pEventLog->logID;
// 1286   *pBuf++ = pEventLog->cmdIndex;
// 1287   *pBuf++ = pEventLog->totalCmds;
// 1288 
// 1289   for ( uint8 i = 0; i < pEventLog->numSubLogs; i++ )
// 1290   {
// 1291     zclEventLogPayload_t *pLogs = &(pEventLog->pLogs[i]);
// 1292 
// 1293     *pBuf++ = pLogs->eventId;
// 1294     pBuf = zcl_buffer_uint32( pBuf, pLogs->eventTime );
// 1295   }
// 1296 
// 1297   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
// 1298                           COMMAND_ALARMS_PUBLISH_EVENT_LOG, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
// 1299                           disableDefaultRsp, 0, seqNum, bufLen, buf );
// 1300 }
// 1301 #endif // SE_UK_EXT
// 1302 #endif // ZCL_ALARMS
// 1303 
// 1304 #ifdef ZCL_LOCATION
// 1305 /*********************************************************************
// 1306  * @fn      zclGeneral_SendLocationSetAbsolute
// 1307  *
// 1308  * @brief   Call to send out a Set Absolute Location Command
// 1309  *
// 1310  * @param   srcEP - Sending application's endpoint
// 1311  * @param   dstAddr - where you want the message to go
// 1312  * @param   absLoc - absolute location info
// 1313  *
// 1314  * @return  ZStatus_t
// 1315  */
// 1316 ZStatus_t zclGeneral_SendLocationSetAbsolute( uint8 srcEP, afAddrType_t *dstAddr,
// 1317                                               zclLocationAbsolute_t *absLoc,
// 1318                                               uint8 disableDefaultRsp, uint8 seqNum )
// 1319 {
// 1320    uint8 buf[10]; // 5 fields (2 octects each)
// 1321 
// 1322    buf[0] = LO_UINT16( absLoc->coordinate1 );
// 1323    buf[1] = HI_UINT16( absLoc->coordinate1 );
// 1324    buf[2] = LO_UINT16( absLoc->coordinate2 );
// 1325    buf[3] = HI_UINT16( absLoc->coordinate2 );
// 1326    buf[4] = LO_UINT16( absLoc->coordinate3 );
// 1327    buf[5] = HI_UINT16( absLoc->coordinate3 );
// 1328    buf[6] = LO_UINT16( absLoc->power );
// 1329    buf[7] = HI_UINT16( absLoc->power );
// 1330    buf[8] = LO_UINT16( absLoc->pathLossExponent );
// 1331    buf[9] = HI_UINT16( absLoc->pathLossExponent );
// 1332 
// 1333    return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1334                            COMMAND_LOCATION_SET_ABSOLUTE, TRUE,
// 1335                            ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 10, buf );
// 1336 }
// 1337 
// 1338 /*********************************************************************
// 1339  * @fn      zclGeneral_SendLocationSetDevCfg
// 1340  *
// 1341  * @brief   Call to send out a Set Device Configuration Command
// 1342  *
// 1343  * @param   srcEP - Sending application's endpoint
// 1344  * @param   dstAddr - where you want the message to go
// 1345  * @param   devCfg - device configuration info
// 1346  *
// 1347  * @return  ZStatus_t
// 1348  */
// 1349 ZStatus_t zclGeneral_SendLocationSetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
// 1350                                             zclLocationDevCfg_t *devCfg,
// 1351                                             uint8 disableDefaultRsp, uint8 seqNum )
// 1352 {
// 1353    uint8 buf[9];  // 4 fields (2 octects each) + 1 field with 1 octect
// 1354 
// 1355    buf[0] = LO_UINT16( devCfg->power );
// 1356    buf[1] = HI_UINT16( devCfg->power );
// 1357    buf[2] = LO_UINT16( devCfg->pathLossExponent );
// 1358    buf[3] = HI_UINT16( devCfg->pathLossExponent );
// 1359    buf[4] = LO_UINT16( devCfg->calcPeriod );
// 1360    buf[5] = HI_UINT16( devCfg->calcPeriod );
// 1361    buf[6] = devCfg->numMeasurements;
// 1362    buf[7] = LO_UINT16( devCfg->reportPeriod );
// 1363    buf[8] = HI_UINT16( devCfg->reportPeriod );
// 1364 
// 1365    return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1366                            COMMAND_LOCATION_SET_DEV_CFG, TRUE,
// 1367                            ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 9, buf );
// 1368 }
// 1369 
// 1370 /*********************************************************************
// 1371  * @fn      zclGeneral_SendLocationGetDevCfg
// 1372  *
// 1373  * @brief   Call to send out a Get Device Configuration Command
// 1374  *
// 1375  * @param   srcEP - Sending application's endpoint
// 1376  * @param   dstAddr - where you want the message to go
// 1377  * @param   targetAddr - device for which location parameters are being requested
// 1378  *
// 1379  * @return  ZStatus_t
// 1380  */
// 1381 ZStatus_t zclGeneral_SendLocationGetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
// 1382                                             uint8 *targetAddr, uint8 disableDefaultRsp, uint8 seqNum )
// 1383 {
// 1384   uint8 buf[8];
// 1385 
// 1386   zcl_memcpy( buf, targetAddr, 8 );
// 1387 
// 1388   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1389                           COMMAND_LOCATION_GET_DEV_CFG, TRUE,
// 1390                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 8, buf );
// 1391 }
// 1392 
// 1393 /*********************************************************************
// 1394  * @fn      zclGeneral_SendLocationGetData
// 1395  *
// 1396  * @brief   Call to send out a Get Location Data Command
// 1397  *
// 1398  * @param   srcEP - Sending application's endpoint
// 1399  * @param   dstAddr - where you want the message to go
// 1400  * @param   locaData - location information and channel parameters that are requested.
// 1401  *
// 1402  * @return  ZStatus_t
// 1403  */
// 1404 ZStatus_t zclGeneral_SendLocationGetData( uint8 srcEP, afAddrType_t *dstAddr,
// 1405                                           zclLocationGetData_t *locData,
// 1406                                           uint8 disableDefaultRsp, uint8 seqNum )
// 1407 {
// 1408   uint8 buf[10]; // bitmap (1) + number responses (1) + IEEE Address (8)
// 1409   uint8 *pBuf = buf;
// 1410   uint8 len = 2; // bitmap + number responses
// 1411 
// 1412   *pBuf  = locData->absoluteOnly;
// 1413   *pBuf |= locData->recalculate << 1;
// 1414   *pBuf |= locData->brdcastIndicator << 2;
// 1415   *pBuf |= locData->brdcastResponse << 3;
// 1416   *pBuf |= locData->compactResponse << 4;
// 1417   pBuf++;  // move past the bitmap field
// 1418 
// 1419   *pBuf++ = locData->numResponses;
// 1420 
// 1421   if ( locData->brdcastIndicator == 0 )
// 1422   {
// 1423     zcl_memcpy( pBuf, locData->targetAddr, 8 );
// 1424     len += 8; // ieee addr
// 1425   }
// 1426 
// 1427   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1428                           COMMAND_LOCATION_GET_DATA, TRUE,
// 1429                           ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, len, buf );
// 1430 }
// 1431 
// 1432 /*********************************************************************
// 1433  * @fn      zclGeneral_SendLocationDevCfgResponse
// 1434  *
// 1435  * @brief   Call to send out a Device Configuration Response Command
// 1436  *
// 1437  * @param   srcEP - Sending application's endpoint
// 1438  * @param   dstAddr - where you want the message to go
// 1439  * @param   devCfg - device's location parameters that are requested
// 1440  *
// 1441  * @return  ZStatus_t
// 1442  */
// 1443 ZStatus_t zclGeneral_SendLocationDevCfgResponse( uint8 srcEP, afAddrType_t *dstAddr,
// 1444                                                  zclLocationDevCfgRsp_t *devCfg,
// 1445                                                  uint8 disableDefaultRsp, uint8 seqNum )
// 1446 {
// 1447   uint8 buf[10]; // 4 fields (2 octects each) + 2 fields (1 octect each)
// 1448   uint8 len = 1; // Status
// 1449 
// 1450   buf[0] = devCfg->status;
// 1451   if ( devCfg->status == ZCL_STATUS_SUCCESS )
// 1452   {
// 1453     buf[1] = LO_UINT16( devCfg->data.power );
// 1454     buf[2] = HI_UINT16( devCfg->data.power );
// 1455     buf[3] = LO_UINT16( devCfg->data.pathLossExponent );
// 1456     buf[4] = HI_UINT16( devCfg->data.pathLossExponent );
// 1457     buf[5] = LO_UINT16( devCfg->data.calcPeriod );
// 1458     buf[6] = HI_UINT16( devCfg->data.calcPeriod );
// 1459     buf[7] = devCfg->data.numMeasurements;
// 1460     buf[8] = LO_UINT16( devCfg->data.reportPeriod );
// 1461     buf[9] = HI_UINT16( devCfg->data.reportPeriod );
// 1462     len += 9;
// 1463   }
// 1464 
// 1465   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1466                           COMMAND_LOCATION_DEV_CFG_RSP, TRUE,
// 1467                           ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
// 1468 }
// 1469 
// 1470 /*********************************************************************
// 1471  * @fn      zclGeneral_SendLocationData
// 1472  *
// 1473  * @brief   Call to send out location data
// 1474  *
// 1475  * @param   srcEP - Sending application's endpoint
// 1476  * @param   dstAddr - where you want the message to go
// 1477  * @param   status - indicates whether response to request was successful or not
// 1478  * @param   locData - location information and channel parameters being sent
// 1479  *
// 1480  * @return  ZStatus_t
// 1481  */
// 1482 ZStatus_t zclGeneral_SendLocationData( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
// 1483                                        uint8 status, zclLocationData_t *locData,
// 1484                                        uint8 disableDefaultRsp, uint8 seqNum )
// 1485 {
// 1486   uint8 buf[16];
// 1487   uint8 *pBuf = buf;
// 1488   uint8 len = 0;
// 1489 
// 1490   if ( cmd == COMMAND_LOCATION_DATA_RSP )
// 1491   {
// 1492     // Only response command includes a status field
// 1493     *pBuf++ = status;
// 1494     len++;
// 1495   }
// 1496 
// 1497   if ( cmd != COMMAND_LOCATION_DATA_RSP || status == ZCL_STATUS_SUCCESS )
// 1498   {
// 1499     // Notification or Response with successful status
// 1500     *pBuf++ = locData->type;
// 1501     *pBuf++ = LO_UINT16( locData->absLoc.coordinate1 );
// 1502     *pBuf++ = HI_UINT16( locData->absLoc.coordinate1 );
// 1503     *pBuf++ = LO_UINT16( locData->absLoc.coordinate2 );
// 1504     *pBuf++ = HI_UINT16( locData->absLoc.coordinate2 );
// 1505     len += 5;
// 1506 
// 1507     if ( locationType2D(locData->type) == 0 )
// 1508     {
// 1509       // 2D location doesn't have coordinate 3
// 1510       *pBuf++ = LO_UINT16( locData->absLoc.coordinate3 );
// 1511       *pBuf++ = HI_UINT16( locData->absLoc.coordinate3 );
// 1512       len += 2;
// 1513     }
// 1514 
// 1515     if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 1516     {
// 1517       // Compact notification doesn't include these fields
// 1518       *pBuf++ = LO_UINT16( locData->absLoc.power );
// 1519       *pBuf++ = HI_UINT16( locData->absLoc.power );
// 1520       *pBuf++ = LO_UINT16( locData->absLoc.pathLossExponent );
// 1521       *pBuf++ = HI_UINT16( locData->absLoc.pathLossExponent );
// 1522       len += 4;
// 1523     }
// 1524 
// 1525     if ( locationTypeAbsolute(locData->type) == 0 )
// 1526     {
// 1527       // Absolute location doesn't include these fields
// 1528       if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 1529       {
// 1530         // Compact notification doesn't include this field
// 1531         *pBuf++ = locData->calcLoc.locationMethod;
// 1532         len++;
// 1533       }
// 1534 
// 1535       *pBuf++ = locData->calcLoc.qualityMeasure;
// 1536       *pBuf++ = LO_UINT16( locData->calcLoc.locationAge );
// 1537       *pBuf++ = HI_UINT16( locData->calcLoc.locationAge );
// 1538       len += 3;
// 1539     }
// 1540   }
// 1541 
// 1542   return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
// 1543                           cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
// 1544                           disableDefaultRsp, 0, seqNum, len, buf );
// 1545 }
// 1546 #endif // ZCL_LOCATION
// 1547 
// 1548 /*********************************************************************
// 1549  * @fn      zclGeneral_FindCallbacks
// 1550  *
// 1551  * @brief   Find the callbacks for an endpoint
// 1552  *
// 1553  * @param   endpoint - endpoint to find the application callbacks for
// 1554  *
// 1555  * @return  pointer to the callbacks
// 1556  */
// 1557 static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint )
// 1558 {
// 1559   zclGenCBRec_t *pCBs;
// 1560 
// 1561   pCBs = zclGenCBs;
// 1562   while ( pCBs )
// 1563   {
// 1564     if ( pCBs->endpoint == endpoint )
// 1565       return ( pCBs->CBs );
// 1566     pCBs = pCBs->next;
// 1567   }
// 1568   return ( (zclGeneral_AppCallbacks_t *)NULL );
// 1569 }
// 1570 
// 1571 /*********************************************************************
// 1572  * @fn      zclGeneral_HdlIncoming
// 1573  *
// 1574  * @brief   Callback from ZCL to process incoming Commands specific
// 1575  *          to this cluster library or Profile commands for attributes
// 1576  *          that aren't in the attribute list
// 1577  *
// 1578  *
// 1579  * @param   pInMsg - pointer to the incoming message
// 1580  *
// 1581  * @return  ZStatus_t
// 1582  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1583 static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg )
zclGeneral_HdlIncoming:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zclGeneral_HdlIncoming
        CODE
// 1584 {
        FUNCALL zclGeneral_HdlIncoming, zclGeneral_HdlInSpecificCommands
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1585   ZStatus_t stat = ZSuccess;
// 1586 
// 1587 #if defined ( INTER_PAN )
// 1588   if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
// 1589     return ( stat ); // Cluster not supported thru Inter-PAN
// 1590 #endif
// 1591   if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x7
        XRL       A,#0x1
        JNZ       ??zclGeneral_HdlIncoming_0
// 1592   {
// 1593     // Is this a manufacturer specific command?
// 1594     if ( pInMsg->hdr.fc.manuSpecific == 0 )
// 1595     {
// 1596       stat = zclGeneral_HdlInSpecificCommands( pInMsg );
        ; Setup parameters for call to function zclGeneral_HdlInSpecificCommands
        LCALL     `??zclGeneral_HdlInSpecificCommands::?relay`; Banked call to: zclGeneral_HdlInSpecificCommands
        MOV       A,R1
        MOV       R1,A
        SJMP      ??zclGeneral_HdlIncoming_1
// 1597     }
// 1598     else
// 1599     {
// 1600       // We don't support any manufacturer specific command.
// 1601       stat = ZFailure;
// 1602     }
// 1603   }
// 1604   else
// 1605   {
// 1606     // Handle all the normal (Read, Write...) commands -- should never get here
// 1607     stat = ZFailure;
??zclGeneral_HdlIncoming_0:
        MOV       R1,#0x1
// 1608   }
// 1609   return ( stat );
??zclGeneral_HdlIncoming_1:
          CFI EndBlock cfiBlock20
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
// 1610 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP       DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP       DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP      ?BRET
          CFI EndBlock cfiBlock21
// 1611 
// 1612 /*********************************************************************
// 1613  * @fn      zclGeneral_HdlInSpecificCommands
// 1614  *
// 1615  * @brief   Callback from ZCL to process incoming Commands specific
// 1616  *          to this cluster library
// 1617 
// 1618  * @param   pInMsg - pointer to the incoming message
// 1619  *
// 1620  * @return  ZStatus_t
// 1621  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 1622 static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg )
zclGeneral_HdlInSpecificCommands:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
        CODE
// 1623 {
        FUNCALL zclGeneral_HdlInSpecificCommands, zclGeneral_ProcessInGroupsClient
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_HdlInSpecificCommands, zclGeneral_ProcessInScenesClient
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 4
        MOV       A,#-0x4
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 1624   ZStatus_t stat;
// 1625   zclGeneral_AppCallbacks_t *pCBs;
// 1626 
// 1627   // make sure endpoint exists
// 1628   pCBs = zclGeneral_FindCallbacks( pInMsg->msg->endPoint );
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV       R0,A
        MOV       DPTR,#zclGenCBs
??zclGeneral_HdlInSpecificCommands_0:
        LCALL     ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_76:
        JZ        ??zclGeneral_HdlInSpecificCommands_1
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R0
        MOV       DPL,R4
        MOV       DPH,R5
        JNZ       ??zclGeneral_HdlInSpecificCommands_0
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ??Subroutine38_0 & 0xFFFF
// 1629   if ( pCBs == NULL )
??CrossCallReturnLabel_77:
        JZ        ??zclGeneral_HdlInSpecificCommands_1
// 1630     return ( ZFailure );
// 1631 
// 1632   switch ( pInMsg->msg->clusterId )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for zclGeneral_HdlInSpecificComman_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        6
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclGeneral_HdlInSpecificCommands_6
        CODE
// 1633   {
// 1634 #ifdef ZCL_BASIC
// 1635     case ZCL_CLUSTER_ID_GEN_BASIC:
// 1636       stat = zclGeneral_ProcessInBasic( pInMsg, pCBs );
??zclGeneral_HdlInSpecificCommands_2:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JNZ       ??zclGeneral_HdlInSpecificCommands_7
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JZ        ??zclGeneral_HdlInSpecificCommands_8
??zclGeneral_HdlInSpecificCommands_1:
        MOV       R1,#0x1
        LJMP      ??zclGeneral_HdlInSpecificCommands_9 & 0xFFFF
??zclGeneral_HdlInSpecificCommands_8:
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        JZ        ??zclGeneral_HdlInSpecificCommands_7
        ; Setup parameters for indirect call
??zclGeneral_HdlInSpecificCommands_10:
        LCALL     ?CALL_IND
??zclGeneral_HdlInSpecificCommands_7:
        MOV       R1,#0x0
        LJMP      ??zclGeneral_HdlInSpecificCommands_9 & 0xFFFF
// 1637       break;
// 1638 #endif // ZCL_BASIC
// 1639 
// 1640     case ZCL_CLUSTER_ID_GEN_IDENTIFY:
// 1641       //stat = zclGeneral_ProcessInIdentity( pInMsg, pCBs );
// 1642       // JC NOTE: Add support for handling ZCL Identify Query Response
// 1643       stat = zclGeneral_ProcessInIdentityJC(pInMsg, pCBs);
??zclGeneral_HdlInSpecificCommands_3:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JZ        ??zclGeneral_HdlInSpecificCommands_7
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        JNZ       ??zclGeneral_HdlInSpecificCommands_1
        MOV       A,R6
        ADD       A,#0x6
        MOV       R0,A
        CLR       A
        ADDC      A,R7
        MOV       R1,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_60:
        MOV       DPL,R0
        MOV       DPH,R1
        LCALL     ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV       A,R4
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R5
        MOV       DPH,A
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ        ??zclGeneral_HdlInSpecificCommands_7
        ; Setup parameters for indirect call
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        SJMP      ??zclGeneral_HdlInSpecificCommands_10
// 1644       break;
// 1645 
// 1646     case ZCL_CLUSTER_ID_GEN_GROUPS:
// 1647       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
??zclGeneral_HdlInSpecificCommands_4:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JZ        ??zclGeneral_HdlInSpecificCommands_9
// 1648       {
// 1649 #ifdef ZCL_GROUPS
// 1650         stat = zclGeneral_ProcessInGroupsServer( pInMsg );
// 1651 #endif
// 1652       }
// 1653       else
// 1654         stat = zclGeneral_ProcessInGroupsClient( pInMsg, pCBs );
        ; Setup parameters for call to function zclGeneral_ProcessInGroupsClient
        LCALL     `??zclGeneral_ProcessInGroupsClient::?relay`; Banked call to: zclGeneral_ProcessInGroupsClient
        SJMP      ??zclGeneral_HdlInSpecificCommands_11
// 1655       break;
// 1656 
// 1657     case ZCL_CLUSTER_ID_GEN_SCENES:
// 1658       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
??zclGeneral_HdlInSpecificCommands_5:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JZ        ??zclGeneral_HdlInSpecificCommands_9
// 1659       {
// 1660 #ifdef ZCL_SCENES
// 1661         stat = zclGeneral_ProcessInScenesServer( pInMsg, pCBs );
// 1662 #endif // ZCL_SCENES
// 1663       }
// 1664       else
// 1665         stat = zclGeneral_ProcessInScenesClient( pInMsg, pCBs );
        ; Setup parameters for call to function zclGeneral_ProcessInScenesClient
        LCALL     `??zclGeneral_ProcessInScenesClient::?relay`; Banked call to: zclGeneral_ProcessInScenesClient
??zclGeneral_HdlInSpecificCommands_11:
        MOV       A,R1
        SJMP      ??zclGeneral_HdlInSpecificCommands_12
// 1666       break;
// 1667 
// 1668 #ifdef ZCL_ON_OFF
// 1669     case ZCL_CLUSTER_ID_GEN_ON_OFF:
// 1670       stat = zclGeneral_ProcessInOnOff( pInMsg, pCBs );
??zclGeneral_HdlInSpecificCommands_6:
        MOV       R6,#0x0
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JNZ       ??zclGeneral_HdlInSpecificCommands_13
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        JZ        ??zclGeneral_HdlInSpecificCommands_14
        DEC       A
        JZ        ??zclGeneral_HdlInSpecificCommands_14
        DEC       A
        JNZ       ??zclGeneral_HdlInSpecificCommands_15
??zclGeneral_HdlInSpecificCommands_14:
        MOV       DPL,R4
        MOV       DPH,R5
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ        ??zclGeneral_HdlInSpecificCommands_13
        ; Setup parameters for indirect call
        MOV       A,R2
        MOV       R1,A
        LCALL     ?CALL_IND
        SJMP      ??zclGeneral_HdlInSpecificCommands_13
??zclGeneral_HdlInSpecificCommands_15:
        MOV       R6,#0x1
??zclGeneral_HdlInSpecificCommands_13:
        MOV       A,R6
??zclGeneral_HdlInSpecificCommands_12:
        MOV       R1,A
// 1671       break;
// 1672 #endif // ZCL_ON_OFF
// 1673 
// 1674 #ifdef ZCL_LEVEL_CTRL
// 1675     case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
// 1676       stat = zclGeneral_ProcessInLevelControl( pInMsg, pCBs );
// 1677       break;
// 1678 #endif // ZCL_LEVEL_CTRL
// 1679 
// 1680 #ifdef ZCL_ALARMS
// 1681     case ZCL_CLUSTER_ID_GEN_ALARMS:
// 1682       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1683         stat = zclGeneral_ProcessInAlarmsServer( pInMsg, pCBs );
// 1684       else
// 1685         stat = zclGeneral_ProcessInAlarmsClient( pInMsg, pCBs );
// 1686       break;
// 1687 #endif // ZCL_ALARMS
// 1688 
// 1689 #ifdef ZCL_LOCATION
// 1690     case ZCL_CLUSTER_ID_GEN_LOCATION:
// 1691       if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1692         stat = zclGeneral_ProcessInLocationServer( pInMsg, pCBs );
// 1693       else
// 1694         stat = zclGeneral_ProcessInLocationClient( pInMsg, pCBs );
// 1695       break;
// 1696 #endif // ZCL_LOCATION
// 1697 
// 1698     case ZCL_CLUSTER_ID_GEN_POWER_CFG:
// 1699     case ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG:
// 1700     case ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG:
// 1701     case ZCL_CLUSTER_ID_GEN_TIME:
// 1702     default:
// 1703       stat = ZFailure;
// 1704       break;
// 1705   }
// 1706 
// 1707   return ( stat );
??zclGeneral_HdlInSpecificCommands_9:
        MOV       A,#0x4
        LJMP      ??Subroutine32_0 & 0xFFFF
// 1708 }
          CFI EndBlock cfiBlock22

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zclClosures_RegisterDoorLockCmdCallbacks
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        MOV       A,R0
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zclGeneral_RegisterCmdCallbacks
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zclClosures_RegisterDoorLockCmdCallbacks
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker45 Using cfiCommon1
          CFI (cfiPicker45) NoFunction
          CFI (cfiPicker45) Picker
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond46 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function zclClosures_HdlInSpecificCommands
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker48 Using cfiCommon1
          CFI (cfiPicker48) NoFunction
          CFI (cfiPicker48) Picker
        INC       DPTR
        INC       DPTR
        INC       DPTR
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiPicker48
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function zclClosures_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zclClosures_HdlInSpecificCommands
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+-2
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-2
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function zclClosures_HdlInSpecificCommands
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        LCALL     ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV       R1,A
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker57 Using cfiCommon1
          CFI (cfiPicker57) NoFunction
          CFI (cfiPicker57) Picker
        LCALL     ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_65:
        MOV       R1,A
        MOV       DPL,R0
        MOV       DPH,R1
        MOV       A,DPL
        ORL       A,DPH
        RET
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiPicker57
// 1709 
// 1710 #ifdef ZCL_BASIC
// 1711 /*********************************************************************
// 1712  * @fn      zclGeneral_ProcessInBasic
// 1713  *
// 1714  * @brief   Process in the received Basic Command.
// 1715  *
// 1716  * @param   pInMsg - pointer to the incoming message
// 1717  *
// 1718  * @return  ZStatus_t
// 1719  */
// 1720 static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg,
// 1721                                             zclGeneral_AppCallbacks_t *pCBs )
// 1722 {
// 1723   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1724   {
// 1725     if ( pInMsg->hdr.commandID > COMMAND_BASIC_RESET_FACT_DEFAULT )
// 1726       return ( ZFailure );   // Error ignore the command
// 1727 
// 1728     if ( pCBs->pfnBasicReset )
// 1729       pCBs->pfnBasicReset();
// 1730   }
// 1731   // no Client command
// 1732 
// 1733   return ( ZSuccess );
// 1734 }
// 1735 #endif // ZCL_BASIC
// 1736 
// 1737 /*********************************************************************
// 1738  * @fn      zclGeneral_ProcessInIdentityJC
// 1739  *
// 1740  * @brief   Process in the received Identity Query Response Command.
// 1741  *
// 1742  * @param   pInMsg - pointer to the incoming message
// 1743  *
// 1744  * @return  ZStatus_t
// 1745  */
// 1746 static ZStatus_t zclGeneral_ProcessInIdentityJC( zclIncoming_t *pInMsg,
// 1747                                                zclGeneral_AppCallbacks_t *pCBs )
// 1748 {
// 1749   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 1750   {
// 1751     // We do not care about the ZCL Identify command sent to the coordinator
// 1752   }
// 1753   else // Client Command
// 1754   {
// 1755     if ( pInMsg->hdr.commandID > COMMAND_IDENTIFY_QUERY_RSP )
// 1756       return ( ZFailure );   // Error ignore the command
// 1757 
// 1758     zclIdentifyQueryRsp_t rsp;
// 1759     
// 1760     rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 1761     rsp.timeout = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
// 1762 
// 1763     if (pCBs->pfnIdentifyQueryRsp)
// 1764     {
// 1765       pCBs->pfnIdentifyQueryRsp(&rsp);
// 1766     }
// 1767     
// 1768     //bdb_ZclIdentifyQueryCmdInd( &rsp );
// 1769   }
// 1770   return ( ZSuccess );
// 1771 }
// 1772 
// 1773 #ifdef ZCL_GROUPS
// 1774 
// 1775 /*********************************************************************
// 1776  * @fn      zclGeneral_AddGroup
// 1777  *
// 1778  * @brief   Add a Group.
// 1779  *
// 1780  * @param   endPoint - application endpoint
// 1781  * @param   group - group to be added
// 1782  * @param   pData - pointer to the group info
// 1783  *
// 1784  * @return  ZStatus_t
// 1785  */
// 1786 static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData )
// 1787 {
// 1788   uint8 nameLen;
// 1789   uint8 nameSupport = FALSE;
// 1790 
// 1791   pData += 2;   // Move past group ID
// 1792   nameLen = *pData++;
// 1793 
// 1794   // Retrieve Name Support attribute
// 1795   zcl_ReadAttrData( endPoint, ZCL_CLUSTER_ID_GEN_GROUPS,
// 1796                     ATTRID_GROUP_NAME_SUPPORT, &nameSupport, NULL );
// 1797 
// 1798   if ( nameSupport )
// 1799   {
// 1800     if ( nameLen > (APS_GROUP_NAME_LEN-1) )
// 1801        nameLen = (APS_GROUP_NAME_LEN-1);
// 1802     group->name[0] = nameLen;
// 1803     zcl_memcpy( &(group->name[1]), pData, nameLen );
// 1804   }
// 1805 
// 1806   return ( aps_AddGroup( endPoint, group ) );
// 1807 }
// 1808 
// 1809 /*********************************************************************
// 1810  * @fn      zclGeneral_ProcessInGroupsServer
// 1811  *
// 1812  * @brief   Process in the received Groups Command.
// 1813  *
// 1814  * @param   pInMsg - pointer to the incoming message
// 1815  *
// 1816  * @return  ZStatus_t
// 1817  */
// 1818 static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg )
// 1819 {
// 1820   aps_Group_t group;
// 1821   aps_Group_t *pGroup;
// 1822   uint8 *pData;
// 1823   uint8 status;
// 1824   uint8 grpCnt;
// 1825   uint8 grpRspCnt = 0;
// 1826   uint16 *grpList;
// 1827   uint16 identifyTime = 0;
// 1828   uint8 i;
// 1829   ZStatus_t stat = ZSuccess;
// 1830 
// 1831   zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
// 1832 
// 1833   pData = pInMsg->pData;
// 1834   group.ID = BUILD_UINT16( pData[0], pData[1] );
// 1835   switch ( pInMsg->hdr.commandID )
// 1836   {
// 1837     case COMMAND_GROUP_ADD:
// 1838       status = zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
// 1839       if ( status != ZSuccess )
// 1840       {
// 1841         if ( status == ZApsDuplicateEntry )
// 1842         {
// 1843           status = ZCL_STATUS_DUPLICATE_EXISTS;
// 1844         }
// 1845         else
// 1846         {
// 1847           status = ZCL_STATUS_INSUFFICIENT_SPACE;
// 1848         }
// 1849       }
// 1850 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1851       if ( UNICAST_MSG( pInMsg->msg ) )
// 1852 #endif
// 1853       {
// 1854         zclGeneral_SendGroupAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1855                                          status, group.ID, true, pInMsg->hdr.transSeqNum );
// 1856         stat = ZCL_STATUS_CMD_HAS_RSP;
// 1857       }
// 1858       break;
// 1859 
// 1860     case COMMAND_GROUP_VIEW:
// 1861 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1862       if ( UNICAST_MSG( pInMsg->msg ) )
// 1863 #endif
// 1864       {
// 1865         pGroup = aps_FindGroup( pInMsg->msg->endPoint, group.ID );
// 1866         if ( pGroup )
// 1867         {
// 1868           status = ZCL_STATUS_SUCCESS;
// 1869         }
// 1870         else
// 1871         {
// 1872           // Group not found
// 1873           status = ZCL_STATUS_NOT_FOUND;
// 1874           pGroup = &group;
// 1875         }
// 1876         zclGeneral_SendGroupViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1877                                           status, pGroup, true, pInMsg->hdr.transSeqNum );
// 1878         stat = ZCL_STATUS_CMD_HAS_RSP;
// 1879       }
// 1880       break;
// 1881 
// 1882     case COMMAND_GROUP_GET_MEMBERSHIP:
// 1883 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1884       if ( UNICAST_MSG( pInMsg->msg ) )
// 1885 #endif
// 1886       {
// 1887         grpCnt = *pData++;
// 1888 
// 1889         // Allocate space for the group list
// 1890         grpList = zcl_mem_alloc( sizeof( uint16 ) * APS_MAX_GROUPS );
// 1891         if ( grpList != NULL )
// 1892         {
// 1893           if ( grpCnt == 0 )
// 1894           {
// 1895             // Find out all the groups of which the endpoint is a member.
// 1896             grpRspCnt = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, grpList );
// 1897           }
// 1898           else
// 1899           {
// 1900             // Find out the groups (in the list) of which the endpoint is a member.
// 1901             for ( i = 0; i < grpCnt; i++ )
// 1902             {
// 1903               group.ID = BUILD_UINT16( pData[0], pData[1] );
// 1904               pData += 2;
// 1905 
// 1906               if ( aps_FindGroup( pInMsg->msg->endPoint, group.ID ) )
// 1907                 grpList[grpRspCnt++] = group.ID;
// 1908             }
// 1909           }
// 1910 
// 1911           if ( grpCnt == 0 ||  grpRspCnt != 0 )
// 1912           {
// 1913             zclGeneral_SendGroupGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1914                                                        aps_GroupsRemaingCapacity(), grpRspCnt,
// 1915                                                        grpList, true, pInMsg->hdr.transSeqNum );
// 1916           }
// 1917 
// 1918           zcl_mem_free( grpList );
// 1919         }
// 1920         else
// 1921         {
// 1922           // Couldn't allocate space for the group list -- send a Default Response command back.
// 1923           zclDefaultRspCmd_t defaultRspCmd;
// 1924 
// 1925           defaultRspCmd.commandID = pInMsg->hdr.commandID;
// 1926           defaultRspCmd.statusCode = ZCL_STATUS_INSUFFICIENT_SPACE;
// 1927           zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 1928                                  pInMsg->msg->clusterId, &defaultRspCmd,
// 1929                                  ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
// 1930         }
// 1931 
// 1932         stat = ZCL_STATUS_CMD_HAS_RSP;
// 1933       }
// 1934       break;
// 1935 
// 1936     case COMMAND_GROUP_REMOVE:
// 1937 #if defined ( ZCL_SCENES )
// 1938       zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, group.ID );
// 1939 #endif
// 1940       if ( aps_RemoveGroup( pInMsg->msg->endPoint, group.ID ) )
// 1941       {
// 1942         status = ZCL_STATUS_SUCCESS;
// 1943       }
// 1944       else
// 1945       {
// 1946         status = ZCL_STATUS_NOT_FOUND;
// 1947       }
// 1948 
// 1949 #if defined( ZCL_LIGHT_LINK_ENHANCE ) //ZLL allows response to unicast only
// 1950       if ( UNICAST_MSG( pInMsg->msg ) )
// 1951 #endif
// 1952       {
// 1953         zclGeneral_SendGroupRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 1954                                             status, group.ID, true, pInMsg->hdr.transSeqNum );
// 1955         stat = ZCL_STATUS_CMD_HAS_RSP;
// 1956       }
// 1957       break;
// 1958 
// 1959     case COMMAND_GROUP_REMOVE_ALL:
// 1960       {
// 1961         uint8 numGroups;
// 1962         uint16 groupList[APS_MAX_GROUPS];
// 1963 
// 1964         if ( numGroups = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, groupList ) )
// 1965         {
// 1966           for ( i = 0; i < numGroups; i++ )
// 1967           {
// 1968 #if defined ( ZCL_SCENES )
// 1969             zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, groupList[i] );
// 1970 #endif
// 1971           }
// 1972 
// 1973           aps_RemoveAllGroup( pInMsg->msg->endPoint );
// 1974         }
// 1975       }
// 1976       break;
// 1977 
// 1978     case COMMAND_GROUP_ADD_IF_IDENTIFYING:
// 1979       // Retrieve Identify Time
// 1980       zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
// 1981                         ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
// 1982 
// 1983       // Is device identifying itself?
// 1984       if ( identifyTime > 0 )
// 1985       {
// 1986         zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
// 1987       }
// 1988       break;
// 1989 
// 1990     default:
// 1991       stat = ZFailure;
// 1992       break;
// 1993   }
// 1994 
// 1995   return ( stat );
// 1996 }
// 1997 #endif // ZCL_GROUPS
// 1998 /*********************************************************************
// 1999  * @fn      zclGeneral_ProcessInGroupsClient
// 2000  *
// 2001  * @brief   Process in the received Groups Command.
// 2002  *
// 2003  * @param   pInMsg - pointer to the incoming message
// 2004  *
// 2005  * @return  ZStatus_t
// 2006  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2007 static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg,
zclGeneral_ProcessInGroupsClient:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
        CODE
// 2008                                                    zclGeneral_AppCallbacks_t *pCBs )
// 2009 {
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInGroupsClient, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 32
        MOV       A,#-0x20
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 2010   aps_Group_t group;
// 2011   uint8 *pData = pInMsg->pData;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
// 2012   uint8 grpCnt;
// 2013   uint8 nameLen;
// 2014   zclGroupRsp_t rsp;
// 2015   uint8 i;
// 2016   ZStatus_t stat = ZSuccess;
??CrossCallReturnLabel_15:
        MOV       ?V3,#0x0
// 2017 
// 2018   zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x12
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2019   zcl_memset( (uint8*)&rsp, 0, sizeof( zclGroupRsp_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2020 
// 2021   switch ( pInMsg->hdr.commandID )
        MOV       A,R6
        ADD       A,#0x2
        MOV       R2,A
        CLR       A
        ADDC      A,R7
        MOV       R3,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_17:
        JZ        ??zclGeneral_ProcessInGroupsClient_0
        DEC       A
        JZ        ??zclGeneral_ProcessInGroupsClient_0
        DEC       A
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsClient_1 & 0xFFFF
        DEC       A
        JZ        $+5
        LJMP      ??zclGeneral_ProcessInGroupsClient_2 & 0xFFFF
// 2022   {
// 2023     case COMMAND_GROUP_ADD_RSP:
// 2024     case COMMAND_GROUP_VIEW_RSP:
// 2025     case COMMAND_GROUP_REMOVE_RSP:
// 2026       rsp.status = *pData++;
??zclGeneral_ProcessInGroupsClient_0:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 2027       group.ID = BUILD_UINT16( pData[0], pData[1] );
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       ?V0,A
        MOV       DPL,R2
        MOV       DPH,R3
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        LCALL     ??Subroutine33_0 & 0xFFFF
// 2028 
// 2029       if ( rsp.status == ZCL_STATUS_SUCCESS && pInMsg->hdr.commandID == COMMAND_GROUP_VIEW_RSP )
??CrossCallReturnLabel_47:
        MOV       A,R4
        JNZ       ??CrossCallReturnLabel_51
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        XRL       A,#0x1
        JNZ       ??CrossCallReturnLabel_51
// 2030       {
// 2031         pData += 2;   // Move past ID
// 2032         nameLen = *pData++;
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??zclGeneral_ProcessInGroupsClient_3
        INC       R7
// 2033         if ( nameLen > (APS_GROUP_NAME_LEN-1) )
??zclGeneral_ProcessInGroupsClient_3:
        MOV       A,R1
        CLR       C
        SUBB      A,#0x10
        JC        ??zclGeneral_ProcessInGroupsClient_4
// 2034           nameLen = (APS_GROUP_NAME_LEN-1);
        MOV       R1,#0xf
// 2035         group.name[0] = nameLen;
??zclGeneral_ProcessInGroupsClient_4:
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R1
        LCALL     ?Subroutine23 & 0xFFFF
// 2036         zcl_memcpy( &(group.name[1]), pData, nameLen );
??CrossCallReturnLabel_33:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 51)
        MOV       A,R1
        MOV       R4,A
        MOV       R5,#0x0
        MOV       A,#0x14
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 48)
// 2037         rsp.grpName = group.name;
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
// 2038       }
// 2039 
// 2040       if ( pCBs->pfnGroupRsp )
??CrossCallReturnLabel_51:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInGroupsClient_5 & 0xFFFF
// 2041       {
// 2042         rsp.srcAddr = &(pInMsg->msg->srcAddr);
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
// 2043         rsp.cmdID = pInMsg->hdr.commandID;
??CrossCallReturnLabel_23:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2044         rsp.grpCnt = 1;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
// 2045         rsp.grpList = &group.ID;
        MOV       A,#0xe
        LCALL     ?XSTACK_DISP100_8
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
// 2046         rsp.capacity = 0;
??CrossCallReturnLabel_52:
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
// 2047 
// 2048         pCBs->pfnGroupRsp( &rsp );
        ; Setup parameters for indirect call
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine5 & 0xFFFF
// 2049       }
??CrossCallReturnLabel_3:
        LCALL     ?CALL_IND
        LJMP      ??zclGeneral_ProcessInGroupsClient_5 & 0xFFFF
// 2050       break;
// 2051 
// 2052     case COMMAND_GROUP_GET_MEMBERSHIP_RSP:
// 2053       {
// 2054         uint16 *grpList = NULL;
??zclGeneral_ProcessInGroupsClient_1:
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
// 2055         rsp.capacity = *pData++;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xb
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2056         grpCnt = *pData++;
        MOV       DPL,R0
        MOV       DPH,R1
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       R6
        INC       R6
        MOV       A,R3
        MOV       R7,A
// 2057 
// 2058         if ( grpCnt > 0 )
        MOV       A,?V2
        JZ        ??zclGeneral_ProcessInGroupsClient_6
// 2059         {
// 2060           // Allocate space for the group list
// 2061           grpList = zcl_mem_alloc( sizeof( uint16 ) * grpCnt );
        ; Setup parameters for call to function osal_mem_alloc
        ADD       A,0xE0 /* A   */
        MOV       R2,A
        CLR       A
        RLC       A
        MOV       R3,A
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2062           if ( grpList != NULL )
        MOV       A,R2
        ORL       A,?V1
        JZ        ??zclGeneral_ProcessInGroupsClient_6
// 2063           {
// 2064             rsp.grpCnt = grpCnt;
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V2
        MOVX      @DPTR,A
// 2065             for ( i = 0; i < grpCnt; i++ )
        MOV       R2,#0x0
        SJMP      ??zclGeneral_ProcessInGroupsClient_7
// 2066             {
// 2067               grpList[i] = BUILD_UINT16( pData[0], pData[1] );
??zclGeneral_ProcessInGroupsClient_8:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R4
        ADD       A,R0
        CLR       A
        ADDC      A,R1
        MOV       R5,A
        MOV       A,R2
        ADD       A,0xE0 /* A   */
        MOV       R0,A
        CLR       A
        RLC       A
        MOV       R1,A
        MOV       A,?V0
        ADD       A,R0
        MOV       DPL,A
        MOV       A,R3
        ADDC      A,R1
        MOV       DPH,A
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 2068               pData += 2;
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??zclGeneral_ProcessInGroupsClient_9
        INC       R7
// 2069             }
??zclGeneral_ProcessInGroupsClient_9:
        INC       R2
??zclGeneral_ProcessInGroupsClient_7:
        MOV       A,R2
        CLR       C
        SUBB      A,?V2
        JC        ??zclGeneral_ProcessInGroupsClient_8
// 2070           }
// 2071         }
// 2072 
// 2073         if ( pCBs->pfnGroupRsp )
??zclGeneral_ProcessInGroupsClient_6:
        LCALL     ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        JZ        ??zclGeneral_ProcessInGroupsClient_10
// 2074         {
// 2075           rsp.srcAddr = &(pInMsg->msg->srcAddr);
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
// 2076           rsp.cmdID = pInMsg->hdr.commandID;
??CrossCallReturnLabel_24:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x6
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2077           rsp.grpList = grpList;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
// 2078 
// 2079           pCBs->pfnGroupRsp( &rsp );
        ; Setup parameters for indirect call
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine5 & 0xFFFF
// 2080         }
??CrossCallReturnLabel_4:
        LCALL     ?CALL_IND
// 2081 
// 2082         if ( grpList != NULL )
??zclGeneral_ProcessInGroupsClient_10:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??zclGeneral_ProcessInGroupsClient_5
// 2083         {
// 2084           zcl_mem_free( grpList );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGeneral_ProcessInGroupsClient_5
// 2085         }
// 2086       }
// 2087       break;
// 2088 
// 2089     default:
// 2090       stat = ZFailure;
??zclGeneral_ProcessInGroupsClient_2:
        MOV       ?V3,#0x1
// 2091       break;
// 2092   }
// 2093 
// 2094   return ( stat );
??zclGeneral_ProcessInGroupsClient_5:
        MOV       R1,?V3
        MOV       A,#0x20
          CFI EndBlock cfiBlock58
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
// 2095 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 48)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock59

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV       A,#0x4
        RET
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker65 Using cfiCommon1
          CFI (cfiPicker65) NoFunction
          CFI (cfiPicker65) Picker
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiPicker65

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        LCALL     ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_8
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-4
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_3
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-4
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_4
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-4
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiPicker73 Using cfiCommon1
          CFI (cfiPicker73) NoFunction
          CFI (cfiPicker73) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        LCALL     ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_67:
        XCH       A,R0
        ADD       A,#0xc
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_69:
        RET
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiPicker73
// 2096 
// 2097 #if defined( ZCL_SCENES )
// 2098 #if !defined ( ZCL_STANDALONE )
// 2099 /*********************************************************************
// 2100  * @fn      zclGeneral_AddScene
// 2101  *
// 2102  * @brief   Add a scene for an endpoint
// 2103  *
// 2104  * @param   endpoint -
// 2105  * @param   scene - new scene item
// 2106  *
// 2107  * @return  ZStatus_t
// 2108  */
// 2109 ZStatus_t zclGeneral_AddScene( uint8 endpoint, zclGeneral_Scene_t *scene )
// 2110 {
// 2111   zclGenSceneItem_t *pNewItem;
// 2112   zclGenSceneItem_t *pLoop;
// 2113 
// 2114   // Fill in the new profile list
// 2115   pNewItem = zcl_mem_alloc( sizeof( zclGenSceneItem_t ) );
// 2116   if ( pNewItem == NULL )
// 2117     return ( ZMemError );
// 2118 
// 2119   // Fill in the plugin record.
// 2120   pNewItem->next = (zclGenSceneItem_t *)NULL;
// 2121   pNewItem->endpoint = endpoint;
// 2122   zcl_memcpy( (uint8*)&(pNewItem->scene), (uint8*)scene, sizeof ( zclGeneral_Scene_t ));
// 2123 
// 2124   // Find spot in list
// 2125   if (  zclGenSceneTable == NULL )
// 2126   {
// 2127     zclGenSceneTable = pNewItem;
// 2128   }
// 2129   else
// 2130   {
// 2131     // Look for end of list
// 2132     pLoop = zclGenSceneTable;
// 2133     while ( pLoop->next != NULL )
// 2134       pLoop = pLoop->next;
// 2135 
// 2136     // Put new item at end of list
// 2137     pLoop->next = pNewItem;
// 2138   }
// 2139 
// 2140   // Update NV
// 2141   zclGeneral_ScenesWriteNV();
// 2142 
// 2143   return ( ZSuccess );
// 2144 }
// 2145 #endif // ZCL_STANDALONE
// 2146 
// 2147 #if !defined ( ZCL_STANDALONE )
// 2148 /*********************************************************************
// 2149  * @fn      zclGeneral_FindScene
// 2150  *
// 2151  * @brief   Find a scene with endpoint and sceneID
// 2152  *
// 2153  * @param   endpoint -
// 2154  * @param   groupID - what group the scene belongs to
// 2155  * @param   sceneID - ID to look for scene
// 2156  *
// 2157  * @return  a pointer to the scene information, NULL if not found
// 2158  */
// 2159 zclGeneral_Scene_t *zclGeneral_FindScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
// 2160 {
// 2161   zclGenSceneItem_t *pLoop;
// 2162 
// 2163   // Look for end of list
// 2164   pLoop = zclGenSceneTable;
// 2165   while ( pLoop )
// 2166   {
// 2167     if ( (pLoop->endpoint == endpoint || endpoint == 0xFF)
// 2168         && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
// 2169     {
// 2170       return ( &(pLoop->scene) );
// 2171     }
// 2172     pLoop = pLoop->next;
// 2173   }
// 2174 
// 2175   return ( (zclGeneral_Scene_t *)NULL );
// 2176 }
// 2177 #endif // ZCL_STANDALONE
// 2178 
// 2179 #if !defined ( ZCL_STANDALONE )
// 2180 /*********************************************************************
// 2181  * @fn      zclGeneral_FindAllScenesForGroup
// 2182  *
// 2183  * @brief   Find all the scenes with groupID
// 2184  *
// 2185  * @param   endpoint - endpoint to look for
// 2186  * @param   sceneList - List to hold scene IDs (should hold APS_MAX_SCENES entries)
// 2187  *
// 2188  * @return  number of scenes copied to sceneList
// 2189  */
// 2190 uint8 zclGeneral_FindAllScenesForGroup( uint8 endpoint, uint16 groupID, uint8 *sceneList )
// 2191 {
// 2192   zclGenSceneItem_t *pLoop;
// 2193   uint8 cnt = 0;
// 2194 
// 2195   // Look for end of list
// 2196   pLoop = zclGenSceneTable;
// 2197   while ( pLoop )
// 2198   {
// 2199     if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
// 2200       sceneList[cnt++] = pLoop->scene.ID;
// 2201     pLoop = pLoop->next;
// 2202   }
// 2203   return ( cnt );
// 2204 }
// 2205 #endif // ZCL_STANDALONE
// 2206 
// 2207 #if !defined ( ZCL_STANDALONE )
// 2208 /*********************************************************************
// 2209  * @fn      zclGeneral_RemoveScene
// 2210  *
// 2211  * @brief   Remove a scene with endpoint and sceneID
// 2212  *
// 2213  * @param   endpoint -
// 2214  * @param   groupID - what group the scene belongs to
// 2215  * @param   sceneID - ID to look for scene
// 2216  *
// 2217  * @return  TRUE if removed, FALSE if not found
// 2218  */
// 2219 uint8 zclGeneral_RemoveScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
// 2220 {
// 2221   zclGenSceneItem_t *pLoop;
// 2222   zclGenSceneItem_t *pPrev;
// 2223 
// 2224   // Look for end of list
// 2225   pLoop = zclGenSceneTable;
// 2226   pPrev = NULL;
// 2227   while ( pLoop )
// 2228   {
// 2229     if ( pLoop->endpoint == endpoint
// 2230         && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
// 2231     {
// 2232       if ( pPrev == NULL )
// 2233         zclGenSceneTable = pLoop->next;
// 2234       else
// 2235         pPrev->next = pLoop->next;
// 2236 
// 2237       // Free the memory
// 2238       zcl_mem_free( pLoop );
// 2239 
// 2240       // Update NV
// 2241       zclGeneral_ScenesWriteNV();
// 2242 
// 2243       return ( TRUE );
// 2244     }
// 2245     pPrev = pLoop;
// 2246     pLoop = pLoop->next;
// 2247   }
// 2248 
// 2249   return ( FALSE );
// 2250 }
// 2251 #endif // ZCL_STANDALONE
// 2252 
// 2253 #if !defined ( ZCL_STANDALONE )
// 2254 /*********************************************************************
// 2255  * @fn      zclGeneral_RemoveAllScenes
// 2256  *
// 2257  * @brief   Remove all scenes with endpoint and group Id
// 2258  *
// 2259  * @param   endpoint -
// 2260  * @param   groupID - ID to look for group
// 2261  *
// 2262  * @return  none
// 2263  */
// 2264 void zclGeneral_RemoveAllScenes( uint8 endpoint, uint16 groupID )
// 2265 {
// 2266   zclGenSceneItem_t *pLoop;
// 2267   zclGenSceneItem_t *pPrev;
// 2268   zclGenSceneItem_t *pNext;
// 2269 
// 2270   // Look for end of list
// 2271   pLoop = zclGenSceneTable;
// 2272   pPrev = NULL;
// 2273   while ( pLoop )
// 2274   {
// 2275     if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
// 2276     {
// 2277       if ( pPrev == NULL )
// 2278         zclGenSceneTable = pLoop->next;
// 2279       else
// 2280         pPrev->next = pLoop->next;
// 2281       pNext = pLoop->next;
// 2282 
// 2283       // Free the memory
// 2284       zcl_mem_free( pLoop );
// 2285       pLoop = pNext;
// 2286     }
// 2287     else
// 2288     {
// 2289       pPrev = pLoop;
// 2290       pLoop = pLoop->next;
// 2291     }
// 2292   }
// 2293 
// 2294   // Update NV
// 2295   zclGeneral_ScenesWriteNV();
// 2296 }
// 2297 #endif // ZCL_STANDALONE
// 2298 
// 2299 #if !defined ( ZCL_STANDALONE )
// 2300 /*********************************************************************
// 2301  * @fn      zclGeneral_CountScenes
// 2302  *
// 2303  * @brief   Count the number of scenes for an endpoint
// 2304  *
// 2305  * @param   endpoint -
// 2306  *
// 2307  * @return  number of scenes assigned to an endpoint
// 2308  */
// 2309 uint8 zclGeneral_CountScenes( uint8 endpoint )
// 2310 {
// 2311   zclGenSceneItem_t *pLoop;
// 2312   uint8 cnt = 0;
// 2313 
// 2314   // Look for end of list
// 2315   pLoop = zclGenSceneTable;
// 2316   while ( pLoop )
// 2317   {
// 2318     if ( pLoop->endpoint == endpoint  )
// 2319       cnt++;
// 2320     pLoop = pLoop->next;
// 2321   }
// 2322   return ( cnt );
// 2323 }
// 2324 #endif
// 2325 
// 2326 #if !defined ( ZCL_STANDALONE )
// 2327 /*********************************************************************
// 2328  * @fn      zclGeneral_CountAllScenes
// 2329  *
// 2330  * @brief   Count the total number of scenes
// 2331  *
// 2332  * @param   none
// 2333  *
// 2334  * @return  number of scenes
// 2335  */
// 2336 uint8 zclGeneral_CountAllScenes( void )
// 2337 {
// 2338   zclGenSceneItem_t *pLoop;
// 2339   uint8 cnt = 0;
// 2340 
// 2341   // Look for end of list
// 2342   pLoop = zclGenSceneTable;
// 2343   while ( pLoop )
// 2344   {
// 2345     cnt++;
// 2346     pLoop = pLoop->next;
// 2347   }
// 2348   return ( cnt );
// 2349 }
// 2350 #endif // ZCL_STANDALONE
// 2351 
// 2352 /*********************************************************************
// 2353  * @fn      zclGeneral_ReadSceneCountCB
// 2354  *
// 2355  * @brief   Read the number of scenes currently in the device's
// 2356  *          scene table (i.e., the Scene Count attribute).
// 2357  *
// 2358  *          Note: This function gets called only when the pointer
// 2359  *                'dataPtr' to the Scene Count attribute value is
// 2360  *                NULL in the attribute database registered with
// 2361  *                the ZCL.
// 2362  *
// 2363  * @param   clusterId - cluster that attribute belongs to
// 2364  * @param   attrId - attribute to be read or written
// 2365  * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
// 2366  * @param   pValue - pointer to attribute value
// 2367  * @param   pLen - pointer to length of attribute value read
// 2368  *
// 2369  * @return  status
// 2370  */
// 2371 ZStatus_t zclGeneral_ReadSceneCountCB( uint16 clusterId, uint16 attrId,
// 2372                                        uint8 oper, uint8 *pValue, uint16 *pLen )
// 2373 {
// 2374   ZStatus_t status = ZCL_STATUS_SUCCESS;
// 2375 
// 2376   // This callback function should only be called for the Scene Count attribute
// 2377   switch ( oper )
// 2378   {
// 2379     case ZCL_OPER_LEN:
// 2380       *pLen = 1; // uint8
// 2381       break;
// 2382 
// 2383     case ZCL_OPER_READ:
// 2384       *pValue = zclGeneral_CountAllScenes();
// 2385 
// 2386       if ( pLen != NULL )
// 2387       {
// 2388         *pLen = 1;
// 2389       }
// 2390       break;
// 2391 
// 2392     case ZCL_OPER_WRITE:
// 2393       // Fall through
// 2394 
// 2395     default:
// 2396       status = ZCL_STATUS_SOFTWARE_FAILURE; // should never get here!
// 2397       break;
// 2398   }
// 2399 
// 2400   return ( status );
// 2401 }
// 2402 
// 2403 /*********************************************************************
// 2404  * @fn      zclGeneral_ProcessInScenesServer
// 2405  *
// 2406  * @brief   Process in the received Scenes Command.
// 2407  *
// 2408  * @param   pInMsg - pointer to the incoming message
// 2409  *
// 2410  * @return  ZStatus_t
// 2411  */
// 2412 static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg,
// 2413                                                    zclGeneral_AppCallbacks_t *pCBs )
// 2414 {
// 2415   zclGeneral_Scene_t scene;
// 2416   zclGeneral_Scene_t *pScene;
// 2417   uint8 *pData = pInMsg->pData;
// 2418   uint8 nameLen;
// 2419   uint8 status;
// 2420   uint8 sceneCnt = 0;
// 2421   uint8 *sceneList = NULL;
// 2422   uint8 sendRsp = TRUE;
// 2423   uint8 nameSupport = FALSE;
// 2424   ZStatus_t stat = ZSuccess;
// 2425 
// 2426   zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
// 2427 
// 2428   scene.groupID = BUILD_UINT16( pData[0], pData[1] );
// 2429   pData += 2;   // Move past group ID
// 2430   scene.ID = *pData++;
// 2431 
// 2432   switch ( pInMsg->hdr.commandID )
// 2433   {
// 2434     case COMMAND_SCENE_ADD:
// 2435 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2436     case COMMAND_SCENE_ENHANCED_ADD:
// 2437 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2438       // Parse the rest of the incoming message
// 2439       scene.transTime = BUILD_UINT16( pData[0], pData[1] );
// 2440       pData += 2;
// 2441 
// 2442       if ( pInMsg->hdr.commandID == COMMAND_SCENE_ENHANCED_ADD )
// 2443       {
// 2444         // Received transition time is in 1/10 second
// 2445         scene.transTime100ms = scene.transTime % 10;
// 2446         scene.transTime /= 10;
// 2447       }
// 2448 
// 2449       nameLen= *pData++; // Name length
// 2450 
// 2451       // Retrieve Name Support attribute
// 2452       zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_SCENES,
// 2453                         ATTRID_SCENES_NAME_SUPPORT, &nameSupport, NULL );
// 2454 
// 2455       if ( nameSupport )
// 2456       {
// 2457         if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
// 2458           nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
// 2459         scene.name[0] = nameLen;
// 2460         zcl_memcpy( &(scene.name[1]), pData, nameLen );
// 2461       }
// 2462 
// 2463       pData += nameLen; // move past name, use original length
// 2464 
// 2465       scene.extLen = pInMsg->pDataLen - ( (uint16)( pData - pInMsg->pData ) );
// 2466       if ( scene.extLen > 0 )
// 2467       {
// 2468         // Copy the extention field(s)
// 2469         if ( scene.extLen > ZCL_GEN_SCENE_EXT_LEN )
// 2470         {
// 2471           scene.extLen = ZCL_GEN_SCENE_EXT_LEN;
// 2472         }
// 2473         zcl_memcpy( scene.extField, pData, scene.extLen );
// 2474       }
// 2475 
// 2476       if ( scene.groupID == 0x0000 ||
// 2477            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2478       {
// 2479         // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
// 2480         // does and the corresponding Group exits
// 2481         pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2482         if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
// 2483         {
// 2484           status = ZCL_STATUS_SUCCESS;
// 2485           if ( pScene != NULL )
// 2486           {
// 2487             // The Scene already exists so update it
// 2488             pScene->transTime = scene.transTime;
// 2489             zcl_memcpy( pScene->name, scene.name, ZCL_GEN_SCENE_NAME_LEN );
// 2490 
// 2491             // Use the new extention field(s)
// 2492             zcl_memcpy( pScene->extField, scene.extField, scene.extLen );
// 2493             pScene->extLen = scene.extLen;
// 2494 
// 2495             // Save Scenes
// 2496             zclGeneral_ScenesSave();
// 2497           }
// 2498           else
// 2499           {
// 2500             // The Scene doesn't exist so add it
// 2501             zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
// 2502           }
// 2503         }
// 2504         else
// 2505         {
// 2506           status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
// 2507         }
// 2508       }
// 2509       else
// 2510       {
// 2511         status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2512       }
// 2513 
// 2514       if ( UNICAST_MSG( pInMsg->msg ) )
// 2515       {
// 2516         if ( pInMsg->hdr.commandID == COMMAND_SCENE_ADD )
// 2517         {
// 2518           zclGeneral_SendSceneAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2519                                           status, scene.groupID, scene.ID,
// 2520                                           true, pInMsg->hdr.transSeqNum );
// 2521         }
// 2522 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2523         else // COMMAND_SCENE_ENHANCED_ADD
// 2524         {
// 2525           zclGeneral_SendSceneEnhancedAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2526                                                   status, scene.groupID, scene.ID,
// 2527                                                   true, pInMsg->hdr.transSeqNum );
// 2528         }
// 2529 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2530       }
// 2531       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2532 
// 2533       break;
// 2534 
// 2535     case COMMAND_SCENE_VIEW:
// 2536 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2537     case COMMAND_SCENE_ENHANCED_VIEW:
// 2538 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2539       pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2540       if ( pScene != NULL )
// 2541       {
// 2542         status = ZCL_STATUS_SUCCESS;
// 2543       }
// 2544       else
// 2545       {
// 2546         // Scene not found
// 2547         if ( scene.groupID != 0x0000 &&
// 2548              aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
// 2549         {
// 2550           status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2551         }
// 2552         else
// 2553         {
// 2554           status = ZCL_STATUS_NOT_FOUND;
// 2555         }
// 2556         pScene = &scene;
// 2557       }
// 2558 
// 2559       if ( UNICAST_MSG( pInMsg->msg ) )
// 2560       {
// 2561         if ( pInMsg->hdr.commandID == COMMAND_SCENE_VIEW )
// 2562         {
// 2563           zclGeneral_SendSceneViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2564                                            status, pScene, true, pInMsg->hdr.transSeqNum );
// 2565         }
// 2566 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2567         else
// 2568         {
// 2569           zclGeneral_SendSceneEnhancedViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2570                                                    status, pScene, true, pInMsg->hdr.transSeqNum );
// 2571         }
// 2572 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2573       }
// 2574       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2575       break;
// 2576 
// 2577     case COMMAND_SCENE_REMOVE:
// 2578       if ( zclGeneral_RemoveScene( pInMsg->msg->endPoint, scene.groupID, scene.ID ) )
// 2579       {
// 2580         status = ZCL_STATUS_SUCCESS;
// 2581       }
// 2582       else
// 2583       {
// 2584         // Scene not found
// 2585         if ( aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
// 2586         {
// 2587           // The Group is not in the Group Table
// 2588           status = ZCL_STATUS_INVALID_FIELD;
// 2589         }
// 2590         else
// 2591         {
// 2592           status = ZCL_STATUS_NOT_FOUND;
// 2593         }
// 2594       }
// 2595 
// 2596       if ( UNICAST_MSG( pInMsg->msg ) )
// 2597       {
// 2598         // Addressed to this device (not to a group) - send a response back
// 2599         zclGeneral_SendSceneRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2600                                             status, scene.groupID,
// 2601                                             scene.ID, true, pInMsg->hdr.transSeqNum );
// 2602       }
// 2603       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2604       break;
// 2605 
// 2606     case COMMAND_SCENE_REMOVE_ALL:
// 2607       if ( scene.groupID == 0x0000 ||
// 2608            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2609       {
// 2610         zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, scene.groupID );
// 2611         status = ZCL_STATUS_SUCCESS;
// 2612       }
// 2613       else
// 2614       {
// 2615         status = ZCL_STATUS_INVALID_FIELD;
// 2616       }
// 2617 
// 2618       if ( UNICAST_MSG( pInMsg->msg ) )
// 2619       {
// 2620         // Addressed to this device (not to a group) - send a response back
// 2621         zclGeneral_SendSceneRemoveAllResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2622                                                status, scene.groupID, true, pInMsg->hdr.transSeqNum );
// 2623       }
// 2624       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2625       break;
// 2626 
// 2627     case COMMAND_SCENE_STORE:
// 2628       if ( scene.groupID == 0x0000 ||
// 2629            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2630       {
// 2631         // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
// 2632         // does and the corresponding Group exits
// 2633         pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2634         if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
// 2635         {
// 2636           uint8 sceneChanged = FALSE;
// 2637 
// 2638           status = ZCL_STATUS_SUCCESS;
// 2639           if ( pScene == NULL )
// 2640           {
// 2641             // Haven't been added yet
// 2642             pScene = &scene;
// 2643           }
// 2644 
// 2645           if ( pCBs->pfnSceneStoreReq )
// 2646           {
// 2647             zclSceneReq_t req;
// 2648 
// 2649             req.srcAddr = &(pInMsg->msg->srcAddr);
// 2650             req.scene = pScene;
// 2651 
// 2652             // Get the latest Scene info
// 2653             if ( pCBs->pfnSceneStoreReq( &req ) )
// 2654             {
// 2655               sceneChanged = TRUE;
// 2656             }
// 2657           }
// 2658 
// 2659           if ( pScene == &scene )
// 2660           {
// 2661             // The Scene doesn't exist so add it
// 2662             zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
// 2663           }
// 2664           else if ( sceneChanged )
// 2665           {
// 2666             // The Scene already exists so update only NV
// 2667             zclGeneral_ScenesSave();
// 2668           }
// 2669         }
// 2670         else
// 2671         {
// 2672           status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
// 2673         }
// 2674       }
// 2675       else
// 2676       {
// 2677         status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2678       }
// 2679 
// 2680       if ( UNICAST_MSG( pInMsg->msg ) )
// 2681       {
// 2682         // Addressed to this device (not to a group) - send a response back
// 2683         zclGeneral_SendSceneStoreResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2684                                            status, scene.groupID, scene.ID,
// 2685                                            true, pInMsg->hdr.transSeqNum );
// 2686       }
// 2687       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2688       break;
// 2689 
// 2690     case COMMAND_SCENE_RECALL:
// 2691       pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
// 2692       if ( pScene && pCBs->pfnSceneRecallReq )
// 2693       {
// 2694         zclSceneReq_t req;
// 2695 
// 2696         req.srcAddr = &(pInMsg->msg->srcAddr);
// 2697         req.scene = pScene;
// 2698 
// 2699         pCBs->pfnSceneRecallReq( &req );
// 2700       }
// 2701       // No response
// 2702       break;
// 2703 
// 2704     case COMMAND_SCENE_GET_MEMBERSHIP:
// 2705       // Find all the Scenes corresponding to the Group ID
// 2706       if ( scene.groupID == 0x0000 ||
// 2707            aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
// 2708       {
// 2709         // Allocate space for the scene list
// 2710         sceneList = zcl_mem_alloc( ZCL_GEN_MAX_SCENES );
// 2711         if ( sceneList != NULL )
// 2712         {
// 2713           sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
// 2714                                                        scene.groupID, sceneList );
// 2715           status = ZCL_STATUS_SUCCESS;
// 2716           if ( ! UNICAST_MSG( pInMsg->msg ) )
// 2717           {
// 2718             // Addressed to the Group - ONLY send a response if an entry within the
// 2719             // Scene Table corresponds to the Group ID
// 2720             if ( sceneCnt == 0 )
// 2721             {
// 2722               sendRsp = FALSE;
// 2723             }
// 2724           }
// 2725         }
// 2726         else
// 2727         {
// 2728           // Couldn't allocate space for the scene list!
// 2729           status = ZCL_STATUS_INSUFFICIENT_SPACE;
// 2730         }
// 2731       }
// 2732       else
// 2733       {
// 2734         // The Group is not in the Group Table - send a response back
// 2735         status = ZCL_STATUS_INVALID_FIELD;
// 2736       }
// 2737 
// 2738 #ifdef ZCL_LIGHT_LINK_ENHANCE //ZLL allows response to unicast only
// 2739       if ( sendRsp && UNICAST_MSG( pInMsg->msg ) )
// 2740 #else
// 2741       if ( sendRsp )
// 2742 #endif //ZCL_LIGHT_LINK_ENHANCE
// 2743       {
// 2744         zclGeneral_SendSceneGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2745                                     status, zclGeneral_ScenesRemaingCapacity(), sceneCnt, sceneList,
// 2746                                     scene.groupID, true, pInMsg->hdr.transSeqNum );
// 2747       }
// 2748 
// 2749       if ( sceneList != NULL )
// 2750         zcl_mem_free( sceneList );
// 2751 
// 2752       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2753       break;
// 2754 
// 2755 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 2756     case COMMAND_SCENE_COPY:
// 2757       {
// 2758         uint8 mode;
// 2759         uint16 groupIDFrom, groupIDTo;
// 2760         uint8 sceneIDFrom, sceneIDTo;
// 2761 
// 2762         pData = pInMsg->pData; // different payload format
// 2763 
// 2764         mode = *pData++;
// 2765         groupIDFrom = BUILD_UINT16( pData[0], pData[1] ); // from group ID
// 2766         pData += 2;
// 2767         sceneIDFrom = *pData++; // from scene ID
// 2768         groupIDTo = BUILD_UINT16( pData[0], pData[1] ); // to group ID
// 2769         pData += 2;
// 2770         if ( (mode & SCENE_COPY_MODE_ALL_BIT) == 0 )
// 2771         {
// 2772           sceneIDTo = *pData++; // to scene ID
// 2773         }
// 2774 
// 2775         // Make sure the groups exist
// 2776         if ( ( aps_FindGroup( pInMsg->msg->endPoint, groupIDFrom ) != NULL ) &&
// 2777              ( aps_FindGroup( pInMsg->msg->endPoint, groupIDTo ) != NULL ) )
// 2778         {
// 2779           // Allocate space for the scene list
// 2780           sceneList = zcl_mem_alloc( (mode & SCENE_COPY_MODE_ALL_BIT) ? ZCL_GEN_MAX_SCENES : 1 );
// 2781           if ( sceneList == NULL )
// 2782           {
// 2783             status = ZCL_STATUS_INSUFFICIENT_SPACE; // Couldn't allocate space for the scene list!
// 2784           }
// 2785           else
// 2786           {
// 2787             status = ZCL_STATUS_SUCCESS;
// 2788             if ( mode & SCENE_COPY_MODE_ALL_BIT ) // Copy all scenes
// 2789             {
// 2790               sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
// 2791                                                            groupIDFrom, sceneList );
// 2792             }
// 2793             else // Copy single scene
// 2794             {
// 2795               // Make sure the scene exists
// 2796               pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneIDFrom );
// 2797               if ( pScene != NULL )
// 2798               {
// 2799                 sceneList[0] = sceneIDFrom;
// 2800                 sceneCnt = 1;
// 2801               }
// 2802               else
// 2803               {
// 2804                 status = ZCL_STATUS_INVALID_FIELD; // Scene not found
// 2805               }
// 2806             }
// 2807           }
// 2808 
// 2809           if ( status == ZCL_STATUS_SUCCESS )
// 2810           {
// 2811             uint8 numScenesToAdd = 0;
// 2812             uint8 i;
// 2813             for ( i = 0; i < sceneCnt; i++ )
// 2814             {
// 2815               if ( zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, sceneList[i] ) == NULL )
// 2816               {
// 2817                 numScenesToAdd++;
// 2818               }
// 2819             }
// 2820             if ( zclGeneral_ScenesRemaingCapacity() >= numScenesToAdd )
// 2821             {
// 2822               // Copy the scenes
// 2823               for ( i = 0; i < sceneCnt; i++ )
// 2824               {
// 2825                 // Ignore scene ID from and scene ID to fields
// 2826                 pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneList[i] );
// 2827                 if ( pScene != NULL )
// 2828                 {
// 2829                   zclGeneral_Scene_t *pToScene;
// 2830                   scene = *pScene;
// 2831                   scene.groupID = groupIDTo;
// 2832                   scene.ID = ( (mode & SCENE_COPY_MODE_ALL_BIT) ? sceneList[i] : sceneIDTo );
// 2833 
// 2834                   pToScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
// 2835                   if( pToScene != NULL )
// 2836                   {
// 2837                     zclGeneral_RemoveScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
// 2838                   }
// 2839                   // Add the scene
// 2840                   zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
// 2841                 }
// 2842               }
// 2843             }
// 2844             else
// 2845             {
// 2846               status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
// 2847             }
// 2848           }
// 2849         }
// 2850         else
// 2851         {
// 2852           status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
// 2853         }
// 2854 
// 2855         if ( UNICAST_MSG( pInMsg->msg ) )
// 2856         {
// 2857           if ( pScene == NULL )
// 2858           {
// 2859             pScene = &scene;
// 2860           }
// 2861           // Addressed to this device (not to a group) - send a response back
// 2862           zclGeneral_SendSceneCopyResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 2863                                             status, pScene->groupID, pScene->ID,
// 2864                                             true, pInMsg->hdr.transSeqNum );
// 2865         }
// 2866 
// 2867         if ( sceneList != NULL )
// 2868         {
// 2869           zcl_mem_free( sceneList );
// 2870         }
// 2871       }
// 2872 
// 2873       stat = ZCL_STATUS_CMD_HAS_RSP;
// 2874       break;
// 2875 #endif // ZCL_LIGHT_LINK_ENHANCE
// 2876 
// 2877     default:
// 2878       stat = ZFailure;
// 2879     break;
// 2880   }
// 2881 
// 2882   return ( stat );
// 2883 }
// 2884 
// 2885 #endif // ZCL_SCENES
// 2886 /*********************************************************************
// 2887  * @fn      zclGeneral_ProcessInScenesClient
// 2888  *
// 2889  * @brief   Process in the received Scenes Command.
// 2890  *
// 2891  * @param   pInMsg - pointer to the incoming message
// 2892  *
// 2893  * @return  ZStatus_t
// 2894  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 2895 static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg,
zclGeneral_ProcessInScenesClient:
          CFI Block cfiBlock74 Using cfiCommon0
          CFI Function zclGeneral_ProcessInScenesClient
        CODE
// 2896                                                    zclGeneral_AppCallbacks_t *pCBs )
// 2897 {
        FUNCALL zclGeneral_ProcessInScenesClient, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 86, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInScenesClient, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 86, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInScenesClient, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 89, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 89, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInScenesClient, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 86, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclGeneral_ProcessInScenesClient, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 86, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 86, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 70
        MOV       A,#-0x46
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R4
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R5
        MOVX      @DPTR,A
// 2898   zclGeneral_Scene_t scene;
// 2899   uint8 *pData = pInMsg->pData;
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine11 & 0xFFFF
// 2900   uint8 nameLen;
// 2901   zclSceneRsp_t rsp;
// 2902   uint8 i;
// 2903   ZStatus_t stat = ZSuccess;
??CrossCallReturnLabel_16:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       A
        MOVX      @DPTR,A
// 2904 
// 2905   zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0x37
        MOV       R5,A
        MOV       R1,A
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2906   zcl_memset( (uint8*)&rsp, 0, sizeof( zclSceneRsp_t ) );
        ; Setup parameters for call to function osal_memset
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       R1,#0x0
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
// 2907 
// 2908   // Get the status field first
// 2909   rsp.status = *pData++;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine24 & 0xFFFF
// 2910 
// 2911   if ( pInMsg->hdr.commandID == COMMAND_SCENE_GET_MEMBERSHIP_RSP )
??CrossCallReturnLabel_35:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        XRL       A,#0x6
        JNZ       ??zclGeneral_ProcessInScenesClient_0
// 2912   {
// 2913     rsp.capacity = *pData++;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0xc
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       R6
        MOV       R7,DPH
// 2914   }
// 2915 
// 2916   scene.groupID = BUILD_UINT16( pData[0], pData[1] );
??zclGeneral_ProcessInScenesClient_0:
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
// 2917   pData += 2;   // Move past group ID
??CrossCallReturnLabel_53:
        MOV       A,R6
        ADD       A,#0x2
        MOV       R6,A
        JNC       ??zclGeneral_ProcessInScenesClient_1
        INC       R7
// 2918 
// 2919   switch ( pInMsg->hdr.commandID )
??zclGeneral_ProcessInScenesClient_1:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R0,DPL
        MOV       R1,DPH
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInScenesClient_2 & 0xFFFF
        DEC       A
        JZ        ??zclGeneral_ProcessInScenesClient_3
        DEC       A
        JZ        ??zclGeneral_ProcessInScenesClient_2
        DEC       A
        JZ        ??zclGeneral_ProcessInScenesClient_2
        DEC       A
        JZ        ??zclGeneral_ProcessInScenesClient_2
        ADD       A,#-0x2
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInScenesClient_4 & 0xFFFF
        ADD       A,#-0x3a
        JZ        ??zclGeneral_ProcessInScenesClient_2
        DEC       A
        JZ        ??zclGeneral_ProcessInScenesClient_3
        DEC       A
        JZ        ??zclGeneral_ProcessInScenesClient_2
        LJMP      ??zclGeneral_ProcessInScenesClient_5 & 0xFFFF
// 2920   {
// 2921     // JC NOTE: Extend the original z-stack to let it parse enhanced view/add commands
// 2922     case COMMAND_SCENE_ENHANCED_VIEW_RSP:
// 2923     case COMMAND_SCENE_VIEW_RSP:
// 2924       // Parse the rest of the incoming message
// 2925       scene.ID = *pData++; // Not applicable to Remove All Response command
??zclGeneral_ProcessInScenesClient_3:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 2926       scene.transTime = BUILD_UINT16( pData[0], pData[1] );
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
// 2927       pData += 2;
// 2928       nameLen = *pData++; // Name length
??CrossCallReturnLabel_54:
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       A,R6
        ADD       A,#0x3
        MOV       R6,A
        JNC       ??zclGeneral_ProcessInScenesClient_6
        INC       R7
// 2929       if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
??zclGeneral_ProcessInScenesClient_6:
        MOV       A,?V3
        CLR       C
        SUBB      A,#0x10
        JC        ??zclGeneral_ProcessInScenesClient_7
// 2930         nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
        MOV       ?V3,#0xf
// 2931 
// 2932       scene.name[0] = nameLen;
??zclGeneral_ProcessInScenesClient_7:
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V3
        LCALL     ?Subroutine23 & 0xFFFF
// 2933       zcl_memcpy( &(scene.name[1]), pData, nameLen );
??CrossCallReturnLabel_34:
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 89)
        MOV       R4,?V3
        MOV       R5,#0x0
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 86)
// 2934 
// 2935       pData += nameLen; // move past name, use original length
        MOV       R0,?V3
        MOV       A,R6
        ADD       A,R0
        MOV       R6,A
        CLR       A
        ADDC      A,R7
        MOV       R7,A
// 2936 
// 2937       //*** Do something with the extension field(s)
// 2938 
// 2939       // Fall through to callback - break is left off intentionally
// 2940     case COMMAND_SCENE_ADD_RSP:
// 2941     // JC NOTE: Extend the original z-stack to let it parse enhanced view/add commands
// 2942     case COMMAND_SCENE_ENHANCED_ADD_RSP:
// 2943     case COMMAND_SCENE_REMOVE_RSP:
// 2944     case COMMAND_SCENE_REMOVE_ALL_RSP:
// 2945     case COMMAND_SCENE_STORE_RSP:
// 2946     // JC NOTE: Extend the original z-stack to let it parse Copy Scene Response command.
// 2947     // The intuition is that the payload for the command is the same as COMMAND_SCNE_ADD_RSP
// 2948     case COMMAND_SCENE_COPY_RSP:
// 2949       if ( pCBs->pfnSceneRsp )
??zclGeneral_ProcessInScenesClient_2:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_9:
        JNZ       $+5
        LJMP      ??zclGeneral_ProcessInScenesClient_8 & 0xFFFF
// 2950       {
// 2951         if ( pInMsg->hdr.commandID != COMMAND_SCENE_REMOVE_ALL_RSP )
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        XRL       A,#0x3
        JZ        ??zclGeneral_ProcessInScenesClient_9
// 2952         {
// 2953           scene.ID = *pData++;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2954         }
// 2955         rsp.srcAddr = &(pInMsg->msg->srcAddr);
??zclGeneral_ProcessInScenesClient_9:
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
// 2956         rsp.cmdID = pInMsg->hdr.commandID;
??CrossCallReturnLabel_25:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2957         rsp.scene = &scene;
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP100_8
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
// 2958 
// 2959         pCBs->pfnSceneRsp( &rsp );
??CrossCallReturnLabel_55:
        ; Setup parameters for indirect call
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
// 2960       }
??CrossCallReturnLabel_5:
        LCALL     ?CALL_IND
        LJMP      ??zclGeneral_ProcessInScenesClient_8 & 0xFFFF
// 2961       break;
// 2962 
// 2963     case COMMAND_SCENE_GET_MEMBERSHIP_RSP:
// 2964       {
// 2965         uint8 *sceneList = NULL;
??zclGeneral_ProcessInScenesClient_4:
        MOV       ?V0,#0x0
        MOV       ?V1,#0x0
// 2966 
// 2967         if ( rsp.status == ZCL_STATUS_SUCCESS )
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        JNZ       ??zclGeneral_ProcessInScenesClient_10
// 2968         {
// 2969           uint8 sceneCnt = *pData++;
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        MOV       ?V2,A
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        MOV       R7,A
// 2970 
// 2971           if ( sceneCnt > 0 )
        MOV       A,?V2
        JZ        ??zclGeneral_ProcessInScenesClient_10
// 2972           {
// 2973             // Allocate space for the scene list
// 2974             sceneList = zcl_mem_alloc( sceneCnt );
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,A
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V0,R2
        MOV       ?V1,R3
// 2975             if ( sceneList != NULL )
        MOV       A,R2
        ORL       A,?V1
        JZ        ??zclGeneral_ProcessInScenesClient_10
// 2976             {
// 2977               rsp.sceneCnt = sceneCnt;
        MOV       A,#0x9
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V2
        MOVX      @DPTR,A
// 2978               for ( i = 0; i < sceneCnt; i++ )
        MOV       R0,#0x0
        SJMP      ??zclGeneral_ProcessInScenesClient_11
// 2979                 sceneList[i] = *pData++;
??zclGeneral_ProcessInScenesClient_12:
        MOV       DPL,R6
        MOV       DPH,R7
        MOVX      A,@DPTR
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,R0
        MOV       R2,A
        MOV       A,?V0
        ADD       A,R2
        MOV       DPL,A
        CLR       A
        ADDC      A,R3
        MOV       DPH,A
        POP       A
          CFI CFA_SP SP+0
        LCALL     ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_36:
        INC       R0
??zclGeneral_ProcessInScenesClient_11:
        MOV       A,R0
        CLR       C
        SUBB      A,?V2
        JC        ??zclGeneral_ProcessInScenesClient_12
// 2980             }
// 2981           }
// 2982         }
// 2983 
// 2984         if ( pCBs->pfnSceneRsp )
??zclGeneral_ProcessInScenesClient_10:
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        JZ        ??zclGeneral_ProcessInScenesClient_13
// 2985         {
// 2986           rsp.srcAddr = &(pInMsg->msg->srcAddr);
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine18 & 0xFFFF
// 2987           rsp.cmdID = pInMsg->hdr.commandID;
??CrossCallReturnLabel_26:
        PUSH      A
          CFI CFA_SP SP+-1
        MOV       A,#0x7
        LCALL     ?XSTACK_DISP0_8
        POP       A
          CFI CFA_SP SP+0
        MOVX      @DPTR,A
// 2988           rsp.sceneList = sceneList;
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,?V0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,?V1
        MOVX      @DPTR,A
// 2989           rsp.scene = &scene;
        MOV       A,#0xf
        LCALL     ?XSTACK_DISP100_8
        MOV       A,#0xd
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine20 & 0xFFFF
// 2990 
// 2991           pCBs->pfnSceneRsp( &rsp);
??CrossCallReturnLabel_56:
        ; Setup parameters for indirect call
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP101_8
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine6 & 0xFFFF
// 2992         }
??CrossCallReturnLabel_6:
        LCALL     ?CALL_IND
// 2993 
// 2994         if ( sceneList != NULL )
??zclGeneral_ProcessInScenesClient_13:
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??zclGeneral_ProcessInScenesClient_8
// 2995         {
// 2996           zcl_mem_free( sceneList );
        ; Setup parameters for call to function osal_mem_free
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP      ??zclGeneral_ProcessInScenesClient_8
// 2997         }
// 2998       }
// 2999       break;
// 3000 
// 3001     default:
// 3002       stat = ZFailure;
??zclGeneral_ProcessInScenesClient_5:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
// 3003       break;
// 3004   }
// 3005 
// 3006   return ( stat );
??zclGeneral_ProcessInScenesClient_8:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,#0x46
        LJMP      ?Subroutine3 & 0xFFFF
// 3007 }
          CFI EndBlock cfiBlock74

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function zclGeneral_ProcessInScenesClient
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        MOVX      @DPTR,A
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        MOV       R6,DPL
        MOV       R7,DPH
        RET
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker80 Using cfiCommon1
          CFI (cfiPicker80) NoFunction
          CFI (cfiPicker80) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,R6
        MOV       ?V1,R7
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiPicker80

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond81 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker85 Using cfiCommon1
          CFI (cfiPicker85) NoFunction
          CFI (cfiPicker85) Picker
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
        MOV       DPL,?V6
        MOV       DPH,?V7
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiPicker85

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond86 Using cfiCommon0
          CFI Function zclGeneral_ProcessInScenesClient
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker88 Using cfiCommon1
          CFI (cfiPicker88) NoFunction
          CFI (cfiPicker88) Picker
        MOV       DPL,R6
        MOV       DPH,R7
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiPicker88
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond89 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_62
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker92 Using cfiCommon1
          CFI (cfiPicker92) NoFunction
          CFI (cfiPicker92) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        MOV       A,R2
        MOV       R0,A
        RET
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker95 Using cfiCommon1
          CFI (cfiPicker95) NoFunction
          CFI (cfiPicker95) Picker
        MOVX      A,@DPTR
        ADD       A,#0x7
        MOV       ?V6,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       ?V7,A
        MOV       DPL,?V6
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiPicker95

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond96 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker98 Using cfiCommon1
          CFI (cfiPicker98) NoFunction
          CFI (cfiPicker98) Picker
        LCALL     ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_66:
        XCH       A,R0
        ADD       A,#0x8
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R6,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R7,A
        RET
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiPicker98

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function zclGeneral_ProcessInScenesClient
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        LCALL     ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV       A,#0x5
        RET
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_12
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-4
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_13
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-4
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_14
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-4
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker106 Using cfiCommon1
          CFI (cfiPicker106) NoFunction
          CFI (cfiPicker106) Picker
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_46:
        ADD       A,#0x6
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOV       R1,A
        RET
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiPicker106

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond107 Using cfiCommon0
          CFI Function zclGeneral_ProcessInScenesClient
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV       R1,A
        MOV       A,R0
        ORL       A,R1
        RET
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function zclGeneral_ProcessInScenesClient
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        LCALL     ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV       DPH,A
        MOV       DPL,R0
        RET
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond113 Using cfiCommon0
          CFI Function zclGeneral_ProcessInScenesClient
          CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_10
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-4
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_5
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-4
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_6
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-4
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker117 Using cfiCommon1
          CFI (cfiPicker117) NoFunction
          CFI (cfiPicker117) Picker
        LCALL     ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_68:
        XCH       A,R0
        ADD       A,#0xe
        LCALL     ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_70:
        RET
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond118 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_8
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-6
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_3
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-6
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_4
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-6
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_9
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-6
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_10
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-6
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_5
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-6
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_6
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-6
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker126 Using cfiCommon1
          CFI (cfiPicker126) NoFunction
          CFI (cfiPicker126) Picker
        MOV       DPL,A
        CLR       A
        ADDC      A,R0
        MOV       DPH,A
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiPicker126
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond127 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function zclClosures_HdlInSpecificCommands
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_61
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function zclClosures_HdlInSpecificCommands
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_58
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function zclClosures_HdlInSpecificCommands
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_59
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-4
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_0
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-4
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_1
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-4
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_65, ??CrossCallReturnLabel_2
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-4
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_7
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-6
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_8
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-6
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_3
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-6
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_67, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_4
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-6
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_15
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-4
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_66, ??CrossCallReturnLabel_16
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-4
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_9
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-6
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_10
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-6
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_5
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-6
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_68, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_6
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-6
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_7
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-6
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_8
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-6
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_3
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-6
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_69, ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_4
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+-6
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_9
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+-6
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_10
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond149) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-6
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_5
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-6
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_70, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_6
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-6
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiPicker152 Using cfiCommon1
          CFI (cfiPicker152) NoFunction
          CFI (cfiPicker152) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiPicker152
// 3008 
// 3009 #ifdef ZCL_ON_OFF
// 3010 /*********************************************************************
// 3011  * @fn      zclGeneral_ProcessInCmdOnOff
// 3012  *
// 3013  * @brief   Process in the received On/Off Command.
// 3014  *
// 3015  * @param   pInMsg - pointer to the incoming message
// 3016  *
// 3017  * @return  ZStatus_t
// 3018  */
// 3019 static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg,
// 3020                                             zclGeneral_AppCallbacks_t *pCBs )
// 3021 {
// 3022   ZStatus_t stat = ZSuccess;
// 3023 
// 3024   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 3025   {
// 3026     switch ( pInMsg->hdr.commandID )
// 3027     {
// 3028       case COMMAND_OFF:
// 3029       case COMMAND_ON:
// 3030       case COMMAND_TOGGLE:
// 3031         if ( pCBs->pfnOnOff )
// 3032         {
// 3033           pCBs->pfnOnOff( pInMsg->hdr.commandID );
// 3034         }
// 3035         break;
// 3036 
// 3037 #ifdef ZCL_LIGHT_LINK_ENHANCE
// 3038       case COMMAND_OFF_WITH_EFFECT:
// 3039         if ( pCBs->pfnOnOff_OffWithEffect )
// 3040         {
// 3041           zclOffWithEffect_t cmd;
// 3042 
// 3043           cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3044           cmd.effectId = pInMsg->pData[0];
// 3045           cmd.effectVariant = pInMsg->pData[1];
// 3046 
// 3047           pCBs->pfnOnOff_OffWithEffect( &cmd );
// 3048         }
// 3049         break;
// 3050 
// 3051       case COMMAND_ON_WITH_RECALL_GLOBAL_SCENE:
// 3052         if ( pCBs->pfnOnOff_OnWithRecallGlobalScene )
// 3053         {
// 3054           pCBs->pfnOnOff_OnWithRecallGlobalScene();
// 3055         }
// 3056         break;
// 3057 
// 3058       case COMMAND_ON_WITH_TIMED_OFF:
// 3059         if ( pCBs->pfnOnOff_OnWithTimedOff )
// 3060         {
// 3061           zclOnWithTimedOff_t cmd;
// 3062 
// 3063           cmd.onOffCtrl.byte = pInMsg->pData[0];
// 3064           cmd.onTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
// 3065           cmd.offWaitTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
// 3066           pCBs->pfnOnOff_OnWithTimedOff( &cmd );
// 3067         }
// 3068         break;
// 3069 #endif // ZCL_LIGHT_LINK_ENHANCE
// 3070 
// 3071       default:
// 3072         stat = ZFailure;
// 3073         break;
// 3074     }
// 3075   }
// 3076   // no Client command
// 3077 
// 3078   return ( stat );
// 3079 }
// 3080 #endif // ZCL_ON_OFF
// 3081 
// 3082 #ifdef ZCL_LEVEL_CTRL
// 3083 /*********************************************************************
// 3084  * @fn      zclGeneral_ProcessInLevelControl
// 3085  *
// 3086  * @brief   Process in the received Level Control Command.
// 3087  *
// 3088  * @param   pInMsg - pointer to the incoming message
// 3089  *
// 3090  * @return  ZStatus_t
// 3091  */
// 3092 static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg,
// 3093                                                    zclGeneral_AppCallbacks_t *pCBs )
// 3094 {
// 3095   uint8 withOnOff = FALSE;
// 3096   ZStatus_t stat = ZSuccess;
// 3097 
// 3098   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 3099   {
// 3100     switch ( pInMsg->hdr.commandID )
// 3101     {
// 3102       case COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF:
// 3103         withOnOff = TRUE;
// 3104         // fall through
// 3105       case COMMAND_LEVEL_MOVE_TO_LEVEL:
// 3106         if ( pCBs->pfnLevelControlMoveToLevel )
// 3107         {
// 3108           zclLCMoveToLevel_t cmd;
// 3109 
// 3110           cmd.level = pInMsg->pData[0];
// 3111 
// 3112           if ( ( cmd.level >= ATTR_LEVEL_MIN_LEVEL ) &&
// 3113                ( cmd.level <= ATTR_LEVEL_MAX_LEVEL ) )
// 3114           {
// 3115             cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
// 3116             cmd.withOnOff = withOnOff;
// 3117 
// 3118             pCBs->pfnLevelControlMoveToLevel( &cmd );
// 3119           }
// 3120           else
// 3121           {
// 3122             // level range requested is invalid
// 3123             stat = ZCL_STATUS_INVALID_VALUE;
// 3124           }
// 3125         }
// 3126         break;
// 3127 
// 3128       case COMMAND_LEVEL_MOVE_WITH_ON_OFF:
// 3129         withOnOff = TRUE;
// 3130         // fall through
// 3131       case COMMAND_LEVEL_MOVE:
// 3132         if ( pCBs->pfnLevelControlMove )
// 3133         {
// 3134           zclLCMove_t cmd;
// 3135 
// 3136           cmd.moveMode = pInMsg->pData[0];
// 3137           cmd.rate = pInMsg->pData[1];
// 3138           cmd.withOnOff = withOnOff;
// 3139 
// 3140           pCBs->pfnLevelControlMove( &cmd );
// 3141         }
// 3142         break;
// 3143 
// 3144       case COMMAND_LEVEL_STEP_WITH_ON_OFF:
// 3145         withOnOff = TRUE;
// 3146         // fall through
// 3147       case COMMAND_LEVEL_STEP:
// 3148         if ( pCBs->pfnLevelControlStep )
// 3149         {
// 3150           zclLCStep_t cmd;
// 3151 
// 3152           cmd.stepMode = pInMsg->pData[0];
// 3153           cmd.amount =  pInMsg->pData[1];
// 3154           cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
// 3155           cmd.withOnOff = withOnOff;
// 3156 
// 3157           pCBs->pfnLevelControlStep( &cmd );
// 3158         }
// 3159         break;
// 3160 
// 3161       case COMMAND_LEVEL_STOP:
// 3162       case COMMAND_LEVEL_STOP_WITH_ON_OFF:
// 3163         // Both Stop commands are identical
// 3164         if ( pCBs->pfnLevelControlStop )
// 3165         {
// 3166           pCBs->pfnLevelControlStop();
// 3167         }
// 3168         break;
// 3169 
// 3170       default:
// 3171         stat = ZFailure;
// 3172         break;
// 3173     }
// 3174   }
// 3175   // no Client command
// 3176 
// 3177   return ( stat );
// 3178 }
// 3179 #endif // ZCL_LEVEL_CTRL
// 3180 
// 3181 #ifdef ZCL_ALARMS
// 3182 /*********************************************************************
// 3183  * @fn      zclGeneral_AddAlarm
// 3184  *
// 3185  * @brief   Add an alarm for a cluster
// 3186  *
// 3187  * @param   endpoint -
// 3188  * @param   alarm - new alarm item
// 3189  *
// 3190  * @return  ZStatus_t
// 3191  */
// 3192 ZStatus_t zclGeneral_AddAlarm( uint8 endpoint, zclGeneral_Alarm_t *alarm )
// 3193 {
// 3194   zclGenAlarmItem_t *pNewItem;
// 3195   zclGenAlarmItem_t *pLoop;
// 3196 
// 3197   // Fill in the new profile list
// 3198   pNewItem = zcl_mem_alloc( sizeof( zclGenAlarmItem_t ) );
// 3199   if ( pNewItem == NULL )
// 3200     return ( ZMemError );
// 3201 
// 3202   // Fill in the plugin record.
// 3203   pNewItem->next = (zclGenAlarmItem_t *)NULL;
// 3204   pNewItem->endpoint =  endpoint;
// 3205   zcl_memcpy( (uint8*)(&pNewItem->alarm), (uint8*)alarm, sizeof ( zclGeneral_Alarm_t ) );
// 3206 
// 3207   // Find spot in list
// 3208   if (  zclGenAlarmTable == NULL )
// 3209   {
// 3210     zclGenAlarmTable = pNewItem;
// 3211   }
// 3212   else
// 3213   {
// 3214     // Look for end of list
// 3215     pLoop = zclGenAlarmTable;
// 3216     while ( pLoop->next != NULL )
// 3217       pLoop = pLoop->next;
// 3218 
// 3219     // Put new item at end of list
// 3220     pLoop->next = pNewItem;
// 3221   }
// 3222 
// 3223   return ( ZSuccess );
// 3224 }
// 3225 
// 3226 /*********************************************************************
// 3227  * @fn      zclGeneral_FindAlarm
// 3228  *
// 3229  * @brief   Find an alarm with alarmCode and clusterID
// 3230  *
// 3231  * @param   endpoint -
// 3232  * @param   groupID - what group the scene belongs to
// 3233  * @param   sceneID - ID to look for scene
// 3234  *
// 3235  * @return  a pointer to the alarm information, NULL if not found
// 3236  */
// 3237 zclGeneral_Alarm_t *zclGeneral_FindAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
// 3238 {
// 3239   zclGenAlarmItem_t *pLoop;
// 3240 
// 3241   // Look for the alarm
// 3242   pLoop = zclGenAlarmTable;
// 3243   while ( pLoop )
// 3244   {
// 3245     if ( pLoop->endpoint == endpoint &&
// 3246          pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
// 3247     {
// 3248       return ( &(pLoop->alarm) );
// 3249     }
// 3250     pLoop = pLoop->next;
// 3251   }
// 3252 
// 3253   return ( (zclGeneral_Alarm_t *)NULL );
// 3254 }
// 3255 
// 3256 /*********************************************************************
// 3257  * @fn      zclGeneral_FindEarliestAlarm
// 3258  *
// 3259  * @brief   Find an alarm with the earliest timestamp
// 3260  *
// 3261  * @param   endpoint -
// 3262  *
// 3263  * @return  a pointer to the alarm information, NULL if not found
// 3264  */
// 3265 zclGeneral_Alarm_t *zclGeneral_FindEarliestAlarm( uint8 endpoint )
// 3266 {
// 3267   zclGenAlarmItem_t *pLoop;
// 3268   zclGenAlarmItem_t earliestAlarm;
// 3269   zclGenAlarmItem_t *pEarliestAlarm = &earliestAlarm;
// 3270 
// 3271   pEarliestAlarm->alarm.timeStamp = 0xFFFFFFFF;
// 3272 
// 3273   // Look for alarm with earliest time
// 3274   pLoop = zclGenAlarmTable;
// 3275   while ( pLoop )
// 3276   {
// 3277     if ( pLoop->endpoint == endpoint &&
// 3278          pLoop->alarm.timeStamp < pEarliestAlarm->alarm.timeStamp )
// 3279     {
// 3280       pEarliestAlarm = pLoop;
// 3281     }
// 3282     pLoop = pLoop->next;
// 3283   }
// 3284 
// 3285   if ( pEarliestAlarm->alarm.timeStamp != 0xFFFFFFFF )
// 3286     return ( &(pEarliestAlarm->alarm) );
// 3287 
// 3288   // No alarm
// 3289   return ( (zclGeneral_Alarm_t *)NULL );
// 3290 }
// 3291 
// 3292 /*********************************************************************
// 3293  * @fn      zclGeneral_ResetAlarm
// 3294  *
// 3295  * @brief   Remove an alarm with alarmCode and clusterID
// 3296  *
// 3297  * @param   endpoint -
// 3298  * @param   alarmCode -
// 3299  * @param   clusterID -
// 3300  *
// 3301  * @return  TRUE if removed, FALSE if not found
// 3302  */
// 3303 void zclGeneral_ResetAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
// 3304 {
// 3305   zclGenAlarmItem_t *pLoop;
// 3306   zclGenAlarmItem_t *pPrev;
// 3307 
// 3308   // Look for end of list
// 3309   pLoop = zclGenAlarmTable;
// 3310   pPrev = NULL;
// 3311   while ( pLoop )
// 3312   {
// 3313     if ( pLoop->endpoint == endpoint &&
// 3314          pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
// 3315     {
// 3316       if ( pPrev == NULL )
// 3317         zclGenAlarmTable = pLoop->next;
// 3318       else
// 3319         pPrev->next = pLoop->next;
// 3320 
// 3321       // Free the memory
// 3322       zcl_mem_free( pLoop );
// 3323 
// 3324       // Notify the Application so that if the alarm condition still active then
// 3325       // a new notification will be generated, and a new alarm record will be
// 3326       // added to the alarm log
// 3327       // zclGeneral_NotifyReset( alarmCode, clusterID ); // callback function?
// 3328       return;
// 3329     }
// 3330     pPrev = pLoop;
// 3331     pLoop = pLoop->next;
// 3332   }
// 3333 }
// 3334 
// 3335 /*********************************************************************
// 3336  * @fn      zclGeneral_ResetAllAlarms
// 3337  *
// 3338  * @brief   Remove all alarms with endpoint
// 3339  *
// 3340  * @param   endpoint -
// 3341  * @param   notifyApp -
// 3342  *
// 3343  * @return  none
// 3344  */
// 3345 void zclGeneral_ResetAllAlarms( uint8 endpoint, uint8 notifyApp )
// 3346 {
// 3347   zclGenAlarmItem_t *pLoop;
// 3348   zclGenAlarmItem_t *pPrev;
// 3349   zclGenAlarmItem_t *pNext;
// 3350 
// 3351   // Look for end of list
// 3352   pLoop = zclGenAlarmTable;
// 3353   pPrev = NULL;
// 3354   while ( pLoop )
// 3355   {
// 3356     if (  pLoop->endpoint == endpoint )
// 3357     {
// 3358       if ( pPrev == NULL )
// 3359         zclGenAlarmTable = pLoop->next;
// 3360       else
// 3361         pPrev->next = pLoop->next;
// 3362 
// 3363       pNext = pLoop->next;
// 3364 
// 3365       // Free the memory
// 3366       zcl_mem_free( pLoop );
// 3367 
// 3368       pLoop = pNext;
// 3369     }
// 3370     else
// 3371     {
// 3372       pPrev = pLoop;
// 3373       pLoop = pLoop->next;
// 3374     }
// 3375   }
// 3376 
// 3377   if ( notifyApp )
// 3378   {
// 3379     // Notify the Application so that if any alarm conditions still active then
// 3380     // a new notification will be generated, and a new alarm record will be
// 3381     // added to the alarm log
// 3382     // zclGeneral_NotifyResetAll(); // callback function?
// 3383   }
// 3384 }
// 3385 
// 3386 /*********************************************************************
// 3387  * @fn      zclGeneral_ProcessInAlarmsServer
// 3388  *
// 3389  * @brief   Process in the received Alarms Command.
// 3390  *
// 3391  * @param   pInMsg - pointer to the incoming message
// 3392  *
// 3393  * @return  ZStatus_t
// 3394  */
// 3395 static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg,
// 3396                                                    zclGeneral_AppCallbacks_t *pCBs )
// 3397 {
// 3398   zclAlarm_t alarm;
// 3399   zclGeneral_Alarm_t *pAlarm;
// 3400   uint8 *pData = pInMsg->pData;
// 3401   ZStatus_t stat = ZSuccess;
// 3402 
// 3403   switch ( pInMsg->hdr.commandID )
// 3404   {
// 3405     case COMMAND_ALARMS_RESET:
// 3406       if ( pCBs->pfnAlarm )
// 3407       {
// 3408         alarm.cmdID = pInMsg->hdr.commandID;
// 3409         alarm.alarmCode = pData[0];
// 3410         alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
// 3411 
// 3412         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3413       }
// 3414       else
// 3415       {
// 3416         stat = ZCL_STATUS_FAILURE;
// 3417       }
// 3418       break;
// 3419 
// 3420     case COMMAND_ALARMS_RESET_ALL:
// 3421       if ( pCBs->pfnAlarm )
// 3422       {
// 3423         alarm.cmdID = pInMsg->hdr.commandID;
// 3424 
// 3425         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3426       }
// 3427       else
// 3428       {
// 3429         stat = ZCL_STATUS_FAILURE;
// 3430       }
// 3431       break;
// 3432 
// 3433     case COMMAND_ALARMS_GET:
// 3434       if ( pCBs->pfnAlarm )
// 3435       {
// 3436         alarm.srcAddr = &(pInMsg->msg->srcAddr);
// 3437         alarm.cmdID = pInMsg->hdr.commandID;
// 3438 
// 3439         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3440 
// 3441         pAlarm = zclGeneral_FindEarliestAlarm( pInMsg->msg->endPoint );
// 3442         if ( pAlarm )
// 3443         {
// 3444           // Send a response back
// 3445           zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 3446                                            ZCL_STATUS_SUCCESS, pAlarm->code,
// 3447                                            pAlarm->clusterID, pAlarm->timeStamp,
// 3448                                            true, pInMsg->hdr.transSeqNum );
// 3449           // Remove the entry from the Alarm table
// 3450           zclGeneral_ResetAlarm( pInMsg->msg->endPoint, pAlarm->code, pAlarm->clusterID );
// 3451         }
// 3452         else
// 3453         {
// 3454           // Send a response back
// 3455           zclGeneral_SendAlarmGetResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 3456                                            ZCL_STATUS_NOT_FOUND, 0, 0, 0,
// 3457                                            true, pInMsg->hdr.transSeqNum );
// 3458         }
// 3459         stat = ZCL_STATUS_CMD_HAS_RSP;
// 3460       }
// 3461       else
// 3462       {
// 3463         stat = ZCL_STATUS_FAILURE;
// 3464       }
// 3465       break;
// 3466 
// 3467     case COMMAND_ALARMS_RESET_LOG:
// 3468       if ( pCBs->pfnAlarm )
// 3469       {
// 3470         alarm.cmdID = pInMsg->hdr.commandID;
// 3471 
// 3472         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3473 
// 3474         zclGeneral_ResetAllAlarms( pInMsg->msg->endPoint, FALSE );
// 3475       }
// 3476       else
// 3477       {
// 3478         stat = ZCL_STATUS_FAILURE;
// 3479       }
// 3480       break;
// 3481 
// 3482 #ifdef SE_UK_EXT
// 3483     case COMMAND_ALARMS_PUBLISH_EVENT_LOG:
// 3484       if ( pCBs->pfnPublishEventLog )
// 3485       {
// 3486         zclPublishEventLog_t eventLog;
// 3487 
// 3488         eventLog.logID = *pData++;
// 3489         eventLog.cmdIndex = *pData++;
// 3490         eventLog.totalCmds = *pData++;
// 3491 
// 3492         // First try to find out number of Sub Log Payloads
// 3493         eventLog.numSubLogs = (pInMsg->pDataLen-3)/(1+4); // event ID + event time
// 3494         if ( eventLog.numSubLogs > 0 )
// 3495         {
// 3496           // Try to alloc space for Log Payload
// 3497           eventLog.pLogs = (zclEventLogPayload_t *)zcl_mem_alloc( sizeof( zclEventLogPayload_t ) *
// 3498                                                                    eventLog.numSubLogs );
// 3499           if ( eventLog.pLogs != NULL )
// 3500           {
// 3501             // Copy Log Payload
// 3502             for ( uint8 i = 0; i < eventLog.numSubLogs; i++ )
// 3503             {
// 3504               eventLog.pLogs[i].eventId = *pData++;
// 3505               eventLog.pLogs[i].eventTime = zcl_build_uint32( pData, 4 );
// 3506               pData += 4;
// 3507             }
// 3508           }
// 3509           else
// 3510           {
// 3511             stat = ZCL_STATUS_SOFTWARE_FAILURE;
// 3512           }
// 3513         }
// 3514         else
// 3515         {
// 3516           eventLog.pLogs = NULL;
// 3517         }
// 3518 
// 3519         if ( stat == ZSuccess )
// 3520         {
// 3521           pCBs->pfnPublishEventLog( &(pInMsg->msg->srcAddr), &eventLog );
// 3522         }
// 3523 
// 3524         if ( eventLog.pLogs != NULL )
// 3525         {
// 3526           zcl_mem_free( eventLog.pLogs );
// 3527         }
// 3528       }
// 3529       break;
// 3530 #endif // SE_UK_EXT
// 3531 
// 3532     default:
// 3533       stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
// 3534       break;
// 3535   }
// 3536 
// 3537   return ( stat );
// 3538 }
// 3539 
// 3540 /*********************************************************************
// 3541  * @fn      zclGeneral_ProcessInAlarmsClient
// 3542  *
// 3543  * @brief   Process in the received Alarms Command.
// 3544  *
// 3545  * @param   pInMsg - pointer to the incoming message
// 3546  *
// 3547  * @return  ZStatus_t
// 3548  */
// 3549 static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg,
// 3550                                                    zclGeneral_AppCallbacks_t *pCBs )
// 3551 {
// 3552   uint8 *pData = pInMsg->pData;
// 3553   zclAlarm_t alarm;
// 3554   ZStatus_t stat = ZSuccess;
// 3555 
// 3556   zcl_memset( (uint8*)&alarm, 0, sizeof( zclAlarm_t ) );
// 3557 
// 3558   switch ( pInMsg->hdr.commandID )
// 3559   {
// 3560     case COMMAND_ALARMS_ALARM:
// 3561       if ( pCBs->pfnAlarm )
// 3562       {
// 3563         alarm.srcAddr = &(pInMsg->msg->srcAddr);
// 3564         alarm.cmdID = pInMsg->hdr.commandID;
// 3565         alarm.alarmCode = pData[0];
// 3566         alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
// 3567 
// 3568         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3569       }
// 3570       else
// 3571       {
// 3572         stat = ZCL_STATUS_FAILURE;
// 3573       }
// 3574       break;
// 3575 
// 3576     case COMMAND_ALARMS_GET_RSP:
// 3577       if ( pCBs->pfnAlarm )
// 3578       {
// 3579         alarm.srcAddr = &(pInMsg->msg->srcAddr);
// 3580         alarm.cmdID = pInMsg->hdr.commandID;
// 3581         alarm.alarmCode = *pData++;
// 3582         alarm.clusterID = BUILD_UINT16( pData[0], pData[1] );
// 3583 
// 3584         pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
// 3585       }
// 3586       else
// 3587       {
// 3588         stat = ZCL_STATUS_FAILURE;
// 3589       }
// 3590       break;
// 3591 
// 3592 #ifdef SE_UK_EXT
// 3593     case COMMAND_ALARMS_GET_EVENT_LOG:
// 3594       if ( pCBs->pfnGetEventLog )
// 3595       {
// 3596         zclGetEventLog_t eventLog;
// 3597 
// 3598         eventLog.logID = *pData++;
// 3599         eventLog.startTime = zcl_build_uint32( pData, 4 );
// 3600         pData += 4;
// 3601         eventLog.endTime = zcl_build_uint32( pData, 4 );
// 3602         pData += 4;
// 3603         eventLog.numEvents = *pData;
// 3604 
// 3605         pCBs->pfnGetEventLog( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 3606                               &eventLog, pInMsg->hdr.transSeqNum );
// 3607       }
// 3608       break;
// 3609 #endif // SE_UK_EXT
// 3610 
// 3611     default:
// 3612       stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
// 3613       break;
// 3614   }
// 3615 
// 3616   return ( stat );
// 3617 }
// 3618 #endif // ZCL_ALARMS
// 3619 
// 3620 #ifdef ZCL_LOCATION
// 3621 /*********************************************************************
// 3622  * @fn      zclGeneral_ProcessInLocationServer
// 3623  *
// 3624  * @brief   Process in the received Location Command.
// 3625  *
// 3626  * @param   pInMsg - pointer to the incoming message
// 3627  *
// 3628  * @return  ZStatus_t
// 3629  */
// 3630 static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg,
// 3631                                                      zclGeneral_AppCallbacks_t *pCBs )
// 3632 {
// 3633   uint8 *pData = pInMsg->pData;
// 3634   zclLocation_t cmd;
// 3635   ZStatus_t stat = ZSuccess;
// 3636 
// 3637   zcl_memset( (uint8*)&cmd, 0, sizeof( zclLocation_t ) );
// 3638 
// 3639   switch ( pInMsg->hdr.commandID )
// 3640   {
// 3641     case COMMAND_LOCATION_SET_ABSOLUTE:
// 3642       cmd.un.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
// 3643       pData += 2;
// 3644       cmd.un.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
// 3645       pData += 2;
// 3646       cmd.un.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
// 3647       pData += 2;
// 3648       cmd.un.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
// 3649       pData += 2;
// 3650       cmd.un.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3651 
// 3652       if ( pCBs->pfnLocation )
// 3653       {
// 3654         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3655         cmd.cmdID = pInMsg->hdr.commandID;
// 3656 
// 3657         // Update the absolute location info
// 3658         pCBs->pfnLocation( &cmd );
// 3659       }
// 3660       break;
// 3661 
// 3662     case COMMAND_LOCATION_SET_DEV_CFG:
// 3663       cmd.un.devCfg.power = BUILD_UINT16( pData[0], pData[1] );
// 3664       pData += 2;
// 3665       cmd.un.devCfg.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3666       pData += 2;
// 3667       cmd.un.devCfg.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3668       pData += 2;
// 3669       cmd.un.devCfg.numMeasurements = *pData++;
// 3670       cmd.un.devCfg.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3671 
// 3672       if ( pCBs->pfnLocation )
// 3673       {
// 3674         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3675         cmd.cmdID = pInMsg->hdr.commandID;
// 3676 
// 3677         // Update the device configuration info
// 3678         pCBs->pfnLocation( &cmd );
// 3679       }
// 3680       break;
// 3681 
// 3682     case COMMAND_LOCATION_GET_DEV_CFG:
// 3683       cmd.un.ieeeAddr = pData;
// 3684 
// 3685       if ( pCBs->pfnLocation )
// 3686       {
// 3687         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3688         cmd.cmdID = pInMsg->hdr.commandID;
// 3689         cmd.seqNum = pInMsg->hdr.transSeqNum;
// 3690 
// 3691         // Retreive the Device Configuration
// 3692         pCBs->pfnLocation( &cmd );
// 3693       }
// 3694       stat = ZCL_STATUS_CMD_HAS_RSP;
// 3695       break;
// 3696 
// 3697     case COMMAND_LOCATION_GET_DATA:
// 3698       cmd.un.loc.bitmap.locByte = *pData++;
// 3699       cmd.un.loc.numResponses = *pData++;
// 3700 
// 3701       if ( cmd.un.loc.brdcastResponse == 0 ) // command is sent as a unicast
// 3702         zcl_memcpy( cmd.un.loc.targetAddr, pData, 8 );
// 3703 
// 3704       if ( pCBs->pfnLocation )
// 3705       {
// 3706         cmd.srcAddr = &(pInMsg->msg->srcAddr);
// 3707         cmd.cmdID = pInMsg->hdr.commandID;
// 3708         cmd.seqNum = pInMsg->hdr.transSeqNum;
// 3709 
// 3710         // Retreive the Location Data
// 3711         pCBs->pfnLocation( &cmd );
// 3712       }
// 3713       stat = ZCL_STATUS_CMD_HAS_RSP;
// 3714       break;
// 3715 
// 3716     default:
// 3717       stat = ZFailure;
// 3718       break;
// 3719   }
// 3720 
// 3721   return ( stat );
// 3722 }
// 3723 
// 3724 /*********************************************************************
// 3725  * @fn      zclGeneral_ProcessInLocationDataRsp
// 3726  *
// 3727  * @brief   Process in the received Location Command.
// 3728  *
// 3729  * @param   pInMsg - pointer to the incoming message
// 3730  *
// 3731  * @return  ZStatus_t
// 3732  */
// 3733 static void zclGeneral_ProcessInLocationDataRsp( zclIncoming_t *pInMsg,
// 3734                                                  zclGeneral_AppCallbacks_t *pCBs )
// 3735 {
// 3736   uint8 *pData = pInMsg->pData;
// 3737   zclLocationRsp_t rsp;
// 3738 
// 3739   zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
// 3740 
// 3741   if ( pCBs->pfnLocationRsp )
// 3742   {
// 3743     if ( pInMsg->hdr.commandID == COMMAND_LOCATION_DATA_RSP )
// 3744       rsp.un.loc.status = *pData++;
// 3745 
// 3746     if ( pInMsg->hdr.commandID != COMMAND_LOCATION_DATA_RSP ||
// 3747          rsp.un.loc.status == ZCL_STATUS_SUCCESS )
// 3748     {
// 3749       rsp.un.loc.data.type = *pData++;
// 3750       rsp.un.loc.data.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
// 3751       pData += 2;
// 3752       rsp.un.loc.data.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
// 3753       pData += 2;
// 3754 
// 3755       if ( locationType2D( rsp.un.loc.data.type ) == 0 )
// 3756       {
// 3757         rsp.un.loc.data.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
// 3758         pData += 2;
// 3759       }
// 3760 
// 3761       if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 3762       {
// 3763         rsp.un.loc.data.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
// 3764         pData += 2;
// 3765         rsp.un.loc.data.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3766         pData += 2;
// 3767       }
// 3768 
// 3769       if ( locationTypeAbsolute( rsp.un.loc.data.type ) == 0 )
// 3770       {
// 3771         if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
// 3772           rsp.un.loc.data.calcLoc.locationMethod = *pData++;
// 3773 
// 3774         rsp.un.loc.data.calcLoc.qualityMeasure = *pData++;
// 3775         rsp.un.loc.data.calcLoc.locationAge = BUILD_UINT16( pData[0], pData[1] );
// 3776       }
// 3777     }
// 3778 
// 3779     rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3780     rsp.cmdID = pInMsg->hdr.commandID;
// 3781 
// 3782     // Notify the Application
// 3783     pCBs->pfnLocationRsp( &rsp );
// 3784   }
// 3785 }
// 3786 
// 3787 /*********************************************************************
// 3788  * @fn      zclGeneral_ProcessInLocationClient
// 3789  *
// 3790  * @brief   Process in the received Location Command.
// 3791  *
// 3792  * @param   pInMsg - pointer to the incoming message
// 3793  *
// 3794  * @return  ZStatus_t
// 3795  */
// 3796 static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg,
// 3797                                                      zclGeneral_AppCallbacks_t *pCBs )
// 3798 {
// 3799   uint8 *pData = pInMsg->pData;
// 3800   zclLocationRsp_t rsp;
// 3801   ZStatus_t stat = ZSuccess;
// 3802 
// 3803   zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
// 3804 
// 3805   switch ( pInMsg->hdr.commandID )
// 3806   {
// 3807     case COMMAND_LOCATION_DEV_CFG_RSP:
// 3808       if ( pCBs->pfnLocationRsp )
// 3809       {
// 3810         rsp.un.devCfg.status = *pData++;
// 3811         if ( rsp.un.devCfg.status == ZCL_STATUS_SUCCESS )
// 3812         {
// 3813           rsp.un.devCfg.data.power = BUILD_UINT16( pData[0], pData[1] );
// 3814           pData += 2;
// 3815           rsp.un.devCfg.data.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
// 3816           pData += 2;
// 3817           rsp.un.devCfg.data.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3818           pData += 2;
// 3819           rsp.un.devCfg.data.numMeasurements = *pData++;
// 3820           rsp.un.devCfg.data.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
// 3821 
// 3822           rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3823           rsp.cmdID = pInMsg->hdr.commandID;
// 3824 
// 3825           // Notify the Application
// 3826           pCBs->pfnLocationRsp( &rsp );
// 3827         }
// 3828       }
// 3829       break;
// 3830 
// 3831     case COMMAND_LOCATION_DATA_RSP:
// 3832     case COMMAND_LOCATION_DATA_NOTIF:
// 3833     case COMMAND_LOCATION_COMPACT_DATA_NOTIF:
// 3834       zclGeneral_ProcessInLocationDataRsp( pInMsg, pCBs );
// 3835       break;
// 3836 
// 3837     case COMMAND_LOCATION_RSSI_PING:
// 3838       if ( pCBs->pfnLocationRsp )
// 3839       {
// 3840         rsp.un.locationType = *pData;
// 3841 
// 3842         rsp.srcAddr = &(pInMsg->msg->srcAddr);
// 3843         rsp.cmdID = pInMsg->hdr.commandID;
// 3844 
// 3845         // Notify the Application
// 3846         pCBs->pfnLocationRsp( &rsp );
// 3847       }
// 3848       break;
// 3849 
// 3850     default:
// 3851       stat = ZFailure;
// 3852       break;
// 3853   }
// 3854 
// 3855   return ( stat );
// 3856 }
// 3857 #endif // ZCL_LOCATION
// 3858 
// 3859 #ifdef ZCL_SCENES
// 3860 #if !defined ( ZCL_STANDALONE )
// 3861 /*********************************************************************
// 3862  * @fn      zclGeneral_ScenesInitNV
// 3863  *
// 3864  * @brief   Initialize the NV Scene Table Items
// 3865  *
// 3866  * @param   none
// 3867  *
// 3868  * @return  number of scenes
// 3869  */
// 3870 static uint8 zclGeneral_ScenesInitNV( void )
// 3871 {
// 3872   uint8  status;
// 3873   uint16 size;
// 3874 
// 3875   size = (uint16)((sizeof ( nvGenScenesHdr_t ))
// 3876                   + ( sizeof( zclGenSceneNVItem_t ) * ZCL_GEN_MAX_SCENES ));
// 3877 
// 3878   status = zcl_nv_item_init( ZCD_NV_SCENE_TABLE, size, NULL );
// 3879 
// 3880   if ( status != ZSUCCESS )
// 3881   {
// 3882     zclGeneral_ScenesSetDefaultNV();
// 3883   }
// 3884 
// 3885   return status;
// 3886 }
// 3887 #endif // ZCL_STANDALONE
// 3888 
// 3889 #if !defined ( ZCL_STANDALONE )
// 3890 /*********************************************************************
// 3891  * @fn          zclGeneral_ScenesSetDefaultNV
// 3892  *
// 3893  * @brief       Write the defaults to NV
// 3894  *
// 3895  * @param       none
// 3896  *
// 3897  * @return      none
// 3898  */
// 3899 static void zclGeneral_ScenesSetDefaultNV( void )
// 3900 {
// 3901   nvGenScenesHdr_t hdr;
// 3902 
// 3903   // Initialize the header
// 3904   hdr.numRecs = 0;
// 3905 
// 3906   // Save off the header
// 3907   zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
// 3908 }
// 3909 #endif // ZCL_STANDALONE
// 3910 
// 3911 #if !defined ( ZCL_STANDALONE )
// 3912 /*********************************************************************
// 3913  * @fn          zclGeneral_ScenesWriteNV
// 3914  *
// 3915  * @brief       Save the Scene Table in NV
// 3916  *
// 3917  * @param       none
// 3918  *
// 3919  * @return      none
// 3920  */
// 3921 static void zclGeneral_ScenesWriteNV( void )
// 3922 {
// 3923   nvGenScenesHdr_t hdr;
// 3924   zclGenSceneItem_t *pLoop;
// 3925   zclGenSceneNVItem_t item;
// 3926 
// 3927   hdr.numRecs = 0;
// 3928 
// 3929   // Look for end of list
// 3930   pLoop = zclGenSceneTable;
// 3931   while ( pLoop )
// 3932   {
// 3933     // Build the record
// 3934     item.endpoint = pLoop->endpoint;
// 3935     zcl_memcpy( &(item.scene), &(pLoop->scene), sizeof ( zclGeneral_Scene_t ) );
// 3936 
// 3937     // Save the record to NV
// 3938     zcl_nv_write( ZCD_NV_SCENE_TABLE,
// 3939             (uint16)((sizeof( nvGenScenesHdr_t )) + (hdr.numRecs * sizeof ( zclGenSceneNVItem_t ))),
// 3940                     sizeof ( zclGenSceneNVItem_t ), &item );
// 3941 
// 3942     hdr.numRecs++;
// 3943 
// 3944     pLoop = pLoop->next;
// 3945   }
// 3946 
// 3947   // Save off the header
// 3948   zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
// 3949 }
// 3950 #endif // ZCL_STANDALONE
// 3951 
// 3952 #if !defined ( ZCL_STANDALONE )
// 3953 /*********************************************************************
// 3954  * @fn          zclGeneral_ScenesRestoreFromNV
// 3955  *
// 3956  * @brief       Restore the Scene table from NV
// 3957  *
// 3958  * @param       none
// 3959  *
// 3960  * @return      Number of entries restored
// 3961  */
// 3962 static uint16 zclGeneral_ScenesRestoreFromNV( void )
// 3963 {
// 3964   uint16 x;
// 3965   nvGenScenesHdr_t hdr;
// 3966 
// 3967   zclGenSceneNVItem_t item;
// 3968   uint16 numAdded = 0;
// 3969 
// 3970   if ( zcl_nv_read( ZCD_NV_SCENE_TABLE, 0, sizeof(nvGenScenesHdr_t), &hdr ) == ZSuccess )
// 3971   {
// 3972     // Read in the device list
// 3973     for ( x = 0; x < hdr.numRecs; x++ )
// 3974     {
// 3975       if ( zcl_nv_read( ZCD_NV_SCENE_TABLE,
// 3976                 (uint16)(sizeof(nvGenScenesHdr_t) + (x * sizeof ( zclGenSceneNVItem_t ))),
// 3977                                   sizeof ( zclGenSceneNVItem_t ), &item ) == ZSUCCESS )
// 3978       {
// 3979         // Add the scene
// 3980         if ( zclGeneral_AddScene( item.endpoint, &(item.scene) ) == ZSuccess )
// 3981         {
// 3982           numAdded++;
// 3983         }
// 3984       }
// 3985     }
// 3986   }
// 3987 
// 3988   return ( numAdded );
// 3989 }
// 3990 #endif // ZCL_STANDALONE
// 3991 
// 3992 #if !defined ( ZCL_STANDALONE )
// 3993 /*********************************************************************
// 3994  * @fn          zclGeneral_ScenesInit
// 3995  *
// 3996  * @brief       Initialize the scenes table
// 3997  *
// 3998  * @param       none
// 3999  *
// 4000  * @return      none
// 4001  */
// 4002 void zclGeneral_ScenesInit( void )
// 4003 {
// 4004   // Initialize NV items
// 4005   zclGeneral_ScenesInitNV();
// 4006 
// 4007   // Restore the Scene table
// 4008   zclGeneral_ScenesRestoreFromNV();
// 4009 }
// 4010 #endif // ZCL_STANDALONE
// 4011 
// 4012 #if !defined ( ZCL_STANDALONE )
// 4013 /*********************************************************************
// 4014  * @fn          zclGeneral_ScenesSave
// 4015  *
// 4016  * @brief       Save the scenes table
// 4017  *
// 4018  * @param       none
// 4019  *
// 4020  * @return      none
// 4021  */
// 4022 void zclGeneral_ScenesSave( void )
// 4023 {
// 4024   // Update NV
// 4025   zclGeneral_ScenesWriteNV();
// 4026 }
// 4027 #endif // ZCL_STANDALONE
// 4028 
// 4029 #endif // ZCL_SCENES
// 4030 
// 4031 /***************************************************************************
// 4032 ****************************************************************************/
// 4033 
// 4034 #if defined ( INTER_PAN )
// 4035   #include "stub_aps.h"
// 4036 #endif
// 4037 
// 4038 /*********************************************************************
// 4039  * MACROS
// 4040  */
// 4041 
// 4042 /*********************************************************************
// 4043  * CONSTANTS
// 4044  */
// 4045 
// 4046 /*********************************************************************
// 4047  * TYPEDEFS
// 4048  */
// 4049 typedef struct zclClosuresDoorLockCBRec
// 4050 {
// 4051   struct zclClosuresDoorLockCBRec     *next;
// 4052   uint8                                endpoint; // Used to link it into the endpoint descriptor
// 4053   zclClosures_DoorLockAppCallbacks_t  *CBs;     // Pointer to Callback function
// 4054 } zclClosuresDoorLockCBRec_t;
// 4055 
// 4056 
// 4057 /*********************************************************************
// 4058  * GLOBAL VARIABLES
// 4059  */
// 4060 
// 4061 /*********************************************************************
// 4062  * GLOBAL FUNCTIONS
// 4063  */
// 4064 
// 4065 /*********************************************************************
// 4066  * LOCAL VARIABLES
// 4067  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
// 4068 static zclClosuresDoorLockCBRec_t *zclClosuresDoorLockCBs = (zclClosuresDoorLockCBRec_t *)NULL;
zclClosuresDoorLockCBs:
        DS 2
        REQUIRE __INIT_XDATA_Z
// 4069 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
// 4070 static uint8 zclDoorLockPluginRegisted = FALSE;
zclDoorLockPluginRegisted:
        DS 1
        REQUIRE __INIT_XDATA_Z
// 4071 
// 4072 
// 4073 /*********************************************************************
// 4074  * LOCAL FUNCTIONS
// 4075  */
// 4076 static ZStatus_t zclClosures_HdlIncoming( zclIncoming_t *pInMsg );
// 4077 static ZStatus_t zclClosures_HdlInSpecificCommands( zclIncoming_t *pInMsg );
// 4078 
// 4079 static zclClosures_DoorLockAppCallbacks_t *zclClosures_FindDoorLockCallbacks( uint8 endpoint );
// 4080 static ZStatus_t zclClosures_ProcessInDoorLockCmds( zclIncoming_t *pInMsg,
// 4081                                                     zclClosures_DoorLockAppCallbacks_t *pCBs );
// 4082 
// 4083 
// 4084 /*********************************************************************
// 4085  * @fn      zclClosures_RegisterDoorLockCmdCallbacks
// 4086  *
// 4087  * @brief   Register an applications DoorLock command callbacks
// 4088  *
// 4089  * @param   endpoint - application's endpoint
// 4090  * @param   callbacks - pointer to the callback record.
// 4091  *
// 4092  * @return  ZMemError if not able to allocate
// 4093  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4094 ZStatus_t zclClosures_RegisterDoorLockCmdCallbacks( uint8 endpoint, zclClosures_DoorLockAppCallbacks_t *callbacks )
zclClosures_RegisterDoorLockCmdCallbacks:
          CFI Block cfiBlock153 Using cfiCommon0
          CFI Function zclClosures_RegisterDoorLockCmdCallbacks
        CODE
// 4095 {
        FUNCALL zclClosures_RegisterDoorLockCmdCallbacks, zcl_registerPlugin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclClosures_RegisterDoorLockCmdCallbacks, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
// 4096   zclClosuresDoorLockCBRec_t *pNewItem;
// 4097   zclClosuresDoorLockCBRec_t *pLoop;
// 4098 
// 4099   // Register as a ZCL Plugin
// 4100   if ( !zclDoorLockPluginRegisted )
        MOV       DPTR,#zclDoorLockPluginRegisted
        MOVX      A,@DPTR
        JNZ       ??zclClosures_RegisterDoorLockCmdCallbacks_0
// 4101   {
// 4102     zcl_registerPlugin( ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
// 4103                         ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK,
// 4104                         zclClosures_HdlIncoming );
        ; Setup parameters for call to function zcl_registerPlugin
        MOV       ?V2,#`??zclClosures_HdlIncoming::?relay` & 0xff
        MOV       ?V3,#(`??zclClosures_HdlIncoming::?relay` >> 8) & 0xff
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x1
        MOV       R5,#0x1
        MOV       R2,#0x1
        MOV       R3,#0x1
        LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 4105     zclDoorLockPluginRegisted = TRUE;
        MOV       DPTR,#zclDoorLockPluginRegisted
        MOV       A,#0x1
        MOVX      @DPTR,A
// 4106   }
// 4107 
// 4108   // Fill in the new profile list
// 4109   pNewItem = zcl_mem_alloc( sizeof( zclClosuresDoorLockCBRec_t ) );
??zclClosures_RegisterDoorLockCmdCallbacks_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV       R2,#0x5
        MOV       R3,#0x0
        LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       R0,?V2
        MOV       R1,?V3
// 4110   if ( pNewItem == NULL )
        MOV       A,R0
        ORL       A,R1
        JNZ       ??zclClosures_RegisterDoorLockCmdCallbacks_1
// 4111   {
// 4112     return ( ZMemError );
        MOV       R1,#0x10
        SJMP      ??zclClosures_RegisterDoorLockCmdCallbacks_2
// 4113   }
// 4114 
// 4115   pNewItem->next = (zclClosuresDoorLockCBRec_t *)NULL;
??zclClosures_RegisterDoorLockCmdCallbacks_1:
        LCALL     ?Subroutine19 & 0xFFFF
// 4116   pNewItem->endpoint = endpoint;
// 4117   pNewItem->CBs = callbacks;
// 4118 
// 4119   // Find spot in list
// 4120   if ( zclClosuresDoorLockCBs == NULL )
??CrossCallReturnLabel_28:
        MOV       DPTR,#zclClosuresDoorLockCBs
        LCALL     ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV       DPTR,#zclClosuresDoorLockCBs
        JZ        ??zclClosures_RegisterDoorLockCmdCallbacks_3
// 4121   {
// 4122     zclClosuresDoorLockCBs = pNewItem;
// 4123   }
// 4124   else
// 4125   {
// 4126     // Look for end of list
// 4127     pLoop = zclClosuresDoorLockCBs;
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??zclClosures_RegisterDoorLockCmdCallbacks_4
// 4128     while ( pLoop->next != NULL )
// 4129     {
// 4130       pLoop = pLoop->next;
??zclClosures_RegisterDoorLockCmdCallbacks_5:
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
// 4131     }
??zclClosures_RegisterDoorLockCmdCallbacks_4:
        LCALL     ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_73:
        JNZ       ??zclClosures_RegisterDoorLockCmdCallbacks_5
// 4132 
// 4133     // Put new item at end of list
// 4134     pLoop->next = pNewItem;
        MOV       DPL,R4
        MOV       DPH,R5
// 4135   }
??zclClosures_RegisterDoorLockCmdCallbacks_3:
        LCALL     ?Subroutine20 & 0xFFFF
// 4136   return ( ZSuccess );
??CrossCallReturnLabel_57:
        MOV       R1,#0x0
??zclClosures_RegisterDoorLockCmdCallbacks_2:
        LJMP      ??Subroutine31_0 & 0xFFFF
// 4137 }
          CFI EndBlock cfiBlock153

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond154 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function zclClosures_RegisterDoorLockCmdCallbacks
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-2
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker156 Using cfiCommon1
          CFI (cfiPicker156) NoFunction
          CFI (cfiPicker156) Picker
        MOV       DPL,R0
        MOV       DPH,R1
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOV       A,?V0
        MOVX      @DPTR,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOV       A,R6
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R7
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiPicker156

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond157 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function zclClosures_RegisterDoorLockCmdCallbacks
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+-2
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker159 Using cfiCommon1
          CFI (cfiPicker159) NoFunction
          CFI (cfiPicker159) Picker
        MOV       R5,A
        MOV       DPL,R4
        MOV       DPH,R5
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiPicker159
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond160 Using cfiCommon0
          CFI Function zclGeneral_RegisterCmdCallbacks
          CFI Conditional ??CrossCallReturnLabel_74
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function zclClosures_RegisterDoorLockCmdCallbacks
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+-2
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function zclGeneral_RegisterCmdCallbacks
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+-2
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zclClosures_RegisterDoorLockCmdCallbacks
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker164 Using cfiCommon1
          CFI (cfiPicker164) NoFunction
          CFI (cfiPicker164) Picker
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       A,R2
        ORL       A,R3
        RET
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiPicker164
// 4138 
// 4139 /*********************************************************************
// 4140  * @fn      zclClosures_FindDoorLockCallbacks
// 4141  *
// 4142  * @brief   Find the DoorLock callbacks for an endpoint
// 4143  *
// 4144  * @param   endpoint
// 4145  *
// 4146  * @return  pointer to the callbacks
// 4147  */
// 4148 static zclClosures_DoorLockAppCallbacks_t *zclClosures_FindDoorLockCallbacks( uint8 endpoint )
// 4149 {
// 4150   zclClosuresDoorLockCBRec_t *pCBs;
// 4151 
// 4152   pCBs = zclClosuresDoorLockCBs;
// 4153   while ( pCBs )
// 4154   {
// 4155     if ( pCBs->endpoint == endpoint )
// 4156     {
// 4157       return ( pCBs->CBs );
// 4158     }
// 4159     pCBs = pCBs->next;
// 4160   }
// 4161   return ( (zclClosures_DoorLockAppCallbacks_t *)NULL );
// 4162 }
// 4163 
// 4164 
// 4165 /*********************************************************************
// 4166  * @fn      zclClosures_HdlIncoming
// 4167  *
// 4168  * @brief   Callback from ZCL to process incoming Commands specific
// 4169  *          to this cluster library or Profile commands for attributes
// 4170  *          that aren't in the attribute list
// 4171  *
// 4172  * @param   pInMsg - pointer to the incoming message
// 4173  * @param   logicalClusterID
// 4174  *
// 4175  * @return  ZStatus_t
// 4176  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4177 static ZStatus_t zclClosures_HdlIncoming( zclIncoming_t *pInMsg )
zclClosures_HdlIncoming:
          CFI Block cfiBlock165 Using cfiCommon0
          CFI Function zclClosures_HdlIncoming
        CODE
// 4178 {
        FUNCALL zclClosures_HdlIncoming, zclClosures_HdlInSpecificCommands
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH      DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH      DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 4179   ZStatus_t stat = ZSuccess;
// 4180 
// 4181 #if defined ( INTER_PAN )
// 4182   if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
// 4183     return ( stat ); // Cluster not supported thru Inter-PAN
// 4184 #endif
// 4185   if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x7
        XRL       A,#0x1
        JNZ       ??zclClosures_HdlIncoming_0
// 4186   {
// 4187     // Is this a manufacturer specific command?
// 4188     if ( pInMsg->hdr.fc.manuSpecific == 0 )
// 4189     {
// 4190       stat = zclClosures_HdlInSpecificCommands( pInMsg );
        ; Setup parameters for call to function zclClosures_HdlInSpecificCommands
        LCALL     `??zclClosures_HdlInSpecificCommands::?relay`; Banked call to: zclClosures_HdlInSpecificCommands
        MOV       A,R1
        MOV       R1,A
        SJMP      ??zclClosures_HdlIncoming_1
// 4191     }
// 4192     else
// 4193     {
// 4194       // We don't support any manufacturer specific command.
// 4195       stat = ZFailure;
// 4196     }
// 4197   }
// 4198   else
// 4199   {
// 4200     // Handle all the normal (Read, Write...) commands -- should never get here
// 4201     stat = ZFailure;
??zclClosures_HdlIncoming_0:
        MOV       R1,#0x1
// 4202   }
// 4203   return ( stat );
??zclClosures_HdlIncoming_1:
        LJMP      ?Subroutine2 & 0xFFFF
// 4204 }
          CFI EndBlock cfiBlock165
// 4205 
// 4206 /*********************************************************************
// 4207  * @fn      zclClosures_HdlInSpecificCommands
// 4208  *
// 4209  * @brief   Callback from ZCL to process incoming Commands specific
// 4210  *          to this cluster library
// 4211 
// 4212  * @param   pInMsg - pointer to the incoming message
// 4213  *
// 4214  * @return  ZStatus_t
// 4215  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
// 4216 static ZStatus_t zclClosures_HdlInSpecificCommands( zclIncoming_t *pInMsg )
zclClosures_HdlInSpecificCommands:
          CFI Block cfiBlock166 Using cfiCommon0
          CFI Function zclClosures_HdlInSpecificCommands
        CODE
// 4217 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 4218   ZStatus_t stat;
// 4219   zclClosures_DoorLockAppCallbacks_t *pDLCBs;
// 4220 
// 4221 
// 4222   // make sure endpoint exists
// 4223   pDLCBs = zclClosures_FindDoorLockCallbacks( pInMsg->msg->endPoint );
        MOV       DPL,R2
        MOV       DPH,R3
        LCALL     ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV       A,R0
        MOV       R6,A
        MOV       A,R1
        LCALL     ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV       R5,A
        MOV       DPTR,#zclClosuresDoorLockCBs
??zclClosures_HdlInSpecificCommands_0:
        LCALL     ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV       A,R0
        ORL       A,R1
        JZ        ??zclClosures_HdlInSpecificCommands_1
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R5
        MOV       DPL,R0
        MOV       DPH,R1
        JNZ       ??zclClosures_HdlInSpecificCommands_0
        LCALL     ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV       ?V0,R0
        MOV       ?V1,R1
// 4224   if ( pDLCBs == NULL )
        MOV       A,R0
        ORL       A,?V1
        JZ        ??zclClosures_HdlInSpecificCommands_1
// 4225   {
// 4226     return ( ZFailure );
// 4227   }
// 4228 
// 4229 
// 4230   switch ( pInMsg->msg->clusterId )
        MOV       DPL,R6
        MOV       DPH,R7
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for zclClosures_HdlInSpecificComma_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        257
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclClosures_HdlInSpecificCommands_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclClosures_HdlInSpecificCommands_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclClosures_HdlInSpecificCommands_4
        CODE
// 4231   {
// 4232     case ZCL_CLUSTER_ID_CLOSURES_DOOR_LOCK:
// 4233       stat = zclClosures_ProcessInDoorLockCmds( pInMsg, pDLCBs );
??zclClosures_HdlInSpecificCommands_3:
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        ANL       A,#0x8
        JZ        ??zclClosures_HdlInSpecificCommands_2
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        LCALL     ?UC_SWITCH_SPARSE
`?<Jumptable for zclClosures_HdlInSpecificComma_1`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclClosures_HdlInSpecificCommands_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        3
        DATA
        DATA8
        DATA
        DATA8
        DB        25
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclClosures_HdlInSpecificCommands_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclClosures_HdlInSpecificCommands_2
        CODE
??zclClosures_HdlInSpecificCommands_5:
        LCALL     ?Subroutine14 & 0xFFFF
// 4234       break;
// 4235 
// 4236     case ZCL_CLUSTER_ID_CLOSURES_WINDOW_COVERING:
// 4237 #ifdef ZCL_WINDOWCOVERING
// 4238       stat = zclClosures_ProcessInWindowCovering( pInMsg, pWCCBs );
// 4239 #endif //ZCL_WINDOWCOVERING
// 4240       break;
// 4241 
// 4242     default:
// 4243       stat = ZFailure;
// 4244       break;
// 4245   }
??CrossCallReturnLabel_78:
        JZ        ??zclClosures_HdlInSpecificCommands_2
        ; Setup parameters for indirect call
        MOV       DPL,R2
        MOV       DPH,R3
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        LCALL     ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV       R1,A
        SJMP      ??zclClosures_HdlInSpecificCommands_7
??zclClosures_HdlInSpecificCommands_1:
        MOV       R1,#0x1
        SJMP      ??zclClosures_HdlInSpecificCommands_8
??zclClosures_HdlInSpecificCommands_6:
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_79:
        JZ        ??zclClosures_HdlInSpecificCommands_2
        ; Setup parameters for indirect call
        MOV       R1,#0x0
??zclClosures_HdlInSpecificCommands_7:
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ?CALL_IND
        MOV       A,R1
        MOV       R4,A
        SJMP      ??zclClosures_HdlInSpecificCommands_4
??zclClosures_HdlInSpecificCommands_2:
        MOV       R4,#0x1
// 4246 
// 4247   return ( stat );
??zclClosures_HdlInSpecificCommands_4:
        MOV       A,R4
        MOV       R1,A
??zclClosures_HdlInSpecificCommands_8:
        LJMP      ??Subroutine31_0 & 0xFFFF
// 4248 }
          CFI EndBlock cfiBlock166

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond167 Using cfiCommon0
          CFI Function zclGeneral_ProcessInGroupsClient
          CFI Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function zclGeneral_ProcessInGroupsClient
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_12
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-6
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_13
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-6
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function zclGeneral_ProcessInScenesClient
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_14
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+-6
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 86)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function zclClosures_HdlInSpecificCommands
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker172 Using cfiCommon1
          CFI (cfiPicker172) NoFunction
          CFI (cfiPicker172) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPH,A
        MOV       DPL,R0
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiPicker172

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond173 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function zclClosures_HdlInSpecificCommands
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker175 Using cfiCommon1
          CFI (cfiPicker175) NoFunction
          CFI (cfiPicker175) Picker
        MOV       R7,A
        MOV       A,R6
        ADD       A,#0x14
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiPicker175

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond176 Using cfiCommon0
          CFI Function zclClosures_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_78
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function zclClosures_HdlInSpecificCommands
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker178 Using cfiCommon1
          CFI (cfiPicker178) NoFunction
          CFI (cfiPicker178) Picker
        MOV       DPL,?V0
        MOV       DPH,R1
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiPicker178
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond179 Using cfiCommon0
          CFI Function zclGeneral_HdlInSpecificCommands
          CFI Conditional ??CrossCallReturnLabel_76
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function zclGeneral_HdlInSpecificCommands
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+-2
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function zclClosures_HdlInSpecificCommands
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function zclClosures_HdlInSpecificCommands
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker183 Using cfiCommon1
          CFI (cfiPicker183) NoFunction
          CFI (cfiPicker183) Picker
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,R4
        ORL       A,R5
        RET
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiPicker183

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_RegisterCmdCallbacks::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_RegisterCmdCallbacks

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendIdentify::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendIdentify

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendIdentifyEZModeInvoke::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendIdentifyEZModeInvoke

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendIdentifyUpdateCommState::?rela`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendIdentifyUpdateCommState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_SendIdentifyQueryResponse::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_SendIdentifyQueryResponse

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_HdlIncoming::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_HdlIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_HdlInSpecificCommands::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_HdlInSpecificCommands

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_ProcessInGroupsClient::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_ProcessInGroupsClient

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGeneral_ProcessInScenesClient::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGeneral_ProcessInScenesClient

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclClosures_RegisterDoorLockCmdCallbacks::?re`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclClosures_RegisterDoorLockCmdCallbacks

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclClosures_HdlIncoming::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclClosures_HdlIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclClosures_HdlInSpecificCommands::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclClosures_HdlInSpecificCommands

        END
// 4249 
// 4250 /*********************************************************************
// 4251  * @fn      zclClosures_ProcessInDoorLockCmds
// 4252  *
// 4253  * @brief   Process in the received DoorLock Command.
// 4254  *
// 4255  * @param   pInMsg - pointer to the incoming message
// 4256  * @param   pCBs - pointer to the Application callback functions
// 4257  *
// 4258  * @return  ZStatus_t
// 4259  */
// 4260 static ZStatus_t zclClosures_ProcessInDoorLockCmds( zclIncoming_t *pInMsg,
// 4261                                                     zclClosures_DoorLockAppCallbacks_t *pCBs )
// 4262 {
// 4263   ZStatus_t stat;
// 4264 
// 4265   // Client-to-Server
// 4266   if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
// 4267   {
// 4268     stat = ZFailure;
// 4269   }
// 4270   // Server-to-Client
// 4271   else
// 4272   {
// 4273     switch(pInMsg->hdr.commandID)
// 4274     {
// 4275       case COMMAND_CLOSURES_LOCK_DOOR_RSP:
// 4276       case COMMAND_CLOSURES_UNLOCK_DOOR_RSP:
// 4277       case COMMAND_CLOSURES_TOGGLE_DOOR_RSP:
// 4278         if ( pCBs->pfnDoorLockRsp )
// 4279         {
// 4280           return ( pCBs->pfnDoorLockRsp( pInMsg, pInMsg->pData[0] ) );
// 4281         }
// 4282       case COMMAND_CLOSURES_UNLOCK_WITH_TIMEOUT_RSP:
// 4283       case COMMAND_CLOSURES_GET_LOG_RECORD_RSP:
// 4284       case COMMAND_CLOSURES_SET_PIN_CODE_RSP:
// 4285       case COMMAND_CLOSURES_GET_PIN_CODE_RSP:
// 4286       case COMMAND_CLOSURES_CLEAR_PIN_CODE_RSP:
// 4287       case COMMAND_CLOSURES_CLEAR_ALL_PIN_CODES_RSP:
// 4288       case COMMAND_CLOSURES_SET_USER_STATUS_RSP:
// 4289       case COMMAND_CLOSURES_GET_USER_STATUS_RSP:
// 4290       case COMMAND_CLOSURES_SET_WEEK_DAY_SCHEDULE_RSP:
// 4291       case COMMAND_CLOSURES_GET_WEEK_DAY_SCHEDULE_RSP:
// 4292       case COMMAND_CLOSURES_CLEAR_WEEK_DAY_SCHEDULE_RSP:
// 4293       case COMMAND_CLOSURES_SET_YEAR_DAY_SCHEDULE_RSP:
// 4294       case COMMAND_CLOSURES_GET_YEAR_DAY_SCHEDULE_RSP:
// 4295       case COMMAND_CLOSURES_CLEAR_YEAR_DAY_SCHEDULE_RSP:
// 4296       case COMMAND_CLOSURES_SET_HOLIDAY_SCHEDULE_RSP:
// 4297       case COMMAND_CLOSURES_GET_HOLIDAY_SCHEDULE_RSP:
// 4298       case COMMAND_CLOSURES_CLEAR_HOLIDAY_SCHEDULE_RSP:
// 4299       case COMMAND_CLOSURES_SET_USER_TYPE_RSP:
// 4300       case COMMAND_CLOSURES_GET_USER_TYPE_RSP:
// 4301       case COMMAND_CLOSURES_SET_RFID_CODE_RSP:
// 4302       case COMMAND_CLOSURES_GET_RFID_CODE_RSP:
// 4303       case COMMAND_CLOSURES_CLEAR_RFID_CODE_RSP:
// 4304       case COMMAND_CLOSURES_CLEAR_ALL_RFID_CODES_RSP:
// 4305         if ( pCBs->pfnDoorLockRsp )
// 4306         {
// 4307           return ( pCBs->pfnDoorLockRsp( pInMsg, 0x0 ) );
// 4308         }
// 4309     }
// 4310     return ( ZCL_STATUS_FAILURE );
// 4311   }
// 4312 
// 4313   return ( stat );
// 4314 }
// 4315 
// 4316 
// 4317 /********************************************************************************************
// 4318 *********************************************************************************************/
// 
// 2 630 bytes in segment BANKED_CODE
//    72 bytes in segment BANK_RELAYS
//     6 bytes in segment XDATA_Z
// 
//    72 bytes of CODE     memory
// 2 630 bytes of HUGECODE memory
//     6 bytes of XDATA    memory
//
//Errors: none
//Warnings: 1
