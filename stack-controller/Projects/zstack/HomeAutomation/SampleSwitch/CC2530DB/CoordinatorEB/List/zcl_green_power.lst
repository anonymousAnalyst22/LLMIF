###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               22/Nov/2023  15:42:45
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\fuzzing-coordinator-response-collection\Components\stack\zcl\zcl_green_power.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWAE1C.tmp
#        (D:\fuzzing-coordinator-response-collection\Components\stack\zcl\zcl_green_power.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
#        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
#        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
#        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
#        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl_green_power.lst
#    Object file        =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\zcl_green_power.r51
#
###############################################################################

D:\fuzzing-coordinator-response-collection\Components\stack\zcl\zcl_green_power.c
      1          /**************************************************************************************************
      2            Filename:       zcl_green_power.c
      3            Revised:        $Date: 2015-09-10 09:36:48 -0700 (Thu, 10 Sep 2015) $
      4            Revision:       $Revision: 44493 $
      5          
      6            Description:    Zigbee Cluster Library - General.  This application receives all
      7                            ZCL messages and initially parses them before passing to application.
      8          
      9          
     10            Copyright 2006-2015 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          
     42          
     43          /*********************************************************************
     44           * INCLUDES
     45           */
     46          
     47          #include "ZGlobals.h"  
     48          #include "ZComDef.h"
     49          #include "zcl.h"
     50          #include "zcl_green_power.h"
     51          #include "stub_aps.h"
     52          #include "gp_common.h"
     53          #include "bdb_interface.h"
     54             
     55          #if !defined (DISABLE_GREENPOWER_BASIC_PROXY) && (ZG_BUILD_RTR_TYPE)
     56          
     57          /*********************************************************************
     58           * MACROS
     59           */
     60          
     61          /*********************************************************************
     62           * CONSTANTS
     63           */
     64          
     65          /*********************************************************************
     66           * TYPEDEFS
     67           */
     68          
     69          typedef struct zclGpCBRec
     70          {
     71            struct zclGpCBRec        *next;
     72            uint8                     endpoint; // Used to link it into the endpoint descriptor
     73            zclGp_AppCallbacks_t     *CBs;      // Pointer to Callback function
     74          } zclGpCBRec_t;
     75          
     76          
     77          /*********************************************************************
     78           * GLOBAL VARIABLES
     79           */
     80          
     81          /*********************************************************************
     82           * GLOBAL FUNCTIONS
     83           */
     84          
     85          /*********************************************************************
     86           * LOCAL VARIABLES
     87           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          static zclGpCBRec_t *zclGpCBs = (zclGpCBRec_t *)NULL;
   \                     zclGpCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          static uint8 zclGpPluginRegisted = FALSE;
   \                     zclGpPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          static gpNotificationMsg_t *pNotificationMsgHead = NULL;
   \                     pNotificationMsgHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     91          static gpCmdPayloadMsg_t *pCmdPayloadMsgHead = NULL;
   \                     pCmdPayloadMsgHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     92          
     93          //static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
     94          
     95          
     96          /*********************************************************************
     97           * LOCAL FUNCTIONS
     98           */
     99          static ZStatus_t zclGp_HdlIncoming( zclIncoming_t *pInMsg );
    100          static ZStatus_t zclGp_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    101          static zclGp_AppCallbacks_t *zclGp_FindCallbacks( uint8 endpoint );
    102          static uint8 gp_addPairedSinksToMsgQueue( uint8 appId, uint8 *pId, gpCmdPayloadMsg_t* pMsg );
    103          
    104          static ZStatus_t zclGp_ProcessInProxyBasic( zclIncoming_t *pInMsg, zclGp_AppCallbacks_t *pCBs );
    105          
    106          
    107          /*********************************************************************
    108           * @fn      zclGp_RegisterCmdCallbacks
    109           *
    110           * @brief   Register an applications command callbacks
    111           *
    112           * @param   endpoint - application's endpoint
    113           * @param   callbacks - pointer to the callback record.
    114           *
    115           * @return  ZMemError if not able to allocate
    116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          ZStatus_t zclGp_RegisterCmdCallbacks( uint8 endpoint, zclGp_AppCallbacks_t *callbacks )
   \                     zclGp_RegisterCmdCallbacks:
    118          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EA           MOV       A,R2
   \   000008   FE           MOV       R6,A
   \   000009   EB           MOV       A,R3
   \   00000A   FF           MOV       R7,A
    119            zclGpCBRec_t *pNewItem;
    120            zclGpCBRec_t *pLoop;
    121          
    122            // Register as a ZCL Plugin
    123            if ( zclGpPluginRegisted == FALSE )
   \   00000B   90....       MOV       DPTR,#zclGpPluginRegisted
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   7021         JNZ       ??zclGp_RegisterCmdCallbacks_0
    124            {
    125              zcl_registerPlugin( ZCL_CLUSTER_ID_GREEN_POWER,
    126                                  ZCL_CLUSTER_ID_GREEN_POWER,
    127                                  zclGp_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV       ?V2,#`??zclGp_HdlIncoming::?relay` & 0xff
   \   000014   75....       MOV       ?V3,#(`??zclGp_HdlIncoming::?relay` >> 8) & 0xff
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C21         MOV       R4,#0x21
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7A21         MOV       R2,#0x21
   \   000022   7B00         MOV       R3,#0x0
   \   000024   12....       LCALL     `??zcl_registerPlugin::?relay`; Banked call to: zcl_registerPlugin
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
    128          
    129              zclGpPluginRegisted = TRUE;
   \   00002C   90....       MOV       DPTR,#zclGpPluginRegisted
   \   00002F   7401         MOV       A,#0x1
   \   000031   F0           MOVX      @DPTR,A
    130            }
    131          
    132            // Fill in the new profile list
    133            pNewItem = zcl_mem_alloc( sizeof( zclGpCBRec_t ) );
   \                     ??zclGp_RegisterCmdCallbacks_0:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   7A05         MOV       R2,#0x5
   \   000034   7B00         MOV       R3,#0x0
   \   000036   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000039   8A..         MOV       ?V2,R2
   \   00003B   8B..         MOV       ?V3,R3
   \   00003D   A8..         MOV       R0,?V2
   \   00003F   A9..         MOV       R1,?V3
    134            if ( pNewItem == NULL )
   \   000041   E8           MOV       A,R0
   \   000042   49           ORL       A,R1
   \   000043   7004         JNZ       ??zclGp_RegisterCmdCallbacks_1
    135              return (ZMemError);
   \   000045   7910         MOV       R1,#0x10
   \   000047   8044         SJMP      ??zclGp_RegisterCmdCallbacks_2
    136          
    137            pNewItem->next = (zclGpCBRec_t *)NULL;
   \                     ??zclGp_RegisterCmdCallbacks_1:
   \   000049   8882         MOV       DPL,R0
   \   00004B   8983         MOV       DPH,R1
   \   00004D   E4           CLR       A
   \   00004E   F0           MOVX      @DPTR,A
   \   00004F   A3           INC       DPTR
   \   000050   F0           MOVX      @DPTR,A
    138            pNewItem->endpoint = endpoint;
   \   000051   8882         MOV       DPL,R0
   \   000053   8983         MOV       DPH,R1
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E5..         MOV       A,?V0
   \   000059   F0           MOVX      @DPTR,A
    139            pNewItem->CBs = callbacks;
   \   00005A   8882         MOV       DPL,R0
   \   00005C   8983         MOV       DPH,R1
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   EE           MOV       A,R6
   \   000062   F0           MOVX      @DPTR,A
   \   000063   A3           INC       DPTR
   \   000064   EF           MOV       A,R7
   \   000065   F0           MOVX      @DPTR,A
    140          
    141            // Find spot in list
    142            if (  zclGpCBs == NULL )
   \   000066   90....       MOV       DPTR,#zclGpCBs
   \   000069   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00006C   90....       MOV       DPTR,#zclGpCBs
   \   00006F   6017         JZ        ??zclGp_RegisterCmdCallbacks_3
    143            {
    144              zclGpCBs = pNewItem;
    145            }
    146            else
    147            {
    148              // Look for end of list
    149              pLoop = zclGpCBs;
   \   000071   E0           MOVX      A,@DPTR
   \   000072   FC           MOV       R4,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   8003         SJMP      ??zclGp_RegisterCmdCallbacks_4
    150              while ( pLoop->next != NULL )
    151                pLoop = pLoop->next;
   \                     ??zclGp_RegisterCmdCallbacks_5:
   \   000077   EA           MOV       A,R2
   \   000078   FC           MOV       R4,A
   \   000079   EB           MOV       A,R3
   \                     ??zclGp_RegisterCmdCallbacks_4:
   \   00007A   FD           MOV       R5,A
   \   00007B   8C82         MOV       DPL,R4
   \   00007D   8D83         MOV       DPH,R5
   \   00007F   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000082   70F3         JNZ       ??zclGp_RegisterCmdCallbacks_5
    152          
    153              // Put new item at end of list
    154              pLoop->next = pNewItem;
   \   000084   8C82         MOV       DPL,R4
   \   000086   8D83         MOV       DPH,R5
    155            }
   \                     ??zclGp_RegisterCmdCallbacks_3:
   \   000088   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    156          
    157            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_96:
   \   00008B   7900         MOV       R1,#0x0
   \                     ??zclGp_RegisterCmdCallbacks_2:
   \   00008D                REQUIRE ?Subroutine0
   \   00008D                ; // Fall through to label ?Subroutine0
    158          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV       R7,#0x4
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   EA           MOV       A,R2
   \   000006   4B           ORL       A,R3
   \   000007   22           RET
    159          
    160          /*********************************************************************
    161           * @fn      zclGp_FindCallbacks
    162           *
    163           * @brief   Find the callbacks for an endpoint
    164           *
    165           * @param   endpoint - endpoint to find the application callbacks for
    166           *
    167           * @return  pointer to the callbacks
    168           */
    169          static zclGp_AppCallbacks_t *zclGp_FindCallbacks( uint8 endpoint )
    170          {
    171            zclGpCBRec_t *pCBs;
    172          
    173            pCBs = zclGpCBs;
    174            while ( pCBs )
    175            {
    176              if ( pCBs->endpoint == endpoint )
    177                return ( pCBs->CBs );
    178              pCBs = pCBs->next;
    179            }
    180            return ( (zclGp_AppCallbacks_t *)NULL );
    181          }
    182          
    183          /*********************************************************************
    184           * @fn      zclGp_HdlIncoming
    185           *
    186           * @brief   Callback from ZCL to process incoming Commands specific
    187           *          to this cluster library or Profile commands for attributes
    188           *          that aren't in the attribute list
    189           *
    190           *
    191           * @param   pInMsg - pointer to the incoming message
    192           *
    193           * @return  ZStatus_t
    194           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          static ZStatus_t zclGp_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclGp_HdlIncoming:
    196          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    197            ZStatus_t stat = ZSuccess;
    198          
    199          #if defined ( INTER_PAN )
    200            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
    201              return ( stat ); // Cluster not supported thru Inter-PAN
    202          #endif
    203            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \   000005   8A82         MOV       DPL,R2
   \   000007   8B83         MOV       DPH,R3
   \   000009   A3           INC       DPTR
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   F8           MOV       R0,A
   \   00000D   5403         ANL       A,#0x3
   \   00000F   6401         XRL       A,#0x1
   \   000011   7038         JNZ       ??zclGp_HdlIncoming_0
    204            {
    205              // Is this a manufacturer specific command?
    206              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   \   000013   E8           MOV       A,R0
   \   000014   5404         ANL       A,#0x4
   \   000016   7033         JNZ       ??zclGp_HdlIncoming_0
    207              {
    208                stat = zclGp_HdlInSpecificCommands( pInMsg );
   \   000018   8A82         MOV       DPL,R2
   \   00001A   8B83         MOV       DPH,R3
   \   00001C   12....       LCALL     ??Subroutine57_0 & 0xFFFF
    209              }
    210              else
    211              {
    212                // We don't support any manufacturer specific command.
    213                stat = ZFailure;
    214              }
    215            }
   \                     ??CrossCallReturnLabel_131:
   \   00001F   E8           MOV       A,R0
   \   000020   FE           MOV       R6,A
   \   000021   E9           MOV       A,R1
   \   000022   FF           MOV       R7,A
   \   000023   EE           MOV       A,R6
   \   000024   2414         ADD       A,#0x14
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   3F           ADDC      A,R7
   \   00002A   F583         MOV       DPH,A
   \   00002C   E0           MOVX      A,@DPTR
   \   00002D   FC           MOV       R4,A
   \   00002E   90....       MOV       DPTR,#zclGpCBs
   \                     ??zclGp_HdlIncoming_1:
   \   000031   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000034   6015         JZ        ??zclGp_HdlIncoming_0
   \   000036   8882         MOV       DPL,R0
   \   000038   8983         MOV       DPH,R1
   \   00003A   A3           INC       DPTR
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   6C           XRL       A,R4
   \   00003E   8882         MOV       DPL,R0
   \   000040   8983         MOV       DPH,R1
   \   000042   70ED         JNZ       ??zclGp_HdlIncoming_1
   \   000044   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000047   EC           MOV       A,R4
   \   000048   4D           ORL       A,R5
   \   000049   7004         JNZ       ??zclGp_HdlIncoming_2
   \                     ??zclGp_HdlIncoming_0:
   \   00004B   7901         MOV       R1,#0x1
   \   00004D   801A         SJMP      ??zclGp_HdlIncoming_3
   \                     ??zclGp_HdlIncoming_2:
   \   00004F   8E82         MOV       DPL,R6
   \   000051   8F83         MOV       DPH,R7
   \   000053   A3           INC       DPTR
   \   000054   A3           INC       DPTR
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   6421         XRL       A,#0x21
   \   00005A   7002         JNZ       ??zclGp_HdlIncoming_4
   \   00005C   A3           INC       DPTR
   \   00005D   E0           MOVX      A,@DPTR
   \                     ??zclGp_HdlIncoming_4:
   \   00005E   7006         JNZ       ??zclGp_HdlIncoming_5
   \   000060                ; Setup parameters for call to function zclGp_ProcessInProxyBasic
   \   000060   12....       LCALL     `??zclGp_ProcessInProxyBasic::?relay`; Banked call to: zclGp_ProcessInProxyBasic
   \   000063   E9           MOV       A,R1
   \   000064   8002         SJMP      ??zclGp_HdlIncoming_6
   \                     ??zclGp_HdlIncoming_5:
   \   000066   7401         MOV       A,#0x1
   \                     ??zclGp_HdlIncoming_6:
   \   000068   F9           MOV       R1,A
    216            else
    217            {
    218              // Handle all the normal (Read, Write...) commands -- should never get here
    219              stat = ZFailure;
    220            }
    221            return ( stat );
   \                     ??zclGp_HdlIncoming_3:
   \   000069                REQUIRE ?Subroutine1
   \   000069                ; // Fall through to label ?Subroutine1
    222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   A3           INC       DPTR
   \   000001   A3           INC       DPTR
   \   000002   A3           INC       DPTR
   \   000003                REQUIRE ??Subroutine45_0
   \   000003                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   E8           MOV       A,R0
   \   000006   49           ORL       A,R1
   \   000007   22           RET
    223          
    224          /*********************************************************************
    225           * @fn      zclGp_HdlInSpecificCommands
    226           *
    227           * @brief   Callback from ZCL to process incoming Commands specific
    228           *          to this cluster library
    229          
    230           * @param   pInMsg - pointer to the incoming message
    231           *
    232           * @return  ZStatus_t
    233           */
    234          static ZStatus_t zclGp_HdlInSpecificCommands( zclIncoming_t *pInMsg )
    235          {
    236            ZStatus_t stat;
    237            zclGp_AppCallbacks_t *pCBs;
    238          
    239            // make sure endpoint exists
    240            pCBs = zclGp_FindCallbacks( pInMsg->msg->endPoint );
    241            if ( pCBs == NULL )
    242              return ( ZFailure );
    243          
    244            switch ( pInMsg->msg->clusterId )
    245            {
    246              case ZCL_CLUSTER_ID_GREEN_POWER:
    247                // Proxy Basic handler
    248                stat = zclGp_ProcessInProxyBasic( pInMsg, pCBs );
    249                break;
    250          
    251              default:
    252                stat = ZFailure;
    253                break;
    254            }
    255          
    256            return ( stat );
    257          }
    258          
    259          /*********************************************************************
    260           * @fn      zclGp_ProcessInProxyBasic
    261           *
    262           * @brief   Process in the received client commands for the Proxy Basic.
    263           *
    264           * @param   pInMsg - pointer to the incoming message
    265           *
    266           * @return  ZStatus_t
    267           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    268          static ZStatus_t zclGp_ProcessInProxyBasic( zclIncoming_t *pInMsg,
   \                     zclGp_ProcessInProxyBasic:
    269                                                    zclGp_AppCallbacks_t *pCBs )
    270          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV       A,#-0x1c
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
   \   000015   7402         MOV       A,#0x2
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   EC           MOV       A,R4
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   ED           MOV       A,R5
   \   00001E   12....       LCALL     ??Subroutine49_0 & 0xFFFF
    271            // Server side command handler
    272            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??CrossCallReturnLabel_65:
   \   000021   2406         ADD       A,#0x6
   \   000023   FE           MOV       R6,A
   \   000024   A3           INC       DPTR
   \   000025   E0           MOVX      A,@DPTR
   \   000026   3400         ADDC      A,#0x0
   \   000028   FF           MOV       R7,A
   \   000029   85..82       MOV       DPL,?XSP + 0
   \   00002C   85..83       MOV       DPH,?XSP + 1
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   2407         ADD       A,#0x7
   \   000032   F8           MOV       R0,A
   \   000033   A3           INC       DPTR
   \   000034   E0           MOVX      A,@DPTR
   \   000035   3400         ADDC      A,#0x0
   \   000037   F9           MOV       R1,A
   \   000038   740B         MOV       A,#0xb
   \   00003A   12....       LCALL     ?XSTACK_DISP0_8
   \   00003D   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000040   2402         ADD       A,#0x2
   \   000042   F5..         MOV       ?V0,A
   \   000044   A3           INC       DPTR
   \   000045   E0           MOVX      A,@DPTR
   \   000046   3400         ADDC      A,#0x0
   \   000048   F5..         MOV       ?V1,A
   \   00004A   85..82       MOV       DPL,?V0
   \   00004D   F583         MOV       DPH,A
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   5408         ANL       A,#0x8
   \   000052   707C         JNZ       ??zclGp_ProcessInProxyBasic_0
    273            {
    274              // Server side command handling is not supported
    275              zclDefaultRspCmd_t defaultRspCmd;
    276          
    277              defaultRspCmd.commandID = pInMsg->hdr.commandID;
   \   000054   740B         MOV       A,#0xb
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00005C   C0E0         PUSH      A
   \   00005E   7404         MOV       A,#0x4
   \   000060   12....       LCALL     ?XSTACK_DISP0_8
   \   000063   D0E0         POP       A
   \   000065   F0           MOVX      @DPTR,A
    278              defaultRspCmd.statusCode = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \   000066   7405         MOV       A,#0x5
   \   000068   12....       LCALL     ?XSTACK_DISP0_8
   \   00006B   7481         MOV       A,#-0x7f
   \   00006D   F0           MOVX      @DPTR,A
    279              zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
    280                                     pInMsg->msg->clusterId, &defaultRspCmd,
    281                                     ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
   \   00006E   12....       LCALL     ?Subroutine14 & 0xFFFF
    282            }
   \                     ??CrossCallReturnLabel_88:
   \   000071   F5..         MOV       ?V2,A
   \   000073   A3           INC       DPTR
   \   000074   E0           MOVX      A,@DPTR
   \   000075   F5..         MOV       ?V3,A
   \   000077                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   000077   8E82         MOV       DPL,R6
   \   000079   8F83         MOV       DPH,R7
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   F5..         MOV       ?V4,A
   \   00007E   78..         MOV       R0,#?V4
   \   000080   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000083   E4           CLR       A
   \   000084   F5..         MOV       ?V4,A
   \   000086   F5..         MOV       ?V5,A
   \   000088   78..         MOV       R0,#?V4
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   75..01       MOV       ?V4,#0x1
   \   000090   78..         MOV       R0,#?V4
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000095   78..         MOV       R0,#?V4
   \   000097   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00009A   7409         MOV       A,#0x9
   \   00009C   12....       LCALL     ?XSTACK_DISP100_8
   \   00009F   88..         MOV       ?V4,R0
   \   0000A1   89..         MOV       ?V5,R1
   \   0000A3   78..         MOV       R0,#?V4
   \   0000A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A8   85..82       MOV       DPL,?V2
   \   0000AB   85..83       MOV       DPH,?V3
   \   0000AE   A3           INC       DPTR
   \   0000AF   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000B2   E5..         MOV       A,?V2
   \   0000B4   2406         ADD       A,#0x6
   \   0000B6   FA           MOV       R2,A
   \   0000B7   E4           CLR       A
   \   0000B8   35..         ADDC      A,?V3
   \   0000BA   FB           MOV       R3,A
   \   0000BB   E5..         MOV       A,?V2
   \   0000BD   2414         ADD       A,#0x14
   \   0000BF   F582         MOV       DPL,A
   \   0000C1   E4           CLR       A
   \   0000C2   35..         ADDC      A,?V3
   \   0000C4   F583         MOV       DPH,A
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   F9           MOV       R1,A
   \   0000C8   12....       LCALL     `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
   \   0000CB   7407         MOV       A,#0x7
   \   0000CD   12....       LCALL     ?DEALLOC_XSTACK8
    283            // Client side command handler
    284            if ( zcl_ClientCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGp_ProcessInProxyBasic_0:
   \   0000D0   85..82       MOV       DPL,?V0
   \   0000D3   85..83       MOV       DPH,?V1
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   5408         ANL       A,#0x8
   \   0000D9   7003         JNZ       $+5
   \   0000DB   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    285            {
    286              switch ( pInMsg->hdr.commandID )
   \   0000DE   85..82       MOV       DPL,?XSP + 0
   \   0000E1   85..83       MOV       DPH,?XSP + 1
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   240A         ADD       A,#0xa
   \   0000E7   F8           MOV       R0,A
   \   0000E8   A3           INC       DPTR
   \   0000E9   E0           MOVX      A,@DPTR
   \   0000EA   3400         ADDC      A,#0x0
   \   0000EC   F9           MOV       R1,A
   \   0000ED   7404         MOV       A,#0x4
   \   0000EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F2   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000F5   2408         ADD       A,#0x8
   \   0000F7   F5..         MOV       ?V0,A
   \   0000F9   A3           INC       DPTR
   \   0000FA   E0           MOVX      A,@DPTR
   \   0000FB   3400         ADDC      A,#0x0
   \   0000FD   F5..         MOV       ?V1,A
   \   0000FF   740B         MOV       A,#0xb
   \   000101   12....       LCALL     ?XSTACK_DISP0_8
   \   000104   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000107   14           DEC       A
   \   000108   6014         JZ        ??zclGp_ProcessInProxyBasic_2
   \   00010A   14           DEC       A
   \   00010B   7003         JNZ       $+5
   \   00010D   02....       LJMP      ??zclGp_ProcessInProxyBasic_3 & 0xFFFF
   \   000110   24FC         ADD       A,#-0x4
   \   000112   7003         JNZ       $+5
   \   000114   02....       LJMP      ??zclGp_ProcessInProxyBasic_4 & 0xFFFF
   \   000117   24FB         ADD       A,#-0x5
   \   000119   6069         JZ        ??zclGp_ProcessInProxyBasic_5
   \   00011B   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    287              {
    288                case COMMAND_GP_PAIRING:
    289                  if ( pCBs->pfnGpPairingCmd )
   \                     ??zclGp_ProcessInProxyBasic_2:
   \   00011E   7402         MOV       A,#0x2
   \   000120   12....       LCALL     ?XSTACK_DISP0_8
   \   000123   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000126   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000129   7003         JNZ       $+5
   \   00012B   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    290                  {
    291                    zclGpPairing_t cmd;
    292                    
    293                    zcl_InSeqNum = pInMsg->hdr.transSeqNum;
   \   00012E   12....       LCALL     ?Subroutine10 & 0xFFFF
    294                    
    295                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??CrossCallReturnLabel_2:
   \   000131   7415         MOV       A,#0x15
   \   000133   12....       LCALL     ?XSTACK_DISP0_8
   \   000136   12....       LCALL     ?Subroutine9 & 0xFFFF
    296                    osal_memcpy( cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \                     ??CrossCallReturnLabel_50:
   \   000139   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013C   7C03         MOV       R4,#0x3
   \   00013E   7D00         MOV       R5,#0x0
   \   000140   741A         MOV       A,#0x1a
   \   000142   12....       LCALL     ?XSTACK_DISP0_8
   \   000145   AA82         MOV       R2,DPL
   \   000147   AB83         MOV       R3,DPH
   \   000149   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00014C   7403         MOV       A,#0x3
   \   00014E   12....       LCALL     ?DEALLOC_XSTACK8
    297                    pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   000151   85..82       MOV       DPL,?V0
   \   000154   85..83       MOV       DPH,?V1
   \   000157   E0           MOVX      A,@DPTR
   \   000158   2403         ADD       A,#0x3
   \   00015A   12....       LCALL     ??Subroutine47_0 & 0xFFFF
    298                              
    299                    if ( cmd.pData == NULL )
   \                     ??CrossCallReturnLabel_54:
   \   00015D   741A         MOV       A,#0x1a
   \   00015F   12....       LCALL     ?XSTACK_DISP0_8
   \   000162   12....       LCALL     ??Subroutine55_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000165   7005         JNZ       ??zclGp_ProcessInProxyBasic_6
    300                    {
    301                      return ZFailure;
   \   000167   7901         MOV       R1,#0x1
   \   000169   02....       LJMP      ??zclGp_ProcessInProxyBasic_7 & 0xFFFF
    302                    }
    303                    
    304                    cmd.pData = pInMsg->pData;
   \                     ??zclGp_ProcessInProxyBasic_6:
   \   00016C   741A         MOV       A,#0x1a
   \   00016E   12....       LCALL     ?XSTACK_DISP0_8
   \   000171   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    305                    pCBs->pfnGpPairingCmd( &cmd );
   \                     ??CrossCallReturnLabel_97:
   \   000174                ; Setup parameters for indirect call
   \   000174   7415         MOV       A,#0x15
   \   000176   12....       LCALL     ?XSTACK_DISP101_8
   \   000179   7402         MOV       A,#0x2
   \   00017B   12....       LCALL     ?XSTACK_DISP0_8
   \   00017E   12....       LCALL     ??Subroutine50_0 & 0xFFFF
    306          
    307                  }
   \                     ??CrossCallReturnLabel_75:
   \   000181   02....       LJMP      ??CrossCallReturnLabel_15 & 0xFFFF
    308                  break;
    309                  
    310                case COMMAND_GP_PROXY_TABLE_REQUEST:
    311                  if ( pCBs->pfnGpProxyTableReqCmd )
   \                     ??zclGp_ProcessInProxyBasic_5:
   \   000184   7402         MOV       A,#0x2
   \   000186   12....       LCALL     ?XSTACK_DISP0_8
   \   000189   E0           MOVX      A,@DPTR
   \   00018A   2402         ADD       A,#0x2
   \   00018C   F5..         MOV       ?V2,A
   \   00018E   A3           INC       DPTR
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   3400         ADDC      A,#0x0
   \   000192   F5..         MOV       ?V3,A
   \   000194   85..82       MOV       DPL,?V2
   \   000197   F583         MOV       DPH,A
   \   000199   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   00019C   7003         JNZ       $+5
   \   00019E   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    312                  {
    313                    zclGpProxyTableRequest_t cmd;
    314                    
    315                    zcl_InSeqNum = pInMsg->hdr.transSeqNum;
   \   0001A1   12....       LCALL     ?Subroutine10 & 0xFFFF
    316                    
    317                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   \                     ??CrossCallReturnLabel_3:
   \   0001A4   7406         MOV       A,#0x6
   \   0001A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A9   12....       LCALL     ?Subroutine9 & 0xFFFF
    318                    osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \                     ??CrossCallReturnLabel_51:
   \   0001AC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001AF   7C01         MOV       R4,#0x1
   \   0001B1   7D00         MOV       R5,#0x0
   \   0001B3   740B         MOV       A,#0xb
   \   0001B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B8   AA82         MOV       R2,DPL
   \   0001BA   AB83         MOV       R3,DPH
   \   0001BC   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001BF   7403         MOV       A,#0x3
   \   0001C1   12....       LCALL     ?DEALLOC_XSTACK8
    319                    pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   0001C4   12....       LCALL     ?Subroutine7 & 0xFFFF
    320                    
    321                    
    322                    cmd.pData = (void*)pInMsg->pData;
   \                     ??CrossCallReturnLabel_56:
   \   0001C7   7409         MOV       A,#0x9
   \   0001C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CC   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    323                    pCBs->pfnGpProxyTableReqCmd( &cmd );
   \                     ??CrossCallReturnLabel_98:
   \   0001CF                ; Setup parameters for indirect call
   \   0001CF   7406         MOV       A,#0x6
   \   0001D1   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D4   85..82       MOV       DPL,?V2
   \   0001D7   85..83       MOV       DPH,?V3
   \   0001DA   02....       LJMP      ??CrossCallReturnLabel_15 & 0xFFFF
    324          
    325                  }
   \                     ??zclGp_ProcessInProxyBasic_3:
   \   0001DD   7402         MOV       A,#0x2
   \   0001DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E2   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001E5   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   0001E8   7003         JNZ       $+5
   \   0001EA   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    326                  break;
    327                case COMMAND_GP_PROXY_COMMISSIONING_MODE:
    328                  if(pCBs->pfnGpProxyCommissioningModeCmd)
    329                  {
    330                    zclGpProxyCommissioningMode_t cmd;
    331          
    332                    osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \   0001ED                ; Setup parameters for call to function osal_memcpy
   \   0001ED   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0001F0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001F3   7C01         MOV       R4,#0x1
   \   0001F5   7D00         MOV       R5,#0x0
   \   0001F7   740B         MOV       A,#0xb
   \   0001F9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FC   AA82         MOV       R2,DPL
   \   0001FE   AB83         MOV       R3,DPH
   \   000200   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000203   7403         MOV       A,#0x3
   \   000205   12....       LCALL     ?DEALLOC_XSTACK8
    333                    pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   000208   12....       LCALL     ?Subroutine7 & 0xFFFF
    334          
    335                    // alloc for data after options field
    336                    uint8 responseLen = pInMsg->pDataLen - sizeof(cmd.options); 
   \                     ??CrossCallReturnLabel_57:
   \   00020B   7404         MOV       A,#0x4
   \   00020D   12....       LCALL     ?XSTACK_DISP0_8
   \   000210   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000213   14           DEC       A
    337                   
    338                    cmd.pData = osal_mem_alloc( responseLen );
   \   000214   FE           MOV       R6,A
   \   000215                ; Setup parameters for call to function osal_mem_alloc
   \   000215   FA           MOV       R2,A
   \   000216   7B00         MOV       R3,#0x0
   \   000218   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00021B   7409         MOV       A,#0x9
   \   00021D   12....       LCALL     ?XSTACK_DISP0_8
   \   000220   12....       LCALL     ?Subroutine21 & 0xFFFF
    339                    osal_memcpy(cmd.pData, (void*)pInMsg->pData, responseLen );
   \                     ??CrossCallReturnLabel_18:
   \   000223   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000226   EE           MOV       A,R6
   \   000227   FC           MOV       R4,A
   \   000228   7D00         MOV       R5,#0x0
   \   00022A   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00022D   7403         MOV       A,#0x3
   \   00022F   12....       LCALL     ?DEALLOC_XSTACK8
    340          
    341                    if(pInMsg->msg->srcAddr.addrMode == afAddr16Bit)
   \   000232   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000235   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000238   E8           MOV       A,R0
   \   000239   240E         ADD       A,#0xe
   \   00023B   F582         MOV       DPL,A
   \   00023D   E4           CLR       A
   \   00023E   39           ADDC      A,R1
   \   00023F   F583         MOV       DPH,A
   \   000241   E0           MOVX      A,@DPTR
   \   000242   6402         XRL       A,#0x2
   \   000244   7015         JNZ       ??CrossCallReturnLabel_99
    342                    {
    343                      cmd.srcAddr = pInMsg->msg->srcAddr.addr.shortAddr;
   \   000246   8882         MOV       DPL,R0
   \   000248   8983         MOV       DPH,R1
   \   00024A   A3           INC       DPTR
   \   00024B   A3           INC       DPTR
   \   00024C   A3           INC       DPTR
   \   00024D   A3           INC       DPTR
   \   00024E   A3           INC       DPTR
   \   00024F   A3           INC       DPTR
   \   000250   12....       LCALL     ??Subroutine57_0 & 0xFFFF
    344                    }
   \                     ??CrossCallReturnLabel_133:
   \   000253   7406         MOV       A,#0x6
   \   000255   12....       LCALL     ?XSTACK_DISP0_8
   \   000258   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    345                    
    346                    pCBs->pfnGpProxyCommissioningModeCmd( &cmd );
   \                     ??CrossCallReturnLabel_99:
   \   00025B                ; Setup parameters for indirect call
   \   00025B   7406         MOV       A,#0x6
   \   00025D   12....       LCALL     ?XSTACK_DISP101_8
   \   000260   7402         MOV       A,#0x2
   \   000262   12....       LCALL     ?XSTACK_DISP0_8
   \   000265   12....       LCALL     ?Subroutine20 & 0xFFFF
    347                  }
   \                     ??CrossCallReturnLabel_17:
   \   000268   02....       LJMP      ??CrossCallReturnLabel_15 & 0xFFFF
   \                     ??zclGp_ProcessInProxyBasic_4:
   \   00026B   7402         MOV       A,#0x2
   \   00026D   12....       LCALL     ?XSTACK_DISP0_8
   \   000270   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000273   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000276   7003         JNZ       $+5
   \   000278   02....       LJMP      ??zclGp_ProcessInProxyBasic_1 & 0xFFFF
    348                  break;
    349                  case COMMAND_GP_RESPONSE:
    350                    
    351                    if(pCBs->pfnGpResponseCommand)
    352                    {
    353                      zclGpResponse_t cmd;
    354                      
    355                      uint8 responseLen;
    356          
    357                      osal_memcpy( &cmd.options, (void*)pInMsg->pData, sizeof(cmd.options) );
   \   00027B                ; Setup parameters for call to function osal_memcpy
   \   00027B   12....       LCALL     ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00027E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000281   7C01         MOV       R4,#0x1
   \   000283   7D00         MOV       R5,#0x0
   \   000285   7412         MOV       A,#0x12
   \   000287   12....       LCALL     ?XSTACK_DISP0_8
   \   00028A   AA82         MOV       R2,DPL
   \   00028C   AB83         MOV       R3,DPH
   \   00028E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000291   7403         MOV       A,#0x3
   \   000293   12....       LCALL     ?DEALLOC_XSTACK8
    358                      pInMsg->pData += sizeof(cmd.options);  // Move data pointer after options field
   \   000296   85..82       MOV       DPL,?V0
   \   000299   85..83       MOV       DPH,?V1
   \   00029C   E0           MOVX      A,@DPTR
   \   00029D   2401         ADD       A,#0x1
   \   00029F   FA           MOV       R2,A
   \   0002A0   A3           INC       DPTR
   \   0002A1   E0           MOVX      A,@DPTR
   \   0002A2   3400         ADDC      A,#0x0
   \   0002A4   FB           MOV       R3,A
   \   0002A5   85..82       MOV       DPL,?V0
   \   0002A8   85..83       MOV       DPH,?V1
   \   0002AB   EA           MOV       A,R2
   \   0002AC   F0           MOVX      @DPTR,A
   \   0002AD   A3           INC       DPTR
   \   0002AE   EB           MOV       A,R3
   \   0002AF   F0           MOVX      @DPTR,A
    359                      
    360                      cmd.tempMasterShortAddr = osal_build_uint16(pInMsg->pData);
   \   0002B0                ; Setup parameters for call to function osal_build_uint16
   \   0002B0   12....       LCALL     `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   0002B3   7410         MOV       A,#0x10
   \   0002B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B8   12....       LCALL     ?Subroutine37 & 0xFFFF
    361                      pInMsg->pData += sizeof(cmd.tempMasterShortAddr);  // Move data pointer after tempMaster field
   \                     ??CrossCallReturnLabel_36:
   \   0002BB   2402         ADD       A,#0x2
   \   0002BD   12....       LCALL     ??Subroutine47_0 & 0xFFFF
    362                      
    363                      osal_memcpy( &cmd.tempMasterTxChannel, (void*)pInMsg->pData, sizeof(cmd.tempMasterTxChannel) );
   \                     ??CrossCallReturnLabel_55:
   \   0002C0                ; Setup parameters for call to function osal_memcpy
   \   0002C0   88..         MOV       ?V4,R0
   \   0002C2   89..         MOV       ?V5,R1
   \   0002C4   78..         MOV       R0,#?V4
   \   0002C6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002C9   7C01         MOV       R4,#0x1
   \   0002CB   7D00         MOV       R5,#0x0
   \   0002CD   7415         MOV       A,#0x15
   \   0002CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D2   AA82         MOV       R2,DPL
   \   0002D4   AB83         MOV       R3,DPH
   \   0002D6   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002D9   7403         MOV       A,#0x3
   \   0002DB   12....       LCALL     ?DEALLOC_XSTACK8
    364                      pInMsg->pData += sizeof(cmd.tempMasterTxChannel);  // Move data pointer after options field
   \   0002DE   12....       LCALL     ?Subroutine7 & 0xFFFF
    365                      
    366                      cmd.dstAddr = pInMsg->msg->macDestAddr;  
   \                     ??CrossCallReturnLabel_58:
   \   0002E1   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0002E4   F8           MOV       R0,A
   \   0002E5   A3           INC       DPTR
   \   0002E6   E0           MOVX      A,@DPTR
   \   0002E7   C8           XCH       A,R0
   \   0002E8   2412         ADD       A,#0x12
   \   0002EA   F582         MOV       DPL,A
   \   0002EC   E4           CLR       A
   \   0002ED   38           ADDC      A,R0
   \   0002EE   F583         MOV       DPH,A
   \   0002F0   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   0002F3   740D         MOV       A,#0xd
   \   0002F5   12....       LCALL     ?XSTACK_DISP0_8
   \   0002F8   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    367                            
    368                      responseLen = pInMsg->pDataLen - sizeof(cmd.tempMasterTxChannel) 
    369                                             - sizeof(cmd.tempMasterShortAddr) 
    370                                             - sizeof(cmd.options);
   \                     ??CrossCallReturnLabel_100:
   \   0002FB   7404         MOV       A,#0x4
   \   0002FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000300   12....       LCALL     ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000303   24FC         ADD       A,#-0x4
   \   000305   F8           MOV       R0,A
    371                      cmd.pData = osal_mem_alloc( responseLen );
   \   000306   FE           MOV       R6,A
   \   000307                ; Setup parameters for call to function osal_mem_alloc
   \   000307   FA           MOV       R2,A
   \   000308   7B00         MOV       R3,#0x0
   \   00030A   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00030D   7413         MOV       A,#0x13
   \   00030F   12....       LCALL     ?XSTACK_DISP0_8
   \   000312   12....       LCALL     ?Subroutine21 & 0xFFFF
    372                      
    373                      osal_memcpy(cmd.pData, (void*)pInMsg->pData, responseLen );
   \                     ??CrossCallReturnLabel_19:
   \   000315   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000318   EE           MOV       A,R6
   \   000319   FC           MOV       R4,A
   \   00031A   7D00         MOV       R5,#0x0
   \   00031C   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00031F   7403         MOV       A,#0x3
   \   000321   12....       LCALL     ?DEALLOC_XSTACK8
    374          
    375                      pCBs->pfnGpResponseCommand( &cmd ); 
   \   000324                ; Setup parameters for indirect call
   \   000324   740D         MOV       A,#0xd
   \   000326   12....       LCALL     ?XSTACK_DISP101_8
   \   000329   7402         MOV       A,#0x2
   \   00032B   12....       LCALL     ?XSTACK_DISP0_8
   \   00032E   12....       LCALL     ?Subroutine19 & 0xFFFF
    376                    }
    377                  break;
    378              }
    379            }
   \                     ??CrossCallReturnLabel_15:
   \   000331   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000334   12....       LCALL     ?CALL_IND
    380          
    381            return ( ZSuccess );
   \                     ??zclGp_ProcessInProxyBasic_1:
   \   000337   7900         MOV       R1,#0x0
   \                     ??zclGp_ProcessInProxyBasic_7:
   \   000339   741C         MOV       A,#0x1c
   \   00033B                REQUIRE ?Subroutine2
   \   00033B                ; // Fall through to label ?Subroutine2
    382          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F07         MOV       R7,#0x7
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   F5..         MOV       ?V0,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V1,A
   \   000009   75..00       MOV       ?V2,#0x0
   \   00000C   78..         MOV       R0,#?V0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005   85..82       MOV       DPL,?V0
   \   000008   85..83       MOV       DPH,?V1
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C8           XCH       A,R0
   \   000005   2406         ADD       A,#0x6
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   38           ADDC      A,R0
   \   00000B   F583         MOV       DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   E0           MOVX      A,@DPTR
   \   000005   90....       MOV       DPTR,#zcl_InSeqNum
   \   000008   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00000B   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00000E   2406         ADD       A,#0x6
   \   000010   F8           MOV       R0,A
   \   000011   A3           INC       DPTR
   \   000012   E0           MOVX      A,@DPTR
   \   000013   3400         ADDC      A,#0x0
   \   000015   F9           MOV       R1,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                REQUIRE ??Subroutine46_0
   \   000005                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F5..         MOV       ?V4,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F5..         MOV       ?V5,A
   \   00000D   75..00       MOV       ?V6,#0x0
   \   000010   78..         MOV       R0,#?V4
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV       DPL,?V0
   \   000003   85..83       MOV       DPH,?V1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   2401         ADD       A,#0x1
   \   000009                REQUIRE ??Subroutine47_0
   \   000009                ; // Fall through to label ??Subroutine47_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   F9           MOV       R1,A
   \   000006   85..82       MOV       DPL,?V0
   \   000009   85..83       MOV       DPH,?V1
   \   00000C   E8           MOV       A,R0
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   A3           INC       DPTR
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004                REQUIRE ??Subroutine49_0
   \   000004                ; // Fall through to label ??Subroutine49_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine50_0
   \   000006                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine52_0
   \   000006                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   12....       LCALL     ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL     ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   A3           INC       DPTR
   \   000004   22           RET
    383          
    384          /*********************************************************************
    385           * @fn      zclGp_SendGpNotificationCommand
    386           *
    387           * @brief   Send the Green Power Notification Command to a device
    388           *
    389           * @param   pCmd - Pointer to GP Notification Struct
    390           *          secNum - Sequence number given by the GPDF  
    391           *
    392           * @return  ZStatus_t
    393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    394          ZStatus_t zclGp_SendGpNotificationCommand( gpNotificationCmd_t *pCmd, uint8 secNum )
   \                     zclGp_SendGpNotificationCommand:
    395          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV       A,#-0x6
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7405         MOV       A,#0x5
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E9           MOV       A,R1
   \   000010   F0           MOVX      @DPTR,A
   \   000011   8A..         MOV       ?V6,R2
   \   000013   8B..         MOV       ?V7,R3
    396            uint8 *buf = NULL;
    397            uint8 *pBuf = NULL;
    398            uint8 *pGpdId = NULL;
   \   000015   7403         MOV       A,#0x3
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
    399            uint8 appId;
    400            ZStatus_t status;
    401            uint16 len = 11;  // options + GPD Sec Counter + Cmd ID + payloadLen + GPP Short Address + GPP-GPD link
   \   00001E   75..0B       MOV       ?V4,#0xb
   \   000021   8A82         MOV       DPL,R2
   \   000023   8B83         MOV       DPH,R3
   \   000025   E0           MOVX      A,@DPTR
   \   000026   5407         ANL       A,#0x7
   \   000028   F8           MOV       R0,A
   \   000029   7005         JNZ       ??zclGp_SendGpNotificationCommand_0
    402            gpCmdPayloadMsg_t *pCmdPayloadMsgCurr = NULL;
    403            
    404            // Check some stuff to calculate the packet len
    405            // If Application Id bitfield is 0b000
    406            if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    407            {
    408              len += 4;  // GPD ID
   \   00002B   75..0F       MOV       ?V4,#0xf
   \   00002E   8008         SJMP      ??zclGp_SendGpNotificationCommand_1
    409            }
    410            // If Application Id bitfield is 0b010
    411            else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpNotificationCommand_0:
   \   000030   7402         MOV       A,#0x2
   \   000032   68           XRL       A,R0
   \   000033   7003         JNZ       ??zclGp_SendGpNotificationCommand_1
    412            {
    413              len += 9;  // IEEE addr + EP
   \   000035   75..14       MOV       ?V4,#0x14
    414            }
   \                     ??zclGp_SendGpNotificationCommand_1:
   \   000038   12....       LCALL     ?Subroutine24 & 0xFFFF
    415            
    416            // Length of the command payload
    417            len += pCmd->payloadLen;
    418          
    419            buf = zcl_mem_alloc( len );
   \                     ??CrossCallReturnLabel_20:
   \   00003B                ; Setup parameters for call to function osal_mem_alloc
   \   00003B   AA..         MOV       R2,?V4
   \   00003D   FB           MOV       R3,A
   \   00003E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000041   7401         MOV       A,#0x1
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   EA           MOV       A,R2
   \   000047   F0           MOVX      @DPTR,A
   \   000048   A3           INC       DPTR
   \   000049   EB           MOV       A,R3
   \   00004A   F0           MOVX      @DPTR,A
    420            if ( buf )
   \   00004B   7401         MOV       A,#0x1
   \   00004D   12....       LCALL     ?XSTACK_DISP0_8
   \   000050   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000053   7003         JNZ       $+5
   \   000055   02....       LJMP      ??zclGp_SendGpNotificationCommand_2 & 0xFFFF
    421            {
    422              pBuf = buf;
    423              
    424              zcl_memcpy( pBuf, &pCmd->options, sizeof ( uint16 ) );
   \   000058                ; Setup parameters for call to function osal_memcpy
   \   000058   85....       MOV       ?V0,?V6
   \   00005B   85....       MOV       ?V1,?V7
   \   00005E   75..00       MOV       ?V2,#0x0
   \   000061   78..         MOV       R0,#?V0
   \   000063   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000066   7C02         MOV       R4,#0x2
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   7404         MOV       A,#0x4
   \   00006C   12....       LCALL     ?XSTACK_DISP0_8
   \   00006F   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000072   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000075   7403         MOV       A,#0x3
   \   000077   12....       LCALL     ?DEALLOC_XSTACK8
    425              pBuf += sizeof ( uint16 );
   \   00007A   7401         MOV       A,#0x1
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000082   7038         JNZ       ??zclGp_SendGpNotificationCommand_3
   \   000084                ; Setup parameters for call to function osal_memcpy
   \   000084   A3           INC       DPTR
   \   000085   A3           INC       DPTR
   \   000086   A982         MOV       R1,DPL
   \   000088   AA83         MOV       R2,DPH
   \   00008A   89..         MOV       ?V0,R1
   \   00008C   8A..         MOV       ?V1,R2
   \   00008E   78..         MOV       R0,#?V0
   \   000090   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000093   7C04         MOV       R4,#0x4
   \   000095   7D00         MOV       R5,#0x0
   \   000097   EE           MOV       A,R6
   \   000098   FA           MOV       R2,A
   \   000099   EF           MOV       A,R7
   \   00009A   FB           MOV       R3,A
    426              
    427              // If Application Id bitfield is 0b000
    428              if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    429              {
    430                zcl_memcpy( pBuf, &pCmd->gpdId, sizeof ( uint32 ) );
   \   00009B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00009E   7403         MOV       A,#0x3
   \   0000A0   12....       LCALL     ?DEALLOC_XSTACK8
    431                pGpdId = ( uint8* )&pCmd->gpdId;
   \   0000A3   E5..         MOV       A,?V6
   \   0000A5   2402         ADD       A,#0x2
   \   0000A7   F8           MOV       R0,A
   \   0000A8   E4           CLR       A
   \   0000A9   35..         ADDC      A,?V7
   \   0000AB   F9           MOV       R1,A
   \   0000AC   7403         MOV       A,#0x3
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    432                appId = GP_OPT_APP_ID_GPD;
   \                     ??CrossCallReturnLabel_101:
   \   0000B4   75..00       MOV       ?V3,#0x0
    433                pBuf += sizeof ( uint32 );
   \   0000B7   EE           MOV       A,R6
   \   0000B8   2404         ADD       A,#0x4
   \   0000BA   8032         SJMP      ??CrossCallReturnLabel_12
    434              }
    435              // If Application Id bitfield is 0b010
    436              else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpNotificationCommand_3:
   \   0000BC   7402         MOV       A,#0x2
   \   0000BE   68           XRL       A,R0
   \   0000BF   7031         JNZ       ??zclGp_SendGpNotificationCommand_4
   \   0000C1                ; Setup parameters for call to function osal_memcpy
   \   0000C1   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0000C4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C7   7C08         MOV       R4,#0x8
   \   0000C9   7D00         MOV       R5,#0x0
   \   0000CB   EE           MOV       A,R6
   \   0000CC   FA           MOV       R2,A
   \   0000CD   EF           MOV       A,R7
   \   0000CE   FB           MOV       R3,A
    437              {
    438                zcl_memcpy( pBuf, &pCmd->gpdIEEE, Z_EXTADDR_LEN );
   \   0000CF   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D2   7403         MOV       A,#0x3
   \   0000D4   12....       LCALL     ?DEALLOC_XSTACK8
    439                pGpdId = pCmd->gpdIEEE;
   \   0000D7   E5..         MOV       A,?V6
   \   0000D9   2406         ADD       A,#0x6
   \   0000DB   F8           MOV       R0,A
   \   0000DC   E4           CLR       A
   \   0000DD   35..         ADDC      A,?V7
   \   0000DF   F9           MOV       R1,A
   \   0000E0   7403         MOV       A,#0x3
   \   0000E2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    440                appId = GP_OPT_APP_ID_IEEE;
   \                     ??CrossCallReturnLabel_102:
   \   0000E8   75..02       MOV       ?V3,#0x2
    441                pBuf += Z_EXTADDR_LEN;
    442                *pBuf++ = pCmd->ep;
   \   0000EB   12....       LCALL     ?Subroutine18 & 0xFFFF
    443              }
   \                     ??CrossCallReturnLabel_12:
   \   0000EE   FE           MOV       R6,A
   \   0000EF   5001         JNC       ??zclGp_SendGpNotificationCommand_4
   \   0000F1   0F           INC       R7
    444              
    445              zcl_memcpy( pBuf, &pCmd->gpdSecCounter, sizeof ( uint32 ) );
   \                     ??zclGp_SendGpNotificationCommand_4:
   \   0000F2                ; Setup parameters for call to function osal_memcpy
   \   0000F2   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000F5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000F8   7C04         MOV       R4,#0x4
   \   0000FA   7D00         MOV       R5,#0x0
   \   0000FC   EE           MOV       A,R6
   \   0000FD   FA           MOV       R2,A
   \   0000FE   EF           MOV       A,R7
   \   0000FF   FB           MOV       R3,A
   \   000100   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000103   7403         MOV       A,#0x3
   \   000105   12....       LCALL     ?DEALLOC_XSTACK8
    446              pBuf += sizeof ( uint32 );
    447          
    448              *pBuf++ = pCmd->cmdId;
   \   000108   12....       LCALL     ?Subroutine8 & 0xFFFF
    449              
    450              *pBuf++ = pCmd->payloadLen;
   \                     ??CrossCallReturnLabel_0:
   \   00010B   5001         JNC       ??zclGp_SendGpNotificationCommand_5
   \   00010D   0F           INC       R7
    451              if ( pCmd->payloadLen > 0 )
   \                     ??zclGp_SendGpNotificationCommand_5:
   \   00010E   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000111   601D         JZ        ??CrossCallReturnLabel_22
    452              {
    453                zcl_memcpy( pBuf, &pCmd->cmdPayload, pCmd->payloadLen );
   \   000113                ; Setup parameters for call to function osal_memcpy
   \   000113   E5..         MOV       A,?V6
   \   000115   2415         ADD       A,#0x15
   \   000117   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00011A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00011D   E9           MOV       A,R1
   \   00011E   FC           MOV       R4,A
   \   00011F   7D00         MOV       R5,#0x0
   \   000121   EE           MOV       A,R6
   \   000122   FA           MOV       R2,A
   \   000123   EF           MOV       A,R7
   \   000124   FB           MOV       R3,A
   \   000125   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000128   7403         MOV       A,#0x3
   \   00012A   12....       LCALL     ?DEALLOC_XSTACK8
    454                pBuf += pCmd->payloadLen;
   \   00012D   12....       LCALL     ?Subroutine26 & 0xFFFF
    455              }
    456              
    457              zcl_memcpy( pBuf, &pCmd->gppShortAddr, sizeof ( uint16 ) );
   \                     ??CrossCallReturnLabel_22:
   \   000130                ; Setup parameters for call to function osal_memcpy
   \   000130   E5..         MOV       A,?V6
   \   000132   2417         ADD       A,#0x17
   \   000134   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000137   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00013A   7C02         MOV       R4,#0x2
   \   00013C   7D00         MOV       R5,#0x0
   \   00013E   EE           MOV       A,R6
   \   00013F   FA           MOV       R2,A
   \   000140   EF           MOV       A,R7
   \   000141   FB           MOV       R3,A
   \   000142   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000145   7403         MOV       A,#0x3
   \   000147   12....       LCALL     ?DEALLOC_XSTACK8
    458              pBuf += sizeof ( uint16 );
    459              
    460              *pBuf++ = pCmd->gppGpdLink;
   \   00014A   12....       LCALL     ?Subroutine27 & 0xFFFF
    461              
    462              pCmdPayloadMsgCurr = gp_AddCmdPayloadMsgNode ( &pCmdPayloadMsgHead, buf, len );
   \                     ??CrossCallReturnLabel_24:
   \   00014D                ; Setup parameters for call to function gp_AddCmdPayloadMsgNode
   \   00014D   A9..         MOV       R1,?V4
   \   00014F   7401         MOV       A,#0x1
   \   000151   12....       LCALL     ?XSTACK_DISP0_8
   \   000154   12....       LCALL     ??Subroutine45_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000157   7A..         MOV       R2,#pCmdPayloadMsgHead & 0xff
   \   000159   7B..         MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
   \   00015B   12....       LCALL     `??gp_AddCmdPayloadMsgNode::?relay`; Banked call to: gp_AddCmdPayloadMsgNode
   \   00015E   8A..         MOV       ?V0,R2
   \   000160   8B..         MOV       ?V1,R3
   \   000162   AC..         MOV       R4,?V0
   \   000164   AD..         MOV       R5,?V1
    463              
    464              pCmdPayloadMsgCurr->secNum = secNum;
   \   000166   7405         MOV       A,#0x5
   \   000168   12....       LCALL     ?XSTACK_DISP0_8
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   8C82         MOV       DPL,R4
   \   00016E   8D83         MOV       DPH,R5
   \   000170   F0           MOVX      @DPTR,A
    465                    
    466              if ( pCmdPayloadMsgCurr != NULL )
   \   000171   EC           MOV       A,R4
   \   000172   4D           ORL       A,R5
   \   000173   602F         JZ        ??zclGp_SendGpNotificationCommand_6
    467              {
    468                gp_addPairedSinksToMsgQueue( appId, pGpdId, pCmdPayloadMsgCurr );
   \   000175                ; Setup parameters for call to function gp_addPairedSinksToMsgQueue
   \   000175   7403         MOV       A,#0x3
   \   000177   12....       LCALL     ?XSTACK_DISP0_8
   \   00017A   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00017D   A9..         MOV       R1,?V3
   \   00017F   12....       LCALL     `??gp_addPairedSinksToMsgQueue::?relay`; Banked call to: gp_addPairedSinksToMsgQueue
    469                osal_start_timerEx( zcl_TaskID, ZCL_DATABUF_SEND, 50 );
   \   000182                ; Setup parameters for call to function osal_start_timerEx
   \   000182   90....       MOV       DPTR,#__Constant_32
   \   000185   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000188   7A20         MOV       R2,#0x20
   \   00018A   7B00         MOV       R3,#0x0
   \   00018C   90....       MOV       DPTR,#zcl_TaskID
   \   00018F   E0           MOVX      A,@DPTR
   \   000190   F9           MOV       R1,A
   \   000191   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000194   7404         MOV       A,#0x4
   \   000196   12....       LCALL     ?DEALLOC_XSTACK8
   \   000199   8009         SJMP      ??zclGp_SendGpNotificationCommand_6
    470              }
    471          
    472            }
    473            else
    474              status = ZMemError;
   \                     ??zclGp_SendGpNotificationCommand_2:
   \   00019B   85..82       MOV       DPL,?XSP + 0
   \   00019E   85..83       MOV       DPH,?XSP + 1
   \   0001A1   7410         MOV       A,#0x10
   \   0001A3   F0           MOVX      @DPTR,A
    475          
    476            return ( status );
   \                     ??zclGp_SendGpNotificationCommand_6:
   \   0001A4   85..82       MOV       DPL,?XSP + 0
   \   0001A7   85..83       MOV       DPH,?XSP + 1
   \   0001AA   E0           MOVX      A,@DPTR
   \   0001AB   F9           MOV       R1,A
   \   0001AC   7406         MOV       A,#0x6
   \   0001AE                REQUIRE ?Subroutine3
   \   0001AE                ; // Fall through to label ?Subroutine3
    477          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E5..         MOV       A,?V6
   \   000002   240F         ADD       A,#0xf
   \   000004                REQUIRE ??Subroutine48_0
   \   000004                ; // Fall through to label ??Subroutine48_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   F5..         MOV       ?V0,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V7
   \   000005   F5..         MOV       ?V1,A
   \   000007   78..         MOV       R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E5..         MOV       A,?V6
   \   000002   2406         ADD       A,#0x6
   \   000004   F5..         MOV       ?V0,A
   \   000006   E4           CLR       A
   \   000007   35..         ADDC      A,?V7
   \   000009   F5..         MOV       ?V1,A
   \   00000B   78..         MOV       R0,#?V0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E5..         MOV       A,?V6
   \   000002   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000005   F9           MOV       R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E5..         MOV       A,?V6
   \   000002   2419         ADD       A,#0x19
   \   000004   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000007   F0           MOVX      @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   E5..         MOV       A,?V6
   \   000002   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000005   EE           MOV       A,R6
   \   000006   28           ADD       A,R0
   \   000007   FE           MOV       R6,A
   \   000008   E4           CLR       A
   \   000009   3F           ADDC      A,R7
   \   00000A   FF           MOV       R7,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   EA           MOV       A,R2
   \   000001   12....       LCALL     ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000004   E5..         MOV       A,?V4
   \   000006   28           ADD       A,R0
   \   000007   F5..         MOV       ?V4,A
   \   000009   E4           CLR       A
   \   00000A   3400         ADDC      A,#0x0
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL     ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   F8           MOV       R0,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   2414         ADD       A,#0x14
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   35..         ADDC      A,?V7
   \   000007   F583         MOV       DPH,A
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E5..         MOV       A,?V6
   \   000002   240E         ADD       A,#0xe
   \   000004   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   EE           MOV       A,R6
   \   00000C   2409         ADD       A,#0x9
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2402         ADD       A,#0x2
   \   000003   FE           MOV       R6,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   3400         ADDC      A,#0x0
   \   000008   FF           MOV       R7,A
   \   000009   85..82       MOV       DPL,?V6
   \   00000C   85..83       MOV       DPH,?V7
   \   00000F   E0           MOVX      A,@DPTR
   \   000010   5407         ANL       A,#0x7
   \   000012   F8           MOV       R0,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E5..         MOV       A,?V6
   \   000002   2413         ADD       A,#0x13
   \   000004   12....       LCALL     ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   E5..         MOV       A,?V6
   \   00000C   2414         ADD       A,#0x14
   \   00000E   12....       LCALL     ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000011   F0           MOVX      @DPTR,A
   \   000012   EE           MOV       A,R6
   \   000013   2406         ADD       A,#0x6
   \   000015   FE           MOV       R6,A
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   35..         ADDC      A,?V7
   \   000005   F583         MOV       DPH,A
   \   000007   E0           MOVX      A,@DPTR
   \   000008   8E82         MOV       DPL,R6
   \   00000A   8F83         MOV       DPH,R7
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL     ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET
    478            
    479          /*********************************************************************
    480           * @fn      zclGp_SendGpCommissioningNotificationCommand
    481           *
    482           * @brief   Send the Green Power Commissioning Notification Command to a device
    483           *
    484           * @param   pCmd - Pointer to GP Commissioning Notification Struct
    485           *
    486           * @return  ZStatus_t
    487           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    488          ZStatus_t zclGp_SendGpCommissioningNotificationCommand( gpCommissioningNotificationCmd_t *pCmd )
   \                     zclGp_SendGpCommissioningNotificationCommand:
    489          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV       A,#-0xe
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V6,R2
   \   00000C   8B..         MOV       ?V7,R3
    490            uint8 *buf = NULL;
    491            uint8 *pBuf = NULL;
    492            ZStatus_t status;
    493            uint16 len = 11;  // options + GPD Sec Counter + Cmd ID + payloadLen + GPP Short Address + GPP-GPD link
   \   00000E   75..0B       MOV       ?V4,#0xb
   \   000011   8A82         MOV       DPL,R2
   \   000013   8B83         MOV       DPH,R3
   \   000015   E0           MOVX      A,@DPTR
   \   000016   5407         ANL       A,#0x7
   \   000018   F8           MOV       R0,A
   \   000019   7005         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_0
    494            
    495            // Check some stuff to calculate the packet len
    496            // If Application Id bitfield is 0b000
    497            if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    498            {
    499              len += 4;  // GPD ID
   \   00001B   75..0F       MOV       ?V4,#0xf
   \   00001E   8008         SJMP      ??zclGp_SendGpCommissioningNotificationCommand_1
    500            }
    501            // If Application Id bitfield is 0b010
    502            else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpCommissioningNotificationCommand_0:
   \   000020   7402         MOV       A,#0x2
   \   000022   68           XRL       A,R0
   \   000023   7003         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_1
    503            {
    504              len += 9;  // IEEE addr + EP
   \   000025   75..14       MOV       ?V4,#0x14
    505            }
   \                     ??zclGp_SendGpCommissioningNotificationCommand_1:
   \   000028   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00002B   F5..         MOV       ?V5,A
    506            
    507            // Length of the command payload
    508            len += pCmd->payloadLen;
    509          
    510            buf = zcl_mem_alloc( len );
   \   00002D                ; Setup parameters for call to function osal_mem_alloc
   \   00002D   AA..         MOV       R2,?V4
   \   00002F   FB           MOV       R3,A
   \   000030   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   85..82       MOV       DPL,?XSP + 0
   \   000036   85..83       MOV       DPH,?XSP + 1
   \   000039   12....       LCALL     ?Subroutine30 & 0xFFFF
    511            if ( buf )
   \                     ??CrossCallReturnLabel_26:
   \   00003C   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00003F   7003         JNZ       $+5
   \   000041   02....       LJMP      ??zclGp_SendGpCommissioningNotificationCommand_2 & 0xFFFF
    512            {
    513              pBuf = buf;
    514              
    515              zcl_memcpy( pBuf, &pCmd->options, sizeof ( uint16 ) );
   \   000044                ; Setup parameters for call to function osal_memcpy
   \   000044   85....       MOV       ?V0,?V6
   \   000047   85....       MOV       ?V1,?V7
   \   00004A   75..00       MOV       ?V2,#0x0
   \   00004D   78..         MOV       R0,#?V0
   \   00004F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000052   7C02         MOV       R4,#0x2
   \   000054   7D00         MOV       R5,#0x0
   \   000056   7403         MOV       A,#0x3
   \   000058   12....       LCALL     ?XSTACK_DISP0_8
   \   00005B   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00005E   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000061   7403         MOV       A,#0x3
   \   000063   12....       LCALL     ?DEALLOC_XSTACK8
    516              pBuf += sizeof ( uint16 );
   \   000066   85..82       MOV       DPL,?XSP + 0
   \   000069   85..83       MOV       DPH,?XSP + 1
   \   00006C   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00006F   7024         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_3
    517              
    518              // If Application Id bitfield is 0b000
    519              if( GP_IS_APPLICATION_ID_GPD( pCmd->options ) )
    520              {
    521                zcl_memcpy( pBuf, &pCmd->gpdId, sizeof ( uint32 ) );
   \   000071                ; Setup parameters for call to function osal_memcpy
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   A982         MOV       R1,DPL
   \   000075   AA83         MOV       R2,DPH
   \   000077   89..         MOV       ?V0,R1
   \   000079   8A..         MOV       ?V1,R2
   \   00007B   78..         MOV       R0,#?V0
   \   00007D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000080   7C04         MOV       R4,#0x4
   \   000082   7D00         MOV       R5,#0x0
   \   000084   EE           MOV       A,R6
   \   000085   FA           MOV       R2,A
   \   000086   EF           MOV       A,R7
   \   000087   FB           MOV       R3,A
   \   000088   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00008B   7403         MOV       A,#0x3
   \   00008D   12....       LCALL     ?DEALLOC_XSTACK8
    522                pBuf += sizeof ( uint32 );
   \   000090   EE           MOV       A,R6
   \   000091   2404         ADD       A,#0x4
   \   000093   801E         SJMP      ??CrossCallReturnLabel_13
    523              }
    524              // If Application Id bitfield is 0b010
    525              else if( GP_IS_APPLICATION_ID_IEEE( pCmd->options ) )
   \                     ??zclGp_SendGpCommissioningNotificationCommand_3:
   \   000095   7402         MOV       A,#0x2
   \   000097   68           XRL       A,R0
   \   000098   701D         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_4
    526              {
    527                zcl_memcpy( pBuf, &pCmd->gpdIEEE, Z_EXTADDR_LEN );
   \   00009A                ; Setup parameters for call to function osal_memcpy
   \   00009A   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00009D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A0   7C08         MOV       R4,#0x8
   \   0000A2   7D00         MOV       R5,#0x0
   \   0000A4   EE           MOV       A,R6
   \   0000A5   FA           MOV       R2,A
   \   0000A6   EF           MOV       A,R7
   \   0000A7   FB           MOV       R3,A
   \   0000A8   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000AB   7403         MOV       A,#0x3
   \   0000AD   12....       LCALL     ?DEALLOC_XSTACK8
    528                pBuf += Z_EXTADDR_LEN;
    529                *pBuf++ = pCmd->ep;
   \   0000B0   12....       LCALL     ?Subroutine18 & 0xFFFF
    530              }
   \                     ??CrossCallReturnLabel_13:
   \   0000B3   FE           MOV       R6,A
   \   0000B4   5001         JNC       ??zclGp_SendGpCommissioningNotificationCommand_4
   \   0000B6   0F           INC       R7
    531              
    532              zcl_memcpy( pBuf, &pCmd->gpdSecCounter, sizeof ( uint32 ) );
   \                     ??zclGp_SendGpCommissioningNotificationCommand_4:
   \   0000B7                ; Setup parameters for call to function osal_memcpy
   \   0000B7   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000BA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000BD   7C04         MOV       R4,#0x4
   \   0000BF   7D00         MOV       R5,#0x0
   \   0000C1   EE           MOV       A,R6
   \   0000C2   FA           MOV       R2,A
   \   0000C3   EF           MOV       A,R7
   \   0000C4   FB           MOV       R3,A
   \   0000C5   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C8   7403         MOV       A,#0x3
   \   0000CA   12....       LCALL     ?DEALLOC_XSTACK8
    533              pBuf += sizeof ( uint32 );
    534          
    535              *pBuf++ = pCmd->cmdId;
   \   0000CD   12....       LCALL     ?Subroutine8 & 0xFFFF
    536              
    537              *pBuf++ = pCmd->payloadLen;
   \                     ??CrossCallReturnLabel_1:
   \   0000D0   5001         JNC       ??zclGp_SendGpCommissioningNotificationCommand_5
   \   0000D2   0F           INC       R7
    538              if ( pCmd->payloadLen > 0 )
   \                     ??zclGp_SendGpCommissioningNotificationCommand_5:
   \   0000D3   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000D6   601D         JZ        ??CrossCallReturnLabel_23
    539              {
    540                zcl_memcpy( pBuf, &pCmd->cmdPayload, pCmd->payloadLen );
   \   0000D8                ; Setup parameters for call to function osal_memcpy
   \   0000D8   E5..         MOV       A,?V6
   \   0000DA   2415         ADD       A,#0x15
   \   0000DC   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000DF   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000E2   E9           MOV       A,R1
   \   0000E3   FC           MOV       R4,A
   \   0000E4   7D00         MOV       R5,#0x0
   \   0000E6   EE           MOV       A,R6
   \   0000E7   FA           MOV       R2,A
   \   0000E8   EF           MOV       A,R7
   \   0000E9   FB           MOV       R3,A
   \   0000EA   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000ED   7403         MOV       A,#0x3
   \   0000EF   12....       LCALL     ?DEALLOC_XSTACK8
    541                pBuf += pCmd->payloadLen;
   \   0000F2   12....       LCALL     ?Subroutine26 & 0xFFFF
    542              }
    543              
    544              zcl_memcpy( pBuf, &pCmd->gppShortAddr, sizeof ( uint16 ) );
   \                     ??CrossCallReturnLabel_23:
   \   0000F5                ; Setup parameters for call to function osal_memcpy
   \   0000F5   E5..         MOV       A,?V6
   \   0000F7   2417         ADD       A,#0x17
   \   0000F9   12....       LCALL     ??Subroutine48_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000FC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000FF   7C02         MOV       R4,#0x2
   \   000101   7D00         MOV       R5,#0x0
   \   000103   EE           MOV       A,R6
   \   000104   FA           MOV       R2,A
   \   000105   EF           MOV       A,R7
   \   000106   FB           MOV       R3,A
   \   000107   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00010A   7403         MOV       A,#0x3
   \   00010C   12....       LCALL     ?DEALLOC_XSTACK8
    545              pBuf += sizeof ( uint16 );
    546              
    547              *pBuf++ = pCmd->gppGpdLink;
   \   00010F   12....       LCALL     ?Subroutine27 & 0xFFFF
    548              
    549              afAddrType_t addr;
    550              addr.endPoint = GREEN_POWER_INTERNAL_ENDPOINT;
   \                     ??CrossCallReturnLabel_25:
   \   000112   740B         MOV       A,#0xb
   \   000114   12....       LCALL     ?XSTACK_DISP0_8
   \   000117   12....       LCALL     ?Subroutine13 & 0xFFFF
    551              addr.panId = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_129:
   \   00011A   740C         MOV       A,#0xc
   \   00011C   12....       LCALL     ?XSTACK_DISP0_8
   \   00011F   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    552              addr.addr.shortAddr = gp_commissionerAddress; 
   \                     ??CrossCallReturnLabel_103:
   \   000122   90....       MOV       DPTR,#gp_commissionerAddress
   \   000125   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000128   7402         MOV       A,#0x2
   \   00012A   12....       LCALL     ?XSTACK_DISP0_8
   \   00012D   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    553                  
    554              if ( gp_commissionerAddress == 0xFFFF )
   \                     ??CrossCallReturnLabel_104:
   \   000130   90....       MOV       DPTR,#gp_commissionerAddress
   \   000133   E0           MOVX      A,@DPTR
   \   000134   F4           CPL       A
   \   000135   7003         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_6
   \   000137   A3           INC       DPTR
   \   000138   E0           MOVX      A,@DPTR
   \   000139   F4           CPL       A
   \                     ??zclGp_SendGpCommissioningNotificationCommand_6:
   \   00013A   7009         JNZ       ??zclGp_SendGpCommissioningNotificationCommand_7
    555              {
    556                addr.addrMode = afAddrBroadcast;
   \   00013C   740A         MOV       A,#0xa
   \   00013E   12....       LCALL     ?XSTACK_DISP0_8
   \   000141   740F         MOV       A,#0xf
   \   000143   8007         SJMP      ??zclGp_SendGpCommissioningNotificationCommand_8
    557              }
    558              else
    559              {
    560                addr.addrMode = afAddr16Bit;
   \                     ??zclGp_SendGpCommissioningNotificationCommand_7:
   \   000145   740A         MOV       A,#0xa
   \   000147   12....       LCALL     ?XSTACK_DISP0_8
   \   00014A   7402         MOV       A,#0x2
   \                     ??zclGp_SendGpCommissioningNotificationCommand_8:
   \   00014C   F0           MOVX      @DPTR,A
    561              }
    562                  
    563              zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, &addr, ZCL_CLUSTER_ID_GREEN_POWER,
    564                                COMMAND_GP_COMMISSIONING_NOTIFICATION, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    565                                TRUE, 0,  bdb_getZCLFrameCounter(), len, buf ); 
   \   00014D                ; Setup parameters for call to function bdb_getZCLFrameCounter
   \   00014D   12....       LCALL     `??bdb_getZCLFrameCounter::?relay`; Banked call to: bdb_getZCLFrameCounter
   \   000150   E9           MOV       A,R1
   \   000151   F9           MOV       R1,A
   \   000152                ; Setup parameters for call to function zcl_SendCommand
   \   000152   85..82       MOV       DPL,?XSP + 0
   \   000155   85..83       MOV       DPH,?XSP + 1
   \   000158   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00015B   78..         MOV       R0,#?V4
   \   00015D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000160   E9           MOV       A,R1
   \   000161   F5..         MOV       ?V0,A
   \   000163   78..         MOV       R0,#?V0
   \   000165   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000168   E4           CLR       A
   \   000169   F5..         MOV       ?V0,A
   \   00016B   F5..         MOV       ?V1,A
   \   00016D   78..         MOV       R0,#?V0
   \   00016F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000172   75..01       MOV       ?V0,#0x1
   \   000175   78..         MOV       R0,#?V0
   \   000177   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00017A   75..00       MOV       ?V0,#0x0
   \   00017D   78..         MOV       R0,#?V0
   \   00017F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000182   75..01       MOV       ?V0,#0x1
   \   000185   78..         MOV       R0,#?V0
   \   000187   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00018A   75..04       MOV       ?V0,#0x4
   \   00018D   78..         MOV       R0,#?V0
   \   00018F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000192   7C21         MOV       R4,#0x21
   \   000194   7D00         MOV       R5,#0x0
   \   000196   740D         MOV       A,#0xd
   \   000198   12....       LCALL     ?XSTACK_DISP101_8
   \   00019B   79F2         MOV       R1,#-0xe
   \   00019D   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0001A0   740B         MOV       A,#0xb
   \   0001A2   12....       LCALL     ?DEALLOC_XSTACK8
    566                
    567              zcl_mem_free( buf );
   \   0001A5                ; Setup parameters for call to function osal_mem_free
   \   0001A5   85..82       MOV       DPL,?XSP + 0
   \   0001A8   85..83       MOV       DPH,?XSP + 1
   \   0001AB   12....       LCALL     ??Subroutine56_0 & 0xFFFF
    568            }
   \                     ??CrossCallReturnLabel_120:
   \   0001AE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001B1   8003         SJMP      ??zclGp_SendGpCommissioningNotificationCommand_9
    569            else
    570              status = ZMemError;
   \                     ??zclGp_SendGpCommissioningNotificationCommand_2:
   \   0001B3   75..10       MOV       ?V3,#0x10
    571          
    572            return ( status );
   \                     ??zclGp_SendGpCommissioningNotificationCommand_9:
   \   0001B6   A9..         MOV       R1,?V3
   \   0001B8   740E         MOV       A,#0xe
   \   0001BA   02....       LJMP      ?Subroutine3 & 0xFFFF
    573          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   EA           MOV       A,R2
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   EB           MOV       A,R3
   \   000004   12....       LCALL     ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   74F2         MOV       A,#-0xe
   \   000002   F0           MOVX      @DPTR,A
   \   000003   90....       MOV       DPTR,#_NIB + 33
   \   000006                REQUIRE ??Subroutine57_0
   \   000006                ; // Fall through to label ??Subroutine57_0
    574          /*********************************************************************
    575           * @fn      zclGp_SendGpProxyTableResponse
    576           *
    577           * @brief   Send the Green Power Proxy Table Response to a device
    578           *
    579           * @param   dstAddr - where to send the request
    580           * @param   groupID - pointer to the group structure
    581           * @param   groupName - pointer to Group Name.  This is a Zigbee
    582           *          string data type, so the first byte is the length of the
    583           *          name (in bytes), then the name.
    584           *
    585           * @return  ZStatus_t
    586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    587          ZStatus_t zclGp_SendGpProxyTableResponse( afAddrType_t *dstAddr, zclGpProxyTableResponse_t *rsp, 
   \                     zclGp_SendGpProxyTableResponse:
    588                                                    uint8 seqNum )
    589          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV       A,#-0x8
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7406         MOV       A,#0x6
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000012   EC           MOV       A,R4
   \   000013   F0           MOVX      @DPTR,A
   \   000014   A3           INC       DPTR
   \   000015   ED           MOV       A,R5
   \   000016   F0           MOVX      @DPTR,A
   \   000017   89..         MOV       ?V7,R1
    590            uint8 *buf = NULL;
    591            uint8 *pBuf = NULL;
    592            uint8 *pEntry = NULL;
   \   000019   75..00       MOV       ?V0,#0x0
   \   00001C   75..00       MOV       ?V1,#0x0
    593            
    594            ZStatus_t status;
    595            uint16 entryLen = 0;
   \   00001F   7402         MOV       A,#0x2
   \   000021   12....       LCALL     ?XSTACK_DISP0_8
   \   000024   E4           CLR       A
   \   000025   F0           MOVX      @DPTR,A
   \   000026   A3           INC       DPTR
   \   000027   12....       LCALL     ??Subroutine49_0 & 0xFFFF
    596            uint16 len;
    597            
    598            if ( rsp->proxyTableEntry != NULL )
   \                     ??CrossCallReturnLabel_66:
   \   00002A   2404         ADD       A,#0x4
   \   00002C   F8           MOV       R0,A
   \   00002D   A3           INC       DPTR
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   3400         ADDC      A,#0x0
   \   000031   F9           MOV       R1,A
   \   000032   7404         MOV       A,#0x4
   \   000034   12....       LCALL     ?XSTACK_DISP0_8
   \   000037   12....       LCALL     ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00003A   7404         MOV       A,#0x4
   \   00003C   12....       LCALL     ?XSTACK_DISP0_8
   \   00003F   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000042   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000045   602B         JZ        ??zclGp_SendGpProxyTableResponse_0
    599            {
    600              pEntry = rsp->proxyTableEntry;
   \   000047   88..         MOV       ?V0,R0
   \   000049   89..         MOV       ?V1,R1
    601              zcl_memcpy( &entryLen, pEntry, sizeof ( uint16 ) );
   \   00004B                ; Setup parameters for call to function osal_memcpy
   \   00004B   88..         MOV       ?V4,R0
   \   00004D   89..         MOV       ?V5,R1
   \   00004F   75..00       MOV       ?V6,#0x0
   \   000052   78..         MOV       R0,#?V4
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000057   7C02         MOV       R4,#0x2
   \   000059   7D00         MOV       R5,#0x0
   \   00005B   7405         MOV       A,#0x5
   \   00005D   12....       LCALL     ?XSTACK_DISP101_8
   \   000060   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000063   7403         MOV       A,#0x3
   \   000065   12....       LCALL     ?DEALLOC_XSTACK8
    602              pEntry += sizeof ( uint16 );
   \   000068   E5..         MOV       A,?V0
   \   00006A   2402         ADD       A,#0x2
   \   00006C   F5..         MOV       ?V0,A
   \   00006E   5002         JNC       ??zclGp_SendGpProxyTableResponse_0
   \   000070   05..         INC       ?V1
    603            }
    604            
    605            len = entryLen + 4;
   \                     ??zclGp_SendGpProxyTableResponse_0:
   \   000072   7402         MOV       A,#0x2
   \   000074   12....       LCALL     ?XSTACK_DISP0_8
   \   000077   E0           MOVX      A,@DPTR
   \   000078   2404         ADD       A,#0x4
   \   00007A   FE           MOV       R6,A
   \   00007B   A3           INC       DPTR
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   3400         ADDC      A,#0x0
   \   00007F   FF           MOV       R7,A
    606          
    607            buf = zcl_mem_alloc( len );
   \   000080                ; Setup parameters for call to function osal_mem_alloc
   \   000080   EE           MOV       A,R6
   \   000081   FA           MOV       R2,A
   \   000082   EF           MOV       A,R7
   \   000083   FB           MOV       R3,A
   \   000084   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000087   8A..         MOV       ?V4,R2
   \   000089   8B..         MOV       ?V5,R3
    608            if ( buf )
   \   00008B   EA           MOV       A,R2
   \   00008C   45..         ORL       A,?V5
   \   00008E   7003         JNZ       $+5
   \   000090   02....       LJMP      ??zclGp_SendGpProxyTableResponse_1 & 0xFFFF
    609            {
    610              pBuf = buf;
    611              *pBuf++ = rsp->status;
   \   000093   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000096   8A82         MOV       DPL,R2
   \   000098   8B83         MOV       DPH,R3
   \   00009A   F0           MOVX      @DPTR,A
    612              *pBuf++ = rsp->tableEntriesTotal;
   \   00009B   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   00009E   A3           INC       DPTR
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   8A82         MOV       DPL,R2
   \   0000A2   8B83         MOV       DPH,R3
   \   0000A4   12....       LCALL     ?Subroutine22 & 0xFFFF
    613              *pBuf++ = rsp->startIndex;
   \                     ??CrossCallReturnLabel_81:
   \   0000A7   E0           MOVX      A,@DPTR
   \   0000A8   8A82         MOV       DPL,R2
   \   0000AA   8B83         MOV       DPH,R3
   \   0000AC   A3           INC       DPTR
   \   0000AD   12....       LCALL     ?Subroutine22 & 0xFFFF
    614              *pBuf++ = rsp->entriesCount;
   \                     ??CrossCallReturnLabel_82:
   \   0000B0   A3           INC       DPTR
   \   0000B1   E0           MOVX      A,@DPTR
   \   0000B2   8A82         MOV       DPL,R2
   \   0000B4   8B83         MOV       DPH,R3
   \   0000B6   A3           INC       DPTR
   \   0000B7   A3           INC       DPTR
   \   0000B8   A3           INC       DPTR
   \   0000B9   F0           MOVX      @DPTR,A
    615              if ( rsp->proxyTableEntry != NULL )
   \   0000BA   7404         MOV       A,#0x4
   \   0000BC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL     ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0000C2   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0000C5   6020         JZ        ??zclGp_SendGpProxyTableResponse_2
    616              {
    617                zcl_memcpy( pBuf, pEntry, entryLen );
   \   0000C7                ; Setup parameters for call to function osal_memcpy
   \   0000C7   75..00       MOV       ?V2,#0x0
   \   0000CA   78..         MOV       R0,#?V0
   \   0000CC   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000CF   7405         MOV       A,#0x5
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D4   12....       LCALL     ??Subroutine45_0 & 0xFFFF
    618              }
   \                     ??CrossCallReturnLabel_47:
   \   0000D7   EA           MOV       A,R2
   \   0000D8   2404         ADD       A,#0x4
   \   0000DA   FA           MOV       R2,A
   \   0000DB   E4           CLR       A
   \   0000DC   35..         ADDC      A,?V5
   \   0000DE   FB           MOV       R3,A
   \   0000DF   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000E2   7403         MOV       A,#0x3
   \   0000E4   12....       LCALL     ?DEALLOC_XSTACK8
    619          
    620              status = zcl_SendCommand( GREEN_POWER_INTERNAL_ENDPOINT, dstAddr, ZCL_CLUSTER_ID_GREEN_POWER,
    621                                        COMMAND_GP_PROXY_TABLE_RESPONSE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    622                                        TRUE, 0, seqNum, len, buf );
   \                     ??zclGp_SendGpProxyTableResponse_2:
   \   0000E7                ; Setup parameters for call to function zcl_SendCommand
   \   0000E7   78..         MOV       R0,#?V4
   \   0000E9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EC   8E..         MOV       ?V0,R6
   \   0000EE   8F..         MOV       ?V1,R7
   \   0000F0   78..         MOV       R0,#?V0
   \   0000F2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F5   E5..         MOV       A,?V7
   \   0000F7   F5..         MOV       ?V0,A
   \   0000F9   78..         MOV       R0,#?V0
   \   0000FB   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000FE   E4           CLR       A
   \   0000FF   F5..         MOV       ?V0,A
   \   000101   F5..         MOV       ?V1,A
   \   000103   78..         MOV       R0,#?V0
   \   000105   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000108   75..01       MOV       ?V0,#0x1
   \   00010B   78..         MOV       R0,#?V0
   \   00010D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000110   75..00       MOV       ?V0,#0x0
   \   000113   78..         MOV       R0,#?V0
   \   000115   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000118   75..01       MOV       ?V0,#0x1
   \   00011B   78..         MOV       R0,#?V0
   \   00011D   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000120   75..0B       MOV       ?V0,#0xb
   \   000123   78..         MOV       R0,#?V0
   \   000125   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000128   7C21         MOV       R4,#0x21
   \   00012A   7D00         MOV       R5,#0x0
   \   00012C   7411         MOV       A,#0x11
   \   00012E   12....       LCALL     ?XSTACK_DISP0_8
   \   000131   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000134   79F2         MOV       R1,#-0xe
   \   000136   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   000139   740B         MOV       A,#0xb
   \   00013B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013E   E9           MOV       A,R1
   \   00013F   FE           MOV       R6,A
    623              zcl_mem_free( buf );
   \   000140                ; Setup parameters for call to function osal_mem_free
   \   000140   AA..         MOV       R2,?V4
   \   000142   AB..         MOV       R3,?V5
   \   000144   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000147   8002         SJMP      ??zclGp_SendGpProxyTableResponse_3
    624            }
    625            else
    626              status = ZMemError;
   \                     ??zclGp_SendGpProxyTableResponse_1:
   \   000149   7E10         MOV       R6,#0x10
    627          
    628            return ( status );
   \                     ??zclGp_SendGpProxyTableResponse_3:
   \   00014B   EE           MOV       A,R6
   \   00014C   F9           MOV       R1,A
   \   00014D   7408         MOV       A,#0x8
   \   00014F   02....       LJMP      ?Subroutine3 & 0xFFFF
    629          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000004                REQUIRE ??Subroutine51_0
   \   000004                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   22           RET
    630          
    631           /*********************************************************************
    632           * @fn          gp_addPairedSinksToMsgQueue
    633           *
    634           * @brief       General function to add Notification Msg to Queue for all 
    635           *              Sinks paired to the given GPD
    636           *
    637           * @param       nvIndex - NV Id of proxy table
    638           *              pEntry  - pointer to PROXY_TBL_ENTRY_LEN array
    639           *
    640           * @return      
    641           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    642          static uint8 gp_addPairedSinksToMsgQueue( uint8 appId, uint8 *pId, gpCmdPayloadMsg_t* pMsg )
   \                     gp_addPairedSinksToMsgQueue:
    643          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV       A,#-0xf
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 89
   \   000005   74A7         MOV       A,#-0x59
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EC           MOV       A,R4
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   ED           MOV       A,R5
   \   000014   F0           MOVX      @DPTR,A
   \   000015   89..         MOV       ?V3,R1
    644            uint8 freeSinkEntry[LSINK_ADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   000017   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00001A   744F         MOV       A,#0x4f
   \   00001C   12....       LCALL     ?XSTACK_DISP102_8
   \   00001F   740A         MOV       A,#0xa
   \   000021   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    645            uint8 status;
    646            uint8 i;
    647            uint8 currEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   000024   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
   \   000027   740E         MOV       A,#0xe
   \   000029   12....       LCALL     ?XSTACK_DISP102_8
   \   00002C   7441         MOV       A,#0x41
   \   00002E   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    648            afAddrType_t dstAddr = {0};
   \   000031   90....       MOV       DPTR,#`?<Constant {{0}}>`
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP102_8
   \   000039   740C         MOV       A,#0xc
   \   00003B   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    649            gpNotificationMsg_t *pNotificationMsgCurr = NULL;
    650          
    651              
    652            for ( i = 0; i <= GPP_MAX_PROXY_TABLE_ENTRIES ; i++ )
   \   00003E   7E00         MOV       R6,#0x0
   \   000040   8A..         MOV       ?V0,R2
   \   000042   8B..         MOV       ?V1,R3
   \   000044   F5..         MOV       ?V2,A
    653            {
    654              status = gp_getProxyTableByIndex( ( ZCD_NV_PROXY_TABLE_START + i ), currEntry );
   \                     ??gp_addPairedSinksToMsgQueue_0:
   \   000046                ; Setup parameters for call to function gp_getProxyTableByIndex
   \   000046   740E         MOV       A,#0xe
   \   000048   12....       LCALL     ?XSTACK_DISP102_8
   \   00004B   EE           MOV       A,R6
   \   00004C   2410         ADD       A,#0x10
   \   00004E   FA           MOV       R2,A
   \   00004F   E4           CLR       A
   \   000050   3403         ADDC      A,#0x3
   \   000052   FB           MOV       R3,A
   \   000053   12....       LCALL     `??gp_getProxyTableByIndex::?relay`; Banked call to: gp_getProxyTableByIndex
   \   000056   E9           MOV       A,R1
   \   000057   FF           MOV       R7,A
    655          
    656              if ( status == NV_OPER_FAILED )
   \   000058   740A         MOV       A,#0xa
   \   00005A   6F           XRL       A,R7
   \   00005B   7003         JNZ       $+5
   \   00005D   02....       LJMP      ??gp_addPairedSinksToMsgQueue_1 & 0xFFFF
    657              {
    658                break;
    659              }
    660              
    661              // if the entry is empty
    662              if ( status == NV_INVALID_DATA )
   \   000060   740D         MOV       A,#0xd
   \   000062   6F           XRL       A,R7
   \   000063   7009         JNZ       ??gp_addPairedSinksToMsgQueue_2
    663              {
    664                if ( i >= GPP_MAX_PROXY_TABLE_ENTRIES )
   \   000065   EE           MOV       A,R6
   \   000066   C3           CLR       C
   \   000067   9405         SUBB      A,#0x5
   \   000069   4073         JC        ??gp_addPairedSinksToMsgQueue_3
   \   00006B   02....       LJMP      ??gp_addPairedSinksToMsgQueue_4 & 0xFFFF
    665                {
    666                  return status;
    667                }
    668                continue;
    669              }
    670              
    671              if ( PROXY_TBL_COMP_APPLICTION_ID( appId, currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??gp_addPairedSinksToMsgQueue_2:
   \   00006E   7407         MOV       A,#0x7
   \   000070   55..         ANL       A,?V3
   \   000072   F8           MOV       R0,A
   \   000073   740E         MOV       A,#0xe
   \   000075   12....       LCALL     ?XSTACK_DISP0_8
   \   000078   E0           MOVX      A,@DPTR
   \   000079   5407         ANL       A,#0x7
   \   00007B   68           XRL       A,R0
   \   00007C   7060         JNZ       ??gp_addPairedSinksToMsgQueue_3
    672              {
    673                if ( appId == GP_OPT_APP_ID_GPD )
   \   00007E   E5..         MOV       A,?V3
   \   000080   702C         JNZ       ??gp_addPairedSinksToMsgQueue_5
    674                {
    675                  if ( osal_memcmp( pId, &currEntry[PROXY_TBL_ENTRY_GPD_ID + 4], sizeof ( uint32 ) ) )
   \   000082                ; Setup parameters for call to function osal_memcmp
   \   000082   7414         MOV       A,#0x14
   \   000084   12....       LCALL     ?XSTACK_DISP0_8
   \   000087   A982         MOV       R1,DPL
   \   000089   AA83         MOV       R2,DPH
   \   00008B   89..         MOV       ?V4,R1
   \   00008D   8A..         MOV       ?V5,R2
   \   00008F   75..00       MOV       ?V6,#0x0
   \   000092   78..         MOV       R0,#?V4
   \   000094   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000097   7C04         MOV       R4,#0x4
   \   000099   7D00         MOV       R5,#0x0
   \   00009B   A9..         MOV       R1,?V0
   \   00009D   AA..         MOV       R2,?V1
   \   00009F   AB..         MOV       R3,?V2
   \   0000A1   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000A4   7403         MOV       A,#0x3
   \   0000A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A9   E9           MOV       A,R1
   \   0000AA   703C         JNZ       ??gp_addPairedSinksToMsgQueue_1
   \   0000AC   8030         SJMP      ??gp_addPairedSinksToMsgQueue_3
    676                  {
    677                    // Entry found
    678                    break;
    679                  }
    680                }
    681                else if ( appId == GP_OPT_APP_ID_IEEE )
   \                     ??gp_addPairedSinksToMsgQueue_5:
   \   0000AE   7402         MOV       A,#0x2
   \   0000B0   65..         XRL       A,?V3
   \   0000B2   702A         JNZ       ??gp_addPairedSinksToMsgQueue_3
    682                {
    683                  if ( osal_memcmp( pId, &currEntry[PROXY_TBL_ENTRY_GPD_ID], Z_EXTADDR_LEN ) )
   \   0000B4                ; Setup parameters for call to function osal_memcmp
   \   0000B4   7410         MOV       A,#0x10
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   A982         MOV       R1,DPL
   \   0000BB   AA83         MOV       R2,DPH
   \   0000BD   89..         MOV       ?V4,R1
   \   0000BF   8A..         MOV       ?V5,R2
   \   0000C1   75..00       MOV       ?V6,#0x0
   \   0000C4   78..         MOV       R0,#?V4
   \   0000C6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000C9   7C08         MOV       R4,#0x8
   \   0000CB   7D00         MOV       R5,#0x0
   \   0000CD   A9..         MOV       R1,?V0
   \   0000CF   AA..         MOV       R2,?V1
   \   0000D1   AB..         MOV       R3,?V2
   \   0000D3   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000D6   7403         MOV       A,#0x3
   \   0000D8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DB   E9           MOV       A,R1
   \   0000DC   700A         JNZ       ??gp_addPairedSinksToMsgQueue_1
    684                  {
    685                    // Entry found
    686                    break;
    687                  }
    688                }
    689              }
    690            }
   \                     ??gp_addPairedSinksToMsgQueue_3:
   \   0000DE   0E           INC       R6
   \   0000DF   EE           MOV       A,R6
   \   0000E0   C3           CLR       C
   \   0000E1   9406         SUBB      A,#0x6
   \   0000E3   5003         JNC       $+5
   \   0000E5   02....       LJMP      ??gp_addPairedSinksToMsgQueue_0 & 0xFFFF
    691            
    692            dstAddr.endPoint = GREEN_POWER_INTERNAL_ENDPOINT;
   \                     ??gp_addPairedSinksToMsgQueue_1:
   \   0000E8   740B         MOV       A,#0xb
   \   0000EA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000ED   12....       LCALL     ?Subroutine13 & 0xFFFF
    693            dstAddr.panId = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_130:
   \   0000F0   740C         MOV       A,#0xc
   \   0000F2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F5   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    694            
    695            if ( PROXY_TBL_GET_LIGHTWIGHT_UNICAST( currEntry[PROXY_TBL_ENTRY_OPT] ) )
   \                     ??CrossCallReturnLabel_106:
   \   0000F8   740E         MOV       A,#0xe
   \   0000FA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FD   E0           MOVX      A,@DPTR
   \   0000FE   A2E6         MOV       C,0xE0 /* A   */.6
   \   000100   4003         JC        $+5
   \   000102   02....       LJMP      ??gp_addPairedSinksToMsgQueue_6 & 0xFFFF
    696            {
    697              dstAddr.addrMode = afAddr16Bit;
   \   000105   740A         MOV       A,#0xa
   \   000107   12....       LCALL     ?XSTACK_DISP0_8
   \   00010A   7402         MOV       A,#0x2
   \   00010C   F0           MOVX      @DPTR,A
    698              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \   00010D   744F         MOV       A,#0x4f
   \   00010F   12....       LCALL     ?XSTACK_DISP100_8
   \   000112   88..         MOV       ?V0,R0
   \   000114   89..         MOV       ?V1,R1
   \   000116                ; Setup parameters for call to function osal_memcmp
   \   000116   7430         MOV       A,#0x30
   \   000118   12....       LCALL     ?XSTACK_DISP0_8
   \   00011B   A982         MOV       R1,DPL
   \   00011D   AA83         MOV       R2,DPH
   \   00011F   89..         MOV       ?V4,R1
   \   000121   8A..         MOV       ?V5,R2
   \   000123   75..00       MOV       ?V6,#0x0
   \   000126   78..         MOV       R0,#?V4
   \   000128   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00012B   7C0A         MOV       R4,#0xa
   \   00012D   7D00         MOV       R5,#0x0
   \   00012F   A9..         MOV       R1,?V0
   \   000131   AA..         MOV       R2,?V1
   \   000133   AB..         MOV       R3,?V2
   \   000135   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000138   7403         MOV       A,#0x3
   \   00013A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013D   E9           MOV       A,R1
   \   00013E   703F         JNZ       ??gp_addPairedSinksToMsgQueue_7
    699              {
    700                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_1ST_LSINK_ADDR + Z_EXTADDR_LEN], sizeof ( uint16 ) );
   \   000140                ; Setup parameters for call to function osal_memcpy
   \   000140   7438         MOV       A,#0x38
   \   000142   12....       LCALL     ?XSTACK_DISP0_8
   \   000145   A982         MOV       R1,DPL
   \   000147   AA83         MOV       R2,DPH
   \   000149   89..         MOV       ?V4,R1
   \   00014B   8A..         MOV       ?V5,R2
   \   00014D   78..         MOV       R0,#?V4
   \   00014F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000152   7C02         MOV       R4,#0x2
   \   000154   7D00         MOV       R5,#0x0
   \   000156   7405         MOV       A,#0x5
   \   000158   12....       LCALL     ?XSTACK_DISP101_8
   \   00015B   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00015E   7403         MOV       A,#0x3
   \   000160   12....       LCALL     ?DEALLOC_XSTACK8
    701                
    702                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   000163                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   000163   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000166   12....       LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
   \   000169   8A..         MOV       ?V4,R2
   \   00016B   8B..         MOV       ?V5,R3
   \   00016D   AC..         MOV       R4,?V4
   \   00016F   AD..         MOV       R5,?V5
    703                if ( pNotificationMsgCurr != NULL )
   \   000171   EC           MOV       A,R4
   \   000172   4D           ORL       A,R5
   \   000173   600A         JZ        ??gp_addPairedSinksToMsgQueue_7
    704                {
    705                  pNotificationMsgCurr->addr = dstAddr;
   \   000175   7402         MOV       A,#0x2
   \   000177   12....       LCALL     ?XSTACK_DISP0_8
   \   00017A   740C         MOV       A,#0xc
   \   00017C   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    706                }
    707              }
    708              if ( !osal_memcmp( freeSinkEntry, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR], LSINK_ADDR_LEN ) )
   \                     ??gp_addPairedSinksToMsgQueue_7:
   \   00017F                ; Setup parameters for call to function osal_memcmp
   \   00017F   743A         MOV       A,#0x3a
   \   000181   12....       LCALL     ?XSTACK_DISP0_8
   \   000184   A982         MOV       R1,DPL
   \   000186   AA83         MOV       R2,DPH
   \   000188   89..         MOV       ?V4,R1
   \   00018A   8A..         MOV       ?V5,R2
   \   00018C   78..         MOV       R0,#?V4
   \   00018E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000191   7C0A         MOV       R4,#0xa
   \   000193   7D00         MOV       R5,#0x0
   \   000195   A9..         MOV       R1,?V0
   \   000197   AA..         MOV       R2,?V1
   \   000199   AB..         MOV       R3,?V2
   \   00019B   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00019E   7403         MOV       A,#0x3
   \   0001A0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A3   E9           MOV       A,R1
   \   0001A4   703F         JNZ       ??gp_addPairedSinksToMsgQueue_6
    709              {
    710                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_2ND_LSINK_ADDR + Z_EXTADDR_LEN], sizeof ( uint16 ) );   
   \   0001A6                ; Setup parameters for call to function osal_memcpy
   \   0001A6   7442         MOV       A,#0x42
   \   0001A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001AB   A982         MOV       R1,DPL
   \   0001AD   AA83         MOV       R2,DPH
   \   0001AF   89..         MOV       ?V0,R1
   \   0001B1   8A..         MOV       ?V1,R2
   \   0001B3   78..         MOV       R0,#?V0
   \   0001B5   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B8   7C02         MOV       R4,#0x2
   \   0001BA   7D00         MOV       R5,#0x0
   \   0001BC   7405         MOV       A,#0x5
   \   0001BE   12....       LCALL     ?XSTACK_DISP101_8
   \   0001C1   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001C4   7403         MOV       A,#0x3
   \   0001C6   12....       LCALL     ?DEALLOC_XSTACK8
    711                
    712                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   0001C9                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   0001C9   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0001CC   12....       LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
   \   0001CF   8A..         MOV       ?V0,R2
   \   0001D1   8B..         MOV       ?V1,R3
   \   0001D3   AC..         MOV       R4,?V0
   \   0001D5   AD..         MOV       R5,?V1
    713                if ( pNotificationMsgCurr != NULL )
   \   0001D7   EC           MOV       A,R4
   \   0001D8   4D           ORL       A,R5
   \   0001D9   600A         JZ        ??gp_addPairedSinksToMsgQueue_6
    714                {
    715                  pNotificationMsgCurr->addr = dstAddr;
   \   0001DB   7402         MOV       A,#0x2
   \   0001DD   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E0   740C         MOV       A,#0xc
   \   0001E2   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    716                }
    717              }
    718            }
    719               
    720            if ( PROXY_TBL_GET_DGROUP( currEntry[PROXY_TBL_ENTRY_OPT] ) || PROXY_TBL_GET_CGROUP( currEntry[PROXY_TBL_ENTRY_OPT + 1] ) )
   \                     ??gp_addPairedSinksToMsgQueue_6:
   \   0001E5   740E         MOV       A,#0xe
   \   0001E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EA   E0           MOVX      A,@DPTR
   \   0001EB   A2E7         MOV       C,0xE0 /* A   */.7
   \   0001ED   400D         JC        ??gp_addPairedSinksToMsgQueue_8
   \   0001EF   740F         MOV       A,#0xf
   \   0001F1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F4   E0           MOVX      A,@DPTR
   \   0001F5   A2E0         MOV       C,0xE0 /* A   */.0
   \   0001F7   4003         JC        $+5
   \   0001F9   02....       LJMP      ??gp_addPairedSinksToMsgQueue_4 & 0xFFFF
    721            {
    722              dstAddr.addrMode = afAddrGroup;
   \                     ??gp_addPairedSinksToMsgQueue_8:
   \   0001FC   740A         MOV       A,#0xa
   \   0001FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000201   7401         MOV       A,#0x1
   \   000203   F0           MOVX      @DPTR,A
    723              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_1ST_GRP_BIT ) )
   \   000204   7444         MOV       A,#0x44
   \   000206   12....       LCALL     ?XSTACK_DISP0_8
   \   000209   E0           MOVX      A,@DPTR
   \   00020A   A2E0         MOV       C,0xE0 /* A   */.0
   \   00020C   503F         JNC       ??gp_addPairedSinksToMsgQueue_9
    724              {
    725                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_1ST_GRP_ADDR], sizeof ( uint16 ) );   
   \   00020E                ; Setup parameters for call to function osal_memcpy
   \   00020E   7445         MOV       A,#0x45
   \   000210   12....       LCALL     ?XSTACK_DISP0_8
   \   000213   A982         MOV       R1,DPL
   \   000215   AA83         MOV       R2,DPH
   \   000217   89..         MOV       ?V0,R1
   \   000219   8A..         MOV       ?V1,R2
   \   00021B   78..         MOV       R0,#?V0
   \   00021D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000220   7C02         MOV       R4,#0x2
   \   000222   7D00         MOV       R5,#0x0
   \   000224   7405         MOV       A,#0x5
   \   000226   12....       LCALL     ?XSTACK_DISP101_8
   \   000229   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00022C   7403         MOV       A,#0x3
   \   00022E   12....       LCALL     ?DEALLOC_XSTACK8
    726                
    727                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   000231                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   000231   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000234   12....       LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
   \   000237   8A..         MOV       ?V0,R2
   \   000239   8B..         MOV       ?V1,R3
   \   00023B   AC..         MOV       R4,?V0
   \   00023D   AD..         MOV       R5,?V1
    728                if ( pNotificationMsgCurr != NULL )
   \   00023F   EC           MOV       A,R4
   \   000240   4D           ORL       A,R5
   \   000241   600A         JZ        ??gp_addPairedSinksToMsgQueue_9
    729                {
    730                  pNotificationMsgCurr->addr = dstAddr;
   \   000243   7402         MOV       A,#0x2
   \   000245   12....       LCALL     ?XSTACK_DISP0_8
   \   000248   740C         MOV       A,#0xc
   \   00024A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    731                }
    732              }
    733              if ( GET_BIT( &currEntry[PROXY_TBL_ENTRY_GRP_TBL_ENTRIES], PROXY_TBL_ENTRY_2ND_GRP_BIT ) )
   \                     ??gp_addPairedSinksToMsgQueue_9:
   \   00024D   7444         MOV       A,#0x44
   \   00024F   12....       LCALL     ?XSTACK_DISP0_8
   \   000252   E0           MOVX      A,@DPTR
   \   000253   A2E1         MOV       C,0xE0 /* A   */.1
   \   000255   503F         JNC       ??gp_addPairedSinksToMsgQueue_4
    734              {
    735                osal_memcpy( &dstAddr.addr.shortAddr, &currEntry[PROXY_TBL_ENTRY_2ND_GRP_ADDR], sizeof ( uint16 ) );   
   \   000257                ; Setup parameters for call to function osal_memcpy
   \   000257   7449         MOV       A,#0x49
   \   000259   12....       LCALL     ?XSTACK_DISP0_8
   \   00025C   A982         MOV       R1,DPL
   \   00025E   AA83         MOV       R2,DPH
   \   000260   89..         MOV       ?V0,R1
   \   000262   8A..         MOV       ?V1,R2
   \   000264   78..         MOV       R0,#?V0
   \   000266   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000269   7C02         MOV       R4,#0x2
   \   00026B   7D00         MOV       R5,#0x0
   \   00026D   7405         MOV       A,#0x5
   \   00026F   12....       LCALL     ?XSTACK_DISP101_8
   \   000272   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000275   7403         MOV       A,#0x3
   \   000277   12....       LCALL     ?DEALLOC_XSTACK8
    736                
    737                pNotificationMsgCurr = gp_AddNotificationMsgNode( &pNotificationMsgHead, pMsg );
   \   00027A                ; Setup parameters for call to function gp_AddNotificationMsgNode
   \   00027A   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00027D   12....       LCALL     `??gp_AddNotificationMsgNode::?relay`; Banked call to: gp_AddNotificationMsgNode
   \   000280   8A..         MOV       ?V0,R2
   \   000282   8B..         MOV       ?V1,R3
   \   000284   AC..         MOV       R4,?V0
   \   000286   AD..         MOV       R5,?V1
    738                if ( pNotificationMsgCurr != NULL )
   \   000288   EC           MOV       A,R4
   \   000289   4D           ORL       A,R5
   \   00028A   600A         JZ        ??gp_addPairedSinksToMsgQueue_4
    739                {
    740                  pNotificationMsgCurr->addr = dstAddr;
   \   00028C   7402         MOV       A,#0x2
   \   00028E   12....       LCALL     ?XSTACK_DISP0_8
   \   000291   740C         MOV       A,#0xc
   \   000293   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    741                }
    742              }
    743            }
    744          
    745            return status;
   \                     ??gp_addPairedSinksToMsgQueue_4:
   \   000296   EF           MOV       A,R7
   \   000297   F9           MOV       R1,A
   \   000298   7459         MOV       A,#0x59
   \   00029A   02....       LJMP      ?Subroutine2 & 0xFFFF
    746          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   FC           MOV       R4,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   FD           MOV       R5,A
   \   00000B   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   00000D   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   00000F   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{0}}>`:
   \   000000   0000         DW 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   \   000008   00000000     DB 0, 0, 0, 0
    747          
    748          /*********************************************************************
    749           * @fn      gp_CreateNotificationMsgList
    750           *
    751           * @brief   Create Notification Msg List for paired sinks if empty
    752           *
    753           * @param   pHead - pointer to a pointer of the list head
    754           *
    755           * @return  none
    756           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   8A..         MOV       ?V0,R2
   \   000002   8B..         MOV       ?V1,R3
   \   000004   A8..         MOV       R0,?V0
   \   000006   A9..         MOV       R1,?V1
   \   000008                REQUIRE ??Subroutine53_0
   \   000008                ; // Fall through to label ??Subroutine53_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine54_0
   \   000004                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    757          void gp_CreateNotificationMsgList( gpNotificationMsg_t **pHead )
   \                     gp_CreateNotificationMsgList:
    758          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine6 & 0xFFFF
    759          
    760            // Create the list if empty
    761            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_138:
   \   000008   701B         JNZ       ??gp_CreateNotificationMsgList_0
    762            {
    763              *pHead = ( gpNotificationMsg_t* )osal_mem_alloc( sizeof( gpNotificationMsg_t ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A11         MOV       R2,#0x11
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   12....       LCALL     ?Subroutine29 & 0xFFFF
    764              
    765              if ( *pHead != NULL )
   \                     ??CrossCallReturnLabel_110:
   \   000014   E8           MOV       A,R0
   \   000015   49           ORL       A,R1
   \   000016   600D         JZ        ??gp_CreateNotificationMsgList_0
    766              {
    767                (*pHead)->pNext = NULL;
   \   000018   E8           MOV       A,R0
   \   000019   240F         ADD       A,#0xf
   \   00001B   F582         MOV       DPL,A
   \   00001D   E4           CLR       A
   \   00001E   39           ADDC      A,R1
   \   00001F   F583         MOV       DPH,A
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   F0           MOVX      @DPTR,A
    768              }
    769            }
    770            return;
   \                     ??gp_CreateNotificationMsgList_0:
   \   000025                REQUIRE ?Subroutine4
   \   000025                ; // Fall through to label ?Subroutine4
    771          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EA           MOV       A,R2
   \   000001   FE           MOV       R6,A
   \   000002   EB           MOV       A,R3
   \   000003                REQUIRE ??Subroutine58_0
   \   000003                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   FF           MOV       R7,A
   \   000001                REQUIRE ??Subroutine59_0
   \   000001                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine60_0
   \   000004                ; // Fall through to label ??Subroutine60_0
    772          
    773          /*********************************************************************
    774           * @fn      gp_CreateCmdPayloadMsgList
    775           *
    776           * @brief   Create Notification Msg List for paired sinks if empty
    777           *
    778           * @param   pHead - pointer to a pointer of the list head
    779           *
    780           * @return  none
    781           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    782          void gp_CreateCmdPayloadMsgList( gpCmdPayloadMsg_t **pHead )
   \                     gp_CreateCmdPayloadMsgList:
    783          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL     ?Subroutine6 & 0xFFFF
    784          
    785            // Create the list if empty
    786            if ( *pHead == NULL )
   \                     ??CrossCallReturnLabel_139:
   \   000008   7024         JNZ       ??gp_CreateCmdPayloadMsgList_0
    787            {
    788              *pHead = ( gpCmdPayloadMsg_t* )osal_mem_alloc( sizeof( gpCmdPayloadMsg_t ) );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A06         MOV       R2,#0x6
   \   00000C   7B00         MOV       R3,#0x0
   \   00000E   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   12....       LCALL     ?Subroutine29 & 0xFFFF
    789              ( ( gpCmdPayloadMsg_t* )*pHead )->pMsg = NULL;
   \                     ??CrossCallReturnLabel_111:
   \   000014   8882         MOV       DPL,R0
   \   000016   8983         MOV       DPH,R1
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   E4           CLR       A
   \   00001B   F0           MOVX      @DPTR,A
   \   00001C   A3           INC       DPTR
   \   00001D   F0           MOVX      @DPTR,A
    790              
    791              if ( *pHead != NULL )
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   600C         JZ        ??gp_CreateCmdPayloadMsgList_0
    792              {
    793                (*pHead)->pNext = NULL;
   \   000022   8882         MOV       DPL,R0
   \   000024   8983         MOV       DPH,R1
   \   000026   A3           INC       DPTR
   \   000027   A3           INC       DPTR
   \   000028   A3           INC       DPTR
   \   000029   A3           INC       DPTR
   \   00002A   E4           CLR       A
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   A3           INC       DPTR
   \   00002D   F0           MOVX      @DPTR,A
    794              }
    795            }
    796            return;
   \                     ??gp_CreateCmdPayloadMsgList_0:
   \   00002E   80..         SJMP      ?Subroutine4
    797          }
    798          
    799          /*********************************************************************
    800           * @fn      gp_AddNotificationMsgNode
    801           *
    802           * @brief   Add node to Notification Msg list
    803           *
    804           * @param   pHead - pointer to a pointer of the list head
    805           *
    806           * @return  pointer to new node
    807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    808          gpNotificationMsg_t* gp_AddNotificationMsgNode( gpNotificationMsg_t **pHead, gpCmdPayloadMsg_t *pMsg )
   \                     gp_AddNotificationMsgNode:
    809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
    810            gpNotificationMsg_t **pCurr;
    811            
    812              // Create respondent list if empty
    813            if ( *pHead == NULL )
   \   00000D   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000010   7005         JNZ       ??gp_AddNotificationMsgNode_0
    814            {
    815              gp_CreateNotificationMsgList( pHead );
   \   000012                ; Setup parameters for call to function gp_CreateNotificationMsgList
   \   000012   12....       LCALL     `??gp_CreateNotificationMsgList::?relay`; Banked call to: gp_CreateNotificationMsgList
    816              ( ( gpNotificationMsg_t* ) *pHead )->pMsg = ( uint8* )pMsg;
   \   000015   8031         SJMP      ??gp_AddNotificationMsgNode_1
    817              return *pHead;
    818            }
    819            
    820            pCurr = &((*pHead)->pNext);
    821            
    822            while ( *pCurr != NULL )
    823            {
    824              pCurr = &((*pCurr)->pNext);
   \                     ??gp_AddNotificationMsgNode_0:
   \   000017   E8           MOV       A,R0
   \   000018   240F         ADD       A,#0xf
   \   00001A   FE           MOV       R6,A
   \   00001B   E4           CLR       A
   \   00001C   39           ADDC      A,R1
   \   00001D   12....       LCALL     ??Subroutine58_0 & 0xFFFF
    825            }
   \                     ??CrossCallReturnLabel_140:
   \   000020   70F5         JNZ       ??gp_AddNotificationMsgNode_0
    826          
    827            *pCurr = ( gpNotificationMsg_t* )osal_mem_alloc( sizeof( gpNotificationMsg_t ) );
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   7A11         MOV       R2,#0x11
   \   000024   7B00         MOV       R3,#0x0
   \   000026   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000029   8A..         MOV       ?V2,R2
   \   00002B   8B..         MOV       ?V3,R3
   \   00002D   A8..         MOV       R0,?V2
   \   00002F   A9..         MOV       R1,?V3
   \   000031   12....       LCALL     ??Subroutine53_0 & 0xFFFF
    828              
    829            if ( (*pCurr)->pNext != NULL )
   \                     ??CrossCallReturnLabel_108:
   \   000034   E8           MOV       A,R0
   \   000035   240F         ADD       A,#0xf
   \   000037   F8           MOV       R0,A
   \   000038   5001         JNC       ??gp_AddNotificationMsgNode_2
   \   00003A   09           INC       R1
   \                     ??gp_AddNotificationMsgNode_2:
   \   00003B   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00003E   6008         JZ        ??gp_AddNotificationMsgNode_1
    830            {
    831              (*pCurr)->pNext = NULL;
   \   000040   8882         MOV       DPL,R0
   \   000042   8983         MOV       DPH,R1
   \   000044   E4           CLR       A
   \   000045   F0           MOVX      @DPTR,A
   \   000046   A3           INC       DPTR
   \   000047   F0           MOVX      @DPTR,A
    832            }
    833            ( ( gpNotificationMsg_t* ) *pCurr )->pMsg = ( uint8* )pMsg;
   \                     ??gp_AddNotificationMsgNode_1:
   \   000048   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   00004B   EA           MOV       A,R2
   \   00004C   240D         ADD       A,#0xd
   \   00004E   F582         MOV       DPL,A
   \   000050   E4           CLR       A
   \   000051   3B           ADDC      A,R3
   \   000052   F583         MOV       DPH,A
   \   000054   E5..         MOV       A,?V0
   \   000056   F0           MOVX      @DPTR,A
   \   000057   A3           INC       DPTR
   \   000058   E5..         MOV       A,?V1
   \   00005A   F0           MOVX      @DPTR,A
    834            return *pCurr;
   \   00005B   02....       LJMP      ?Subroutine0 & 0xFFFF
    835          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8882         MOV       DPL,R0
   \   000002   8983         MOV       DPH,R1
   \   000004                REQUIRE ??Subroutine55_0
   \   000004                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004                REQUIRE ??Subroutine56_0
   \   000004                ; // Fall through to label ??Subroutine56_0
    836          
    837          /*********************************************************************
    838           * @fn      gp_AddCmdPayloadMsgNode
    839           *
    840           * @brief   Add node to Notification Msg list
    841           *
    842           * @param   pHead - pointer to a pointer of the list head
    843           *
    844           * @return  pointer to new node
    845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    846          gpCmdPayloadMsg_t* gp_AddCmdPayloadMsgNode( gpCmdPayloadMsg_t **pHead, uint8* pBuf, uint8 len )
   \                     gp_AddCmdPayloadMsgNode:
    847          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8C..         MOV       ?V0,R4
   \   00000B   8D..         MOV       ?V1,R5
   \   00000D   89..         MOV       ?V2,R1
    848            gpCmdPayloadMsg_t **pCurr;
    849            
    850              // Create respondent list if empty
    851            if ( *pHead == NULL )
   \   00000F   12....       LCALL     ??Subroutine59_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000012   7019         JNZ       ??gp_AddCmdPayloadMsgNode_0
    852            {
    853              gp_CreateCmdPayloadMsgList( pHead );
   \   000014                ; Setup parameters for call to function gp_CreateCmdPayloadMsgList
   \   000014   12....       LCALL     `??gp_CreateCmdPayloadMsgList::?relay`; Banked call to: gp_CreateCmdPayloadMsgList
    854              
    855              if ( pHead != NULL )
   \   000017   EE           MOV       A,R6
   \   000018   4F           ORL       A,R7
   \   000019   600D         JZ        ??gp_AddCmdPayloadMsgNode_1
    856              {
    857                ( ( ( gpCmdPayloadMsg_t* ) *pHead )->lenght ) = len;
   \   00001B   12....       LCALL     ?Subroutine16 & 0xFFFF
    858                ( ( ( gpCmdPayloadMsg_t* ) *pHead )->pMsg ) = ( uint8* )pBuf;
    859              }
   \                     ??CrossCallReturnLabel_10:
   \   00001E   12....       LCALL     ??Subroutine51_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000021   E5..         MOV       A,?V0
   \   000023   F0           MOVX      @DPTR,A
   \   000024   A3           INC       DPTR
   \   000025   E5..         MOV       A,?V1
   \   000027   F0           MOVX      @DPTR,A
    860              return *pHead;
   \                     ??gp_AddCmdPayloadMsgNode_1:
   \   000028   12....       LCALL     ?Subroutine17 & 0xFFFF
    861            }
   \                     ??CrossCallReturnLabel_126:
   \   00002B   8045         SJMP      ??gp_AddCmdPayloadMsgNode_2
    862            
    863            pCurr = &((*pHead)->pNext);
    864            
    865            while ( *pCurr != NULL )
    866            {
    867              pCurr = &((*pCurr)->pNext);
   \                     ??gp_AddCmdPayloadMsgNode_0:
   \   00002D   E8           MOV       A,R0
   \   00002E   2404         ADD       A,#0x4
   \   000030   FE           MOV       R6,A
   \   000031   E4           CLR       A
   \   000032   39           ADDC      A,R1
   \   000033   12....       LCALL     ??Subroutine58_0 & 0xFFFF
    868            }
   \                     ??CrossCallReturnLabel_141:
   \   000036   70F5         JNZ       ??gp_AddCmdPayloadMsgNode_0
    869          
    870            *pCurr = ( gpCmdPayloadMsg_t* )osal_mem_alloc( sizeof( gpCmdPayloadMsg_t ) );
   \   000038                ; Setup parameters for call to function osal_mem_alloc
   \   000038   7A06         MOV       R2,#0x6
   \   00003A   7B00         MOV       R3,#0x0
   \   00003C   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003F   8A..         MOV       ?V4,R2
   \   000041   8B..         MOV       ?V5,R3
   \   000043   A8..         MOV       R0,?V4
   \   000045   A9..         MOV       R1,?V5
   \   000047   12....       LCALL     ??Subroutine53_0 & 0xFFFF
    871              
    872            if ( (*pCurr)->pNext != NULL )
   \                     ??CrossCallReturnLabel_109:
   \   00004A   E8           MOV       A,R0
   \   00004B   2404         ADD       A,#0x4
   \   00004D   F8           MOV       R0,A
   \   00004E   5001         JNC       ??gp_AddCmdPayloadMsgNode_3
   \   000050   09           INC       R1
   \                     ??gp_AddCmdPayloadMsgNode_3:
   \   000051   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000054   6008         JZ        ??gp_AddCmdPayloadMsgNode_4
    873            {
    874              (*pCurr)->pNext = NULL;
   \   000056   8882         MOV       DPL,R0
   \   000058   8983         MOV       DPH,R1
   \   00005A   E4           CLR       A
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   F0           MOVX      @DPTR,A
    875            }
    876            ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->lenght ) = len;
   \                     ??gp_AddCmdPayloadMsgNode_4:
   \   00005E   12....       LCALL     ?Subroutine16 & 0xFFFF
    877            ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg ) = ( uint8* )pBuf;
   \                     ??CrossCallReturnLabel_11:
   \   000061   FA           MOV       R2,A
   \   000062   A3           INC       DPTR
   \   000063   E0           MOVX      A,@DPTR
   \   000064   FB           MOV       R3,A
   \   000065   8A82         MOV       DPL,R2
   \   000067   8B83         MOV       DPH,R3
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   E5..         MOV       A,?V0
   \   00006D   F0           MOVX      @DPTR,A
   \   00006E   A3           INC       DPTR
   \   00006F   E5..         MOV       A,?V1
   \   000071   F0           MOVX      @DPTR,A
    878            
    879            return *pCurr;
   \                     ??gp_AddCmdPayloadMsgNode_2:
   \   000072   7F06         MOV       R7,#0x6
   \   000074   02....       LJMP      ?BANKED_LEAVE_XDATA
    880          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8E82         MOV       DPL,R6
   \   000002   8F83         MOV       DPH,R7
   \   000004   12....       LCALL     ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000007   E5..         MOV       A,?V2
   \   000009   F0           MOVX      @DPTR,A
   \   00000A   8E82         MOV       DPL,R6
   \   00000C   8F83         MOV       DPH,R7
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   22           RET
    881          
    882          /*********************************************************************
    883           * @fn      gp_GetHeadNotificationMsg
    884           *
    885           * @brief   Returns head pointer for  finding and binding respondent list
    886           *
    887           * @param   none
    888           *
    889           * @return  pointer to head
    890           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    891          gpNotificationMsg_t* gp_GetHeadNotificationMsg(void)
   \                     gp_GetHeadNotificationMsg:
    892          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    893            return ( pNotificationMsgHead );
   \   000004   90....       MOV       DPTR,#pNotificationMsgHead
   \   000007                REQUIRE ?Subroutine5
   \   000007                ; // Fall through to label ?Subroutine5
    894          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000003   D083         POP       DPH
   \   000005   D082         POP       DPL
   \   000007   02....       LJMP      ?BRET
    895          
    896          /*********************************************************************
    897           * @fn      gp_GetPHeadNotification
    898           *
    899           * @brief   Returns head pointer for  finding and binding respondent list
    900           *
    901           * @param   none
    902           *
    903           * @return  pointer to head
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          gpNotificationMsg_t** gp_GetPHeadNotification(void)
   \                     gp_GetPHeadNotification:
    906          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    907            return ( &pNotificationMsgHead );
   \   000000   7A..         MOV       R2,#pNotificationMsgHead & 0xff
   \   000002   7B..         MOV       R3,#(pNotificationMsgHead >> 8) & 0xff
   \   000004   02....       LJMP      ?BRET
    908          }
    909          
    910          /*********************************************************************
    911           * @fn      gp_GetHeadCmdPayloadMsg
    912           *
    913           * @brief   Returns head pointer for  finding and binding respondent list
    914           *
    915           * @param   none
    916           *
    917           * @return  pointer to head
    918           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    919          gpCmdPayloadMsg_t* gp_GetHeadCmdPayloadMsg(void)
   \                     gp_GetHeadCmdPayloadMsg:
    920          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    921            return ( pCmdPayloadMsgHead );
   \   000004   90....       MOV       DPTR,#pCmdPayloadMsgHead
   \   000007   80..         SJMP      ?Subroutine5
    922          }
    923          
    924          /*********************************************************************
    925           * @fn      gp_GetHeadCmdPayloadMsg
    926           *
    927           * @brief   Returns head pointer for  finding and binding respondent list
    928           *
    929           * @param   none
    930           *
    931           * @return  pointer to head
    932           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    933          gpCmdPayloadMsg_t** gp_GetPHeadCmdPayload(void)
   \                     gp_GetPHeadCmdPayload:
    934          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    935            return ( &pCmdPayloadMsgHead );
   \   000000   7A..         MOV       R2,#pCmdPayloadMsgHead & 0xff
   \   000002   7B..         MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
   \   000004   02....       LJMP      ?BRET
    936          }
    937          
    938          /*********************************************************************
    939           * @fn      gp_NotificationMsgClean
    940           *
    941           * @brief   This function free reserved memory for respondent list
    942           *
    943           * @param   pHead - begin of the Notification Msg list
    944           *
    945           * @return  status
    946           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          void gp_NotificationMsgClean( gpNotificationMsg_t **pHead )
   \                     gp_NotificationMsgClean:
    948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV       ?V0,R2
   \   000007   8B..         MOV       ?V1,R3
    949            gpNotificationMsg_t **pCurr;
    950            gpNotificationMsg_t **pNext;
    951            
    952            if ( *pHead == NULL )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   8B83         MOV       DPH,R3
   \   00000D   12....       LCALL     ??Subroutine60_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000010   6062         JZ        ??CrossCallReturnLabel_107
    953            {
    954              return;
    955            }
    956            
    957            pCurr = pHead;
   \   000012   AE..         MOV       R6,?V0
   \   000014   AF..         MOV       R7,?V1
    958            
    959            if( *pCurr != NULL )
   \   000016   E8           MOV       A,R0
   \   000017   49           ORL       A,R1
   \   000018   604A         JZ        ??gp_NotificationMsgClean_0
    960            {
    961              pNext = &((*pCurr)->pNext);
   \   00001A   E8           MOV       A,R0
   \   00001B   240F         ADD       A,#0xf
   \   00001D   F5..         MOV       ?V2,A
   \   00001F   E4           CLR       A
   \   000020   39           ADDC      A,R1
   \   000021   F5..         MOV       ?V3,A
    962              if ( ( ( gpNotificationMsg_t* ) *pCurr )->pMsg != ( ( gpNotificationMsg_t* ) *pNext )->pMsg )
   \   000023   E8           MOV       A,R0
   \   000024   240D         ADD       A,#0xd
   \   000026   F582         MOV       DPL,A
   \   000028   E4           CLR       A
   \   000029   39           ADDC      A,R1
   \   00002A   F583         MOV       DPH,A
   \   00002C   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00002F   85..82       MOV       DPL,?V2
   \   000032   85..83       MOV       DPH,?V3
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F8           MOV       R0,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   C8           XCH       A,R0
   \   00003A   240D         ADD       A,#0xd
   \   00003C   F582         MOV       DPL,A
   \   00003E   E4           CLR       A
   \   00003F   38           ADDC      A,R0
   \   000040   F583         MOV       DPH,A
   \   000042   E0           MOVX      A,@DPTR
   \   000043   6A           XRL       A,R2
   \   000044   7003         JNZ       ??gp_NotificationMsgClean_1
   \   000046   A3           INC       DPTR
   \   000047   E0           MOVX      A,@DPTR
   \   000048   6B           XRL       A,R3
   \                     ??gp_NotificationMsgClean_1:
   \   000049   6007         JZ        ??gp_NotificationMsgClean_2
    963              {
    964                gp_CmdPayloadMsgClean( gp_GetPHeadCmdPayload( ) );
   \   00004B                ; Setup parameters for call to function gp_CmdPayloadMsgClean
   \   00004B   7A..         MOV       R2,#pCmdPayloadMsgHead & 0xff
   \   00004D   7B..         MOV       R3,#(pCmdPayloadMsgHead >> 8) & 0xff
   \   00004F   12....       LCALL     `??gp_CmdPayloadMsgClean::?relay`; Banked call to: gp_CmdPayloadMsgClean
    965              }
    966              osal_mem_free( *pCurr );
   \                     ??gp_NotificationMsgClean_2:
   \   000052                ; Setup parameters for call to function osal_mem_free
   \   000052   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000055   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    967              *pCurr = ( gpNotificationMsg_t* )NULL;
   \   000058   8E82         MOV       DPL,R6
   \   00005A   8F83         MOV       DPH,R7
   \   00005C   E4           CLR       A
   \   00005D   F0           MOVX      @DPTR,A
   \   00005E   A3           INC       DPTR
   \   00005F   F0           MOVX      @DPTR,A
    968              pCurr = pNext;
   \   000060   AE..         MOV       R6,?V2
   \   000062   AF..         MOV       R7,?V3
    969            }
    970            *pHead = *pCurr;
   \                     ??gp_NotificationMsgClean_0:
   \   000064   8E82         MOV       DPL,R6
   \   000066   8F83         MOV       DPH,R7
   \   000068   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00006B   85..82       MOV       DPL,?V0
   \   00006E   85..83       MOV       DPH,?V1
   \   000071   12....       LCALL     ??Subroutine54_0 & 0xFFFF
    971          }
   \                     ??CrossCallReturnLabel_107:
   \   000074   02....       LJMP      ?Subroutine0 & 0xFFFF
    972          
    973          /*********************************************************************
    974           * @fn      gp_NotificationMsgClean
    975           *
    976           * @brief   This function free reserved memory for respondent list
    977           *
    978           * @param   pHead - begin of the Notification Msg list
    979           *
    980           * @return
    981           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    982          void gp_CmdPayloadMsgClean( gpCmdPayloadMsg_t **pHead )
   \                     gp_CmdPayloadMsgClean:
    983          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    984            gpCmdPayloadMsg_t **pCurr;
    985            gpCmdPayloadMsg_t **pNext;
    986            
    987            if ( *pHead == NULL )
   \   000009   8E82         MOV       DPL,R6
   \   00000B   8F83         MOV       DPH,R7
   \   00000D   12....       LCALL     ??Subroutine57_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000010   8882         MOV       DPL,R0
   \   000012   8983         MOV       DPH,R1
   \   000014   E582         MOV       A,DPL
   \   000016   4583         ORL       A,DPH
   \   000018   6020         JZ        ??gp_CmdPayloadMsgClean_0
    988            {
    989              return;
    990            }
    991            
    992            pCurr = pHead;
    993            
    994            if( *pCurr != NULL )
    995            {
    996              pNext = &((*pCurr)->pNext);
    997              osal_mem_free ( ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg );
   \   00001A                ; Setup parameters for call to function osal_mem_free
   \   00001A   A3           INC       DPTR
   \   00001B   A3           INC       DPTR
   \   00001C   12....       LCALL     ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00001F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    998              ( ( gpCmdPayloadMsg_t* ) *pCurr )->pMsg = NULL;
   \   000022   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000025   8A82         MOV       DPL,R2
   \   000027   8B83         MOV       DPH,R3
   \   000029   A3           INC       DPTR
   \   00002A   A3           INC       DPTR
   \   00002B   E4           CLR       A
   \   00002C   F0           MOVX      @DPTR,A
   \   00002D   A3           INC       DPTR
   \   00002E   F0           MOVX      @DPTR,A
    999              osal_mem_free( *pCurr );
   \   00002F                ; Setup parameters for call to function osal_mem_free
   \   00002F   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1000              *pCurr = ( gpCmdPayloadMsg_t* )NULL;
   \   000032   8E82         MOV       DPL,R6
   \   000034   8F83         MOV       DPH,R7
   \   000036   E4           CLR       A
   \   000037   F0           MOVX      @DPTR,A
   \   000038   A3           INC       DPTR
   \   000039   F0           MOVX      @DPTR,A
   1001              pCurr = pNext;
   1002            }
   1003            pHead = pCurr;
   1004          }
   \                     ??gp_CmdPayloadMsgClean_0:
   \   00003A   02....       LJMP      ?Subroutine1 & 0xFFFF
   1005          
   1006          /*********************************************************************
   1007           * @fn      gp_ResetProxyBasicTblEntry
   1008           *
   1009           * @brief   This function removes data of the given entry
   1010           *
   1011           * @param   pHead - begin of the Notification Msg list
   1012           *
   1013           * @return
   1014           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1015          void gp_ResetProxyBasicTblEntry( uint8* entry )
   \                     gp_ResetProxyBasicTblEntry:
   1016          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 65
   \   000005   74BF         MOV       A,#-0x41
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   1017            uint8 emptyEntry[PROXY_TBL_ENTRY_LEN] = PROXY_BASIC_TBL_EMPTY_ENTRY;
   \   00000A   90....       MOV       DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,_2`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7441         MOV       A,#0x41
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
   1018            
   1019            osal_memcpy( entry, emptyEntry, PROXY_TBL_ENTRY_LEN );
   \   000016                ; Setup parameters for call to function osal_memcpy
   \   000016   A8..         MOV       R0,?XSP + 0
   \   000018   A9..         MOV       R1,?XSP + 1
   \   00001A   88..         MOV       ?V0,R0
   \   00001C   89..         MOV       ?V1,R1
   \   00001E   F5..         MOV       ?V2,A
   \   000020   78..         MOV       R0,#?V0
   \   000022   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000025   7C41         MOV       R4,#0x41
   \   000027   7D00         MOV       R5,#0x0
   \   000029   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002C   7403         MOV       A,#0x3
   \   00002E   12....       LCALL     ?DEALLOC_XSTACK8
   1020          }
   \   000031   7441         MOV       A,#0x41
   \   000033   12....       LCALL     ?DEALLOC_XSTACK8
   \   000036   7F03         MOV       R7,#0x3
   \   000038   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_RegisterCmdCallbacks::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_RegisterCmdCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_HdlIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_ProcessInProxyBasic::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_ProcessInProxyBasic

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_SendGpNotificationCommand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_SendGpNotificationCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_SendGpCommissioningNotificationCommand:`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_SendGpCommissioningNotificationCommand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclGp_SendGpProxyTableResponse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGp_SendGpProxyTableResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_addPairedSinksToMsgQueue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_addPairedSinksToMsgQueue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CreateNotificationMsgList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CreateNotificationMsgList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CreateCmdPayloadMsgList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CreateCmdPayloadMsgList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_AddNotificationMsgNode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_AddNotificationMsgNode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_AddCmdPayloadMsgNode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_AddCmdPayloadMsgNode

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetHeadNotificationMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetHeadNotificationMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetPHeadNotification::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetPHeadNotification

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetHeadCmdPayloadMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetHeadCmdPayloadMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_GetPHeadCmdPayload::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_GetPHeadCmdPayload

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_NotificationMsgClean::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_NotificationMsgClean

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_CmdPayloadMsgClean::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_CmdPayloadMsgClean

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??gp_ResetProxyBasicTblEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    gp_ResetProxyBasicTblEntry

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_2`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
   \   000008   FF           DB 255
   \   000009   FF           DB 255
   \   00000A   00           DB 0
   \   00000B   FF           DB 255
   \   00000C   FF           DB 255
   \   00000D   FF           DB 255
   \   00000E   FF           DB 255
   \   00000F   FF           DB 255
   \   000010   FF           DB 255
   \   000011   FF           DB 255
   \   000012   FF           DB 255
   \   000013   FF           DB 255
   \   000014   FF           DB 255
   \   000015   FF           DB 255
   \   000016   FF           DB 255
   \   000017   FF           DB 255
   \   000018   FF           DB 255
   \   000019   FF           DB 255
   \   00001A   FF           DB 255
   \   00001B   FF           DB 255
   \   00001C   FF           DB 255
   \   00001D   FF           DB 255
   \   00001E   FF           DB 255
   \   00001F   FF           DB 255
   \   000020   FF           DB 255
   \   000021   FF           DB 255
   \   000022   00           DB 0
   \   000023   00           DB 0
   \   000024   00           DB 0
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   00           DB 0
   \   000034   00           DB 0
   \   000035   00           DB 0
   \   000036   00           DB 0
   \   000037   00           DB 0
   \   000038   00           DB 0
   \   000039   00           DB 0
   \   00003A   00           DB 0
   \   00003B   00           DB 0
   \   00003C   00           DB 0
   \   00003D   00           DB 0
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_32:
   \   000000   32000000     DD 50
   1021          
   1022          #endif
   1023          /***************************************************************************
   1024          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     36   gp_AddCmdPayloadMsgNode
        0     14   -> gp_CreateCmdPayloadMsgList
        0     14   -> osal_mem_alloc
      0    116   gp_AddNotificationMsgNode
        0     12   -> gp_CreateNotificationMsgList
        0     12   -> osal_mem_alloc
      0     21   gp_CmdPayloadMsgClean
        0      9   -> osal_mem_free
      0     24   gp_CreateCmdPayloadMsgList
        0     10   -> osal_mem_alloc
      0     22   gp_CreateNotificationMsgList
        0     10   -> osal_mem_alloc
      2      0   gp_GetHeadCmdPayloadMsg
      2      0   gp_GetHeadNotificationMsg
      0      0   gp_GetPHeadCmdPayload
      0      0   gp_GetPHeadNotification
      0     12   gp_NotificationMsgClean
        0     12   -> gp_CmdPayloadMsgClean
        0     12   -> osal_mem_free
      0     79   gp_ResetProxyBasicTblEntry
        0     79   -> osal_memcpy
      0    129   gp_addPairedSinksToMsgQueue
        0    104   -> gp_AddNotificationMsgNode
        0    104   -> gp_getProxyTableByIndex
        0    107   -> osal_memcmp
        0    107   -> osal_memcpy
      0      9   zclGp_HdlIncoming
        0      9   -> zclGp_ProcessInProxyBasic
      1     59   zclGp_ProcessInProxyBasic
        0     43   -> osal_build_uint16
        0     43   -> osal_mem_alloc
        0     46   -> osal_memcpy
        0     50   -> zcl_SendDefaultRspCmd
      1     14   zclGp_RegisterCmdCallbacks
        0     12   -> osal_mem_alloc
        0     14   -> zcl_registerPlugin
      1     41   zclGp_SendGpCommissioningNotificationCommand
        0     30   -> bdb_getZCLFrameCounter
        0     30   -> osal_mem_alloc
        0     30   -> osal_mem_free
        0     33   -> osal_memcpy
        0     41   -> zcl_SendCommand
      1     26   zclGp_SendGpNotificationCommand
        0     22   -> gp_AddCmdPayloadMsgNode
        0     22   -> gp_addPairedSinksToMsgQueue
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
        0     26   -> osal_start_timerEx
      1     35   zclGp_SendGpProxyTableResponse
        0     24   -> osal_mem_alloc
        0     24   -> osal_mem_free
        0     27   -> osal_memcpy
        0     35   -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_1
      65  ?<Constant {255, 255, 255, 255, 255, 255, 255,_2
      12  ?<Constant {{0}}>
       6  ??Subroutine45_0
      19  ??Subroutine46_0
      18  ??Subroutine47_0
      10  ??Subroutine48_0
       4  ??Subroutine49_0
       4  ??Subroutine50_0
      10  ??Subroutine51_0
       4  ??Subroutine52_0
       4  ??Subroutine53_0
       6  ??Subroutine54_0
       8  ??Subroutine55_0
       6  ??Subroutine56_0
       6  ??Subroutine57_0
       1  ??Subroutine58_0
       4  ??Subroutine59_0
       8  ??Subroutine60_0
       5  ?Subroutine0
       5  ?Subroutine1
      23  ?Subroutine10
      16  ?Subroutine11
       4  ?Subroutine12
       6  ?Subroutine13
       6  ?Subroutine14
      20  ?Subroutine15
      16  ?Subroutine16
       4  ?Subroutine17
      15  ?Subroutine18
      14  ?Subroutine19
       8  ?Subroutine2
       7  ?Subroutine20
      15  ?Subroutine21
       4  ?Subroutine22
       6  ?Subroutine23
      13  ?Subroutine24
       3  ?Subroutine25
      12  ?Subroutine26
       9  ?Subroutine27
       4  ?Subroutine28
       8  ?Subroutine29
       8  ?Subroutine3
       8  ?Subroutine30
       7  ?Subroutine31
      14  ?Subroutine32
       4  ?Subroutine33
       7  ?Subroutine34
       5  ?Subroutine35
       5  ?Subroutine36
      13  ?Subroutine37
       5  ?Subroutine38
       5  ?Subroutine39
       5  ?Subroutine4
       4  ?Subroutine40
       9  ?Subroutine41
       8  ?Subroutine42
      11  ?Subroutine43
      15  ?Subroutine44
      10  ?Subroutine5
       3  ?Subroutine6
       9  ?Subroutine7
      23  ?Subroutine8
       5  ?Subroutine9
       4  __Constant_32
     119  gp_AddCmdPayloadMsgNode
       6  gp_AddCmdPayloadMsgNode::?relay
      94  gp_AddNotificationMsgNode
       6  gp_AddNotificationMsgNode::?relay
      61  gp_CmdPayloadMsgClean
       6  gp_CmdPayloadMsgClean::?relay
      48  gp_CreateCmdPayloadMsgList
       6  gp_CreateCmdPayloadMsgList::?relay
      37  gp_CreateNotificationMsgList
       6  gp_CreateNotificationMsgList::?relay
       9  gp_GetHeadCmdPayloadMsg
       6  gp_GetHeadCmdPayloadMsg::?relay
       7  gp_GetHeadNotificationMsg
       6  gp_GetHeadNotificationMsg::?relay
       7  gp_GetPHeadCmdPayload
       6  gp_GetPHeadCmdPayload::?relay
       7  gp_GetPHeadNotification
       6  gp_GetPHeadNotification::?relay
     119  gp_NotificationMsgClean
       6  gp_NotificationMsgClean::?relay
      59  gp_ResetProxyBasicTblEntry
       6  gp_ResetProxyBasicTblEntry::?relay
     669  gp_addPairedSinksToMsgQueue
       6  gp_addPairedSinksToMsgQueue::?relay
       2  pCmdPayloadMsgHead
       2  pNotificationMsgHead
       2  zclGpCBs
       1  zclGpPluginRegisted
     105  zclGp_HdlIncoming
       6  zclGp_HdlIncoming::?relay
     827  zclGp_ProcessInProxyBasic
       6  zclGp_ProcessInProxyBasic::?relay
     141  zclGp_RegisterCmdCallbacks
       6  zclGp_RegisterCmdCallbacks::?relay
     445  zclGp_SendGpCommissioningNotificationCommand
       6  zclGp_SendGpCommissioningNotificationCommand::?relay
     430  zclGp_SendGpNotificationCommand
       6  zclGp_SendGpNotificationCommand::?relay
     338  zclGp_SendGpProxyTableResponse
       6  zclGp_SendGpProxyTableResponse::?relay

 
 4 046 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
   156 bytes in segment XDATA_ROM_C
     7 bytes in segment XDATA_Z
 
   108 bytes of CODE     memory
   152 bytes of CONST    memory (+ 4 bytes shared)
 4 046 bytes of HUGECODE memory
     7 bytes of XDATA    memory

Errors: none
Warnings: none
