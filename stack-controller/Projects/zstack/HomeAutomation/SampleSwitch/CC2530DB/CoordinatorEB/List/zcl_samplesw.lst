###############################################################################
#
# IAR C/C++ Compiler V10.10.1.4655 for 8051               22/Nov/2023  15:42:45
# Copyright 2004-2017 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
#    Command line       =  
#        -f C:\Users\ADMINI~1\AppData\Local\Temp\EWAE8C.tmp
#        (D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
#        -D SECURE=1 -D TC_LINKKEY_JOIN -D NV_INIT -D NV_RESTORE -D
#        MULTICAST_ENABLED=FALSE -D ZCL_READ -D ZCL_DISCOVER -D ZCL_WRITE -D
#        ZCL_BASIC -D ZCL_IDENTIFY -D ISR_KEYINTERRUPT -D HAL_UART=TRUE -D
#        HAL_LCD=FALSE -D ZCL_ON_OFF -D INT_HEAP_LEN=2800 -D
#        HAL_UART_DMA_RX_MAX=256 -D HAL_UART_DMA_TX_MAX=256 -lC
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        -lA
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x00, 0x01, 0x02, 0x03,
#        0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
#        0x0F}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440 -DREJOIN_BACKOFF=900000 -DREJOIN_SCAN=900000
#        -DENABLE_LED4_DISABLE_S1) -f
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\Tools\CC2530DB\f8wZCL.cfg
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\Source\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\bdb\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\gp\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zcl\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\Common\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\Font\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_LCD_SPI\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_OLED\
#        -I
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\HW_LCD\HAL_TFT\
#        -Ohz --require_prototypes)
#    Locale             =  Chinese (Simplified)_China.936
#    List file          =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\List\zcl_samplesw.lst
#    Object file        =  
#        D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\CC2530DB\CoordinatorEB\Obj\zcl_samplesw.r51
#
###############################################################################

D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.c
      1          /**************************************************************************************************
      2            Filename:       zcl_samplesw.c
      3            Revised:        $Date: 2015-08-19 17:11:00 -0700 (Wed, 19 Aug 2015) $
      4            Revision:       $Revision: 44460 $
      5          
      6            Description:    Zigbee Cluster Library - sample switch application.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED �AS IS� WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application implements a ZigBee On/Off Switch, based on Z-Stack 3.0.
     42          
     43            This application is based on the common sample-application user interface. Please see the main
     44            comment in zcl_sampleapp_ui.c. The rest of this comment describes only the content specific for
     45            this sample applicetion.
     46            
     47            Application-specific UI peripherals being used:
     48          
     49            - none (LED1 is currently unused by this application).
     50          
     51            Application-specific menu system:
     52          
     53              <TOGGLE LIGHT> Send an On, Off or Toggle command targeting appropriate devices from the binding table.
     54                Pressing / releasing [OK] will have the following functionality, depending on the value of the 
     55                zclSampleSw_OnOffSwitchActions attribute:
     56                - OnOffSwitchActions == 0: pressing [OK] will send ON command, releasing it will send OFF command;
     57                - OnOffSwitchActions == 1: pressing [OK] will send OFF command, releasing it will send ON command;
     58                - OnOffSwitchActions == 2: pressing [OK] will send TOGGLE command, releasing it will not send any command.
     59          
     60          *********************************************************************/
     61          
     62          #if ! defined ZCL_ON_OFF
     63          #error ZCL_ON_OFF must be defined for this project.
     64          #endif
     65          
     66          /*********************************************************************
     67           * INCLUDES
     68           */
     69          #include "ZComDef.h"
     70          #include "OSAL.h"
     71          #include "OSAL_Memory.h"
     72          #include "nwk_util.h"
     73          #include "AF.h"
     74          #include "ZDApp.h"
     75          #include "ZDObject.h"
     76          #include "ZDProfile.h"
     77          #include "MT_SYS.h"
     78          #include "AddrMgr.h"
     79          #include "OSAL_Timers.h"
     80          
     81          #include "zcl.h"
     82          #include "zcl_general.h"
     83          #include "zcl_closures.h"
     84          #include "zcl_ha.h"
     85          #include "zcl_poll_control.h"
     86          #include "zcl_samplesw.h"

  #define CMD_JC_ZCLREQ          0x7
          ^
"D:\fuzzing-coordinator-response-collection\Projects\zstack\HomeAutomation\SampleSwitch\Source\zcl_samplesw.h",94  Warning[Pe047]: 
          incompatible redefinition of macro "CMD_JC_ZCLREQ" (declared at line
          94)
     87          #include "zcl_diagnostic.h"
     88          
     89          #include "onboard.h"
     90          
     91          /* HAL */
     92          //#include "hal_lcd.h"
     93          #include "hal_led.h"
     94          #include "hal_key.h"
     95          //#include "hal_adc.h"
     96          
     97          #include <stdio.h>
     98          
     99          
    100          #include "bdb.h"
    101          #include "bdb_interface.h"
    102          
    103          //#include <stdio.h>
    104          
    105          /*********************************************************************
    106           * MACROS
    107           */
    108          
    109          #define APP_TITLE "TI Sample Switch"
    110          
    111          /*********************************************************************
    112           * TYPEDEFS
    113           */
    114          
    115          /*********************************************************************
    116           * GLOBAL VARIABLES
    117           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          byte zclSampleSw_TaskID;
   \                     zclSampleSw_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          uint8 zclSampleSwSeqNum;
   \                     zclSampleSwSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    120          uint8 zclSampleSw_OnOffSwitchType = ON_OFF_SWITCH_TYPE_MOMENTARY;
   \                     zclSampleSw_OnOffSwitchType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_OnOffSwitchType>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          uint8 zclSampleSw_OnOffSwitchActions;
   \                     zclSampleSw_OnOffSwitchActions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          static uint8 zcl_transferId = 0;
   \                     zcl_transferId:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    123          
    124          /*********************************************************************
    125           * GLOBAL FUNCTIONS
    126           */
    127          
    128          /*********************************************************************
    129           * LOCAL VARIABLES
    130           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          afAddrType_t zclSampleSw_DstAddr;
   \                     zclSampleSw_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    132          
    133          // Endpoint to allow SYS_APP_MSGs

   \                                 In  segment XDATA_I, align 1, keep-with-next
    134          static endPointDesc_t sampleSw_HAEp =
   \                     sampleSw_HAEp:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleSw_HAEp>`
   \   000007                REQUIRE __INIT_XDATA_I
    135          {
    136            SAMPLESW_HA_ENDPOINT,                  // endpoint
    137            0,
    138            &zclSampleSw_TaskID,
    139            &zclSampleSw_HASimpleDesc,
    140            //(SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    141            (afNetworkLatencyReq_t)0            // No Network Latency req
    142          };
    143          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    144          static endPointDesc_t sampleSw_ZLLEp =
   \                     sampleSw_ZLLEp:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleSw_ZLLEp>`
   \   000007                REQUIRE __INIT_XDATA_I
    145          {
    146            SAMPLESW_ZLL_ENDPOINT,                  // endpoint
    147            0,
    148            &zclSampleSw_TaskID,
    149            &zclSampleSw_ZLLSimpleDesc,
    150            //(SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    151            (afNetworkLatencyReq_t)0            // No Network Latency req
    152          };
    153          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    154          static endPointDesc_t sampleSw_GPEp =
   \                     sampleSw_GPEp:
   \   000000                DS 7
   \   000007                REQUIRE `?<Initializer for sampleSw_GPEp>`
   \   000007                REQUIRE __INIT_XDATA_I
    155          {
    156            SAMPLESW_GP_ENDPOINT,                  // endpoint
    157            0,
    158            &zclSampleSw_TaskID,
    159            &zclSampleSw_GPSimpleDesc,
    160            //(SimpleDescriptionFormat_t *)NULL,  // No Simple description for this test endpoint
    161            (afNetworkLatencyReq_t)0            // No Network Latency req
    162          };
    163          
    164          //static uint8 aProcessCmd[] = { 1, 0, 0, 0 }; // used for reset command, { length + cmd0 + cmd1 + data }
    165          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    166          devStates_t zclSampleSw_NwkState = DEV_INIT;
   \                     zclSampleSw_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zclSampleSw_NwkState>`
   \   000001                REQUIRE __INIT_XDATA_I
    167          
    168          
    169          #define SAMPLESW_TOGGLE_TEST_EVT   0x1000
    170          /*********************************************************************
    171           * LOCAL FUNCTIONS
    172           */
    173          static void zclSampleSw_HandleKeys( byte shift, byte keys );
    174          
    175          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg);
    176          
    177          // Functions to process ZCL Foundation incoming Command/Response messages
    178          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    179          
    180          #define ZCLSAMPLESW_UART_BUF_LEN        256
    181          
    182          static void zclSampleSw_InitUart(void);
    183          static void zclSampleSw_UartCB(uint8 port, uint8 event);
    184          
    185          static afStatus_t inject_zclData(uint16 destNwkAddr, uint8 flag, uint16 ep, uint16 cid, uint16 pid, uint8 cmd, uint8 clusterSpecific, uint8 direction, uint16 manuCode, uint16 len, uint8* cmdFormat);
    186          static void zclSampleSw_ProcessZDOMsgs(zdoIncomingMsg_t *pMsg);
    187          static uint8 zclSampleSw_ProcessUartMsgs( uint8 *uartMsg, uint8 msgLen);
    188          static uint8 locate_ep_given_profile(uint16 profileId);
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static uint8 current_cmd_type = 0;
   \                     current_cmd_type:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    191          static uint8 endpoint_cmd_rx = 0;
   \                     endpoint_cmd_rx:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    192          static uint8 node_cmd_rx = 0;
   \                     node_cmd_rx:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          static uint8 cluster_cmd_rx = 0;
   \                     cluster_cmd_rx:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          static uint8 rx_zcl_cmd_id = 0;
                              ^
Warning[Pe550]: variable "rx_zcl_cmd_id" was set but never used
   \                     rx_zcl_cmd_id:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    195          
    196          /*********************************************************************
    197           * CONSTANTS
    198           */
    199          
    200          /*********************************************************************
    201           * REFERENCED EXTERNALS
    202           */
    203          extern int16 zdpExternalStateTaskID;
    204          
    205          /*********************************************************************
    206           * ZCL General Profile Callback table
    207           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          static zclGeneral_AppCallbacks_t zclSampleSw_CmdCallbacks =
   \                     zclSampleSw_CmdCallbacks:
   \   000000                DS 22
   \   000016                REQUIRE __INIT_XDATA_Z
    209          {
    210            NULL,               // Basic Cluster Reset command
    211            NULL,                                   // Identify Trigger Effect command
    212            NULL,                                   // On/Off cluster commands
    213            NULL,                                   // On/Off cluster enhanced command Off with Effect
    214            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    215            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    216          #ifdef ZCL_LEVEL_CTRL
    217            NULL,                                   // Level Control Move to Level command
    218            NULL,                                   // Level Control Move command
    219            NULL,                                   // Level Control Step command
    220            NULL,                                   // Level Control Stop command
    221          #endif
    222          #ifdef ZCL_SCENES
    223            NULL,                                   // Scene Store Request command
    224            NULL,                                   // Scene Recall Request command
    225          #endif
    226          #ifdef ZCL_ALARMS
    227            NULL,                                   // Alarm (Response) commands
    228          #endif
    229          #ifdef SE_UK_EXT
    230            NULL,                                   // Get Event Log command
    231            NULL,                                   // Publish Event Log command
    232          #endif
    233            NULL,                                   // RSSI Location command
    234            NULL                                   // RSSI Location Response command
    235          };
    236          
    237          
    238          /*********************************************************************
    239           * @fn          zclSampleSw_Init
    240           *
    241           * @brief       Initialization function for the zclGeneral layer.
    242           *
    243           * @param       none
    244           *
    245           * @return      none
    246           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    247          void zclSampleSw_Init( byte task_id )
   \                     zclSampleSw_Init:
    248          {
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    249            printf("Start initialization\n");
   \   00000C                ; Setup parameters for call to function printf
   \   00000C   7A..         MOV       R2,#`?<Constant "Start initialization\\n">` & 0xff
   \   00000E   7B..         MOV       R3,#(`?<Constant "Start initialization\\n">` >> 8) & 0xff
   \   000010   12....       LCALL     `??printf::?relay`; Banked call to: printf
    250            zclSampleSw_TaskID = task_id;
   \   000013   EE           MOV       A,R6
   \   000014   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000017   F0           MOVX      @DPTR,A
    251          
    252            // Set destination address to indirect
    253            zclSampleSw_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   000018   90....       MOV       DPTR,#zclSampleSw_DstAddr + 8
   \   00001B   E4           CLR       A
   \   00001C   F0           MOVX      @DPTR,A
    254            zclSampleSw_DstAddr.endPoint = 0;
   \   00001D   A3           INC       DPTR
   \   00001E   F0           MOVX      @DPTR,A
    255            zclSampleSw_DstAddr.addr.shortAddr = 0;
   \   00001F   90....       MOV       DPTR,#zclSampleSw_DstAddr
   \   000022   F0           MOVX      @DPTR,A
   \   000023   A3           INC       DPTR
   \   000024   F0           MOVX      @DPTR,A
    256          
    257            // Register the Simple Descriptor for this application
    258            bdb_RegisterSimpleDescriptor( &zclSampleSw_HASimpleDesc );
   \   000025                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000025   7A..         MOV       R2,#zclSampleSw_HASimpleDesc & 0xff
   \   000027   7B..         MOV       R3,#(zclSampleSw_HASimpleDesc >> 8) & 0xff
   \   000029   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    259            bdb_RegisterSimpleDescriptor( &zclSampleSw_ZLLSimpleDesc );
   \   00002C                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   00002C   7A..         MOV       R2,#zclSampleSw_ZLLSimpleDesc & 0xff
   \   00002E   7B..         MOV       R3,#(zclSampleSw_ZLLSimpleDesc >> 8) & 0xff
   \   000030   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    260            bdb_RegisterSimpleDescriptor( &zclSampleSw_GPSimpleDesc );
   \   000033                ; Setup parameters for call to function bdb_RegisterSimpleDescriptor
   \   000033   7A..         MOV       R2,#zclSampleSw_GPSimpleDesc & 0xff
   \   000035   7B..         MOV       R3,#(zclSampleSw_GPSimpleDesc >> 8) & 0xff
   \   000037   12....       LCALL     `??bdb_RegisterSimpleDescriptor::?relay`; Banked call to: bdb_RegisterSimpleDescriptor
    261          
    262            // Register the ZCL General Cluster Library callback functions
    263            zclGeneral_RegisterCmdCallbacks( sampleSw_HAEp.endPoint, &zclSampleSw_CmdCallbacks );
   \   00003A                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   00003A   7A..         MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
   \   00003C   7B..         MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
   \   00003E   90....       MOV       DPTR,#sampleSw_HAEp
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    264            zclGeneral_RegisterCmdCallbacks( sampleSw_ZLLEp.endPoint, &zclSampleSw_CmdCallbacks );
   \   000046                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000046   7A..         MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
   \   000048   7B..         MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
   \   00004A   90....       MOV       DPTR,#sampleSw_ZLLEp
   \   00004D   E0           MOVX      A,@DPTR
   \   00004E   F9           MOV       R1,A
   \   00004F   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    265            zclGeneral_RegisterCmdCallbacks( sampleSw_GPEp.endPoint, &zclSampleSw_CmdCallbacks );
   \   000052                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   000052   7A..         MOV       R2,#zclSampleSw_CmdCallbacks & 0xff
   \   000054   7B..         MOV       R3,#(zclSampleSw_CmdCallbacks >> 8) & 0xff
   \   000056   90....       MOV       DPTR,#sampleSw_GPEp
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F9           MOV       R1,A
   \   00005B   12....       LCALL     `??zclGeneral_RegisterCmdCallbacks::?relay`; Banked call to: zclGeneral_RegisterCmdCallbacks
    266          
    267            zclSampleSw_ResetAttributesToDefaultValues();
   \   00005E                ; Setup parameters for call to function zclSampleSw_ResetAttributesToDefaultValues
   \   00005E   12....       LCALL     `??zclSampleSw_ResetAttributesToDefaultValues::?`; Banked call to: zclSampleSw_ResetAttributesToDefaultValues
    268            
    269            // Register the application's attribute list
    270            // zcl_registerAttrList( SAMPLESW_ENDPOINT, zclSampleSw_NumAttributes, zclSampleSw_Attrs );
    271          
    272            // Register the Application to receive the unprocessed Foundation command/response messages
    273            zcl_registerForMsg( zclSampleSw_TaskID );
   \   000061                ; Setup parameters for call to function zcl_registerForMsg
   \   000061   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000064   E0           MOVX      A,@DPTR
   \   000065   F9           MOV       R1,A
   \   000066   12....       LCALL     `??zcl_registerForMsg::?relay`; Banked call to: zcl_registerForMsg
    274            
    275            // Register for all key events - This app will handle all key events
    276            RegisterForKeys( zclSampleSw_TaskID );
   \   000069                ; Setup parameters for call to function RegisterForKeys
   \   000069   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   F9           MOV       R1,A
   \   00006E   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    277            
    278            bdb_RegisterCommissioningStatusCB( zclSampleSw_ProcessCommissioningStatus );
   \   000071                ; Setup parameters for call to function bdb_RegisterCommissioningStatusCB
   \   000071   7A..         MOV       R2,#`??zclSampleSw_ProcessCommissioningStatus::?rela` & 0xff
   \   000073   7B..         MOV       R3,#(`??zclSampleSw_ProcessCommissioningStatus::?rela` >> 8) & 0xff
   \   000075   12....       LCALL     `??bdb_RegisterCommissioningStatusCB::?relay`; Banked call to: bdb_RegisterCommissioningStatusCB
    279          
    280            // Register for a test endpoint
    281            afRegister( &sampleSw_HAEp );
   \   000078                ; Setup parameters for call to function afRegister
   \   000078   7A..         MOV       R2,#sampleSw_HAEp & 0xff
   \   00007A   7B..         MOV       R3,#(sampleSw_HAEp >> 8) & 0xff
   \   00007C   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    282            afRegister( &sampleSw_ZLLEp);
   \   00007F                ; Setup parameters for call to function afRegister
   \   00007F   7A..         MOV       R2,#sampleSw_ZLLEp & 0xff
   \   000081   7B..         MOV       R3,#(sampleSw_ZLLEp >> 8) & 0xff
   \   000083   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    283            afRegister( &sampleSw_GPEp);
   \   000086                ; Setup parameters for call to function afRegister
   \   000086   7A..         MOV       R2,#sampleSw_GPEp & 0xff
   \   000088   7B..         MOV       R3,#(sampleSw_GPEp >> 8) & 0xff
   \   00008A   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    284            printf("Finish initialization\n");
   \   00008D                ; Setup parameters for call to function printf
   \   00008D   7A..         MOV       R2,#`?<Constant "Finish initialization\\n">` & 0xff
   \   00008F   7B..         MOV       R3,#(`?<Constant "Finish initialization\\n">` >> 8) & 0xff
   \   000091   12....       LCALL     `??printf::?relay`; Banked call to: printf
    285            
    286          #ifdef ZCL_DIAGNOSTIC
    287            // Register the application's callback function to read/write attribute data.
    288            // This is only required when the attribute data format is unknown to ZCL.
    289            zcl_registerReadWriteCB( SAMPLESW_ENDPOINT, zclDiagnostic_ReadWriteAttrCB, NULL );
    290          
    291            if ( zclDiagnostic_InitStats() == ZSuccess )
    292            {
    293              // Here the user could start the timer to save Diagnostics to NV
    294            }
    295          #endif
    296          
    297            zdpExternalStateTaskID = zclSampleSw_TaskID;
   \   000094   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000097   E0           MOVX      A,@DPTR
   \   000098   90....       MOV       DPTR,#zdpExternalStateTaskID
   \   00009B   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    298          
    299            // Form the network and initiate the coordinator
    300            bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_FORMATION | BDB_COMMISSIONING_MODE_FINDING_BINDING);
   \                     ??CrossCallReturnLabel_95:
   \   00009E                ; Setup parameters for call to function bdb_StartCommissioning
   \   00009E   790C         MOV       R1,#0xc
   \   0000A0   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    301          
    302            // Init HAL and Uart
    303            zclSampleSw_InitUart();
   \   0000A3   85..82       MOV       DPL,?XSP + 0
   \   0000A6   85..83       MOV       DPH,?XSP + 1
   \   0000A9   7401         MOV       A,#0x1
   \   0000AB   F0           MOVX      @DPTR,A
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   7404         MOV       A,#0x4
   \   0000B1   F0           MOVX      @DPTR,A
   \   0000B2   7402         MOV       A,#0x2
   \   0000B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B7   E4           CLR       A
   \   0000B8   F0           MOVX      @DPTR,A
   \   0000B9   7403         MOV       A,#0x3
   \   0000BB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BE   E4           CLR       A
   \   0000BF   F0           MOVX      @DPTR,A
   \   0000C0   A3           INC       DPTR
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   740A         MOV       A,#0xa
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   E4           CLR       A
   \   0000C8   F0           MOVX      @DPTR,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   04           INC       A
   \   0000CB   F0           MOVX      @DPTR,A
   \   0000CC   7412         MOV       A,#0x12
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   E4           CLR       A
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3   A3           INC       DPTR
   \   0000D4   F0           MOVX      @DPTR,A
   \   0000D5   7405         MOV       A,#0x5
   \   0000D7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DA   7406         MOV       A,#0x6
   \   0000DC   F0           MOVX      @DPTR,A
   \   0000DD   7416         MOV       A,#0x16
   \   0000DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E2   7401         MOV       A,#0x1
   \   0000E4   F0           MOVX      @DPTR,A
   \   0000E5   741B         MOV       A,#0x1b
   \   0000E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000EA   74..         MOV       A,#`??zclSampleSw_UartCB::?relay` & 0xff
   \   0000EC   F0           MOVX      @DPTR,A
   \   0000ED   A3           INC       DPTR
   \   0000EE   74..         MOV       A,#(`??zclSampleSw_UartCB::?relay` >> 8) & 0xff
   \   0000F0   F0           MOVX      @DPTR,A
   \   0000F1                ; Setup parameters for call to function HalUARTOpen
   \   0000F1   AA..         MOV       R2,?XSP + 0
   \   0000F3   AB..         MOV       R3,?XSP + 1
   \   0000F5   7900         MOV       R1,#0x0
   \   0000F7   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    304            /**
    305             * JC NOTES: Register a list of ZDO messages
    306             * Device_annce: Would like to know when any new devices join the network.
    307             * Active endpoint response: Would like to know which active endpoints the target device has.
    308             * Simple Descriptor response: Would like to know which clusters are running on the given endpoint.
    309            **/
    310            ZDO_RegisterForZDOMsg(task_id, Node_Desc_rsp);
   \   0000FA                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000FA   7A02         MOV       R2,#0x2
   \   0000FC   7B80         MOV       R3,#-0x80
   \   0000FE   EE           MOV       A,R6
   \   0000FF   F9           MOV       R1,A
   \   000100   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    311            ZDO_RegisterForZDOMsg(task_id, Active_EP_rsp);
   \   000103                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000103   7A05         MOV       R2,#0x5
   \   000105   7B80         MOV       R3,#-0x80
   \   000107   EE           MOV       A,R6
   \   000108   F9           MOV       R1,A
   \   000109   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    312            ZDO_RegisterForZDOMsg(task_id, Simple_Desc_rsp);
   \   00010C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00010C   7A04         MOV       R2,#0x4
   \   00010E   7B80         MOV       R3,#-0x80
   \   000110   EE           MOV       A,R6
   \   000111   F9           MOV       R1,A
   \   000112   12....       LCALL     `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
    313          
    314          }
   \   000115   741D         MOV       A,#0x1d
   \   000117   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011A   7F01         MOV       R7,#0x1
   \   00011C   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    315          
    316          /*********************************************************************
    317           * @fn          zclSample_event_loop
    318           *
    319           * @brief       Event Loop Processor for zclGeneral.
    320           *
    321           * @param       none
    322           *
    323           * @return      none
    324           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    325          uint16 zclSampleSw_event_loop( uint8 task_id, uint16 events )
   \                     zclSampleSw_event_loop:
    326          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   7404         MOV       A,#0x4
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   EA           MOV       A,R2
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   EB           MOV       A,R3
   \   000013   F0           MOVX      @DPTR,A
    327            afIncomingMSGPacket_t *MSGpkt;
    328            (void)task_id;  // Intentionally unreferenced parameter
    329            
    330            if ( events & SYS_EVENT_MSG )
   \   000014   7404         MOV       A,#0x4
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   5480         ANL       A,#0x80
   \   00001D   6003         JZ        $+5
   \   00001F   02....       LJMP      ??zclSampleSw_event_loop_0 & 0xFFFF
    331            {
    332              while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclSampleSw_TaskID )) )
    333              {
    334                switch ( MSGpkt->hdr.event )
    335                {
    336                  case ZDO_CB_MSG:
    337                  {
    338                    // Incomming ZDO messages which the application subscribed to (By ZDO_RegisterForZDOMsg)
    339                    zclSampleSw_ProcessZDOMsgs((zdoIncomingMsg_t *)MSGpkt);
    340                    break;
    341                  }
    342                  case ZCL_INCOMING_MSG:
    343                  {
    344                    // Incoming ZCL Foundation command/response messages
    345                    zclSampleSw_ProcessIncomingMsg((zclIncomingMsg_t *)MSGpkt);
    346                    break;
    347                  }
    348                  case KEY_CHANGE:
    349                  {
    350                    zclSampleSw_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    351                    break;
    352                  }
    353                  case ZDO_STATE_CHANGE:
    354                  {
    355                    break;
    356                  }
    357                  case CMD_JC_ZCLREQ: // Here we abuse the self-defined UART event CMD_JC_ZCLREQ as the system event
    358                  {
    359                    uint32 cur_tick_count = osal_get_timeoutEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT);
    360                    uint32 elapsed_tick_count = SAMPLEAPP_ACT_TIMEOUT - cur_tick_count;
    361          
    362                    if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
    363                      uint8 frame_length = ((uint8*)MSGpkt)[4];
    364                      uint8 final_length = frame_length+4;
    365                      uint8 *final_frame = osal_mem_alloc(final_length); // Add the execution time
    366                      for(int i = 0; i< frame_length; i++) {
    367                        final_frame[i] = ((uint8*)MSGpkt)[i];
    368                      }
    369                      final_frame[frame_length] = (uint8)(elapsed_tick_count & 0x000000ff);
    370                      final_frame[frame_length+1] = (uint8)((elapsed_tick_count>>8) & 0x000000ff);
    371                      final_frame[frame_length+2] = (uint8)((elapsed_tick_count>>16) & 0x000000ff);
    372                      final_frame[frame_length+3] = (uint8)((elapsed_tick_count>>24) & 0x000000ff);
    373                      HalUARTWrite(HAL_UART_PORT_0, final_frame, final_length);
    374                      osal_mem_free(final_frame);
    375                    }
    376                    break;
    377                  }
    378                  default:
    379                  {
    380                    break;
    381                  }
    382                }
    383          
    384                // Release the memory
    385                osal_msg_deallocate( (uint8 *)MSGpkt );
    386              }
    387          
    388              // return unprocessed events
    389              return (events ^ SYS_EVENT_MSG);
    390            }
    391          
    392            // When activation Event timeout SAMPLEAPP_ACT_TIMEOUT reaches
    393            if ( events & SAMPLEAPP_ACT_EVT )
   \   000022   7404         MOV       A,#0x4
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   E0           MOVX      A,@DPTR
   \   000028   5440         ANL       A,#0x40
   \   00002A   7003         JNZ       $+5
   \   00002C   02....       LJMP      ??zclSampleSw_event_loop_1 & 0xFFFF
    394            {
    395              uint16 rsps[2] = {0}; uint8 length = 0;
   \   00002F   90....       MOV       DPTR,#`?<Constant {0, 0}>`
   \   000032   7406         MOV       A,#0x6
   \   000034   12....       LCALL     ?XSTACK_DISP102_8
   \   000037   7404         MOV       A,#0x4
   \   000039   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    396              rsps[length++] = current_cmd_type;
   \   00003C   90....       MOV       DPTR,#current_cmd_type
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   F8           MOV       R0,A
   \   000041   7406         MOV       A,#0x6
   \   000043   12....       LCALL     ?XSTACK_DISP0_8
   \   000046   12....       LCALL     ?Subroutine9 & 0xFFFF
    397              rsps[length++] = ERR_CMD_TIMEOUT;
   \                     ??CrossCallReturnLabel_102:
   \   000049   7408         MOV       A,#0x8
   \   00004B   12....       LCALL     ?XSTACK_DISP0_8
   \   00004E   74FC         MOV       A,#-0x4
   \   000050   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    398              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   \                     ??CrossCallReturnLabel_96:
   \   000053                ; Setup parameters for call to function HalUARTWrite
   \   000053   7C04         MOV       R4,#0x4
   \   000055   FD           MOV       R5,A
   \   000056   7406         MOV       A,#0x6
   \   000058   12....       LCALL     ?XSTACK_DISP101_8
   \   00005B   7900         MOV       R1,#0x0
   \   00005D   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    399              return ( events ^ SAMPLEAPP_ACT_EVT );
   \   000060   7404         MOV       A,#0x4
   \   000062   12....       LCALL     ?XSTACK_DISP0_8
   \   000065   E0           MOVX      A,@DPTR
   \   000066   6440         XRL       A,#0x40
   \   000068   FA           MOV       R2,A
   \   000069   A3           INC       DPTR
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   02....       LJMP      ??zclSampleSw_event_loop_2 & 0xFFFF
    400            }
   \                     ??zclSampleSw_event_loop_3:
   \   00006E   85..82       MOV       DPL,?XSP + 0
   \   000071   85..83       MOV       DPH,?XSP + 1
   \   000074   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000077   E0           MOVX      A,@DPTR
   \   000078   C0E0         PUSH      A
   \   00007A   7402         MOV       A,#0x2
   \   00007C   12....       LCALL     ?XSTACK_DISP0_8
   \   00007F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000082   D0E0         POP       A
   \   000084   F0           MOVX      @DPTR,A
   \   000085   08           INC       R0
   \   000086   E8           MOV       A,R0
   \   000087   7001         JNZ       ??zclSampleSw_event_loop_4
   \   000089   09           INC       R1
   \                     ??zclSampleSw_event_loop_4:
   \   00008A   C3           CLR       C
   \   00008B   E8           MOV       A,R0
   \   00008C   9A           SUBB      A,R2
   \   00008D   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000090   40DC         JC        ??zclSampleSw_event_loop_3
   \   000092   7402         MOV       A,#0x2
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   E0           MOVX      A,@DPTR
   \   000098   2A           ADD       A,R2
   \   000099   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00009C   8A82         MOV       DPL,R2
   \   00009E   8B83         MOV       DPH,R3
   \   0000A0   E5..         MOV       A,?V0
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   A3           INC       DPTR
   \   0000A4   E5..         MOV       A,?V1
   \   0000A6   F0           MOVX      @DPTR,A
   \   0000A7   85....       MOV       ?V4,?V0
   \   0000AA   F5..         MOV       ?V5,A
   \   0000AC   85....       MOV       ?V6,?V2
   \   0000AF   85....       MOV       ?V7,?V3
   \   0000B2   7410         MOV       A,#0x10
   \   0000B4   78..         MOV       R0,#?V4
   \   0000B6   12....       LCALL     ?UL_SHR
   \   0000B9   8A82         MOV       DPL,R2
   \   0000BB   8B83         MOV       DPH,R3
   \   0000BD   A3           INC       DPTR
   \   0000BE   A3           INC       DPTR
   \   0000BF   E5..         MOV       A,?V4
   \   0000C1   F0           MOVX      @DPTR,A
   \   0000C2   7418         MOV       A,#0x18
   \   0000C4   78..         MOV       R0,#?V0
   \   0000C6   12....       LCALL     ?UL_SHR
   \   0000C9   8A82         MOV       DPL,R2
   \   0000CB   8B83         MOV       DPH,R3
   \   0000CD   A3           INC       DPTR
   \   0000CE   A3           INC       DPTR
   \   0000CF   A3           INC       DPTR
   \   0000D0   E5..         MOV       A,?V0
   \   0000D2   F0           MOVX      @DPTR,A
   \   0000D3                ; Setup parameters for call to function HalUARTWrite
   \   0000D3   EE           MOV       A,R6
   \   0000D4   FC           MOV       R4,A
   \   0000D5   7D00         MOV       R5,#0x0
   \   0000D7   7402         MOV       A,#0x2
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000DF   7900         MOV       R1,#0x0
   \   0000E1   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   0000E4                ; Setup parameters for call to function osal_mem_free
   \   0000E4   7402         MOV       A,#0x2
   \   0000E6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000EC   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??zclSampleSw_event_loop_5:
   \   0000EF                ; Setup parameters for call to function osal_msg_deallocate
   \   0000EF   85..82       MOV       DPL,?XSP + 0
   \   0000F2   85..83       MOV       DPH,?XSP + 1
   \   0000F5   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000F8   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??zclSampleSw_event_loop_0:
   \   0000FB                ; Setup parameters for call to function osal_msg_receive
   \   0000FB   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   0000FE   E0           MOVX      A,@DPTR
   \   0000FF   F9           MOV       R1,A
   \   000100   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000103   85..82       MOV       DPL,?XSP + 0
   \   000106   85..83       MOV       DPH,?XSP + 1
   \   000109   EA           MOV       A,R2
   \   00010A   F0           MOVX      @DPTR,A
   \   00010B   A3           INC       DPTR
   \   00010C   EB           MOV       A,R3
   \   00010D   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000110   F9           MOV       R1,A
   \   000111   E8           MOV       A,R0
   \   000112   49           ORL       A,R1
   \   000113   7003         JNZ       $+5
   \   000115   02....       LJMP      ??zclSampleSw_event_loop_6 & 0xFFFF
   \   000118   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00011B   E0           MOVX      A,@DPTR
   \   00011C   24F9         ADD       A,#-0x7
   \   00011E   6045         JZ        ??zclSampleSw_event_loop_7
   \   000120   24D3         ADD       A,#-0x2d
   \   000122   6015         JZ        ??zclSampleSw_event_loop_8
   \   000124   2474         ADD       A,#0x74
   \   000126   602B         JZ        ??zclSampleSw_event_loop_9
   \   000128   24ED         ADD       A,#-0x13
   \   00012A   70C3         JNZ       ??zclSampleSw_event_loop_5
   \   00012C                ; Setup parameters for call to function zclSampleSw_ProcessZDOMsgs
   \   00012C   85..82       MOV       DPL,?XSP + 0
   \   00012F   85..83       MOV       DPH,?XSP + 1
   \   000132   E0           MOVX      A,@DPTR
   \   000133   FA           MOV       R2,A
   \   000134   12....       LCALL     `??zclSampleSw_ProcessZDOMsgs::?relay`; Banked call to: zclSampleSw_ProcessZDOMsgs
   \   000137   80B6         SJMP      ??zclSampleSw_event_loop_5
   \                     ??zclSampleSw_event_loop_8:
   \   000139   85..82       MOV       DPL,?XSP + 0
   \   00013C   85..83       MOV       DPH,?XSP + 1
   \   00013F   A3           INC       DPTR
   \   000140   E0           MOVX      A,@DPTR
   \   000141   C8           XCH       A,R0
   \   000142   2417         ADD       A,#0x17
   \   000144   F582         MOV       DPL,A
   \   000146   E4           CLR       A
   \   000147   38           ADDC      A,R0
   \   000148   F583         MOV       DPH,A
   \   00014A   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00014D   EA           MOV       A,R2
   \   00014E   4B           ORL       A,R3
   \   00014F   609E         JZ        ??zclSampleSw_event_loop_5
   \   000151                ; Setup parameters for call to function osal_mem_free
   \   000151   8099         SJMP      ??CrossCallReturnLabel_35
   \                     ??zclSampleSw_event_loop_9:
   \   000153                ; Setup parameters for call to function zclSampleSw_HandleKeys
   \   000153   85..82       MOV       DPL,?XSP + 0
   \   000156   85..83       MOV       DPH,?XSP + 1
   \   000159   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00015C   A3           INC       DPTR
   \   00015D   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000160   12....       LCALL     `??zclSampleSw_HandleKeys::?relay`; Banked call to: zclSampleSw_HandleKeys
   \   000163   808A         SJMP      ??zclSampleSw_event_loop_5
   \                     ??zclSampleSw_event_loop_7:
   \   000165   75..88       MOV       ?V0,#-0x78
   \   000168   75..13       MOV       ?V1,#0x13
   \   00016B   75..00       MOV       ?V2,#0x0
   \   00016E   75..00       MOV       ?V3,#0x0
   \   000171                ; Setup parameters for call to function osal_get_timeoutEx
   \   000171   7A40         MOV       R2,#0x40
   \   000173   7B00         MOV       R3,#0x0
   \   000175   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000178   E0           MOVX      A,@DPTR
   \   000179   F9           MOV       R1,A
   \   00017A   12....       LCALL     `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   00017D   8A..         MOV       ?V4,R2
   \   00017F   8B..         MOV       ?V5,R3
   \   000181   8C..         MOV       ?V6,R4
   \   000183   8D..         MOV       ?V7,R5
   \   000185   78..         MOV       R0,#?V0
   \   000187   79..         MOV       R1,#?V4
   \   000189   12....       LCALL     ?L_SUB
   \   00018C                ; Setup parameters for call to function osal_stop_timerEx
   \   00018C   7A40         MOV       R2,#0x40
   \   00018E   7B00         MOV       R3,#0x0
   \   000190   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000193   E0           MOVX      A,@DPTR
   \   000194   F9           MOV       R1,A
   \   000195   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000198   E9           MOV       A,R1
   \   000199   6406         XRL       A,#0x6
   \   00019B   7003         JNZ       $+5
   \   00019D   02....       LJMP      ??zclSampleSw_event_loop_5 & 0xFFFF
   \   0001A0   85..82       MOV       DPL,?XSP + 0
   \   0001A3   85..83       MOV       DPH,?XSP + 1
   \   0001A6   E0           MOVX      A,@DPTR
   \   0001A7   F8           MOV       R0,A
   \   0001A8   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0001AB   A3           INC       DPTR
   \   0001AC   A3           INC       DPTR
   \   0001AD   A3           INC       DPTR
   \   0001AE   E0           MOVX      A,@DPTR
   \   0001AF   F5..         MOV       ?V4,A
   \   0001B1   7404         MOV       A,#0x4
   \   0001B3   25..         ADD       A,?V4
   \   0001B5   FE           MOV       R6,A
   \   0001B6                ; Setup parameters for call to function osal_mem_alloc
   \   0001B6   FA           MOV       R2,A
   \   0001B7   7B00         MOV       R3,#0x0
   \   0001B9   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001BC   7402         MOV       A,#0x2
   \   0001BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0001C1   EA           MOV       A,R2
   \   0001C2   F0           MOVX      @DPTR,A
   \   0001C3   A3           INC       DPTR
   \   0001C4   EB           MOV       A,R3
   \   0001C5   F0           MOVX      @DPTR,A
   \   0001C6   7800         MOV       R0,#0x0
   \   0001C8   7900         MOV       R1,#0x0
   \   0001CA   AA..         MOV       R2,?V4
   \   0001CC   02....       LJMP      ??zclSampleSw_event_loop_4 & 0xFFFF
   \                     ??zclSampleSw_event_loop_6:
   \   0001CF   7404         MOV       A,#0x4
   \   0001D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0001D4   E0           MOVX      A,@DPTR
   \   0001D5   FA           MOV       R2,A
   \   0001D6   A3           INC       DPTR
   \   0001D7   E0           MOVX      A,@DPTR
   \   0001D8   6480         XRL       A,#0x80
   \                     ??zclSampleSw_event_loop_2:
   \   0001DA   FB           MOV       R3,A
   \   0001DB   8004         SJMP      ??zclSampleSw_event_loop_10
    401            
    402            // Rejoin
    403          #ifdef ZDO_COORDINATOR
    404          #else
    405            if ( events & SAMPLEAPP_REJOIN_EVT )
    406            {
    407             bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING |
    408                                BDB_COMMISSIONING_MODE_FINDING_BINDING );
    409              
    410              return ( events ^ SAMPLEAPP_REJOIN_EVT );
    411            }
    412          #endif
    413            
    414            // Discard unknown events
    415            return 0;
   \                     ??zclSampleSw_event_loop_1:
   \   0001DD   7A00         MOV       R2,#0x0
   \   0001DF   7B00         MOV       R3,#0x0
   \                     ??zclSampleSw_event_loop_10:
   \   0001E1   740A         MOV       A,#0xa
   \   0001E3                REQUIRE ?Subroutine0
   \   0001E3                ; // Fall through to label ?Subroutine0
    416          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E9           MOV       A,R1
   \   000001                REQUIRE ??Subroutine34_0
   \   000001                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   9400         SUBB      A,#0x0
   \   000002   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000004   65D0         XRL       A,PSW
   \   000006   33           RLC       A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   FC           MOV       R4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   39           ADDC      A,R1
   \   000006   8C82         MOV       DPL,R4
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FB           MOV       R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E8           MOV       A,R0
   \   000001                REQUIRE ??Subroutine35_0
   \   000001                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F8           MOV       R0,A
   \   000001   A3           INC       DPTR
   \   000002   E0           MOVX      A,@DPTR
   \   000003   3400         ADDC      A,#0x0
   \   000005   F9           MOV       R1,A
   \   000006   E8           MOV       A,R0
   \   000007   FA           MOV       R2,A
   \   000008   E9           MOV       A,R1
   \   000009   FB           MOV       R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine36_0
   \   000006                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC       DPTR
   \   000001   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   F9           MOV       R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FA           MOV       R2,A
   \   000002   85..82       MOV       DPL,?XSP + 0
   \   000005   85..83       MOV       DPH,?XSP + 1
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   22           RET
    417          
    418          //static void hexStr_2_Bytes(uint8* dest, char* str, int length)
    419          //{
    420          //  int i, n;
    421          //  for(i=0; i<length; i++)
    422          //  {
    423          //    sscanf(str+2*i, "%2X", &n);
    424          //    dest[i] = (uint8)n;
    425          //  }
    426          //}
    427          
    428          /*********************************************************************
    429           * @fn      zclSampleSw_ProcessZDOMsgs
    430           *
    431           * @brief   Called when this node receives a ZDO/ZDP response.
    432           *
    433           * @param   none
    434           *
    435           * @return  status
    436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    437          static void zclSampleSw_ProcessZDOMsgs( zdoIncomingMsg_t *pMsg )
   \                     zclSampleSw_ProcessZDOMsgs:
    438          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 103
   \   000005   7499         MOV       A,#-0x67
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    439            if (AssocGetWithShort(pMsg->srcAddr.addr.shortAddr) != NULL)
   \   00000E                ; Setup parameters for call to function AssocGetWithShort
   \   00000E   8E82         MOV       DPL,R6
   \   000010   8F83         MOV       DPH,R7
   \   000012   A3           INC       DPTR
   \   000013   A3           INC       DPTR
   \   000014   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000017   12....       LCALL     `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   00001A   8B..         MOV       ?V1,R3
   \   00001C   EA           MOV       A,R2
   \   00001D   45..         ORL       A,?V1
   \   00001F   7003         JNZ       $+5
   \   000021   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    440            {
    441              if (pMsg->clusterID == Device_annce)
   \   000024   EE           MOV       A,R6
   \   000025   240C         ADD       A,#0xc
   \   000027   F582         MOV       DPL,A
   \   000029   E4           CLR       A
   \   00002A   3F           ADDC      A,R7
   \   00002B   F583         MOV       DPH,A
   \   00002D   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000030   7413         MOV       A,#0x13
   \   000032   68           XRL       A,R0
   \   000033   49           ORL       A,R1
   \   000034   701D         JNZ       ??zclSampleSw_ProcessZDOMsgs_1
    442              {
    443                // Send back Device Announcement Info in format: [cmd, nwkAddr, extAddr, capabilities]
    444                ZDO_DeviceAnnce_t Annce;
    445                osal_memset(&Annce, 0, sizeof(ZDO_DeviceAnnce_t));
   \   000036                ; Setup parameters for call to function osal_memset
   \   000036   7C0B         MOV       R4,#0xb
   \   000038   7D00         MOV       R5,#0x0
   \   00003A   7900         MOV       R1,#0x0
   \   00003C   745C         MOV       A,#0x5c
   \   00003E   12....       LCALL     ?XSTACK_DISP101_8
   \   000041   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    446                ZDO_ParseDeviceAnnce(pMsg, &Annce);
   \   000044                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   000044   745C         MOV       A,#0x5c
   \   000046   12....       LCALL     ?XSTACK_DISP102_8
   \   000049   EE           MOV       A,R6
   \   00004A   FA           MOV       R2,A
   \   00004B   EF           MOV       A,R7
   \   00004C   FB           MOV       R3,A
   \   00004D   12....       LCALL     `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   \   000050   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    447              }
    448              else if (pMsg->clusterID == Node_Desc_rsp && node_cmd_rx)
   \                     ??zclSampleSw_ProcessZDOMsgs_1:
   \   000053   7402         MOV       A,#0x2
   \   000055   68           XRL       A,R0
   \   000056   7003         JNZ       ??zclSampleSw_ProcessZDOMsgs_2
   \   000058   7480         MOV       A,#-0x80
   \   00005A   69           XRL       A,R1
   \                     ??zclSampleSw_ProcessZDOMsgs_2:
   \   00005B   6003         JZ        $+5
   \   00005D   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_3 & 0xFFFF
   \   000060   90....       MOV       DPTR,#node_cmd_rx
   \   000063   E0           MOVX      A,@DPTR
   \   000064   7003         JNZ       $+5
   \   000066   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    449              {
    450                // Stop the Timeout watchdog and check its status. If it hast not reached timeouts, do not send UART message back to fuzzer.
    451                if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   000069                ; Setup parameters for call to function osal_stop_timerEx
   \   000069   7A40         MOV       R2,#0x40
   \   00006B   7B00         MOV       R3,#0x0
   \   00006D   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F9           MOV       R1,A
   \   000072   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000075   E9           MOV       A,R1
   \   000076   6406         XRL       A,#0x6
   \   000078   7003         JNZ       $+5
   \   00007A   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    452                  // Send back Node Descriptor response in format: [cmd, stat, nwkAddr, status, LogicalType, CapabilityFlag, ManufactuerCode]
    453                  node_cmd_rx = 0;
   \   00007D   90....       MOV       DPTR,#node_cmd_rx
   \   000080   E4           CLR       A
   \   000081   F0           MOVX      @DPTR,A
    454                  ZDO_NodeDescRsp_t pNDRsp;
    455                  ZDO_ParseNodeDescRsp(pMsg, &pNDRsp);
   \   000082                ; Setup parameters for call to function ZDO_ParseNodeDescRsp
   \   000082   7434         MOV       A,#0x34
   \   000084   12....       LCALL     ?XSTACK_DISP102_8
   \   000087   EE           MOV       A,R6
   \   000088   FA           MOV       R2,A
   \   000089   EF           MOV       A,R7
   \   00008A   FB           MOV       R3,A
   \   00008B   12....       LCALL     `??ZDO_ParseNodeDescRsp::?relay`; Banked call to: ZDO_ParseNodeDescRsp
    456                  uint16 rsps[20] = {0}; uint8 length = 0;
   \   00008E   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   000091   AC..         MOV       R4,?XSP + 0
   \   000093   AD..         MOV       R5,?XSP + 1
   \   000095   7428         MOV       A,#0x28
   \   000097   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    457                  rsps[length++] = CMD_JC_NODEREQ;
   \   00009A   85..82       MOV       DPL,?XSP + 0
   \   00009D   85..83       MOV       DPH,?XSP + 1
   \   0000A0   7402         MOV       A,#0x2
   \   0000A2   12....       LCALL     ?Subroutine8 & 0xFFFF
    458                  rsps[length++] = SUCCESS;
   \                     ??CrossCallReturnLabel_17:
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   E4           CLR       A
   \   0000A9   F0           MOVX      @DPTR,A
   \   0000AA   A3           INC       DPTR
   \   0000AB   F0           MOVX      @DPTR,A
    459                  rsps[length++] = pNDRsp.nwkAddr;
   \   0000AC   7435         MOV       A,#0x35
   \   0000AE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000B4   7404         MOV       A,#0x4
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   12....       LCALL     ?Subroutine10 & 0xFFFF
    460                  rsps[length++] = pNDRsp.status;
   \                     ??CrossCallReturnLabel_20:
   \   0000BC   7434         MOV       A,#0x34
   \   0000BE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C1   E0           MOVX      A,@DPTR
   \   0000C2   F8           MOV       R0,A
   \   0000C3   7406         MOV       A,#0x6
   \   0000C5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C8   12....       LCALL     ?Subroutine9 & 0xFFFF
    461                  rsps[length++] = pNDRsp.nodeDesc.LogicalType;
   \                     ??CrossCallReturnLabel_103:
   \   0000CB   7437         MOV       A,#0x37
   \   0000CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   5407         ANL       A,#0x7
   \   0000D3   F8           MOV       R0,A
   \   0000D4   7408         MOV       A,#0x8
   \   0000D6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D9   12....       LCALL     ?Subroutine9 & 0xFFFF
    462                  rsps[length++] = pNDRsp.nodeDesc.CapabilityFlags;
   \                     ??CrossCallReturnLabel_104:
   \   0000DC   7439         MOV       A,#0x39
   \   0000DE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E1   E0           MOVX      A,@DPTR
   \   0000E2   F8           MOV       R0,A
   \   0000E3   740A         MOV       A,#0xa
   \   0000E5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E8   12....       LCALL     ?Subroutine9 & 0xFFFF
    463                  rsps[length++] = BUILD_UINT16(pNDRsp.nodeDesc.ManufacturerCode[0], pNDRsp.nodeDesc.ManufacturerCode[1]);
   \                     ??CrossCallReturnLabel_105:
   \   0000EB   743A         MOV       A,#0x3a
   \   0000ED   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F0   E0           MOVX      A,@DPTR
   \   0000F1   FA           MOV       R2,A
   \   0000F2   743B         MOV       A,#0x3b
   \   0000F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F7   E0           MOVX      A,@DPTR
   \   0000F8   F9           MOV       R1,A
   \   0000F9   EA           MOV       A,R2
   \   0000FA   F8           MOV       R0,A
   \   0000FB   740C         MOV       A,#0xc
   \   0000FD   12....       LCALL     ?XSTACK_DISP0_8
   \   000100   12....       LCALL     ?Subroutine10 & 0xFFFF
    464                  HalUARTWrite(HAL_UART_PORT_0,  (uint8 *)rsps, length*2);
   \                     ??CrossCallReturnLabel_21:
   \   000103                ; Setup parameters for call to function HalUARTWrite
   \   000103   7C0E         MOV       R4,#0xe
   \   000105   7D00         MOV       R5,#0x0
   \   000107   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_4 & 0xFFFF
    465                }
    466              }
    467              else if (pMsg->clusterID == Active_EP_rsp && endpoint_cmd_rx)
   \                     ??zclSampleSw_ProcessZDOMsgs_3:
   \   00010A   7405         MOV       A,#0x5
   \   00010C   68           XRL       A,R0
   \   00010D   7003         JNZ       ??zclSampleSw_ProcessZDOMsgs_5
   \   00010F   7480         MOV       A,#-0x80
   \   000111   69           XRL       A,R1
   \                     ??zclSampleSw_ProcessZDOMsgs_5:
   \   000112   6003         JZ        $+5
   \   000114   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_6 & 0xFFFF
   \   000117   90....       MOV       DPTR,#endpoint_cmd_rx
   \   00011A   E0           MOVX      A,@DPTR
   \   00011B   7003         JNZ       $+5
   \   00011D   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    468              {
    469                  // Stop the Timeout watchdog and check its status. If it hast not reached timeouts, do not send UART message back to fuzzer.
    470                  if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   000120                ; Setup parameters for call to function osal_stop_timerEx
   \   000120   7A40         MOV       R2,#0x40
   \   000122   7B00         MOV       R3,#0x0
   \   000124   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000127   E0           MOVX      A,@DPTR
   \   000128   F9           MOV       R1,A
   \   000129   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   00012C   E9           MOV       A,R1
   \   00012D   6406         XRL       A,#0x6
   \   00012F   7003         JNZ       $+5
   \   000131   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    471                    // Send back Node Descriptor response in format: [cmd, nwkAddr, activeEP1, activeEP2,...]
    472                    endpoint_cmd_rx = 0;
   \   000134   90....       MOV       DPTR,#endpoint_cmd_rx
   \   000137   E4           CLR       A
   \   000138   F0           MOVX      @DPTR,A
    473                    uint16 rsps[20] = {0}; uint8 length = 0;
   \   000139   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`
   \   00013C   AC..         MOV       R4,?XSP + 0
   \   00013E   AD..         MOV       R5,?XSP + 1
   \   000140   7428         MOV       A,#0x28
   \   000142   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    474                    ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( pMsg );
   \   000145                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000145   EE           MOV       A,R6
   \   000146   FA           MOV       R2,A
   \   000147   EF           MOV       A,R7
   \   000148   FB           MOV       R3,A
   \   000149   12....       LCALL     `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   00014C   8A..         MOV       ?V0,R2
   \   00014E   8B..         MOV       ?V1,R3
   \   000150   AE..         MOV       R6,?V0
   \   000152   AF..         MOV       R7,?V1
    475                    rsps[length++] = CMD_JC_AEPREQ;
   \   000154   85..82       MOV       DPL,?XSP + 0
   \   000157   85..83       MOV       DPH,?XSP + 1
   \   00015A   7403         MOV       A,#0x3
   \   00015C   12....       LCALL     ?Subroutine8 & 0xFFFF
    476                    rsps[length++] = SUCCESS;
   \                     ??CrossCallReturnLabel_18:
   \   00015F   12....       LCALL     ?XSTACK_DISP0_8
   \   000162   E4           CLR       A
   \   000163   F0           MOVX      @DPTR,A
   \   000164   A3           INC       DPTR
   \   000165   F0           MOVX      @DPTR,A
   \   000166   7A02         MOV       R2,#0x2
    477                    for(int i = 0; i < pRsp->cnt; i++)
   \   000168   F8           MOV       R0,A
   \   000169   F9           MOV       R1,A
   \   00016A   8023         SJMP      ??zclSampleSw_ProcessZDOMsgs_7
    478                    {
    479                      rsps[length++] = pRsp->epList[i];
   \                     ??zclSampleSw_ProcessZDOMsgs_8:
   \   00016C   EE           MOV       A,R6
   \   00016D   28           ADD       A,R0
   \   00016E   F582         MOV       DPL,A
   \   000170   EF           MOV       A,R7
   \   000171   39           ADDC      A,R1
   \   000172   F583         MOV       DPH,A
   \   000174   A3           INC       DPTR
   \   000175   A3           INC       DPTR
   \   000176   A3           INC       DPTR
   \   000177   A3           INC       DPTR
   \   000178   E0           MOVX      A,@DPTR
   \   000179   F5..         MOV       ?V0,A
   \   00017B   85..82       MOV       DPL,?XSP + 0
   \   00017E   85..83       MOV       DPH,?XSP + 1
   \   000181   12....       LCALL     ?Subroutine25 & 0xFFFF
    480                    }
   \                     ??CrossCallReturnLabel_70:
   \   000184   E5..         MOV       A,?V0
   \   000186   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000189   0A           INC       R2
   \   00018A   08           INC       R0
   \   00018B   E8           MOV       A,R0
   \   00018C   7001         JNZ       ??zclSampleSw_ProcessZDOMsgs_7
   \   00018E   09           INC       R1
   \                     ??zclSampleSw_ProcessZDOMsgs_7:
   \   00018F   EA           MOV       A,R2
   \   000190   25E0         ADD       A,0xE0 /* A   */
   \   000192   FC           MOV       R4,A
   \   000193   E4           CLR       A
   \   000194   33           RLC       A
   \   000195   FD           MOV       R5,A
   \   000196   8E82         MOV       DPL,R6
   \   000198   8F83         MOV       DPH,R7
   \   00019A   A3           INC       DPTR
   \   00019B   A3           INC       DPTR
   \   00019C   A3           INC       DPTR
   \   00019D   E0           MOVX      A,@DPTR
   \   00019E   F5..         MOV       ?V0,A
   \   0001A0   E8           MOV       A,R0
   \   0001A1   95..         SUBB      A,?V0
   \   0001A3   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   0001A6   40C4         JC        ??zclSampleSw_ProcessZDOMsgs_8
    481                    HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   \   0001A8                ; Setup parameters for call to function HalUARTWrite
   \   0001A8   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_4 & 0xFFFF
    482                  }
    483              }
    484              else if (pMsg->clusterID == Simple_Desc_rsp && cluster_cmd_rx)
   \                     ??zclSampleSw_ProcessZDOMsgs_6:
   \   0001AB   7404         MOV       A,#0x4
   \   0001AD   68           XRL       A,R0
   \   0001AE   7003         JNZ       ??zclSampleSw_ProcessZDOMsgs_9
   \   0001B0   7480         MOV       A,#-0x80
   \   0001B2   69           XRL       A,R1
   \                     ??zclSampleSw_ProcessZDOMsgs_9:
   \   0001B3   6003         JZ        $+5
   \   0001B5   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
   \   0001B8   90....       MOV       DPTR,#cluster_cmd_rx
   \   0001BB   E0           MOVX      A,@DPTR
   \   0001BC   7003         JNZ       $+5
   \   0001BE   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    485              {
    486                // Stop the Timeout watchdog and check its status. If it hast not reached timeouts, do not send UART message back to fuzzer.
    487                if (osal_stop_timerEx(zclSampleSw_TaskID, SAMPLEAPP_ACT_EVT) != INVALID_EVENT_ID) {
   \   0001C1                ; Setup parameters for call to function osal_stop_timerEx
   \   0001C1   7A40         MOV       R2,#0x40
   \   0001C3   7B00         MOV       R3,#0x0
   \   0001C5   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   0001C8   E0           MOVX      A,@DPTR
   \   0001C9   F9           MOV       R1,A
   \   0001CA   12....       LCALL     `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0001CD   E9           MOV       A,R1
   \   0001CE   6406         XRL       A,#0x6
   \   0001D0   7003         JNZ       $+5
   \   0001D2   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_0 & 0xFFFF
    488                  cluster_cmd_rx = 0;
   \   0001D5   90....       MOV       DPTR,#cluster_cmd_rx
   \   0001D8   E4           CLR       A
   \   0001D9   F0           MOVX      @DPTR,A
    489                  ZDO_SimpleDescRsp_t simpleDescRsp;
    490                  osal_memset(&simpleDescRsp, 0, sizeof(ZDO_SimpleDescRsp_t));
   \   0001DA                ; Setup parameters for call to function osal_memset
   \   0001DA   7C0F         MOV       R4,#0xf
   \   0001DC   FD           MOV       R5,A
   \   0001DD   F9           MOV       R1,A
   \   0001DE   744D         MOV       A,#0x4d
   \   0001E0   12....       LCALL     ?XSTACK_DISP101_8
   \   0001E3   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    491                  ZDO_ParseSimpleDescRsp(pMsg, &simpleDescRsp);
   \   0001E6                ; Setup parameters for call to function ZDO_ParseSimpleDescRsp
   \   0001E6   744D         MOV       A,#0x4d
   \   0001E8   12....       LCALL     ?XSTACK_DISP102_8
   \   0001EB   EE           MOV       A,R6
   \   0001EC   FA           MOV       R2,A
   \   0001ED   EF           MOV       A,R7
   \   0001EE   FB           MOV       R3,A
   \   0001EF   12....       LCALL     `??ZDO_ParseSimpleDescRsp::?relay`; Banked call to: ZDO_ParseSimpleDescRsp
    492                  zAddrType_t dstAddr;
    493                  dstAddr.addr.shortAddr = simpleDescRsp.nwkAddr;
   \   0001F2   744E         MOV       A,#0x4e
   \   0001F4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F7   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0001FA   7444         MOV       A,#0x44
   \   0001FC   12....       LCALL     ?XSTACK_DISP0_8
   \   0001FF   12....       LCALL     ?Subroutine10 & 0xFFFF
    494                  dstAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_22:
   \   000202   744C         MOV       A,#0x4c
   \   000204   12....       LCALL     ?XSTACK_DISP0_8
   \   000207   7402         MOV       A,#0x2
   \   000209   F0           MOVX      @DPTR,A
    495                  SimpleDescriptionFormat_t simpleDesc = simpleDescRsp.simpleDesc;
   \   00020A   7450         MOV       A,#0x50
   \   00020C   12....       LCALL     ?XSTACK_DISP0_8
   \   00020F   7428         MOV       A,#0x28
   \   000211   12....       LCALL     ?XSTACK_DISP102_8
   \   000214   740C         MOV       A,#0xc
   \   000216   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    496          
    497                  // Send back Simple Descriptor response in format: [cmd, nwkAddr, endpoint, AppProfId, AppDeviceID, AppDevVer, cluster1, cluster2,...]
    498                  uint16 answer[20] = {0}; uint8 length = 0;
   \   000219   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`
   \   00021C   AC..         MOV       R4,?XSP + 0
   \   00021E   AD..         MOV       R5,?XSP + 1
   \   000220   7428         MOV       A,#0x28
   \   000222   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    499                  answer[length++] = CMD_JC_CLUREQ;
   \   000225   85..82       MOV       DPL,?XSP + 0
   \   000228   85..83       MOV       DPH,?XSP + 1
   \   00022B   7404         MOV       A,#0x4
   \   00022D   12....       LCALL     ?Subroutine8 & 0xFFFF
    500                  answer[length++] = SUCCESS;
   \                     ??CrossCallReturnLabel_19:
   \   000230   12....       LCALL     ?XSTACK_DISP0_8
   \   000233   E4           CLR       A
   \   000234   F0           MOVX      @DPTR,A
   \   000235   A3           INC       DPTR
   \   000236   F0           MOVX      @DPTR,A
    501                  answer[length++] = dstAddr.addr.shortAddr;
   \   000237   7444         MOV       A,#0x44
   \   000239   12....       LCALL     ?XSTACK_DISP0_8
   \   00023C   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   00023F   7404         MOV       A,#0x4
   \   000241   12....       LCALL     ?XSTACK_DISP0_8
   \   000244   12....       LCALL     ?Subroutine10 & 0xFFFF
    502                  answer[length++] = simpleDesc.EndPoint;
   \                     ??CrossCallReturnLabel_23:
   \   000247   7428         MOV       A,#0x28
   \   000249   12....       LCALL     ?XSTACK_DISP0_8
   \   00024C   E0           MOVX      A,@DPTR
   \   00024D   F8           MOV       R0,A
   \   00024E   7406         MOV       A,#0x6
   \   000250   12....       LCALL     ?XSTACK_DISP0_8
   \   000253   12....       LCALL     ?Subroutine9 & 0xFFFF
    503                  answer[length++] = simpleDescRsp.status;
   \                     ??CrossCallReturnLabel_106:
   \   000256   744D         MOV       A,#0x4d
   \   000258   12....       LCALL     ?XSTACK_DISP0_8
   \   00025B   E0           MOVX      A,@DPTR
   \   00025C   F8           MOV       R0,A
   \   00025D   7408         MOV       A,#0x8
   \   00025F   12....       LCALL     ?XSTACK_DISP0_8
   \   000262   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000265   7C0A         MOV       R4,#0xa
   \   000267   FD           MOV       R5,A
    504                  if(simpleDesc.AppNumInClusters > 0)
   \   000268   742E         MOV       A,#0x2e
   \   00026A   12....       LCALL     ?XSTACK_DISP0_8
   \   00026D   E0           MOVX      A,@DPTR
   \   00026E   FE           MOV       R6,A
   \   00026F   7003         JNZ       $+5
   \   000271   02....       LJMP      ??zclSampleSw_ProcessZDOMsgs_4 & 0xFFFF
    505                  {
    506                    answer[length++] = simpleDesc.AppProfId;
   \   000274   7429         MOV       A,#0x29
   \   000276   12....       LCALL     ?XSTACK_DISP0_8
   \   000279   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00027C   EC           MOV       A,R4
   \   00027D   12....       LCALL     ?XSTACK_DISP0_8
   \   000280   12....       LCALL     ?Subroutine10 & 0xFFFF
    507                    answer[length++] = simpleDesc.AppDeviceId;
   \                     ??CrossCallReturnLabel_24:
   \   000283   742B         MOV       A,#0x2b
   \   000285   12....       LCALL     ?XSTACK_DISP0_8
   \   000288   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00028B   740C         MOV       A,#0xc
   \   00028D   12....       LCALL     ?XSTACK_DISP0_8
   \   000290   12....       LCALL     ?Subroutine10 & 0xFFFF
    508                    answer[length++] = simpleDesc.AppDevVer;
   \                     ??CrossCallReturnLabel_25:
   \   000293   742D         MOV       A,#0x2d
   \   000295   12....       LCALL     ?XSTACK_DISP0_8
   \   000298   E0           MOVX      A,@DPTR
   \   000299   540F         ANL       A,#0xf
   \   00029B   F8           MOV       R0,A
   \   00029C   740E         MOV       A,#0xe
   \   00029E   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A1   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   0002A4   7C08         MOV       R4,#0x8
    509                    for (int i = 0; i < simpleDesc.AppNumInClusters; i++)
   \   0002A6   FA           MOV       R2,A
   \   0002A7   FB           MOV       R3,A
    510                    {
    511                      answer[length++] = simpleDesc.pAppInClusterList[i];
   \                     ??zclSampleSw_ProcessZDOMsgs_10:
   \   0002A8   EA           MOV       A,R2
   \   0002A9   F8           MOV       R0,A
   \   0002AA   EB           MOV       A,R3
   \   0002AB   F9           MOV       R1,A
   \   0002AC   E8           MOV       A,R0
   \   0002AD   28           ADD       A,R0
   \   0002AE   F8           MOV       R0,A
   \   0002AF   E9           MOV       A,R1
   \   0002B0   33           RLC       A
   \   0002B1   F9           MOV       R1,A
   \   0002B2   742F         MOV       A,#0x2f
   \   0002B4   12....       LCALL     ?XSTACK_DISP0_8
   \   0002B7   E0           MOVX      A,@DPTR
   \   0002B8   28           ADD       A,R0
   \   0002B9   FD           MOV       R5,A
   \   0002BA   A3           INC       DPTR
   \   0002BB   E0           MOVX      A,@DPTR
   \   0002BC   39           ADDC      A,R1
   \   0002BD   8D82         MOV       DPL,R5
   \   0002BF   F583         MOV       DPH,A
   \   0002C1   E0           MOVX      A,@DPTR
   \   0002C2   F5..         MOV       ?V0,A
   \   0002C4   A3           INC       DPTR
   \   0002C5   E0           MOVX      A,@DPTR
   \   0002C6   F5..         MOV       ?V1,A
   \   0002C8   EC           MOV       A,R4
   \   0002C9   25E0         ADD       A,0xE0 /* A   */
   \   0002CB   F8           MOV       R0,A
   \   0002CC   E4           CLR       A
   \   0002CD   33           RLC       A
   \   0002CE   F9           MOV       R1,A
   \   0002CF   85..82       MOV       DPL,?XSP + 0
   \   0002D2   85..83       MOV       DPH,?XSP + 1
   \   0002D5   E582         MOV       A,DPL
   \   0002D7   28           ADD       A,R0
   \   0002D8   F582         MOV       DPL,A
   \   0002DA   E583         MOV       A,DPH
   \   0002DC   39           ADDC      A,R1
   \   0002DD   F583         MOV       DPH,A
   \   0002DF   E5..         MOV       A,?V0
   \   0002E1   F0           MOVX      @DPTR,A
   \   0002E2   A3           INC       DPTR
   \   0002E3   E5..         MOV       A,?V1
   \   0002E5   F0           MOVX      @DPTR,A
   \   0002E6   0C           INC       R4
    512                    }
   \   0002E7   0A           INC       R2
   \   0002E8   EA           MOV       A,R2
   \   0002E9   7001         JNZ       ??zclSampleSw_ProcessZDOMsgs_11
   \   0002EB   0B           INC       R3
   \                     ??zclSampleSw_ProcessZDOMsgs_11:
   \   0002EC   EE           MOV       A,R6
   \   0002ED   F8           MOV       R0,A
   \   0002EE   C3           CLR       C
   \   0002EF   EA           MOV       A,R2
   \   0002F0   98           SUBB      A,R0
   \   0002F1   EB           MOV       A,R3
   \   0002F2   12....       LCALL     ??Subroutine34_0 & 0xFFFF
    513                  }
   \                     ??CrossCallReturnLabel_92:
   \   0002F5   40B1         JC        ??zclSampleSw_ProcessZDOMsgs_10
   \   0002F7   EC           MOV       A,R4
   \   0002F8   2C           ADD       A,R4
   \   0002F9   FC           MOV       R4,A
   \   0002FA   E4           CLR       A
   \   0002FB   33           RLC       A
   \   0002FC   FD           MOV       R5,A
    514                  HalUARTWrite(HAL_UART_PORT_0, (uint8 *)answer, length*2);
   \                     ??zclSampleSw_ProcessZDOMsgs_4:
   \   0002FD                ; Setup parameters for call to function HalUARTWrite
   \   0002FD   AA..         MOV       R2,?XSP + 0
   \   0002FF   AB..         MOV       R3,?XSP + 1
   \   000301   7900         MOV       R1,#0x0
   \   000303   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    515                }
    516              }
    517            }
    518            else
    519            {
    520              //printf("A ZDO message is received from device %X, but it is not in the association list!\n", pMsg->srcAddr.addr.shortAddr);
    521            }
    522          }
   \                     ??zclSampleSw_ProcessZDOMsgs_0:
   \   000306   7467         MOV       A,#0x67
   \   000308                REQUIRE ?Subroutine1
   \   000308                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   7402         MOV       A,#0x2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E582         MOV       A,DPL
   \   000002   2C           ADD       A,R4
   \   000003   F582         MOV       DPL,A
   \   000005   E583         MOV       A,DPH
   \   000007   3D           ADDC      A,R5
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   22           RET
    523          
    524          /*********************************************************************
    525           * @fn      zclSampleSw_HandleKeys
    526           *
    527           * @brief   Handles all key events for this device.
    528           *
    529           * @param   shift - true if in shift/alt.
    530           * @param   keys - bit field for key events. Valid entries:
    531           *                 HAL_KEY_SW_5
    532           *                 HAL_KEY_SW_4
    533           *                 HAL_KEY_SW_2
    534           *                 HAL_KEY_SW_1
    535           *
    536           * @return  none
    537           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    538          static void zclSampleSw_HandleKeys( byte shift, byte keys )
   \                     zclSampleSw_HandleKeys:
    539          { 
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 61
   \   000005   74C3         MOV       A,#-0x3d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    540            if(keys & HAL_KEY_SW_6)
   \   00000A   EA           MOV       A,R2
   \   00000B   A2E5         MOV       C,0xE0 /* A   */.5
   \   00000D   4003         JC        $+5
   \   00000F   02....       LJMP      ??zclSampleSw_HandleKeys_0 & 0xFFFF
    541            {
    542              uint8 readVal;
    543              static uint8 writeVal = 0;
    544              
    545              char readValStr[30];
    546              char writeValStr[30];
    547              
    548              // init USER_NV_TEST
    549              osal_nv_item_init(USER_NV_TEST, 1, NULL);
   \   000012                ; Setup parameters for call to function osal_nv_item_init
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V2,A
   \   000015   F5..         MOV       ?V3,A
   \   000017   78..         MOV       R0,#?V2
   \   000019   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00001C   7C01         MOV       R4,#0x1
   \   00001E   7D00         MOV       R5,#0x0
   \   000020   7A01         MOV       R2,#0x1
   \   000022   7B04         MOV       R3,#0x4
   \   000024   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000027   7402         MOV       A,#0x2
   \   000029   12....       LCALL     ?DEALLOC_XSTACK8
    550              
    551              // write
    552              sprintf(writeValStr, "Write: %d", writeVal);
   \   00002C                ; Setup parameters for call to function sprintf
   \   00002C   90....       MOV       DPTR,#??writeVal
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   F5..         MOV       ?V2,A
   \   000032   78..         MOV       R0,#?V2
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   7C..         MOV       R4,#`?<Constant "Write: %d">` & 0xff
   \   000039   7D..         MOV       R5,#(`?<Constant "Write: %d">` >> 8) & 0xff
   \   00003B   7403         MOV       A,#0x3
   \   00003D   12....       LCALL     ?XSTACK_DISP101_8
   \   000040   12....       LCALL     `??sprintf::?relay`; Banked call to: sprintf
   \   000043   7402         MOV       A,#0x2
   \   000045   12....       LCALL     ?DEALLOC_XSTACK8
    553              osal_nv_write( USER_NV_TEST, 0, 1, &writeVal );
   \   000048                ; Setup parameters for call to function osal_nv_write
   \   000048   75....       MOV       ?V2,#??writeVal & 0xff
   \   00004B   75....       MOV       ?V3,#(??writeVal >> 8) & 0xff
   \   00004E   78..         MOV       R0,#?V2
   \   000050   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000053   75..01       MOV       ?V2,#0x1
   \   000056   75..00       MOV       ?V3,#0x0
   \   000059   78..         MOV       R0,#?V2
   \   00005B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005E   7C00         MOV       R4,#0x0
   \   000060   7D00         MOV       R5,#0x0
   \   000062   7A01         MOV       R2,#0x1
   \   000064   7B04         MOV       R3,#0x4
   \   000066   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000069   7404         MOV       A,#0x4
   \   00006B   12....       LCALL     ?DEALLOC_XSTACK8
    554              
    555              writeVal++;
   \   00006E   90....       MOV       DPTR,#??writeVal
   \   000071   E0           MOVX      A,@DPTR
   \   000072   04           INC       A
   \   000073   F0           MOVX      @DPTR,A
    556              
    557              // read
    558              osal_nv_read( USER_NV_TEST, 0, 1, &readVal );
   \   000074                ; Setup parameters for call to function osal_nv_read
   \   000074   A8..         MOV       R0,?XSP + 0
   \   000076   A9..         MOV       R1,?XSP + 1
   \   000078   88..         MOV       ?V2,R0
   \   00007A   89..         MOV       ?V3,R1
   \   00007C   78..         MOV       R0,#?V2
   \   00007E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000081   75..01       MOV       ?V2,#0x1
   \   000084   75..00       MOV       ?V3,#0x0
   \   000087   78..         MOV       R0,#?V2
   \   000089   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008C   7C00         MOV       R4,#0x0
   \   00008E   7D00         MOV       R5,#0x0
   \   000090   7A01         MOV       R2,#0x1
   \   000092   7B04         MOV       R3,#0x4
   \   000094   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000097   7404         MOV       A,#0x4
   \   000099   12....       LCALL     ?DEALLOC_XSTACK8
    559              sprintf(readValStr, "Read: %d", readVal);
   \   00009C                ; Setup parameters for call to function sprintf
   \   00009C   85..82       MOV       DPL,?XSP + 0
   \   00009F   85..83       MOV       DPH,?XSP + 1
   \   0000A2   E0           MOVX      A,@DPTR
   \   0000A3   F5..         MOV       ?V2,A
   \   0000A5   78..         MOV       R0,#?V2
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AA   7C..         MOV       R4,#`?<Constant "Read: %d">` & 0xff
   \   0000AC   7D..         MOV       R5,#(`?<Constant "Read: %d">` >> 8) & 0xff
   \   0000AE   7421         MOV       A,#0x21
   \   0000B0   12....       LCALL     ?XSTACK_DISP101_8
   \   0000B3   12....       LCALL     `??sprintf::?relay`; Banked call to: sprintf
   \   0000B6   7402         MOV       A,#0x2
   \   0000B8   12....       LCALL     ?DEALLOC_XSTACK8
    560              
    561              // lcd show
    562              //HalLcdWriteString(writeValStr, HAL_LCD_LINE_1);
    563              //HalLcdWriteString(readValStr,  HAL_LCD_LINE_2);
    564              
    565              // uart show
    566              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)writeValStr, osal_strlen(writeValStr));
   \   0000BB                ; Setup parameters for call to function osal_strlen
   \   0000BB   7401         MOV       A,#0x1
   \   0000BD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000C0   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000C3   8A..         MOV       ?V2,R2
   \   0000C5   8B..         MOV       ?V3,R3
   \   0000C7   AC..         MOV       R4,?V2
   \   0000C9   AD..         MOV       R5,?V3
   \   0000CB                ; Setup parameters for call to function HalUARTWrite
   \   0000CB   7401         MOV       A,#0x1
   \   0000CD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D0   7900         MOV       R1,#0x0
   \   0000D2   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    567              HalUARTWrite(HAL_UART_PORT_0, "\r\n", 2);
   \   0000D5                ; Setup parameters for call to function HalUARTWrite
   \   0000D5   7C02         MOV       R4,#0x2
   \   0000D7   7D00         MOV       R5,#0x0
   \   0000D9   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000DB   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   0000DD   7900         MOV       R1,#0x0
   \   0000DF   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    568              HalUARTWrite(HAL_UART_PORT_0, (uint8 *)readValStr, osal_strlen(readValStr));
   \   0000E2                ; Setup parameters for call to function osal_strlen
   \   0000E2   741F         MOV       A,#0x1f
   \   0000E4   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E7   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   0000EA   8A..         MOV       ?V2,R2
   \   0000EC   8B..         MOV       ?V3,R3
   \   0000EE   AC..         MOV       R4,?V2
   \   0000F0   AD..         MOV       R5,?V3
   \   0000F2                ; Setup parameters for call to function HalUARTWrite
   \   0000F2   741F         MOV       A,#0x1f
   \   0000F4   12....       LCALL     ?XSTACK_DISP101_8
   \   0000F7   7900         MOV       R1,#0x0
   \   0000F9   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    569              HalUARTWrite(HAL_UART_PORT_0, "\r\n", 2);
   \   0000FC                ; Setup parameters for call to function HalUARTWrite
   \   0000FC   7C02         MOV       R4,#0x2
   \   0000FE   7D00         MOV       R5,#0x0
   \   000100   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   000102   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000104   7900         MOV       R1,#0x0
   \   000106   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    570              
    571              // led indication
    572              HalLedSet(HAL_LED_1, HAL_LED_MODE_TOGGLE);
   \   000109                ; Setup parameters for call to function HalLedSet
   \   000109   7A08         MOV       R2,#0x8
   \   00010B   7901         MOV       R1,#0x1
   \   00010D   12....       LCALL     `??HalLedSet::?relay`; Banked call to: HalLedSet
    573            }
    574          }
   \                     ??zclSampleSw_HandleKeys_0:
   \   000110   743D         MOV       A,#0x3d
   \   000112   12....       LCALL     ?DEALLOC_XSTACK8
   \   000115   7F04         MOV       R7,#0x4
   \   000117   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??writeVal:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    575            
    576          /*********************************************************************
    577           * @fn      zclSampleSw_ProcessCommissioningStatus
    578           *
    579           * @brief   Callback in which the status of the commissioning process are reported
    580           *
    581           * @param   bdbCommissioningModeMsg - Context message of the status of a commissioning process
    582           *
    583           * @return  none
    584           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    585          static void zclSampleSw_ProcessCommissioningStatus(bdbCommissioningModeMsg_t *bdbCommissioningModeMsg)
   \                     zclSampleSw_ProcessCommissioningStatus:
    586          {
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    587            switch(bdbCommissioningModeMsg->bdbCommissioningMode)
   \   000004   8A82         MOV       DPL,R2
   \   000006   8B83         MOV       DPH,R3
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   6402         XRL       A,#0x2
   \   00000C   7010         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    588            {
    589              case BDB_COMMISSIONING_FORMATION:
    590                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
   \   00000E   8A82         MOV       DPL,R2
   \   000010   8B83         MOV       DPH,R3
   \   000012   E0           MOVX      A,@DPTR
   \   000013   7009         JNZ       ??zclSampleSw_ProcessCommissioningStatus_0
    591                {
    592                  //After formation, perform nwk steering again plus the remaining commissioning modes that has not been processed yet
    593                  bdb_StartCommissioning(BDB_COMMISSIONING_MODE_NWK_STEERING | bdbCommissioningModeMsg->bdbRemainingCommissioningModes);
   \   000015                ; Setup parameters for call to function bdb_StartCommissioning
   \   000015   A3           INC       DPTR
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \   000018   4402         ORL       A,#0x2
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??bdb_StartCommissioning::?relay`; Banked call to: bdb_StartCommissioning
    594                  //printf("The BDB formation operation succeeds.\n");
    595                }
    596                else
    597                {
    598                  //Want to try other channels?
    599                  //try with bdb_setChannelAttribute
    600                }
    601              break;
    602              case BDB_COMMISSIONING_NWK_STEERING:
    603                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    604                {
    605                  //YOUR JOB:
    606                  //We are on the nwk, what now?
    607                }
    608                else
    609                {
    610                  #ifdef ZDO_COORDINATOR
    611                  #else
    612                  osal_start_timerEx(zclSampleSw_TaskID, 
    613                                     SAMPLEAPP_REJOIN_EVT, 
    614                                     SAMPLEAPP_REJOIN_PERIOD);
    615                  #endif
    616                   
    617                  //See the possible errors for nwk steering procedure
    618                  //No suitable networks found
    619                  //Want to try other channels?
    620                  //try with bdb_setChannelAttribute
    621                }
    622              break;
    623              case BDB_COMMISSIONING_FINDING_BINDING:
    624                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_SUCCESS)
    625                {
    626                  //printf("[BDB finding and binding] Succeed.\n");
    627                }
    628                else if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_FB_NO_IDENTIFY_QUERY_RESPONSE)
    629                {
    630                  //printf("[BDB finding and binding] No identify query response is identified.\n");
    631                }
    632                else if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_FAILURE)
    633                {
    634                  //printf("[BDB finding and binding] Fail.");
    635                }
    636                else
    637                {
    638                  //YOUR JOB:
    639                  //retry?, wait for user interaction?
    640                }
    641              break;
    642              case BDB_COMMISSIONING_INITIALIZATION:
    643                //Initialization notification can only be successful. Failure on initialization 
    644                //only happens for ZED and is notified as BDB_COMMISSIONING_PARENT_LOST notification
    645                
    646                //YOUR JOB:
    647                //We are on a network, what now?
    648                
    649              break;
    650          #if ZG_BUILD_ENDDEVICE_TYPE    
    651              case BDB_COMMISSIONING_PARENT_LOST:
    652                if(bdbCommissioningModeMsg->bdbCommissioningStatus == BDB_COMMISSIONING_NETWORK_RESTORED)
    653                {
    654                  //We did recover from losing parent
    655                }
    656                else
    657                {
    658                  //Parent not found, attempt to rejoin again after a fixed delay
    659                  osal_start_timerEx(zclSampleSw_TaskID, SAMPLEAPP_END_DEVICE_REJOIN_EVT, SAMPLEAPP_END_DEVICE_REJOIN_DELAY);
    660                }
    661              break;
    662          #endif 
    663            }
    664          }
   \                     ??zclSampleSw_ProcessCommissioningStatus_0:
   \   00001E   D083         POP       DPH
   \   000020   D082         POP       DPL
   \   000022   02....       LJMP      ?BRET
    665          /*********************************************************************
    666           * @fn      zclSampleSw_ProcessIncomingMsg
    667           *
    668           * @brief   Process ZCL Foundation incoming message
    669           *
    670           * @param   pInMsg - pointer to the received message
    671           *
    672           * @return  none
    673           */
    674          static void zclSampleSw_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg )
    675          {
    676            switch ( pInMsg->zclHdr.commandID )
    677            {
    678              case ZCL_CMD_READ_RSP:
    679                break;
    680              case ZCL_CMD_WRITE_RSP:
    681                break;
    682              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    683              case ZCL_CMD_CONFIG_REPORT:
    684                //zclSampleSw_ProcessInConfigReportCmd( pInMsg );
    685                break;
    686          
    687              case ZCL_CMD_CONFIG_REPORT_RSP:
    688                break;
    689          
    690              case ZCL_CMD_READ_REPORT_CFG:
    691                //zclSampleSw_ProcessInReadReportCfgCmd( pInMsg );
    692                break;
    693          
    694              case ZCL_CMD_READ_REPORT_CFG_RSP:
    695                //zclSampleSw_ProcessInReadReportCfgRspCmd( pInMsg );
    696                break;
    697          
    698              case ZCL_CMD_REPORT:
    699                //zclSampleSw_ProcessInReportCmd( pInMsg );
    700                break;
    701              case ZCL_CMD_DEFAULT_RSP:
    702                break;
    703              default:
    704                break;
    705            }
    706            if (pInMsg->attrCmd)
    707              osal_mem_free( pInMsg->attrCmd );
    708          }
    709          
    710          /**
    711           * @fn      zclSampleSw_InitUart
    712           *
    713           * @brief   init. and open Uart
    714           */
    715          static void zclSampleSw_InitUart(void)
    716          {
    717            halUARTCfg_t uartConfig;
    718          
    719            /* UART Configuration */
    720            uartConfig.configured           = TRUE;
    721            uartConfig.baudRate             = HAL_UART_BR_115200;
    722            uartConfig.flowControl          = FALSE;
    723            uartConfig.flowControlThreshold = 0;
    724            uartConfig.rx.maxBufSize        = ZCLSAMPLESW_UART_BUF_LEN;
    725            uartConfig.tx.maxBufSize        = 0;
    726            uartConfig.idleTimeout          = 6;
    727            uartConfig.intEnable            = TRUE;
    728            uartConfig.callBackFunc         = zclSampleSw_UartCB;
    729          
    730            /* Start UART */
    731            HalUARTOpen(HAL_UART_PORT_0, &uartConfig);
    732          }
    733          
    734          /*********************************************************************
    735           * @fn      zclSampleSw_ProcessUartMsgs
    736           *
    737           * @brief   Called when this node receives a ZDO/ZDP response.
    738           *
    739           * @param   uint8 *uartMsg
    740           *
    741           * @return  status
    742           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    743          static uint8 zclSampleSw_ProcessUartMsgs( uint8 *uartMsg, uint8 msgLen)
   \                     zclSampleSw_ProcessUartMsgs:
    744          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 54
   \   000005   74CA         MOV       A,#-0x36
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   85..82       MOV       DPL,?XSP + 0
   \   00000D   85..83       MOV       DPH,?XSP + 1
   \   000010   EA           MOV       A,R2
   \   000011   F0           MOVX      @DPTR,A
   \   000012   A3           INC       DPTR
   \   000013   EB           MOV       A,R3
   \   000014   F0           MOVX      @DPTR,A
   \   000015   7417         MOV       A,#0x17
   \   000017   12....       LCALL     ?XSTACK_DISP0_8
   \   00001A   E9           MOV       A,R1
   \   00001B   F0           MOVX      @DPTR,A
    745            uint8 stat = SUCCESS;
   \   00001C   75..00       MOV       ?V0,#0x0
    746            current_cmd_type = uartMsg[0];
   \   00001F   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000022   FC           MOV       R4,A
   \   000023   90....       MOV       DPTR,#current_cmd_type
   \   000026   12....       LCALL     ?Subroutine7 & 0xFFFF
    747            switch (uartMsg[0])
   \                     ??CrossCallReturnLabel_14:
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   2403         ADD       A,#0x3
   \   00002C   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00002F   EC           MOV       A,R4
   \   000030   6025         JZ        ??zclSampleSw_ProcessUartMsgs_0
   \   000032   14           DEC       A
   \   000033   604E         JZ        ??zclSampleSw_ProcessUartMsgs_1
   \   000035   14           DEC       A
   \   000036   7003         JNZ       $+5
   \   000038   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_2 & 0xFFFF
   \   00003B   14           DEC       A
   \   00003C   7003         JNZ       $+5
   \   00003E   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_3 & 0xFFFF
   \   000041   14           DEC       A
   \   000042   7003         JNZ       $+5
   \   000044   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_4 & 0xFFFF
   \   000047   24FD         ADD       A,#-0x3
   \   000049   7003         JNZ       $+5
   \   00004B   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_5 & 0xFFFF
   \   00004E   14           DEC       A
   \   00004F   7003         JNZ       $+5
   \   000051   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_6 & 0xFFFF
   \   000054   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_7 & 0xFFFF
    748            {
    749              case CMD_JC_STEER:         // RX: (uint8)CMD_JC_STEER+(uint8)period  TX: [CMD_JC_STEER,stat]
    750              {
    751                stat = NLME_PermitJoiningRequest(uartMsg[1]);
   \                     ??zclSampleSw_ProcessUartMsgs_0:
   \   000057                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000057   85..82       MOV       DPL,?XSP + 0
   \   00005A   85..83       MOV       DPH,?XSP + 1
   \   00005D   18           DEC       R0
   \   00005E   18           DEC       R0
   \   00005F   18           DEC       R0
   \   000060   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000063   E0           MOVX      A,@DPTR
   \   000064   F9           MOV       R1,A
   \   000065   12....       LCALL     `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000068   E9           MOV       A,R1
   \   000069   F5..         MOV       ?V0,A
    752                uint16 rsps[2] = {0}; uint8 length = 0;
   \   00006B   90....       MOV       DPTR,#`?<Constant {0, 0}>_1`
   \   00006E   7402         MOV       A,#0x2
   \   000070   12....       LCALL     ?XSTACK_DISP102_8
   \   000073   7404         MOV       A,#0x4
   \   000075   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    753                rsps[length++] = CMD_JC_STEER;
   \   000078   7402         MOV       A,#0x2
   \   00007A   12....       LCALL     ?XSTACK_DISP0_8
   \   00007D   E4           CLR       A
   \   00007E   F0           MOVX      @DPTR,A
   \   00007F   A3           INC       DPTR
   \   000080   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_8 & 0xFFFF
    754                rsps[length++] = stat;
    755                HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    756                break;
    757              }
    758              case CMD_JC_LIST:         // RX: (uint8)CMD_JC_LIST   TX: [CMD_JC_LIST,Nwkaddr,nodeRelation]
    759              {
    760                uint16 n_asso = AssocCount(PARENT, CHILD_RFD) + AssocCount(PARENT, CHILD_RFD_RX_IDLE) +\
    761                                AssocCount(PARENT, CHILD_FFD) + AssocCount(PARENT, CHILD_FFD_RX_IDLE);
   \                     ??zclSampleSw_ProcessUartMsgs_1:
   \   000083                ; Setup parameters for call to function AssocCount
   \   000083   7A01         MOV       R2,#0x1
   \   000085   7900         MOV       R1,#0x0
   \   000087   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   00008A   8A..         MOV       ?V2,R2
   \   00008C   8B..         MOV       ?V3,R3
   \   00008E   AF..         MOV       R7,?V3
   \   000090                ; Setup parameters for call to function AssocCount
   \   000090   7A02         MOV       R2,#0x2
   \   000092   7900         MOV       R1,#0x0
   \   000094   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   000097   8B..         MOV       ?V3,R3
   \   000099   E5..         MOV       A,?V2
   \   00009B   2A           ADD       A,R2
   \   00009C   FE           MOV       R6,A
   \   00009D   EF           MOV       A,R7
   \   00009E   35..         ADDC      A,?V3
   \   0000A0   FF           MOV       R7,A
   \   0000A1                ; Setup parameters for call to function AssocCount
   \   0000A1   7A03         MOV       R2,#0x3
   \   0000A3   7900         MOV       R1,#0x0
   \   0000A5   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   0000A8   8B..         MOV       ?V3,R3
   \   0000AA   A9..         MOV       R1,?V3
   \   0000AC   EE           MOV       A,R6
   \   0000AD   2A           ADD       A,R2
   \   0000AE   FE           MOV       R6,A
   \   0000AF   EF           MOV       A,R7
   \   0000B0   39           ADDC      A,R1
   \   0000B1   FF           MOV       R7,A
   \   0000B2                ; Setup parameters for call to function AssocCount
   \   0000B2   7A04         MOV       R2,#0x4
   \   0000B4   7900         MOV       R1,#0x0
   \   0000B6   12....       LCALL     `??AssocCount::?relay`; Banked call to: AssocCount
   \   0000B9   8B..         MOV       ?V3,R3
   \   0000BB   EE           MOV       A,R6
   \   0000BC   2A           ADD       A,R2
   \   0000BD   FE           MOV       R6,A
   \   0000BE   EF           MOV       A,R7
   \   0000BF   35..         ADDC      A,?V3
   \   0000C1   FF           MOV       R7,A
    762                
    763                uint16 rsps[10] = {0}; uint8 length = 0;
   \   0000C2   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>`
   \   0000C5   7422         MOV       A,#0x22
   \   0000C7   12....       LCALL     ?XSTACK_DISP102_8
   \   0000CA   7414         MOV       A,#0x14
   \   0000CC   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    764                rsps[length++] = CMD_JC_LIST;
   \   0000CF   7422         MOV       A,#0x22
   \   0000D1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D4   7401         MOV       A,#0x1
   \   0000D6   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    765                rsps[length++] = stat;
   \                     ??CrossCallReturnLabel_98:
   \   0000D9   7424         MOV       A,#0x24
   \   0000DB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DE   E4           CLR       A
   \   0000DF   F0           MOVX      @DPTR,A
   \   0000E0   A3           INC       DPTR
   \   0000E1   F0           MOVX      @DPTR,A
   \   0000E2   75..02       MOV       ?V1,#0x2
    766                for (uint16 i = 0; i < n_asso; i++)
   \   0000E5   F8           MOV       R0,A
   \   0000E6   F9           MOV       R1,A
   \   0000E7   8065         SJMP      ??zclSampleSw_ProcessUartMsgs_9
    767                {
    768                  rsps[length++] = AssociatedDevList[i].shortAddr;
   \                     ??zclSampleSw_ProcessUartMsgs_10:
   \   0000E9   E8           MOV       A,R0
   \   0000EA   FA           MOV       R2,A
   \   0000EB   E9           MOV       A,R1
   \   0000EC   FB           MOV       R3,A
   \   0000ED   EA           MOV       A,R2
   \   0000EE   75F01C       MOV       B,#0x1c
   \   0000F1   A4           MUL       AB
   \   0000F2   FA           MOV       R2,A
   \   0000F3   85F0..       MOV       ?V2,B
   \   0000F6   75F01C       MOV       B,#0x1c
   \   0000F9   EB           MOV       A,R3
   \   0000FA   A4           MUL       AB
   \   0000FB   25..         ADD       A,?V2
   \   0000FD   FB           MOV       R3,A
   \   0000FE   74..         MOV       A,#AssociatedDevList & 0xff
   \   000100   2A           ADD       A,R2
   \   000101   FA           MOV       R2,A
   \   000102   74..         MOV       A,#(AssociatedDevList >> 8) & 0xff
   \   000104   3B           ADDC      A,R3
   \   000105   FB           MOV       R3,A
   \   000106   8A82         MOV       DPL,R2
   \   000108   8B83         MOV       DPH,R3
   \   00010A   E0           MOVX      A,@DPTR
   \   00010B   F5..         MOV       ?V2,A
   \   00010D   A3           INC       DPTR
   \   00010E   E0           MOVX      A,@DPTR
   \   00010F   F5..         MOV       ?V3,A
   \   000111   7422         MOV       A,#0x22
   \   000113   12....       LCALL     ?XSTACK_DISP0_8
   \   000116   12....       LCALL     ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000119   E5..         MOV       A,?V2
   \   00011B   F0           MOVX      @DPTR,A
   \   00011C   A3           INC       DPTR
   \   00011D   E5..         MOV       A,?V3
   \   00011F   F0           MOVX      @DPTR,A
   \   000120   05..         INC       ?V1
    769                  rsps[length++] = AssociatedDevList[i].nodeRelation;
   \   000122   8A82         MOV       DPL,R2
   \   000124   8B83         MOV       DPH,R3
   \   000126   A3           INC       DPTR
   \   000127   A3           INC       DPTR
   \   000128   A3           INC       DPTR
   \   000129   A3           INC       DPTR
   \   00012A   E0           MOVX      A,@DPTR
   \   00012B   FC           MOV       R4,A
   \   00012C   AA..         MOV       R2,?V1
   \   00012E   EA           MOV       A,R2
   \   00012F   2A           ADD       A,R2
   \   000130   FA           MOV       R2,A
   \   000131   E4           CLR       A
   \   000132   33           RLC       A
   \   000133   FB           MOV       R3,A
   \   000134   7422         MOV       A,#0x22
   \   000136   12....       LCALL     ?XSTACK_DISP0_8
   \   000139   E582         MOV       A,DPL
   \   00013B   2A           ADD       A,R2
   \   00013C   F582         MOV       DPL,A
   \   00013E   E583         MOV       A,DPH
   \   000140   3B           ADDC      A,R3
   \   000141   F583         MOV       DPH,A
   \   000143   EC           MOV       A,R4
   \   000144   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    770                }
   \                     ??CrossCallReturnLabel_99:
   \   000147   05..         INC       ?V1
   \   000149   08           INC       R0
   \   00014A   E8           MOV       A,R0
   \   00014B   7001         JNZ       ??zclSampleSw_ProcessUartMsgs_9
   \   00014D   09           INC       R1
   \                     ??zclSampleSw_ProcessUartMsgs_9:
   \   00014E   AC..         MOV       R4,?V1
   \   000150   EC           MOV       A,R4
   \   000151   2C           ADD       A,R4
   \   000152   FC           MOV       R4,A
   \   000153   E4           CLR       A
   \   000154   33           RLC       A
   \   000155   FD           MOV       R5,A
   \   000156   E8           MOV       A,R0
   \   000157   9E           SUBB      A,R6
   \   000158   E9           MOV       A,R1
   \   000159   9F           SUBB      A,R7
   \   00015A   408D         JC        ??zclSampleSw_ProcessUartMsgs_10
    771                HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   \   00015C                ; Setup parameters for call to function HalUARTWrite
   \   00015C   7422         MOV       A,#0x22
   \   00015E   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_11 & 0xFFFF
    772                break;
    773              }
    774              case CMD_JC_NODEREQ:         // RX: (uint8)CMD_JC_NODEREQ+(uint16)nwkAddr
    775              {
    776                node_cmd_rx = 1;
   \                     ??zclSampleSw_ProcessUartMsgs_2:
   \   000161   90....       MOV       DPTR,#node_cmd_rx
   \   000164   12....       LCALL     ?Subroutine2 & 0xFFFF
    777                zAddrType_t srcAddr;
    778                srcAddr.addr.shortAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
   \                     ??CrossCallReturnLabel_0:
   \   000167   12....       LCALL     ?XSTACK_DISP0_8
   \   00016A   12....       LCALL     ?Subroutine5 & 0xFFFF
    779                srcAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_8:
   \   00016D   12....       LCALL     ?XSTACK_DISP0_8
   \   000170   7402         MOV       A,#0x2
   \   000172   F0           MOVX      @DPTR,A
    780                stat = ZDP_NodeDescReq(&srcAddr, srcAddr.addr.shortAddr, 0);
   \   000173                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000173   78..         MOV       R0,#?V0
   \   000175   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000178   7902         MOV       R1,#0x2
   \   00017A   740A         MOV       A,#0xa
   \   00017C   12....       LCALL     ?XSTACK_DISP0_8
   \   00017F   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000182   12....       LCALL     ?XSTACK_DISP101_8
   \   000185   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000188   7401         MOV       A,#0x1
   \   00018A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018D   E9           MOV       A,R1
   \   00018E   F5..         MOV       ?V0,A
    781                if (stat != afStatus_SUCCESS) {
   \   000190   7003         JNZ       $+5
   \   000192   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_12 & 0xFFFF
    782                  uint16 rsps[2] = {0}; uint8 length = 0;
   \   000195   90....       MOV       DPTR,#`?<Constant {0, 0}>_2`
   \   000198   7402         MOV       A,#0x2
   \   00019A   12....       LCALL     ?XSTACK_DISP102_8
   \   00019D   7404         MOV       A,#0x4
   \   00019F   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    783                  rsps[length++] = CMD_JC_NODEREQ;
   \   0001A2   7402         MOV       A,#0x2
   \   0001A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0001A7   7402         MOV       A,#0x2
   \   0001A9   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_13 & 0xFFFF
    784                  rsps[length++] = stat;
    785                  HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    786                }
    787                else {
    788                  // The successfull UART response is generated in function
    789                  // Set a timer for TIMEOUT detection
    790                  osal_start_timerEx(zclSampleSw_TaskID, 
    791                                     SAMPLEAPP_ACT_EVT, 
    792                                     SAMPLEAPP_ACT_TIMEOUT);
    793                }
    794                break;
    795              }
    796              case CMD_JC_AEPREQ:         // RX: (uint8)CMD_JC_AEPREQ+(uint16)nwkAddr
    797              {
    798                endpoint_cmd_rx = 1;
   \                     ??zclSampleSw_ProcessUartMsgs_3:
   \   0001AC   90....       MOV       DPTR,#endpoint_cmd_rx
   \   0001AF   12....       LCALL     ?Subroutine2 & 0xFFFF
    799                zAddrType_t srcAddr;
    800                srcAddr.addr.shortAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
   \                     ??CrossCallReturnLabel_1:
   \   0001B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0001B5   12....       LCALL     ?Subroutine5 & 0xFFFF
    801                srcAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_9:
   \   0001B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BB   7402         MOV       A,#0x2
   \   0001BD   F0           MOVX      @DPTR,A
    802                stat = ZDP_ActiveEPReq(&srcAddr, srcAddr.addr.shortAddr, 0);
   \   0001BE                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   0001BE   78..         MOV       R0,#?V0
   \   0001C0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0001C3   7905         MOV       R1,#0x5
   \   0001C5   740A         MOV       A,#0xa
   \   0001C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CA   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0001CD   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D0   12....       LCALL     `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   0001D3   7401         MOV       A,#0x1
   \   0001D5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001D8   E9           MOV       A,R1
   \   0001D9   F5..         MOV       ?V0,A
    803                if (stat != afStatus_SUCCESS) {
   \   0001DB   7003         JNZ       $+5
   \   0001DD   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_12 & 0xFFFF
    804                  uint16 rsps[2] = {0}; uint8 length = 0;
   \   0001E0   90....       MOV       DPTR,#`?<Constant {0, 0}>_3`
   \   0001E3   7402         MOV       A,#0x2
   \   0001E5   12....       LCALL     ?XSTACK_DISP102_8
   \   0001E8   7404         MOV       A,#0x4
   \   0001EA   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    805                  rsps[length++] = CMD_JC_AEPREQ;
   \   0001ED   7402         MOV       A,#0x2
   \   0001EF   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F2   7403         MOV       A,#0x3
   \   0001F4   8053         SJMP      ??zclSampleSw_ProcessUartMsgs_13
    806                  rsps[length++] = stat;
    807                  HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    808                }
    809                else {
    810                  // The successfull UART response is generated in function
    811                  // Set a timer for TIMEOUT detection
    812                  osal_start_timerEx(zclSampleSw_TaskID, 
    813                                     SAMPLEAPP_ACT_EVT, 
    814                                     SAMPLEAPP_ACT_TIMEOUT);
    815                }
    816                break;
    817              }
    818              case CMD_JC_CLUREQ:         // RX: (uint8)CMD_JC_AEPREQ+(uint16)nwkAddr+(uint8)ep
    819              {
    820                cluster_cmd_rx = 1;
   \                     ??zclSampleSw_ProcessUartMsgs_4:
   \   0001F6   90....       MOV       DPTR,#cluster_cmd_rx
   \   0001F9   7401         MOV       A,#0x1
   \   0001FB   12....       LCALL     ?Subroutine6 & 0xFFFF
    821                zAddrType_t srcAddr;
    822                srcAddr.addr.shortAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
   \                     ??CrossCallReturnLabel_12:
   \   0001FE   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000201   7409         MOV       A,#0x9
   \   000203   12....       LCALL     ?XSTACK_DISP0_8
   \   000206   12....       LCALL     ?Subroutine5 & 0xFFFF
    823                srcAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_10:
   \   000209   12....       LCALL     ?XSTACK_DISP0_8
   \   00020C   7402         MOV       A,#0x2
   \   00020E   F0           MOVX      @DPTR,A
    824                stat = ZDP_SimpleDescReq(&srcAddr, srcAddr.addr.shortAddr, uartMsg[3], 0);
   \   00020F                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   00020F   78..         MOV       R0,#?V0
   \   000211   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000214   8A82         MOV       DPL,R2
   \   000216   8B83         MOV       DPH,R3
   \   000218   E0           MOVX      A,@DPTR
   \   000219   F9           MOV       R1,A
   \   00021A   740A         MOV       A,#0xa
   \   00021C   12....       LCALL     ?XSTACK_DISP0_8
   \   00021F   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000222   12....       LCALL     ?XSTACK_DISP101_8
   \   000225   12....       LCALL     `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   000228   7401         MOV       A,#0x1
   \   00022A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00022D   E9           MOV       A,R1
   \   00022E   F5..         MOV       ?V0,A
    825                if (stat != afStatus_SUCCESS) {
   \   000230   7003         JNZ       $+5
   \   000232   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_12 & 0xFFFF
    826                  uint16 rsps[2] = {0}; uint8 length = 0;
   \   000235   90....       MOV       DPTR,#`?<Constant {0, 0}>_4`
   \   000238   7402         MOV       A,#0x2
   \   00023A   12....       LCALL     ?XSTACK_DISP102_8
   \   00023D   7404         MOV       A,#0x4
   \   00023F   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    827                  rsps[length++] = CMD_JC_CLUREQ;
   \   000242   7402         MOV       A,#0x2
   \   000244   12....       LCALL     ?XSTACK_DISP0_8
   \   000247   7404         MOV       A,#0x4
   \                     ??zclSampleSw_ProcessUartMsgs_13:
   \   000249   F0           MOVX      @DPTR,A
   \   00024A   A3           INC       DPTR
   \   00024B   E4           CLR       A
   \                     ??zclSampleSw_ProcessUartMsgs_8:
   \   00024C   F0           MOVX      @DPTR,A
    828                  rsps[length++] = stat;
   \   00024D   7404         MOV       A,#0x4
   \   00024F   12....       LCALL     ?XSTACK_DISP0_8
   \   000252   E9           MOV       A,R1
   \   000253   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_14 & 0xFFFF
    829                  HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    830                }
    831                else {
    832                  // The successfull UART response is generated in function
    833                  // Set a timer for TIMEOUT detection
    834                  osal_start_timerEx(zclSampleSw_TaskID, 
    835                                     SAMPLEAPP_ACT_EVT, 
    836                                     SAMPLEAPP_ACT_TIMEOUT);
    837                }
    838                break;
    839              }
    840              case CMD_JC_ZCLREQ:
    841              {
    842                uint16 nwkAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
   \                     ??zclSampleSw_ProcessUartMsgs_5:
   \   000256   85..82       MOV       DPL,?XSP + 0
   \   000259   85..83       MOV       DPH,?XSP + 1
   \   00025C   18           DEC       R0
   \   00025D   18           DEC       R0
   \   00025E   18           DEC       R0
   \   00025F   A3           INC       DPTR
   \   000260   E0           MOVX      A,@DPTR
   \   000261   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000264   7418         MOV       A,#0x18
   \   000266   12....       LCALL     ?XSTACK_DISP0_8
   \   000269   12....       LCALL     ?Subroutine10 & 0xFFFF
    843                uint8 flag = uartMsg[3];
   \                     ??CrossCallReturnLabel_26:
   \   00026C   8A82         MOV       DPL,R2
   \   00026E   8B83         MOV       DPH,R3
   \   000270   E0           MOVX      A,@DPTR
   \   000271   C0E0         PUSH      A
   \   000273   7416         MOV       A,#0x16
   \   000275   12....       LCALL     ?XSTACK_DISP0_8
   \   000278   D0E0         POP       A
   \   00027A   12....       LCALL     ?Subroutine4 & 0xFFFF
    844                uint8 endpoint = uartMsg[4];
   \                     ??CrossCallReturnLabel_6:
   \   00027D   E0           MOVX      A,@DPTR
   \   00027E   C0E0         PUSH      A
   \   000280   7415         MOV       A,#0x15
   \   000282   12....       LCALL     ?XSTACK_DISP0_8
   \   000285   D0E0         POP       A
   \   000287   12....       LCALL     ?Subroutine4 & 0xFFFF
    845                uint16 cid = BUILD_UINT16(uartMsg[5], uartMsg[6]);
   \                     ??CrossCallReturnLabel_7:
   \   00028A   A3           INC       DPTR
   \   00028B   12....       LCALL     ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00028E   C8           XCH       A,R0
   \   00028F   2406         ADD       A,#0x6
   \   000291   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000294   F5..         MOV       ?V4,A
   \   000296   E4           CLR       A
   \   000297   39           ADDC      A,R1
   \   000298   F5..         MOV       ?V5,A
    846          
    847                uint16 pid = BUILD_UINT16(uartMsg[7], uartMsg[8]);
   \   00029A   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00029D   2407         ADD       A,#0x7
   \   00029F   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0002A2   2408         ADD       A,#0x8
   \   0002A4   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0002A7   F5..         MOV       ?V0,A
   \   0002A9   E4           CLR       A
   \   0002AA   39           ADDC      A,R1
   \   0002AB   F5..         MOV       ?V1,A
    848                //sampleSw_TestEp.simpleDesc->AppProfId = pid;
    849                uint8 cmd = uartMsg[9]; rx_zcl_cmd_id = cmd;
   \   0002AD   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0002B0   2409         ADD       A,#0x9
   \   0002B2   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0002B5   C0E0         PUSH      A
   \   0002B7   7406         MOV       A,#0x6
   \   0002B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0002BC   D0E0         POP       A
   \   0002BE   F0           MOVX      @DPTR,A
   \   0002BF   90....       MOV       DPTR,#rx_zcl_cmd_id
   \   0002C2   12....       LCALL     ?Subroutine3 & 0xFFFF
    850                uint8 clusterSpecific = uartMsg[10];
   \                     ??CrossCallReturnLabel_2:
   \   0002C5   240A         ADD       A,#0xa
   \   0002C7   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0002CA   C0E0         PUSH      A
   \   0002CC   7414         MOV       A,#0x14
   \   0002CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0002D1   D0E0         POP       A
   \   0002D3   12....       LCALL     ?Subroutine3 & 0xFFFF
    851                uint8 direction = uartMsg[11];
   \                     ??CrossCallReturnLabel_3:
   \   0002D6   240B         ADD       A,#0xb
   \   0002D8   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0002DB   C0E0         PUSH      A
   \   0002DD   7413         MOV       A,#0x13
   \   0002DF   12....       LCALL     ?XSTACK_DISP0_8
   \   0002E2   D0E0         POP       A
   \   0002E4   12....       LCALL     ?Subroutine3 & 0xFFFF
    852                uint16 manuCode = BUILD_UINT16(uartMsg[12], uartMsg[13]);
   \                     ??CrossCallReturnLabel_4:
   \   0002E7   240C         ADD       A,#0xc
   \   0002E9   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0002EC   240D         ADD       A,#0xd
   \   0002EE   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0002F1   FE           MOV       R6,A
   \   0002F2   E4           CLR       A
   \   0002F3   39           ADDC      A,R1
   \   0002F4   FF           MOV       R7,A
    853                uint8 monitor_response_flag = uartMsg[14];
   \   0002F5   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0002F8   240E         ADD       A,#0xe
   \   0002FA   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   0002FD   C0E0         PUSH      A
   \   0002FF   7412         MOV       A,#0x12
   \   000301   12....       LCALL     ?XSTACK_DISP0_8
   \   000304   D0E0         POP       A
   \   000306   12....       LCALL     ?Subroutine3 & 0xFFFF
    854                uint16 len = BUILD_UINT16(uartMsg[15], uartMsg[16]);
   \                     ??CrossCallReturnLabel_5:
   \   000309   240F         ADD       A,#0xf
   \   00030B   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00030E   2410         ADD       A,#0x10
   \   000310   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000313   F5..         MOV       ?V2,A
   \   000315   E4           CLR       A
   \   000316   39           ADDC      A,R1
   \   000317   F5..         MOV       ?V3,A
    855                uint8 *payload = NULL;
   \   000319   7407         MOV       A,#0x7
   \   00031B   12....       LCALL     ?XSTACK_DISP0_8
   \   00031E   E4           CLR       A
   \   00031F   F0           MOVX      @DPTR,A
   \   000320   A3           INC       DPTR
   \   000321   F0           MOVX      @DPTR,A
    856                if (len > 0)
   \   000322   EA           MOV       A,R2
   \   000323   45..         ORL       A,?V3
   \   000325   604F         JZ        ??zclSampleSw_ProcessUartMsgs_15
    857                {
    858                  payload = osal_mem_alloc(len);
   \   000327                ; Setup parameters for call to function osal_mem_alloc
   \   000327   AB..         MOV       R3,?V3
   \   000329   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00032C   7407         MOV       A,#0x7
   \   00032E   12....       LCALL     ?XSTACK_DISP0_8
   \   000331   EA           MOV       A,R2
   \   000332   F0           MOVX      @DPTR,A
   \   000333   A3           INC       DPTR
   \   000334   EB           MOV       A,R3
   \   000335   F0           MOVX      @DPTR,A
    859                  for (int i = 1; i <= len; i++)
   \   000336   7801         MOV       R0,#0x1
   \   000338   7900         MOV       R1,#0x0
   \   00033A   8031         SJMP      ??zclSampleSw_ProcessUartMsgs_16
    860                  {
    861                    payload[len-i] = uartMsg[msgLen-i];
   \                     ??zclSampleSw_ProcessUartMsgs_17:
   \   00033C   7417         MOV       A,#0x17
   \   00033E   12....       LCALL     ?XSTACK_DISP0_8
   \   000341   E0           MOVX      A,@DPTR
   \   000342   C3           CLR       C
   \   000343   98           SUBB      A,R0
   \   000344   FA           MOV       R2,A
   \   000345   E4           CLR       A
   \   000346   99           SUBB      A,R1
   \   000347   FB           MOV       R3,A
   \   000348   85..82       MOV       DPL,?XSP + 0
   \   00034B   85..83       MOV       DPH,?XSP + 1
   \   00034E   12....       LCALL     ?Subroutine19 & 0xFFFF
    862                  }
   \                     ??CrossCallReturnLabel_57:
   \   000351   E0           MOVX      A,@DPTR
   \   000352   C0E0         PUSH      A
   \   000354   E5..         MOV       A,?V2
   \   000356   C3           CLR       C
   \   000357   98           SUBB      A,R0
   \   000358   FA           MOV       R2,A
   \   000359   E5..         MOV       A,?V3
   \   00035B   99           SUBB      A,R1
   \   00035C   FB           MOV       R3,A
   \   00035D   7407         MOV       A,#0x7
   \   00035F   12....       LCALL     ?XSTACK_DISP0_8
   \   000362   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000365   D0E0         POP       A
   \   000367   F0           MOVX      @DPTR,A
   \   000368   08           INC       R0
   \   000369   E8           MOV       A,R0
   \   00036A   7001         JNZ       ??zclSampleSw_ProcessUartMsgs_16
   \   00036C   09           INC       R1
   \                     ??zclSampleSw_ProcessUartMsgs_16:
   \   00036D   C3           CLR       C
   \   00036E   E5..         MOV       A,?V2
   \   000370   98           SUBB      A,R0
   \   000371   E5..         MOV       A,?V3
   \   000373   99           SUBB      A,R1
   \   000374   50C6         JNC       ??zclSampleSw_ProcessUartMsgs_17
    863                }
    864                stat = inject_zclData(nwkAddr, flag, endpoint, cid, pid, cmd, clusterSpecific, direction, manuCode, len, payload);
   \                     ??zclSampleSw_ProcessUartMsgs_15:
   \   000376                ; Setup parameters for call to function inject_zclData
   \   000376   7407         MOV       A,#0x7
   \   000378   12....       LCALL     ?XSTACK_DISP0_8
   \   00037B   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00037E   78..         MOV       R0,#?V2
   \   000380   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000383   8E..         MOV       ?V6,R6
   \   000385   8F..         MOV       ?V7,R7
   \   000387   78..         MOV       R0,#?V6
   \   000389   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00038C   7419         MOV       A,#0x19
   \   00038E   12....       LCALL     ?XSTACK_DISP0_8
   \   000391   E0           MOVX      A,@DPTR
   \   000392   F5..         MOV       ?V6,A
   \   000394   78..         MOV       R0,#?V6
   \   000396   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000399   741B         MOV       A,#0x1b
   \   00039B   12....       LCALL     ?XSTACK_DISP0_8
   \   00039E   E0           MOVX      A,@DPTR
   \   00039F   F5..         MOV       ?V6,A
   \   0003A1   78..         MOV       R0,#?V6
   \   0003A3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003A6   740E         MOV       A,#0xe
   \   0003A8   12....       LCALL     ?XSTACK_DISP0_8
   \   0003AB   E0           MOVX      A,@DPTR
   \   0003AC   F5..         MOV       ?V6,A
   \   0003AE   78..         MOV       R0,#?V6
   \   0003B0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0003B3   78..         MOV       R0,#?V0
   \   0003B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003B8   78..         MOV       R0,#?V4
   \   0003BA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003BD   7422         MOV       A,#0x22
   \   0003BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0003C2   E0           MOVX      A,@DPTR
   \   0003C3   FC           MOV       R4,A
   \   0003C4   7D00         MOV       R5,#0x0
   \   0003C6   7423         MOV       A,#0x23
   \   0003C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0003CB   E0           MOVX      A,@DPTR
   \   0003CC   F9           MOV       R1,A
   \   0003CD   7425         MOV       A,#0x25
   \   0003CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0003D2   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   0003D5   12....       LCALL     `??inject_zclData::?relay`; Banked call to: inject_zclData
   \   0003D8   740D         MOV       A,#0xd
   \   0003DA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003DD   E9           MOV       A,R1
   \   0003DE   F5..         MOV       ?V0,A
    865                if (len > 0)
   \   0003E0   E5..         MOV       A,?V2
   \   0003E2   45..         ORL       A,?V3
   \   0003E4   600B         JZ        ??zclSampleSw_ProcessUartMsgs_18
    866                {
    867                  osal_mem_free(payload);
   \   0003E6                ; Setup parameters for call to function osal_mem_free
   \   0003E6   7407         MOV       A,#0x7
   \   0003E8   12....       LCALL     ?XSTACK_DISP0_8
   \   0003EB   12....       LCALL     ?Subroutine14 & 0xFFFF
    868                }
   \                     ??CrossCallReturnLabel_40:
   \   0003EE   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    869                if (stat != afStatus_SUCCESS)
   \                     ??zclSampleSw_ProcessUartMsgs_18:
   \   0003F1   E5..         MOV       A,?V0
   \   0003F3   6017         JZ        ??zclSampleSw_ProcessUartMsgs_19
    870                {
    871                  uint16 rsps[2] = {0}; uint8 length = 0;
   \   0003F5   90....       MOV       DPTR,#`?<Constant {0, 0}>_5`
   \   0003F8   7402         MOV       A,#0x2
   \   0003FA   12....       LCALL     ?XSTACK_DISP102_8
   \   0003FD   7404         MOV       A,#0x4
   \   0003FF   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    872                  rsps[length++] = CMD_JC_ZCLREQ;
   \   000402   7402         MOV       A,#0x2
   \   000404   12....       LCALL     ?XSTACK_DISP0_8
   \   000407   7407         MOV       A,#0x7
   \   000409   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_20 & 0xFFFF
    873                  rsps[length++] = stat;
    874                  HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    875                }
    876                else {
    877                  // The successfull UART response is generated in function
    878                  // Set a timer for TIMEOUT detection
    879                  // It really depends on whether the response is needed.
    880                  // If not needed, the timer will not be set, and the coordinator will not send any UART response.
    881                  if (monitor_response_flag > 0) {
   \                     ??zclSampleSw_ProcessUartMsgs_19:
   \   00040C   7412         MOV       A,#0x12
   \   00040E   12....       LCALL     ?XSTACK_DISP0_8
   \   000411   E0           MOVX      A,@DPTR
   \   000412   7003         JNZ       $+5
   \   000414   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_21 & 0xFFFF
    882                    osal_start_timerEx(zclSampleSw_TaskID, 
    883                                       SAMPLEAPP_ACT_EVT, 
    884                                       SAMPLEAPP_ACT_TIMEOUT);
   \                     ??zclSampleSw_ProcessUartMsgs_12:
   \   000417                ; Setup parameters for call to function osal_start_timerEx
   \   000417   90....       MOV       DPTR,#__Constant_1388
   \   00041A   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   00041D   7A40         MOV       R2,#0x40
   \   00041F   7B00         MOV       R3,#0x0
   \   000421   90....       MOV       DPTR,#zclSampleSw_TaskID
   \   000424   E0           MOVX      A,@DPTR
   \   000425   F9           MOV       R1,A
   \   000426   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000429   7404         MOV       A,#0x4
   \   00042B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00042E   02....       LJMP      ??zclSampleSw_ProcessUartMsgs_21 & 0xFFFF
    885                  }
    886                }
    887                break;
    888              }
    889              case CMD_JC_LEVREQ:
    890              {
    891                zAddrType_t srcAddr;
    892                srcAddr.addr.shortAddr = BUILD_UINT16(uartMsg[1], uartMsg[2]);
   \                     ??zclSampleSw_ProcessUartMsgs_6:
   \   000431   85..82       MOV       DPL,?XSP + 0
   \   000434   85..83       MOV       DPH,?XSP + 1
   \   000437   18           DEC       R0
   \   000438   18           DEC       R0
   \   000439   18           DEC       R0
   \   00043A   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   00043D   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000440   EA           MOV       A,R2
   \   000441   F8           MOV       R0,A
   \   000442   7409         MOV       A,#0x9
   \   000444   12....       LCALL     ?XSTACK_DISP0_8
   \   000447   12....       LCALL     ?Subroutine5 & 0xFFFF
    893                srcAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_11:
   \   00044A   12....       LCALL     ?XSTACK_DISP0_8
   \   00044D   7402         MOV       A,#0x2
   \   00044F   F0           MOVX      @DPTR,A
    894                uint8 extAddr[8] = {0};
   \   000450   90....       MOV       DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`
   \   000453   741A         MOV       A,#0x1a
   \   000455   12....       LCALL     ?XSTACK_DISP102_8
   \   000458   7408         MOV       A,#0x8
   \   00045A   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    895                stat = AddrMgrExtAddrLookup(srcAddr.addr.shortAddr, extAddr);
   \   00045D                ; Setup parameters for call to function AddrMgrExtAddrLookup
   \   00045D   741A         MOV       A,#0x1a
   \   00045F   12....       LCALL     ?XSTACK_DISP102_8
   \   000462   7409         MOV       A,#0x9
   \   000464   12....       LCALL     ?XSTACK_DISP0_8
   \   000467   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00046A   12....       LCALL     `??AddrMgrExtAddrLookup::?relay`; Banked call to: AddrMgrExtAddrLookup
   \   00046D   E9           MOV       A,R1
   \   00046E   F5..         MOV       ?V0,A
    896                if (stat == true)
   \   000470   7401         MOV       A,#0x1
   \   000472   65..         XRL       A,?V0
   \   000474   7024         JNZ       ??zclSampleSw_ProcessUartMsgs_22
    897                {
    898                  stat = ZDP_MgmtLeaveReq(&srcAddr, extAddr, 0, 0, 0);
   \   000476                ; Setup parameters for call to function ZDP_MgmtLeaveReq
   \   000476   75..00       MOV       ?V0,#0x0
   \   000479   78..         MOV       R0,#?V0
   \   00047B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00047E   78..         MOV       R0,#?V0
   \   000480   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000483   7900         MOV       R1,#0x0
   \   000485   741C         MOV       A,#0x1c
   \   000487   12....       LCALL     ?XSTACK_DISP102_8
   \   00048A   740B         MOV       A,#0xb
   \   00048C   12....       LCALL     ?XSTACK_DISP101_8
   \   00048F   12....       LCALL     `??ZDP_MgmtLeaveReq::?relay`; Banked call to: ZDP_MgmtLeaveReq
   \   000492   7402         MOV       A,#0x2
   \   000494   12....       LCALL     ?DEALLOC_XSTACK8
   \   000497   E9           MOV       A,R1
   \   000498   F5..         MOV       ?V0,A
    899                }
    900                uint16 rsps[2] = {0}; uint8 length = 0;
   \                     ??zclSampleSw_ProcessUartMsgs_22:
   \   00049A   90....       MOV       DPTR,#`?<Constant {0, 0}>_6`
   \   00049D   7402         MOV       A,#0x2
   \   00049F   12....       LCALL     ?XSTACK_DISP102_8
   \   0004A2   7404         MOV       A,#0x4
   \   0004A4   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    901                rsps[length++] = CMD_JC_LEVREQ;
   \   0004A7   7402         MOV       A,#0x2
   \   0004A9   12....       LCALL     ?XSTACK_DISP0_8
   \   0004AC   7408         MOV       A,#0x8
   \                     ??zclSampleSw_ProcessUartMsgs_20:
   \   0004AE   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    902                rsps[length++] = stat;
   \                     ??CrossCallReturnLabel_100:
   \   0004B1   7404         MOV       A,#0x4
   \   0004B3   12....       LCALL     ?XSTACK_DISP0_8
   \   0004B6   E5..         MOV       A,?V0
   \   0004B8   8020         SJMP      ??zclSampleSw_ProcessUartMsgs_14
    903                HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
    904                break;
    905              }
    906              default:
    907              {
    908                uint16 rsps[2] = {0}; uint8 length = 0;
   \                     ??zclSampleSw_ProcessUartMsgs_7:
   \   0004BA   90....       MOV       DPTR,#`?<Constant {0, 0}>_7`
   \   0004BD   7402         MOV       A,#0x2
   \   0004BF   12....       LCALL     ?XSTACK_DISP102_8
   \   0004C2   7404         MOV       A,#0x4
   \   0004C4   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    909                rsps[length++] = uartMsg[0];
   \   0004C7   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0004CA   F8           MOV       R0,A
   \   0004CB   7402         MOV       A,#0x2
   \   0004CD   12....       LCALL     ?XSTACK_DISP0_8
   \   0004D0   12....       LCALL     ?Subroutine9 & 0xFFFF
    910                rsps[length++] = ERR_CMD_NOTFOUND;
   \                     ??CrossCallReturnLabel_109:
   \   0004D3   7404         MOV       A,#0x4
   \   0004D5   12....       LCALL     ?XSTACK_DISP0_8
   \   0004D8   74FE         MOV       A,#-0x2
   \                     ??zclSampleSw_ProcessUartMsgs_14:
   \   0004DA   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    911                HalUARTWrite(HAL_UART_PORT_0, (uint8 *)rsps, length*2);
   \                     ??CrossCallReturnLabel_101:
   \   0004DD                ; Setup parameters for call to function HalUARTWrite
   \   0004DD   7C04         MOV       R4,#0x4
   \   0004DF   FD           MOV       R5,A
   \   0004E0   7402         MOV       A,#0x2
   \                     ??zclSampleSw_ProcessUartMsgs_11:
   \   0004E2   12....       LCALL     ?XSTACK_DISP101_8
   \   0004E5   7900         MOV       R1,#0x0
   \   0004E7   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    912                break;
    913              }
    914            }
    915            return stat;
   \                     ??zclSampleSw_ProcessUartMsgs_21:
   \   0004EA   A9..         MOV       R1,?V0
   \   0004EC   7436         MOV       A,#0x36
   \   0004EE   02....       LJMP      ?Subroutine0 & 0xFFFF
    916          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   12....       LCALL     ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   2A           ADD       A,R2
   \   000002   FC           MOV       R4,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3B           ADDC      A,R3
   \   000006   8C82         MOV       DPL,R4
   \   000008   F583         MOV       DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   740A         MOV       A,#0xa
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000003   F8           MOV       R0,A
   \   000004   E4           CLR       A
   \   000005   C8           XCH       A,R0
   \   000006   F9           MOV       R1,A
   \   000007   EA           MOV       A,R2
   \   000008   28           ADD       A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   F582         MOV       DPL,A
   \   000002   E4           CLR       A
   \   000003   38           ADDC      A,R0
   \   000004   F583         MOV       DPH,A
   \   000006   E0           MOVX      A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F583         MOV       DPH,A
   \   000002   8882         MOV       DPL,R0
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FC           MOV       R4,A
   \   000007   12....       LCALL     ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00000A   A3           INC       DPTR
   \   00000B   A3           INC       DPTR
   \   00000C   E0           MOVX      A,@DPTR
   \   00000D   F9           MOV       R1,A
   \   00000E   EC           MOV       A,R4
   \   00000F   F8           MOV       R0,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL     ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   000003   FA           MOV       R2,A
   \   000004   12....       LCALL     ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F8           MOV       R0,A
   \   000008   A3           INC       DPTR
   \   000009   E0           MOVX      A,@DPTR
   \   00000A   C8           XCH       A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E8           MOV       A,R0
   \   000001   F0           MOVX      @DPTR,A
   \   000002   A3           INC       DPTR
   \   000003   E9           MOV       A,R1
   \   000004   F0           MOVX      @DPTR,A
   \   000005   7411         MOV       A,#0x11
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000003   A3           INC       DPTR
   \   000004   A3           INC       DPTR
   \   000005   A3           INC       DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000003   C8           XCH       A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7401         MOV       A,#0x1
   \   000002   12....       LCALL     ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000005   12....       LCALL     ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000008   EA           MOV       A,R2
   \   000009   F8           MOV       R0,A
   \   00000A   7409         MOV       A,#0x9
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL     ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000003   F583         MOV       DPH,A
   \   000005   8882         MOV       DPL,R0
   \   000007   A3           INC       DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   85..82       MOV       DPL,?XSP + 0
   \   000004   85..83       MOV       DPH,?XSP + 1
   \   000007   22           RET
    917          
    918          /**
    919           * @fn      zclSampleSw_UartCB
    920           *
    921           * @brief   Uart Callback. When there are UART messages comming in, this callback function will handle the message.
    922           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    923          static void zclSampleSw_UartCB(uint8 port, uint8 event)
   \                     zclSampleSw_UartCB:
    924          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    925            uint8 rxLen = Hal_UART_RxBufLen(HAL_UART_PORT_0);
   \   000005                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000005   7900         MOV       R1,#0x0
   \   000007   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   00000A   EA           MOV       A,R2
   \   00000B   F5..         MOV       ?V0,A
    926            if(rxLen != 0)
   \   00000D   700A         JNZ       ??zclSampleSw_UartCB_0
   \   00000F   806B         SJMP      ??zclSampleSw_UartCB_1
    927            {
    928              while (1)
    929              {
    930                halSleepWait(50000); // Wait for 50 ms
    931                if (rxLen == Hal_UART_RxBufLen(HAL_UART_PORT_0))
    932                {
    933                  break;
    934                }
    935                else
    936                {
    937                  rxLen = Hal_UART_RxBufLen(HAL_UART_PORT_0);
   \                     ??zclSampleSw_UartCB_2:
   \   000011                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000011   7900         MOV       R1,#0x0
   \   000013   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000016   EA           MOV       A,R2
   \   000017   F5..         MOV       ?V0,A
    938                }
   \                     ??zclSampleSw_UartCB_0:
   \   000019                ; Setup parameters for call to function halSleepWait
   \   000019   7A50         MOV       R2,#0x50
   \   00001B   7BC3         MOV       R3,#-0x3d
   \   00001D   12....       LCALL     `??halSleepWait::?relay`; Banked call to: halSleepWait
   \   000020   AE..         MOV       R6,?V0
   \   000022                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000022   7900         MOV       R1,#0x0
   \   000024   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000027   EA           MOV       A,R2
   \   000028   6E           XRL       A,R6
   \   000029   4B           ORL       A,R3
   \   00002A   70E5         JNZ       ??zclSampleSw_UartCB_2
    939              }
    940              uint8 *zclSampleSw_UartReadBuf = osal_mem_alloc(ZCLSAMPLESW_UART_BUF_LEN);
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   7A00         MOV       R2,#0x0
   \   00002E   7B01         MOV       R3,#0x1
   \   000030   12....       LCALL     `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000033   8A..         MOV       ?V2,R2
   \   000035   8B..         MOV       ?V3,R3
    941              if(zclSampleSw_UartReadBuf==NULL)
   \   000037   EA           MOV       A,R2
   \   000038   45..         ORL       A,?V3
   \   00003A   701A         JNZ       ??zclSampleSw_UartCB_3
    942              {
    943                char *point = "[fail,memfail]";
    944                HalUARTWrite(HAL_UART_PORT_0, (uint8 *)point, osal_strlen(point));
   \   00003C                ; Setup parameters for call to function osal_strlen
   \   00003C   7A..         MOV       R2,#`?<Constant "[fail,memfail]">` & 0xff
   \   00003E   7B..         MOV       R3,#(`?<Constant "[fail,memfail]">` >> 8) & 0xff
   \   000040   12....       LCALL     `??osal_strlen::?relay`; Banked call to: osal_strlen
   \   000043   8A..         MOV       ?V0,R2
   \   000045   8B..         MOV       ?V1,R3
   \   000047   AC..         MOV       R4,?V0
   \   000049   AD..         MOV       R5,?V1
   \   00004B                ; Setup parameters for call to function HalUARTWrite
   \   00004B   7A..         MOV       R2,#`?<Constant "[fail,memfail]">` & 0xff
   \   00004D   7B..         MOV       R3,#(`?<Constant "[fail,memfail]">` >> 8) & 0xff
   \   00004F   7900         MOV       R1,#0x0
   \   000051   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   000054   8026         SJMP      ??zclSampleSw_UartCB_1
    945              }
    946              else
    947              {
    948                osal_memset(zclSampleSw_UartReadBuf, 0, ZCLSAMPLESW_UART_BUF_LEN);
   \                     ??zclSampleSw_UartCB_3:
   \   000056                ; Setup parameters for call to function osal_memset
   \   000056   7C00         MOV       R4,#0x0
   \   000058   7D01         MOV       R5,#0x1
   \   00005A   7900         MOV       R1,#0x0
   \   00005C   12....       LCALL     `??osal_memset::?relay`; Banked call to: osal_memset
    949                HalUARTRead(HAL_UART_PORT_0, zclSampleSw_UartReadBuf, rxLen);
   \   00005F                ; Setup parameters for call to function HalUARTRead
   \   00005F   EE           MOV       A,R6
   \   000060   FC           MOV       R4,A
   \   000061   7D00         MOV       R5,#0x0
   \   000063   AA..         MOV       R2,?V2
   \   000065   AB..         MOV       R3,?V3
   \   000067   7900         MOV       R1,#0x0
   \   000069   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
    950                zclSampleSw_ProcessUartMsgs(zclSampleSw_UartReadBuf, rxLen);
   \   00006C                ; Setup parameters for call to function zclSampleSw_ProcessUartMsgs
   \   00006C   A9..         MOV       R1,?V0
   \   00006E   AA..         MOV       R2,?V2
   \   000070   AB..         MOV       R3,?V3
   \   000072   12....       LCALL     `??zclSampleSw_ProcessUartMsgs::?relay`; Banked call to: zclSampleSw_ProcessUartMsgs
    951                osal_mem_free(zclSampleSw_UartReadBuf); zclSampleSw_UartReadBuf = NULL;
   \   000075                ; Setup parameters for call to function osal_mem_free
   \   000075   AA..         MOV       R2,?V2
   \   000077   AB..         MOV       R3,?V3
   \   000079   12....       LCALL     `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    952              }
    953            }
    954          }
   \                     ??zclSampleSw_UartCB_1:
   \   00007C   7F06         MOV       R7,#0x6
   \   00007E   02....       LJMP      ?BANKED_LEAVE_XDATA
    955          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    956          static afStatus_t inject_zclData(uint16 destNwkAddr, uint8 flag, uint16 ep, uint16 cid, uint16 pid, uint8 cmd, uint8 clusterSpecific, uint8 direction, uint16 manuCode, uint16 len, uint8* cmdFormat)
   \                     inject_zclData:
    957          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV       A,#-0xc
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    958          /**
    959           * This function is responsible for injecting applicaiton-layer data (ZCL)
    960           * Note 1: In order to successfully send AF data, destNwkAddr must exist in the association table.
    961           * Note 2: The profileID (e.g., ZHA or ZDO) is configured by changing sampleSw_TestEp variable. However, it is unknown if there is any side effect, as the variable has been registered before.
    962           * params
    963              * destNwkAddr: The target device address.
    964              * Flag: Determine whether the packet is broadcast, groupcast, or unicast
    965              * ep: Target endpoint number.
    966              * cid: Target cluster ID.
    967          **/
    968          	afAddrType_t dstAddr;  
    969          
    970          	/* Destination */
    971            if (flag==SAMPLEAPP_BROADCAST)
   \   00000C   7010         JNZ       ??inject_zclData_0
    972            {
    973              dstAddr.addrMode = afAddrBroadcast;
   \   00000E   7408         MOV       A,#0x8
   \   000010   12....       LCALL     ?XSTACK_DISP0_8
   \   000013   740F         MOV       A,#0xf
   \   000015   12....       LCALL     ?Subroutine7 & 0xFFFF
    974          	  dstAddr.addr.shortAddr = 0xffff;
    975            }
   \                     ??CrossCallReturnLabel_15:
   \   000018   74FF         MOV       A,#-0x1
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   A3           INC       DPTR
   \   00001C   8021         SJMP      ??inject_zclData_1
    976            else if (flag==SAMPLEAPP_GROUPCAST)
   \                     ??inject_zclData_0:
   \   00001E   7401         MOV       A,#0x1
   \   000020   6E           XRL       A,R6
   \   000021   7009         JNZ       ??inject_zclData_2
    977            {
    978              dstAddr.addrMode = afAddrGroup;
   \   000023   7408         MOV       A,#0x8
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   7401         MOV       A,#0x1
   \   00002A   800C         SJMP      ??inject_zclData_3
    979              dstAddr.addr.shortAddr = destNwkAddr;
    980            }
    981            else if (flag==SAMPLEAPP_UNICAST)
   \                     ??inject_zclData_2:
   \   00002C   7410         MOV       A,#0x10
   \   00002E   6E           XRL       A,R6
   \   00002F   700F         JNZ       ??inject_zclData_4
    982            {
    983          	  dstAddr.addrMode = afAddr16Bit;
   \   000031   7408         MOV       A,#0x8
   \   000033   12....       LCALL     ?XSTACK_DISP0_8
   \   000036   7402         MOV       A,#0x2
    984          	  dstAddr.addr.shortAddr = destNwkAddr;
    985            }
   \                     ??inject_zclData_3:
   \   000038   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00003B   EA           MOV       A,R2
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   EB           MOV       A,R3
   \                     ??inject_zclData_1:
   \   00003F   F0           MOVX      @DPTR,A
    986          	dstAddr.endPoint = ep;
   \                     ??inject_zclData_4:
   \   000040   7409         MOV       A,#0x9
   \   000042   12....       LCALL     ?XSTACK_DISP0_8
   \   000045   EC           MOV       A,R4
   \   000046   F0           MOVX      @DPTR,A
    987          	zcl_transferId++;
   \   000047   90....       MOV       DPTR,#zcl_transferId
   \   00004A   E0           MOVX      A,@DPTR
   \   00004B   04           INC       A
   \   00004C   F0           MOVX      @DPTR,A
    988          
    989            uint8 sep = locate_ep_given_profile(pid);
   \   00004D   7900         MOV       R1,#0x0
   \   00004F   7418         MOV       A,#0x18
   \   000051   12....       LCALL     ?XSTACK_DISP0_8
   \   000054   E0           MOVX      A,@DPTR
   \   000055   F5..         MOV       ?V0,A
   \   000057   A3           INC       DPTR
   \   000058   E0           MOVX      A,@DPTR
   \   000059   F5..         MOV       ?V1,A
   \   00005B   78..         MOV       R0,#?V0
   \   00005D   12....       LCALL     ?US_SWITCH_SPARSE
   \                     `?<Jumptable for inject_zclData>_0`:
   \   000060   0000         DW        0
   \   000062   0300         DW        3
   \   000064   0401         DW        260
   \   000066   ....         DW        ??inject_zclData_5
   \   000068   E0A1         DW        41440
   \   00006A   ....         DW        ??inject_zclData_6
   \   00006C   5EC0         DW        49246
   \   00006E   ....         DW        ??inject_zclData_7
   \   000070   ....         DW        ??inject_zclData_8
   \                     ??inject_zclData_6:
   \   000072   790A         MOV       R1,#0xa
   \   000074   8006         SJMP      ??inject_zclData_8
   \                     ??inject_zclData_7:
   \   000076   7909         MOV       R1,#0x9
   \   000078   8002         SJMP      ??inject_zclData_8
   \                     ??inject_zclData_5:
   \   00007A   7908         MOV       R1,#0x8
    990          
    991            ZStatus_t cmd_stat = zcl_SendCommand(sep,
    992              &dstAddr,
    993              cid,
    994              cmd,
    995              clusterSpecific,
    996              direction,
    997              0,
    998              manuCode,
    999              zcl_transferId,
   1000              len,
   1001              cmdFormat);
   1002          
   1003            return cmd_stat;
   \                     ??inject_zclData_8:
   \   00007C                ; Setup parameters for call to function zcl_SendCommand
   \   00007C   7421         MOV       A,#0x21
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000084   7421         MOV       A,#0x21
   \   000086   12....       LCALL     ?XSTACK_DISP0_8
   \   000089   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00008C   90....       MOV       DPTR,#zcl_transferId
   \   00008F   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000092   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000095   7422         MOV       A,#0x22
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00009D   75..00       MOV       ?V0,#0x0
   \   0000A0   78..         MOV       R0,#?V0
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A5   7424         MOV       A,#0x24
   \   0000A7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AA   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000AD   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000B0   7424         MOV       A,#0x24
   \   0000B2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B5   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000B8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BB   7424         MOV       A,#0x24
   \   0000BD   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C0   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000C3   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C6   7421         MOV       A,#0x21
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   E0           MOVX      A,@DPTR
   \   0000CC   FC           MOV       R4,A
   \   0000CD   A3           INC       DPTR
   \   0000CE   E0           MOVX      A,@DPTR
   \   0000CF   FD           MOV       R5,A
   \   0000D0   740B         MOV       A,#0xb
   \   0000D2   12....       LCALL     ?XSTACK_DISP101_8
   \   0000D5   12....       LCALL     `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
   \   0000D8   740B         MOV       A,#0xb
   \   0000DA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000DD   740C         MOV       A,#0xc
   \   0000DF   02....       LJMP      ?Subroutine1 & 0xFFFF
   1004          
   1005          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F5..         MOV       ?V0,A
   \   000003   78..         MOV       R0,#?V0
   \   000005   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_OnOffSwitchType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_HAEp>`:
   \   000000   08           DB 8
   \   000001   00           DB 0
   \   000002   ....         DW zclSampleSw_TaskID
   \   000004   ....         DW zclSampleSw_HASimpleDesc
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_ZLLEp>`:
   \   000000   09           DB 9
   \   000001   00           DB 0
   \   000002   ....         DW zclSampleSw_TaskID
   \   000004   ....         DW zclSampleSw_ZLLSimpleDesc
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sampleSw_GPEp>`:
   \   000000   0A           DB 10
   \   000001   00           DB 0
   \   000002   ....         DW zclSampleSw_TaskID
   \   000004   ....         DW zclSampleSw_GPSimpleDesc
   \   000006   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zclSampleSw_NwkState>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessZDOMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessCommissioningStatus::?rela`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessCommissioningStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_ProcessUartMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_ProcessUartMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zclSampleSw_UartCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclSampleSw_UartCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??inject_zclData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    inject_zclData

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Start initialization\\n">`:
   \   000000   53746172     DB "Start initialization\012"
   \            7420696E
   \            69746961
   \            6C697A61
   \            74696F6E
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Finish initialization\\n">`:
   \   000000   46696E69     DB "Finish initialization\012"
   \            73682069
   \            6E697469
   \            616C697A
   \            6174696F
   \            6E0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0
   \   000014   0000         DW 0
   \   000016   0000         DW 0
   \   000018   0000         DW 0
   \   00001A   0000         DW 0
   \   00001C   0000         DW 0
   \   00001E   0000         DW 0
   \   000020   0000         DW 0
   \   000022   0000         DW 0
   \   000024   0000         DW 0
   \   000026   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0
   \   000014   0000         DW 0
   \   000016   0000         DW 0
   \   000018   0000         DW 0
   \   00001A   0000         DW 0
   \   00001C   0000         DW 0
   \   00001E   0000         DW 0
   \   000020   0000         DW 0
   \   000022   0000         DW 0
   \   000024   0000         DW 0
   \   000026   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0
   \   000014   0000         DW 0
   \   000016   0000         DW 0
   \   000018   0000         DW 0
   \   00001A   0000         DW 0
   \   00001C   0000         DW 0
   \   00001E   0000         DW 0
   \   000020   0000         DW 0
   \   000022   0000         DW 0
   \   000024   0000         DW 0
   \   000026   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Write: %d">`:
   \   000000   57726974     DB "Write: %d"
   \            653A2025
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Read: %d">`:
   \   000000   52656164     DB "Read: %d"
   \            3A202564
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_1`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   0000         DW 0
   \   000010   0000         DW 0
   \   000012   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_2`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_3`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_4`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_5`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_6`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>_7`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "[fail,memfail]">`:
   \   000000   5B666169     DB "[fail,memfail]"
   \            6C2C6D65
   \            6D666169
   \            6C5D00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1388:
   \   000000   88130000     DD 5000
   1006          
   1007          static uint8 locate_ep_given_profile(uint16 profileId)
   1008          {
   1009            uint8 ep = 0;
   1010            switch (profileId)
   1011            {
   1012              case ZCL_HA_PROFILE_ID:
   1013              {
   1014                ep = SAMPLESW_HA_ENDPOINT;
   1015                break;
   1016              }
   1017              case ZCL_ZLL_PROFILE_ID:
   1018              {
   1019                ep = SAMPLESW_ZLL_ENDPOINT;
   1020                break;
   1021              }
   1022              case ZCL_GP_PROFILE_ID:
   1023              {
   1024                ep = SAMPLESW_GP_ENDPOINT;
   1025                break;
   1026              }
   1027              default:
   1028              {
   1029                ep = 0;
   1030                break;
   1031              }
   1032            }
   1033            return ep;
   1034          }

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1    116   inject_zclData
        0     33   -> zcl_SendCommand
      0    103   zclSampleSw_HandleKeys
        0     73   -> HalLedSet
        0     73   -> HalUARTWrite
        0     75   -> osal_nv_item_init
        0     77   -> osal_nv_read
        0     77   -> osal_nv_write
        0     73   -> osal_strlen
        0     75   -> sprintf
      0     38   zclSampleSw_Init
        0     38   -> HalUARTOpen
        0     38   -> RegisterForKeys
        0     38   -> ZDO_RegisterForZDOMsg
        0     38   -> afRegister
        0     38   -> bdb_RegisterCommissioningStatusCB
        0     38   -> bdb_RegisterSimpleDescriptor
        0     38   -> bdb_StartCommissioning
        0     38   -> printf
        0     38   -> zclGeneral_RegisterCmdCallbacks
        0     38   -> zclSampleSw_ResetAttributesToDefaultValues
        0     38   -> zcl_registerForMsg
      2      0   zclSampleSw_ProcessCommissioningStatus
        2      0   -> bdb_StartCommissioning
      1     97   zclSampleSw_ProcessUartMsgs
        0     70   -> AddrMgrExtAddrLookup
        0     70   -> AssocCount
        0     70   -> HalUARTWrite
        0     70   -> NLME_PermitJoiningRequest
        0     72   -> ZDP_MgmtLeaveReq
        0     71   -> ZDP_NWKAddrOfInterestReq
        0     71   -> ZDP_SimpleDescReq
        0     83   -> inject_zclData
        0     70   -> osal_mem_alloc
        0     70   -> osal_mem_free
        0     74   -> osal_start_timerEx
      0    139   zclSampleSw_ProcessZDOMsgs
        0    113   -> AssocGetWithShort
        0    113   -> HalUARTWrite
        0    113   -> ZDO_ParseDeviceAnnce
        0    113   -> ZDO_ParseEPListRsp
        0    113   -> ZDO_ParseNodeDescRsp
        0    113   -> ZDO_ParseSimpleDescRsp
        0    113   -> osal_memset
        0    113   -> osal_stop_timerEx
      0     14   zclSampleSw_UartCB
        0     14   -> HalUARTRead
        0     14   -> HalUARTWrite
        0     14   -> Hal_UART_RxBufLen
        0     14   -> halSleepWait
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> osal_memset
        0     14   -> osal_strlen
        0     14   -> zclSampleSw_ProcessUartMsgs
      1     26   zclSampleSw_event_loop
        0     26   -> HalUARTWrite
        0     26   -> osal_get_timeoutEx
        0     26   -> osal_mem_alloc
        0     26   -> osal_mem_free
        0     26   -> osal_msg_deallocate
        0     26   -> osal_msg_receive
        0     26   -> osal_stop_timerEx
        0     26   -> zclSampleSw_HandleKeys
        0     26   -> zclSampleSw_ProcessZDOMsgs


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      23  ?<Constant "Finish initialization\n">
       9  ?<Constant "Read: %d">
      22  ?<Constant "Start initialization\n">
      10  ?<Constant "Write: %d">
      15  ?<Constant "[fail,memfail]">
       3  ?<Constant "\r\n">
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_1
      40  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0_2
      20  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}>
       8  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>
       4  ?<Constant {0, 0}>
       4  ?<Constant {0, 0}>_1
       4  ?<Constant {0, 0}>_2
       4  ?<Constant {0, 0}>_3
       4  ?<Constant {0, 0}>_4
       4  ?<Constant {0, 0}>_5
       4  ?<Constant {0, 0}>_6
       4  ?<Constant {0, 0}>_7
       7  ?<Initializer for sampleSw_GPEp>
       7  ?<Initializer for sampleSw_HAEp>
       7  ?<Initializer for sampleSw_ZLLEp>
       1  ?<Initializer for zclSampleSw_NwkState>
       1  ?<Initializer for zclSampleSw_OnOffSwitchType>
       8  ??Subroutine34_0
       5  ??Subroutine35_0
       7  ??Subroutine36_0
       8  ?Subroutine0
       8  ?Subroutine1
       6  ?Subroutine10
       8  ?Subroutine11
      17  ?Subroutine12
       5  ?Subroutine13
       6  ?Subroutine14
      10  ?Subroutine15
       6  ?Subroutine16
       8  ?Subroutine17
      11  ?Subroutine18
      11  ?Subroutine19
      13  ?Subroutine2
      13  ?Subroutine20
       5  ?Subroutine21
       6  ?Subroutine22
      11  ?Subroutine23
       1  ?Subroutine24
      11  ?Subroutine25
       9  ?Subroutine26
       4  ?Subroutine27
      12  ?Subroutine28
       6  ?Subroutine29
       5  ?Subroutine3
      12  ?Subroutine30
       8  ?Subroutine31
      12  ?Subroutine32
      11  ?Subroutine33
       7  ?Subroutine4
       8  ?Subroutine5
       4  ?Subroutine6
       8  ?Subroutine7
       7  ?Subroutine8
       1  ?Subroutine9
       4  __Constant_1388
       1  cluster_cmd_rx
       1  current_cmd_type
       1  endpoint_cmd_rx
     226  inject_zclData
       6  inject_zclData::?relay
       1  node_cmd_rx
       1  rx_zcl_cmd_id
       7  sampleSw_GPEp
       7  sampleSw_HAEp
       7  sampleSw_ZLLEp
       1  writeVal
       1  zclSampleSwSeqNum
      22  zclSampleSw_CmdCallbacks
      12  zclSampleSw_DstAddr
     282  zclSampleSw_HandleKeys
       6  zclSampleSw_HandleKeys::?relay
     287  zclSampleSw_Init
       6  zclSampleSw_Init::?relay
       1  zclSampleSw_NwkState
       1  zclSampleSw_OnOffSwitchActions
       1  zclSampleSw_OnOffSwitchType
      37  zclSampleSw_ProcessCommissioningStatus
       6  zclSampleSw_ProcessCommissioningStatus::?relay
    1265  zclSampleSw_ProcessUartMsgs
       6  zclSampleSw_ProcessUartMsgs::?relay
     776  zclSampleSw_ProcessZDOMsgs
       6  zclSampleSw_ProcessZDOMsgs::?relay
       1  zclSampleSw_TaskID
     129  zclSampleSw_UartCB
       6  zclSampleSw_UartCB::?relay
     483  zclSampleSw_event_loop
       6  zclSampleSw_event_loop::?relay
       1  zcl_transferId

 
 3 783 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
    23 bytes in segment XDATA_I
    23 bytes in segment XDATA_ID
   266 bytes in segment XDATA_ROM_C
    44 bytes in segment XDATA_Z
 
    71 bytes of CODE     memory
   262 bytes of CONST    memory (+ 4 bytes shared)
 3 783 bytes of HUGECODE memory
    67 bytes of XDATA    memory

Errors: none
Warnings: 2
